/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/App.js":
/*!********************!*\
  !*** ./src/App.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _data_english_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data/english.json */ \"./src/data/english.json\");\n/* harmony import */ var _data_tamil_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./data/tamil.json */ \"./src/data/tamil.json\");\n/* harmony import */ var _Horoscope__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Horoscope */ \"./src/Horoscope.js\");\n/* harmony import */ var _images_logo_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./images/logo.svg */ \"./src/images/logo.svg\");\n/* harmony import */ var _images_logo_svg__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_images_logo_svg__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _images_left_image_svg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./images/left-image.svg */ \"./src/images/left-image.svg\");\n/* harmony import */ var _images_left_image_svg__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_images_left_image_svg__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _images_imageBetweenTables_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./images/imageBetweenTables.svg */ \"./src/images/imageBetweenTables.svg\");\n/* harmony import */ var _images_imageBetweenTables_svg__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_images_imageBetweenTables_svg__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _images_enabled_bg_svg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./images/enabled-bg.svg */ \"./src/images/enabled-bg.svg\");\n/* harmony import */ var _images_enabled_bg_svg__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_images_enabled_bg_svg__WEBPACK_IMPORTED_MODULE_7__);\n\n\n\n\n\n\n\n\nconst App = () => {\n  const [language, setLanguage] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('english');\n  const [isEnabled, setIsEnabled] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n  const [data, setData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(_data_english_json__WEBPACK_IMPORTED_MODULE_1__);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    setData(language === 'english' ? _data_english_json__WEBPACK_IMPORTED_MODULE_1__ : _data_tamil_json__WEBPACK_IMPORTED_MODULE_2__);\n  }, [language]);\n  const handleRadioChange = event => {\n    setIsEnabled(event.target.value === 'enable');\n  };\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"select\", {\n    onChange: e => setLanguage(e.target.value),\n    value: language\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"option\", {\n    value: \"english\"\n  }, \"English\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"option\", {\n    value: \"tamil\"\n  }, \"Tamil\")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"input\", {\n    type: \"radio\",\n    name: \"bg-toggle\",\n    id: \"enable\",\n    value: \"enable\",\n    checked: isEnabled,\n    onChange: handleRadioChange\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"label\", {\n    htmlFor: \"enable\"\n  }, \"Enable\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"input\", {\n    type: \"radio\",\n    name: \"bg-toggle\",\n    id: \"disable\",\n    value: \"disable\",\n    checked: !isEnabled,\n    onChange: handleRadioChange\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"label\", {\n    htmlFor: \"disable\"\n  }, \"Disable\")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"a4\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    style: {\n      backgroundImage: \"url(\".concat(isEnabled ? (_images_enabled_bg_svg__WEBPACK_IMPORTED_MODULE_7___default()) : '', \")\")\n    }\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"img\", {\n    src: (_images_logo_svg__WEBPACK_IMPORTED_MODULE_4___default()),\n    alt: \"Canvas Logo\",\n    width: \"3%\",\n    className: \"logo-image\"\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"img\", {\n    src: (_images_left_image_svg__WEBPACK_IMPORTED_MODULE_5___default()),\n    alt: \"Canvas Logo\",\n    width: \"3%\",\n    className: \"left-image\"\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_Horoscope__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n    data: data,\n    isEnabled: isEnabled,\n    imageSrc: (_images_imageBetweenTables_svg__WEBPACK_IMPORTED_MODULE_6___default())\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"container\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"container-body\"\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"br\", null)))));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (App);\n\n//# sourceURL=webpack://templates/./src/App.js?");

/***/ }),

/***/ "./src/Horoscope.js":
/*!**************************!*\
  !*** ./src/Horoscope.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var handlebars__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! handlebars */ \"./node_modules/handlebars/dist/cjs/handlebars.js\");\n/* harmony import */ var handlebars__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(handlebars__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _template_handlebars__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./template.handlebars */ \"./src/template.handlebars\");\n/* harmony import */ var _template_handlebars__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_template_handlebars__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nhandlebars__WEBPACK_IMPORTED_MODULE_1___default().registerHelper('backgroundImageClass', function (isEnabled) {\n  return isEnabled ? 'enabled-bg' : 'disabled-bg';\n});\nconst Horoscope = _ref => {\n  let {\n    data,\n    isEnabled,\n    imageSrc\n  } = _ref;\n  const template = handlebars__WEBPACK_IMPORTED_MODULE_1___default().compile((_template_handlebars__WEBPACK_IMPORTED_MODULE_2___default()));\n  console.log((_template_handlebars__WEBPACK_IMPORTED_MODULE_2___default()), 'templateSource');\n  console.log(template, 'template');\n  const table1 = [[{\n    value: ''\n  }, {\n    value: data.Tablevalue.Me\n  }, {\n    value: ''\n  }, {\n    value: ''\n  }], [{\n    value: ''\n  }, {\n    value: data.Tablevalue.rasi,\n    colspan: 2,\n    rowspan: 2\n  }, {\n    value: data.Tablevalue.Ve\n  }], [{\n    value: \"\".concat(data.Tablevalue.Ma, \"<br/>\").concat(data.Tablevalue.Me)\n  }, {\n    value: data.Tablevalue.Mo\n  }], [{\n    value: ''\n  }, {\n    value: ''\n  }, {\n    value: \"\".concat(data.Tablevalue.Ma, \"<br/>\").concat(data.Tablevalue.Me)\n  }, {\n    value: ''\n  }]];\n  const table2 = [[{\n    value: data.Tablevalue.Ka\n  }, {\n    value: ''\n  }, {\n    value: ''\n  }, {\n    value: ''\n  }], [{\n    value: data.Tablevalue.ve\n  }, {\n    value: data.Tablevalue.navasam,\n    colspan: 2,\n    rowspan: 2\n  }, {\n    value: ''\n  }], [{\n    value: \"\".concat(data.Tablevalue.Mo, \"<br/>\").concat(data.Tablevalue.Ju)\n  }, {\n    value: ''\n  }], [{\n    value: ''\n  }, {\n    value: \"\".concat(data.Tablevalue.Ma, \"<br/>\").concat(data.Tablevalue.Me)\n  }, {\n    value: ''\n  }, {\n    value: data.Tablevalue.Sa\n  }]];\n  const htmlContent = template({\n    ...data,\n    isEnabled,\n    table1,\n    table2,\n    imageSrc\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: htmlContent\n    }\n  });\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Horoscope);\n\n//# sourceURL=webpack://templates/./src/Horoscope.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"./node_modules/react-dom/index.js\");\n/* harmony import */ var _App__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./App */ \"./src/App.js\");\n/* harmony import */ var _app_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app.css */ \"./src/app.css\");\n\n\n\n\nconst root = react_dom__WEBPACK_IMPORTED_MODULE_1__.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().StrictMode), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_App__WEBPACK_IMPORTED_MODULE_2__[\"default\"], null)));\n\n//# sourceURL=webpack://templates/./src/index.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/app.css":
/*!***********************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/app.css ***!
  \***********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/noSourceMaps.js */ \"./node_modules/css-loader/dist/runtime/noSourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.App {\n  text-align: center;\n}\n\n.App-logo {\n  height: 40vmin;\n  pointer-events: none;\n}\n\n@page {\n  size: A4;\n  margin: 1cm;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  .App-logo {\n    animation: App-logo-spin infinite 20s linear;\n  }\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n.header{\n  margin-top: 3%;\n}\n\n.main-header{\n  text-align: center;\n  color: brown;\n}\n.above-heading{\n  margin-bottom: 4px;\n}\n\n.third-line{\n  margin-bottom: 4px;\n}\n\n.top-heading{\n  padding: 0px;\n}\n.third{\n  word-spacing: 5px;\n}\n\n.personal-details {\n  margin-left: 18%;\n  margin-right: 50%;\n  display:block;\n}\n\ntable, th, td {\n  border: 2px solid brown;\n  border-collapse: collapse;\n  color:brown;\n  overflow: hidden;\n  white-space: nowrap;\n  font-size: 15px;\n  padding: 8px;\n  text-align: left;\n}\n\n.center-content{\n  text-align: center;\n  display: block;\n  margin-top: 0%;\n  line-height: 0;\n}\n\n\n.logo-image{\n  display: block;\n  margin-left: auto; \n  margin-right: auto;\n\n}\n.image-between-tables {\n display:block;\n margin-right:auto;\n margin-left:auto;\n}\n\n.image-between-tables img {\n  max-width: 100%;\n  height:100px;\n}\n\n.horoscope-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.horoscope-container{\n  display: flex;\n  flex-direction: row;\n  margin-left: left;\n  text-align: center;\n}\n\n.horoscope-table {\n  border-collapse: collapse;\n  width: 30%;\n  margin-right: 6%;\n  margin-left: 6%;\n  text-align: center;\n  margin-top: 12px;\n}\n.horoscope-table td {\n  border: 2px solid brown;\n  width:24%;\n  height: 32px;\n  text-align: center;\n}\n\n.family-details{\n  margin-left: 4%;\n  margin-right: 50%;\n  display:block;\n  margin-top: 15px;\n\n}\np{\n  font-size: 12px;\n}\n\n.left-image {\n  position: absolute;\n  top: 100px; \n  left: 538px; \n  width: 6%; \n}\n.address-container{\n  margin-bottom: 5px;\n}\n\nbody {\n  font-family: 'Lohit Tamil', sans-serif;\n}\n\n.tamil-text {\n  font-family: 'Lohit Tamil', sans-serif;\n}\n\nbody {\n  font-family: 'Poppins', sans-serif;\n}\n\n.english-text {\n  font-family: 'Poppins', sans-serif;\n} \n\n\n.a4 {\n  width: 210mm;\n  height: 297mm;\n  padding: 10mm;\n  margin: auto;\n  box-shadow: 0 0 5mm rgba(0, 0, 0, 0.1);\n  box-sizing: border-box;\n}\n\n@media print {\n  body, .a4 {\n    margin: 0;\n    box-shadow: none;\n  }\n}\n`, \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://templates/./src/app.css?./node_modules/css-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};\n\n//# sourceURL=webpack://templates/./node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/noSourceMaps.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/noSourceMaps.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function (i) {\n  return i[1];\n};\n\n//# sourceURL=webpack://templates/./node_modules/css-loader/dist/runtime/noSourceMaps.js?");

/***/ }),

/***/ "./src/template.handlebars":
/*!*********************************!*\
  !*** ./src/template.handlebars ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Handlebars = __webpack_require__(/*! ../node_modules/handlebars/runtime.js */ \"./node_modules/handlebars/runtime.js\");\nfunction __default(obj) { return obj && (obj.__esModule ? obj[\"default\"] : obj); }\nmodule.exports = (Handlebars[\"default\"] || Handlebars).template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"              <tr>\\r\\n\"\n    + ((stack1 = lookupProperty(helpers,\"each\").call(depth0 != null ? depth0 : (container.nullContext || {}),depth0,{\"name\":\"each\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":62,\"column\":13},\"end\":{\"line\":66,\"column\":21}}})) != null ? stack1 : \"\")\n    + \"          </tr>\\r\\n\";\n},\"2\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"              <td \"\n    + ((stack1 = lookupProperty(helpers,\"if\").call(alias1,(depth0 != null ? lookupProperty(depth0,\"colspan\") : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":63,\"column\":18},\"end\":{\"line\":63,\"column\":61}}})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = lookupProperty(helpers,\"if\").call(alias1,(depth0 != null ? lookupProperty(depth0,\"rowspan\") : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":63,\"column\":62},\"end\":{\"line\":63,\"column\":105}}})) != null ? stack1 : \"\")\n    + \">\\r\\n             \"\n    + ((stack1 = ((helper = (helper = lookupProperty(helpers,\"value\") || (depth0 != null ? lookupProperty(depth0,\"value\") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"value\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":64,\"column\":13},\"end\":{\"line\":64,\"column\":24}}}) : helper))) != null ? stack1 : \"\")\n    + \"\\r\\n              </td>\\r\\n\";\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"colspan=\\\"\"\n    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,\"colspan\") || (depth0 != null ? lookupProperty(depth0,\"colspan\") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{\"name\":\"colspan\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":63,\"column\":42},\"end\":{\"line\":63,\"column\":53}}}) : helper)))\n    + \"\\\"\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"rowspan=\\\"\"\n    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,\"rowspan\") || (depth0 != null ? lookupProperty(depth0,\"rowspan\") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{\"name\":\"rowspan\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":63,\"column\":86},\"end\":{\"line\":63,\"column\":97}}}) : helper)))\n    + \"\\\"\";\n},\"7\":function(container,depth0,helpers,partials,data) {\n    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"          <tr>\\r\\n\"\n    + ((stack1 = lookupProperty(helpers,\"each\").call(depth0 != null ? depth0 : (container.nullContext || {}),depth0,{\"name\":\"each\",\"hash\":{},\"fn\":container.program(8, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":76,\"column\":9},\"end\":{\"line\":80,\"column\":21}}})) != null ? stack1 : \"\")\n    + \"          </tr>\\r\\n\";\n},\"8\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"              <td \"\n    + ((stack1 = lookupProperty(helpers,\"if\").call(alias1,(depth0 != null ? lookupProperty(depth0,\"colspan\") : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":77,\"column\":18},\"end\":{\"line\":77,\"column\":61}}})) != null ? stack1 : \"\")\n    + \" \"\n    + ((stack1 = lookupProperty(helpers,\"if\").call(alias1,(depth0 != null ? lookupProperty(depth0,\"rowspan\") : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":77,\"column\":62},\"end\":{\"line\":77,\"column\":105}}})) != null ? stack1 : \"\")\n    + \">\\r\\n                \"\n    + ((stack1 = ((helper = (helper = lookupProperty(helpers,\"value\") || (depth0 != null ? lookupProperty(depth0,\"value\") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"value\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":78,\"column\":16},\"end\":{\"line\":78,\"column\":27}}}) : helper))) != null ? stack1 : \"\")\n    + \"\\r\\n              </td>\\r\\n\";\n},\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, alias4=container.lambda, alias5=\"function\", lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"<div class=\\\"toggle-bg \"\n    + alias3((lookupProperty(helpers,\"backgroundImageClass\")||(depth0 && lookupProperty(depth0,\"backgroundImageClass\"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,\"isEnabled\") : depth0),{\"name\":\"backgroundImageClass\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":1,\"column\":22},\"end\":{\"line\":1,\"column\":56}}}))\n    + \"\\\" >\\r\\n        <div class=\\\"main-header\\\">\\r\\n              <div class=\\\"top-heading\\\">\\r\\n                    <h6 class=\\\"above-heading\\\">\"\n    + ((stack1 = alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"above\") : depth0)) != null ? lookupProperty(stack1,\"heading\") : stack1), depth0)) != null ? stack1 : \"\")\n    + \"</h6>\\r\\n                    <p>\\\"\"\n    + ((stack1 = alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"sub-heading\") : depth0)) != null ? lookupProperty(stack1,\"sub-heading\") : stack1), depth0)) != null ? stack1 : \"\")\n    + \"\\\"</p>\\r\\n              </div>\\r\\n              <div class=\\\"personal-details\\\">\\r\\n                  <table class=\\\"personal-table\\\">\\r\\n                      <tbody>\\r\\n                          <tr>\\r\\n                              <th scope=\\\"row\\\">\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"dob\") : stack1), depth0))\n    + \"</th>\\r\\n                              <td>\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"birthDetails\") : depth0)) != null ? lookupProperty(stack1,\"dob\") : stack1)) != null ? lookupProperty(stack1,\"dateOfBirth\") : stack1), depth0))\n    + \"</td>\\r\\n                              <th scope=\\\"row\\\">\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"naaligai\") : stack1), depth0))\n    + \"</th>\\r\\n                              <td>\"\n    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"horoscopeDetails\") : depth0)) != null ? lookupProperty(stack1,\"naaligai\") : stack1), depth0))\n    + \"</td>\\r\\n                          </tr>\\r\\n                          <tr>\\r\\n                              <th scope=\\\"row\\\">\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"time\") : stack1), depth0))\n    + \"</th>\\r\\n                              <td>\"\n    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"birthDetails\") : depth0)) != null ? lookupProperty(stack1,\"tamilYear\") : stack1), depth0))\n    + \"</td>\\r\\n                              <th scope=\\\"row\\\">\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"BirthStar\") : stack1), depth0))\n    + \"</th>\\r\\n                              <td>\"\n    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"horoscopeDetails\") : depth0)) != null ? lookupProperty(stack1,\"BirthStar\") : stack1), depth0))\n    + \"</td>\\r\\n                              \\r\\n                          </tr>\\r\\n                          <tr>\\r\\n                              <th scope=\\\"row\\\">\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"tamilMonth\") : stack1), depth0))\n    + \"</th>\\r\\n                              <td>\"\n    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"birthDetails\") : depth0)) != null ? lookupProperty(stack1,\"tamilMonth\") : stack1), depth0))\n    + \"</td>\\r\\n                               <th scope=\\\"row\\\">\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"rasi\") : stack1), depth0))\n    + \"</th>\\r\\n                              <td>\"\n    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"horoscopeDetails\") : depth0)) != null ? lookupProperty(stack1,\"rasi\") : stack1), depth0))\n    + \"</td>\\r\\n                          </tr>\\r\\n                          <tr>\\r\\n                              <th scope=\\\"row\\\">\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"tamilDate\") : stack1), depth0))\n    + \"</th>\\r\\n                              <td>\"\n    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"birthDetails\") : depth0)) != null ? lookupProperty(stack1,\"tamilDate\") : stack1), depth0))\n    + \"</td>\\r\\n                              <th scope=\\\"row\\\">\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"thithi\") : stack1), depth0))\n    + \"</th>\\r\\n                              <td>\"\n    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"horoscopeDetails\") : depth0)) != null ? lookupProperty(stack1,\"thithi\") : stack1), depth0))\n    + \"</td>\\r\\n                          </tr>\\r\\n                          <tr>\\r\\n                              <th scope=\\\"row\\\">\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"day\") : stack1), depth0))\n    + \"</th>\\r\\n                              <td>\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"birthDetails\") : depth0)) != null ? lookupProperty(stack1,\"dob\") : stack1)) != null ? lookupProperty(stack1,\"day\") : stack1), depth0))\n    + \"</td>\\r\\n                              <th scope=\\\"row\\\">\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"lagnam\") : stack1), depth0))\n    + \"</th>\\r\\n                              <td>\"\n    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"horoscopeDetails\") : depth0)) != null ? lookupProperty(stack1,\"lagnam\") : stack1), depth0))\n    + \"</td>\\r\\n                              \\r\\n                            \\r\\n                          </tr>\\r\\n                          <tr>\\r\\n                              <th scope=\\\"row\\\">\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"birthtime\") : stack1), depth0))\n    + \"</th>\\r\\n                              <td>\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"birthDetails\") : depth0)) != null ? lookupProperty(stack1,\"dob\") : stack1)) != null ? lookupProperty(stack1,\"time\") : stack1), depth0))\n    + \"</td>\\r\\n                               <th scope=\\\"row\\\">\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"pob\") : stack1), depth0))\n    + \"</th>\\r\\n                              <td>\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"birthDetails\") : depth0)) != null ? lookupProperty(stack1,\"dob\") : stack1)) != null ? lookupProperty(stack1,\"placeOfBirth\") : stack1), depth0))\n    + \"</td>\\r\\n                          </tr>\\r\\n                      </tbody>\\r\\n                  </table>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"center-content\\\">\\r\\n                  <h5>\"\n    + ((stack1 = alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"below\") : depth0)) != null ? lookupProperty(stack1,\"heading\") : stack1), depth0)) != null ? stack1 : \"\")\n    + \"</h5>\\r\\n                  <h4>\"\n    + ((stack1 = alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"second\") : depth0)) != null ? lookupProperty(stack1,\"name\") : stack1), depth0)) != null ? stack1 : \"\")\n    + \"</h4>\\r\\n                  <p class=\\\"third\\\"><b>\"\n    + ((stack1 = alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"third\") : depth0)) != null ? lookupProperty(stack1,\"line\") : stack1), depth0)) != null ? stack1 : \"\")\n    + \"</b></p>\\r\\n              </div>\\r\\n             <div class=\\\"horoscope-container\\\">\\r\\n           <table class=\\\"horoscope-table\\\" style=\\\"width:32%\\\">\\r\\n\"\n    + ((stack1 = lookupProperty(helpers,\"each\").call(alias1,(depth0 != null ? lookupProperty(depth0,\"table1\") : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":60,\"column\":13},\"end\":{\"line\":68,\"column\":17}}})) != null ? stack1 : \"\")\n    + \"         </table>\\r\\n          <div class=\\\"image-between-tables\\\">\\r\\n          <img src=\\\"\"\n    + alias3(((helper = (helper = lookupProperty(helpers,\"imageSrc\") || (depth0 != null ? lookupProperty(depth0,\"imageSrc\") : depth0)) != null ? helper : alias2),(typeof helper === alias5 ? helper.call(alias1,{\"name\":\"imageSrc\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":71,\"column\":20},\"end\":{\"line\":71,\"column\":32}}}) : helper)))\n    + \"\\\" alt=\\\"Image Between Tables\\\" />\\r\\n         </div>\\r\\n         <table class=\\\"horoscope-table\\\" style=\\\"width:32%\\\">\\r\\n\"\n    + ((stack1 = lookupProperty(helpers,\"each\").call(alias1,(depth0 != null ? lookupProperty(depth0,\"table2\") : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(7, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":74,\"column\":9},\"end\":{\"line\":82,\"column\":17}}})) != null ? stack1 : \"\")\n    + \"      </table>\\r\\n    </div>\\r\\n    <div>\\r\\n     <h5 class=\\\"third-heading\\\">\"\n    + ((stack1 = alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"third-line\") : depth0)) != null ? lookupProperty(stack1,\"third-line\") : stack1), depth0)) != null ? stack1 : \"\")\n    + \"</h5>\\r\\n    </div>\\r\\n       <div class=\\\"family-details\\\">\\r\\n        <table class=\\\"family-table\\\">\\r\\n            <tbody>\\r\\n                 <tr>\\r\\n                    <td><b>\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"fatherAlive\") : stack1), depth0))\n    + \"</b> : \"\n    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"familyDetails\") : depth0)) != null ? lookupProperty(stack1,\"fatherAlive\") : stack1), depth0))\n    + \" - <b>\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"motherAlive\") : stack1), depth0))\n    + \"</b> : \"\n    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"familyDetails\") : depth0)) != null ? lookupProperty(stack1,\"motherAlive\") : stack1), depth0))\n    + \" </td>\\r\\n                    <td>\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"height\") : stack1), depth0))\n    + \" : \"\n    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"familyDetails\") : depth0)) != null ? lookupProperty(stack1,\"height\") : stack1), depth0))\n    + \"</td>\\r\\n                    <td>\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"bloodGroup\") : stack1), depth0))\n    + \" : \"\n    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"personalInfo\") : depth0)) != null ? lookupProperty(stack1,\"bloodGroup\") : stack1), depth0))\n    + \"</td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                     <td>\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"brother\") : stack1), depth0))\n    + \" : \"\n    + alias3(alias4(((stack1 = ((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"familyDetails\") : depth0)) != null ? lookupProperty(stack1,\"siblings\") : stack1)) != null ? lookupProperty(stack1,\"brother\") : stack1)) != null ? lookupProperty(stack1,\"number\") : stack1), depth0))\n    + \" (\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"Elder\") : stack1), depth0))\n    + \"-\"\n    + alias3(alias4(((stack1 = ((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"familyDetails\") : depth0)) != null ? lookupProperty(stack1,\"siblings\") : stack1)) != null ? lookupProperty(stack1,\"brother\") : stack1)) != null ? lookupProperty(stack1,\"marriageNum\") : stack1), depth0))\n    + \") </td>\\r\\n                      <td> \"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"complextion\") : stack1), depth0))\n    + \" : \"\n    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"personalInfo\") : depth0)) != null ? lookupProperty(stack1,\"complextion\") : stack1), depth0))\n    + \"</td>\\r\\n                     <td>\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"ownhouse\") : stack1), depth0))\n    + \" : \"\n    + alias3(((helper = (helper = lookupProperty(helpers,\"ownHouse\") || (depth0 != null ? lookupProperty(depth0,\"ownHouse\") : depth0)) != null ? helper : alias2),(typeof helper === alias5 ? helper.call(alias1,{\"name\":\"ownHouse\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":99,\"column\":57},\"end\":{\"line\":99,\"column\":69}}}) : helper)))\n    + \"</td>\\r\\n                    </tr> \\r\\n                   <tr>\\r\\n                    <td>\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"Education\") : stack1), depth0))\n    + \" : \"\n    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"qualification\") : depth0)) != null ? lookupProperty(stack1,\"Education\") : stack1), depth0))\n    + \"</td>\\r\\n                     <td> \"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"Profession\") : stack1), depth0))\n    + \" : \"\n    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"personalInfo\") : depth0)) != null ? lookupProperty(stack1,\"Profession\") : stack1), depth0))\n    + \"</td>\\r\\n                      <td>\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"Income\") : stack1), depth0))\n    + \" : \"\n    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"occupation\") : depth0)) != null ? lookupProperty(stack1,\"Income\") : stack1), depth0))\n    + \"</td>\\r\\n\\r\\n                    </tr>\\r\\n            </tbody>\\r\\n        </table>\\r\\n        </div>\\r\\n     <div class=\\\"address-container\\\">\\r\\n        <h5> \"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"Address\") : stack1), depth0))\n    + \" : \"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"below1\") : depth0)) != null ? lookupProperty(stack1,\"residentialAddress\") : stack1)) != null ? lookupProperty(stack1,\"address\") : stack1), depth0))\n    + \"<br>\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"below1\") : depth0)) != null ? lookupProperty(stack1,\"residentialAddress\") : stack1)) != null ? lookupProperty(stack1,\"landmark\") : stack1), depth0))\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"below1\") : depth0)) != null ? lookupProperty(stack1,\"residentialAddress\") : stack1)) != null ? lookupProperty(stack1,\"city\") : stack1), depth0))\n    + \" \"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"below1\") : depth0)) != null ? lookupProperty(stack1,\"residentialAddress\") : stack1)) != null ? lookupProperty(stack1,\"stateName\") : stack1), depth0))\n    + \"-\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"below1\") : depth0)) != null ? lookupProperty(stack1,\"residentialAddress\") : stack1)) != null ? lookupProperty(stack1,\"pincode\") : stack1), depth0))\n    + \"<br>\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"contactNumber\") : stack1), depth0))\n    + \" : \"\n    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"contactDetails\") : depth0)) != null ? lookupProperty(stack1,\"contactNumber\") : stack1), depth0))\n    + \" \"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"whatsappNumber\") : stack1), depth0))\n    + \" : \"\n    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"contactDetails\") : depth0)) != null ? lookupProperty(stack1,\"whatsappNumber\") : stack1), depth0))\n    + \"<br>\"\n    + alias3(alias4(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,\"label\") : depth0)) != null ? lookupProperty(stack1,\"tableValue\") : stack1)) != null ? lookupProperty(stack1,\"emailId\") : stack1), depth0))\n    + \" : \"\n    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,\"contactDetails\") : depth0)) != null ? lookupProperty(stack1,\"emailId\") : stack1), depth0))\n    + \"</h5>\\r\\n  </div>\\r\\n</div>\\r\\n\";\n},\"useData\":true});\n\n//# sourceURL=webpack://templates/./src/template.handlebars?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars.js":
/*!********************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _handlebarsRuntime = __webpack_require__(/*! ./handlebars.runtime */ \"./node_modules/handlebars/dist/cjs/handlebars.runtime.js\");\n\nvar _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);\n\n// Compiler imports\n\nvar _handlebarsCompilerAst = __webpack_require__(/*! ./handlebars/compiler/ast */ \"./node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js\");\n\nvar _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);\n\nvar _handlebarsCompilerBase = __webpack_require__(/*! ./handlebars/compiler/base */ \"./node_modules/handlebars/dist/cjs/handlebars/compiler/base.js\");\n\nvar _handlebarsCompilerCompiler = __webpack_require__(/*! ./handlebars/compiler/compiler */ \"./node_modules/handlebars/dist/cjs/handlebars/compiler/compiler.js\");\n\nvar _handlebarsCompilerJavascriptCompiler = __webpack_require__(/*! ./handlebars/compiler/javascript-compiler */ \"./node_modules/handlebars/dist/cjs/handlebars/compiler/javascript-compiler.js\");\n\nvar _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);\n\nvar _handlebarsCompilerVisitor = __webpack_require__(/*! ./handlebars/compiler/visitor */ \"./node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js\");\n\nvar _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);\n\nvar _handlebarsNoConflict = __webpack_require__(/*! ./handlebars/no-conflict */ \"./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js\");\n\nvar _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);\n\nvar _create = _handlebarsRuntime2['default'].create;\nfunction create() {\n  var hb = _create();\n\n  hb.compile = function (input, options) {\n    return _handlebarsCompilerCompiler.compile(input, options, hb);\n  };\n  hb.precompile = function (input, options) {\n    return _handlebarsCompilerCompiler.precompile(input, options, hb);\n  };\n\n  hb.AST = _handlebarsCompilerAst2['default'];\n  hb.Compiler = _handlebarsCompilerCompiler.Compiler;\n  hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];\n  hb.Parser = _handlebarsCompilerBase.parser;\n  hb.parse = _handlebarsCompilerBase.parse;\n  hb.parseWithoutProcessing = _handlebarsCompilerBase.parseWithoutProcessing;\n\n  return hb;\n}\n\nvar inst = create();\ninst.create = create;\n\n_handlebarsNoConflict2['default'](inst);\n\ninst.Visitor = _handlebarsCompilerVisitor2['default'];\n\ninst['default'] = inst;\n\nexports[\"default\"] = inst;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9oYW5kbGViYXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7aUNBQW9CLHNCQUFzQjs7Ozs7O3FDQUcxQiwyQkFBMkI7Ozs7c0NBS3BDLDRCQUE0Qjs7MENBQ1csZ0NBQWdDOztvREFDL0MsMkNBQTJDOzs7O3lDQUN0RCwrQkFBK0I7Ozs7b0NBRTVCLDBCQUEwQjs7OztBQUVqRCxJQUFJLE9BQU8sR0FBRywrQkFBUSxNQUFNLENBQUM7QUFDN0IsU0FBUyxNQUFNLEdBQUc7QUFDaEIsTUFBSSxFQUFFLEdBQUcsT0FBTyxFQUFFLENBQUM7O0FBRW5CLElBQUUsQ0FBQyxPQUFPLEdBQUcsVUFBUyxLQUFLLEVBQUUsT0FBTyxFQUFFO0FBQ3BDLFdBQU8sb0NBQVEsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztHQUNwQyxDQUFDO0FBQ0YsSUFBRSxDQUFDLFVBQVUsR0FBRyxVQUFTLEtBQUssRUFBRSxPQUFPLEVBQUU7QUFDdkMsV0FBTyx1Q0FBVyxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQ3ZDLENBQUM7O0FBRUYsSUFBRSxDQUFDLEdBQUcscUNBQU0sQ0FBQztBQUNiLElBQUUsQ0FBQyxRQUFRLHVDQUFXLENBQUM7QUFDdkIsSUFBRSxDQUFDLGtCQUFrQixvREFBcUIsQ0FBQztBQUMzQyxJQUFFLENBQUMsTUFBTSxpQ0FBUyxDQUFDO0FBQ25CLElBQUUsQ0FBQyxLQUFLLGdDQUFRLENBQUM7QUFDakIsSUFBRSxDQUFDLHNCQUFzQixpREFBeUIsQ0FBQzs7QUFFbkQsU0FBTyxFQUFFLENBQUM7Q0FDWDs7QUFFRCxJQUFJLElBQUksR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQzs7QUFFckIsa0NBQVcsSUFBSSxDQUFDLENBQUM7O0FBRWpCLElBQUksQ0FBQyxPQUFPLHlDQUFVLENBQUM7O0FBRXZCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUM7O3FCQUVSLElBQUkiLCJmaWxlIjoiaGFuZGxlYmFycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBydW50aW1lIGZyb20gJy4vaGFuZGxlYmFycy5ydW50aW1lJztcblxuLy8gQ29tcGlsZXIgaW1wb3J0c1xuaW1wb3J0IEFTVCBmcm9tICcuL2hhbmRsZWJhcnMvY29tcGlsZXIvYXN0JztcbmltcG9ydCB7XG4gIHBhcnNlciBhcyBQYXJzZXIsXG4gIHBhcnNlLFxuICBwYXJzZVdpdGhvdXRQcm9jZXNzaW5nXG59IGZyb20gJy4vaGFuZGxlYmFycy9jb21waWxlci9iYXNlJztcbmltcG9ydCB7IENvbXBpbGVyLCBjb21waWxlLCBwcmVjb21waWxlIH0gZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL2NvbXBpbGVyJztcbmltcG9ydCBKYXZhU2NyaXB0Q29tcGlsZXIgZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL2phdmFzY3JpcHQtY29tcGlsZXInO1xuaW1wb3J0IFZpc2l0b3IgZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL3Zpc2l0b3InO1xuXG5pbXBvcnQgbm9Db25mbGljdCBmcm9tICcuL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QnO1xuXG5sZXQgX2NyZWF0ZSA9IHJ1bnRpbWUuY3JlYXRlO1xuZnVuY3Rpb24gY3JlYXRlKCkge1xuICBsZXQgaGIgPSBfY3JlYXRlKCk7XG5cbiAgaGIuY29tcGlsZSA9IGZ1bmN0aW9uKGlucHV0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGNvbXBpbGUoaW5wdXQsIG9wdGlvbnMsIGhiKTtcbiAgfTtcbiAgaGIucHJlY29tcGlsZSA9IGZ1bmN0aW9uKGlucHV0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHByZWNvbXBpbGUoaW5wdXQsIG9wdGlvbnMsIGhiKTtcbiAgfTtcblxuICBoYi5BU1QgPSBBU1Q7XG4gIGhiLkNvbXBpbGVyID0gQ29tcGlsZXI7XG4gIGhiLkphdmFTY3JpcHRDb21waWxlciA9IEphdmFTY3JpcHRDb21waWxlcjtcbiAgaGIuUGFyc2VyID0gUGFyc2VyO1xuICBoYi5wYXJzZSA9IHBhcnNlO1xuICBoYi5wYXJzZVdpdGhvdXRQcm9jZXNzaW5nID0gcGFyc2VXaXRob3V0UHJvY2Vzc2luZztcblxuICByZXR1cm4gaGI7XG59XG5cbmxldCBpbnN0ID0gY3JlYXRlKCk7XG5pbnN0LmNyZWF0ZSA9IGNyZWF0ZTtcblxubm9Db25mbGljdChpbnN0KTtcblxuaW5zdC5WaXNpdG9yID0gVmlzaXRvcjtcblxuaW5zdFsnZGVmYXVsdCddID0gaW5zdDtcblxuZXhwb3J0IGRlZmF1bHQgaW5zdDtcbiJdfQ==\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars.runtime.js":
/*!****************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars.runtime.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nvar _handlebarsBase = __webpack_require__(/*! ./handlebars/base */ \"./node_modules/handlebars/dist/cjs/handlebars/base.js\");\n\nvar base = _interopRequireWildcard(_handlebarsBase);\n\n// Each of these augment the Handlebars object. No need to setup here.\n// (This is done to easily share code between commonjs and browse envs)\n\nvar _handlebarsSafeString = __webpack_require__(/*! ./handlebars/safe-string */ \"./node_modules/handlebars/dist/cjs/handlebars/safe-string.js\");\n\nvar _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);\n\nvar _handlebarsException = __webpack_require__(/*! ./handlebars/exception */ \"./node_modules/handlebars/dist/cjs/handlebars/exception.js\");\n\nvar _handlebarsException2 = _interopRequireDefault(_handlebarsException);\n\nvar _handlebarsUtils = __webpack_require__(/*! ./handlebars/utils */ \"./node_modules/handlebars/dist/cjs/handlebars/utils.js\");\n\nvar Utils = _interopRequireWildcard(_handlebarsUtils);\n\nvar _handlebarsRuntime = __webpack_require__(/*! ./handlebars/runtime */ \"./node_modules/handlebars/dist/cjs/handlebars/runtime.js\");\n\nvar runtime = _interopRequireWildcard(_handlebarsRuntime);\n\nvar _handlebarsNoConflict = __webpack_require__(/*! ./handlebars/no-conflict */ \"./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js\");\n\nvar _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);\n\n// For compatibility and usage outside of module systems, make the Handlebars object a namespace\nfunction create() {\n  var hb = new base.HandlebarsEnvironment();\n\n  Utils.extend(hb, base);\n  hb.SafeString = _handlebarsSafeString2['default'];\n  hb.Exception = _handlebarsException2['default'];\n  hb.Utils = Utils;\n  hb.escapeExpression = Utils.escapeExpression;\n\n  hb.VM = runtime;\n  hb.template = function (spec) {\n    return runtime.template(spec, hb);\n  };\n\n  return hb;\n}\n\nvar inst = create();\ninst.create = create;\n\n_handlebarsNoConflict2['default'](inst);\n\ninst['default'] = inst;\n\nexports[\"default\"] = inst;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9oYW5kbGViYXJzLnJ1bnRpbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OEJBQXNCLG1CQUFtQjs7SUFBN0IsSUFBSTs7Ozs7b0NBSU8sMEJBQTBCOzs7O21DQUMzQix3QkFBd0I7Ozs7K0JBQ3ZCLG9CQUFvQjs7SUFBL0IsS0FBSzs7aUNBQ1Esc0JBQXNCOztJQUFuQyxPQUFPOztvQ0FFSSwwQkFBMEI7Ozs7O0FBR2pELFNBQVMsTUFBTSxHQUFHO0FBQ2hCLE1BQUksRUFBRSxHQUFHLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7O0FBRTFDLE9BQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3ZCLElBQUUsQ0FBQyxVQUFVLG9DQUFhLENBQUM7QUFDM0IsSUFBRSxDQUFDLFNBQVMsbUNBQVksQ0FBQztBQUN6QixJQUFFLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUNqQixJQUFFLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFDOztBQUU3QyxJQUFFLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQztBQUNoQixJQUFFLENBQUMsUUFBUSxHQUFHLFVBQVMsSUFBSSxFQUFFO0FBQzNCLFdBQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDbkMsQ0FBQzs7QUFFRixTQUFPLEVBQUUsQ0FBQztDQUNYOztBQUVELElBQUksSUFBSSxHQUFHLE1BQU0sRUFBRSxDQUFDO0FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDOztBQUVyQixrQ0FBVyxJQUFJLENBQUMsQ0FBQzs7QUFFakIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQzs7cUJBRVIsSUFBSSIsImZpbGUiOiJoYW5kbGViYXJzLnJ1bnRpbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBiYXNlIGZyb20gJy4vaGFuZGxlYmFycy9iYXNlJztcblxuLy8gRWFjaCBvZiB0aGVzZSBhdWdtZW50IHRoZSBIYW5kbGViYXJzIG9iamVjdC4gTm8gbmVlZCB0byBzZXR1cCBoZXJlLlxuLy8gKFRoaXMgaXMgZG9uZSB0byBlYXNpbHkgc2hhcmUgY29kZSBiZXR3ZWVuIGNvbW1vbmpzIGFuZCBicm93c2UgZW52cylcbmltcG9ydCBTYWZlU3RyaW5nIGZyb20gJy4vaGFuZGxlYmFycy9zYWZlLXN0cmluZyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4vaGFuZGxlYmFycy9leGNlcHRpb24nO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi9oYW5kbGViYXJzL3V0aWxzJztcbmltcG9ydCAqIGFzIHJ1bnRpbWUgZnJvbSAnLi9oYW5kbGViYXJzL3J1bnRpbWUnO1xuXG5pbXBvcnQgbm9Db25mbGljdCBmcm9tICcuL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QnO1xuXG4vLyBGb3IgY29tcGF0aWJpbGl0eSBhbmQgdXNhZ2Ugb3V0c2lkZSBvZiBtb2R1bGUgc3lzdGVtcywgbWFrZSB0aGUgSGFuZGxlYmFycyBvYmplY3QgYSBuYW1lc3BhY2VcbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgbGV0IGhiID0gbmV3IGJhc2UuSGFuZGxlYmFyc0Vudmlyb25tZW50KCk7XG5cbiAgVXRpbHMuZXh0ZW5kKGhiLCBiYXNlKTtcbiAgaGIuU2FmZVN0cmluZyA9IFNhZmVTdHJpbmc7XG4gIGhiLkV4Y2VwdGlvbiA9IEV4Y2VwdGlvbjtcbiAgaGIuVXRpbHMgPSBVdGlscztcbiAgaGIuZXNjYXBlRXhwcmVzc2lvbiA9IFV0aWxzLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgaGIuVk0gPSBydW50aW1lO1xuICBoYi50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHNwZWMpIHtcbiAgICByZXR1cm4gcnVudGltZS50ZW1wbGF0ZShzcGVjLCBoYik7XG4gIH07XG5cbiAgcmV0dXJuIGhiO1xufVxuXG5sZXQgaW5zdCA9IGNyZWF0ZSgpO1xuaW5zdC5jcmVhdGUgPSBjcmVhdGU7XG5cbm5vQ29uZmxpY3QoaW5zdCk7XG5cbmluc3RbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cbmV4cG9ydCBkZWZhdWx0IGluc3Q7XG4iXX0=\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars.runtime.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/base.js":
/*!*************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/base.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.HandlebarsEnvironment = HandlebarsEnvironment;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/handlebars/dist/cjs/handlebars/utils.js\");\n\nvar _exception = __webpack_require__(/*! ./exception */ \"./node_modules/handlebars/dist/cjs/handlebars/exception.js\");\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nvar _helpers = __webpack_require__(/*! ./helpers */ \"./node_modules/handlebars/dist/cjs/handlebars/helpers.js\");\n\nvar _decorators = __webpack_require__(/*! ./decorators */ \"./node_modules/handlebars/dist/cjs/handlebars/decorators.js\");\n\nvar _logger = __webpack_require__(/*! ./logger */ \"./node_modules/handlebars/dist/cjs/handlebars/logger.js\");\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _internalProtoAccess = __webpack_require__(/*! ./internal/proto-access */ \"./node_modules/handlebars/dist/cjs/handlebars/internal/proto-access.js\");\n\nvar VERSION = '4.7.8';\nexports.VERSION = VERSION;\nvar COMPILER_REVISION = 8;\nexports.COMPILER_REVISION = COMPILER_REVISION;\nvar LAST_COMPATIBLE_COMPILER_REVISION = 7;\n\nexports.LAST_COMPATIBLE_COMPILER_REVISION = LAST_COMPATIBLE_COMPILER_REVISION;\nvar REVISION_CHANGES = {\n  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it\n  2: '== 1.0.0-rc.3',\n  3: '== 1.0.0-rc.4',\n  4: '== 1.x.x',\n  5: '== 2.0.0-alpha.x',\n  6: '>= 2.0.0-beta.1',\n  7: '>= 4.0.0 <4.3.0',\n  8: '>= 4.3.0'\n};\n\nexports.REVISION_CHANGES = REVISION_CHANGES;\nvar objectType = '[object Object]';\n\nfunction HandlebarsEnvironment(helpers, partials, decorators) {\n  this.helpers = helpers || {};\n  this.partials = partials || {};\n  this.decorators = decorators || {};\n\n  _helpers.registerDefaultHelpers(this);\n  _decorators.registerDefaultDecorators(this);\n}\n\nHandlebarsEnvironment.prototype = {\n  constructor: HandlebarsEnvironment,\n\n  logger: _logger2['default'],\n  log: _logger2['default'].log,\n\n  registerHelper: function registerHelper(name, fn) {\n    if (_utils.toString.call(name) === objectType) {\n      if (fn) {\n        throw new _exception2['default']('Arg not supported with multiple helpers');\n      }\n      _utils.extend(this.helpers, name);\n    } else {\n      this.helpers[name] = fn;\n    }\n  },\n  unregisterHelper: function unregisterHelper(name) {\n    delete this.helpers[name];\n  },\n\n  registerPartial: function registerPartial(name, partial) {\n    if (_utils.toString.call(name) === objectType) {\n      _utils.extend(this.partials, name);\n    } else {\n      if (typeof partial === 'undefined') {\n        throw new _exception2['default']('Attempting to register a partial called \"' + name + '\" as undefined');\n      }\n      this.partials[name] = partial;\n    }\n  },\n  unregisterPartial: function unregisterPartial(name) {\n    delete this.partials[name];\n  },\n\n  registerDecorator: function registerDecorator(name, fn) {\n    if (_utils.toString.call(name) === objectType) {\n      if (fn) {\n        throw new _exception2['default']('Arg not supported with multiple decorators');\n      }\n      _utils.extend(this.decorators, name);\n    } else {\n      this.decorators[name] = fn;\n    }\n  },\n  unregisterDecorator: function unregisterDecorator(name) {\n    delete this.decorators[name];\n  },\n  /**\n   * Reset the memory of illegal property accesses that have already been logged.\n   * @deprecated should only be used in handlebars test-cases\n   */\n  resetLoggedPropertyAccesses: function resetLoggedPropertyAccesses() {\n    _internalProtoAccess.resetLoggedProperties();\n  }\n};\n\nvar log = _logger2['default'].log;\n\nexports.log = log;\nexports.createFrame = _utils.createFrame;\nexports.logger = _logger2['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2Jhc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7cUJBQThDLFNBQVM7O3lCQUNqQyxhQUFhOzs7O3VCQUNJLFdBQVc7OzBCQUNSLGNBQWM7O3NCQUNyQyxVQUFVOzs7O21DQUNTLHlCQUF5Qjs7QUFFeEQsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDOztBQUN4QixJQUFNLGlCQUFpQixHQUFHLENBQUMsQ0FBQzs7QUFDNUIsSUFBTSxpQ0FBaUMsR0FBRyxDQUFDLENBQUM7OztBQUU1QyxJQUFNLGdCQUFnQixHQUFHO0FBQzlCLEdBQUMsRUFBRSxhQUFhO0FBQ2hCLEdBQUMsRUFBRSxlQUFlO0FBQ2xCLEdBQUMsRUFBRSxlQUFlO0FBQ2xCLEdBQUMsRUFBRSxVQUFVO0FBQ2IsR0FBQyxFQUFFLGtCQUFrQjtBQUNyQixHQUFDLEVBQUUsaUJBQWlCO0FBQ3BCLEdBQUMsRUFBRSxpQkFBaUI7QUFDcEIsR0FBQyxFQUFFLFVBQVU7Q0FDZCxDQUFDOzs7QUFFRixJQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQzs7QUFFOUIsU0FBUyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRTtBQUNuRSxNQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7QUFDN0IsTUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLElBQUksRUFBRSxDQUFDO0FBQy9CLE1BQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxJQUFJLEVBQUUsQ0FBQzs7QUFFbkMsa0NBQXVCLElBQUksQ0FBQyxDQUFDO0FBQzdCLHdDQUEwQixJQUFJLENBQUMsQ0FBQztDQUNqQzs7QUFFRCxxQkFBcUIsQ0FBQyxTQUFTLEdBQUc7QUFDaEMsYUFBVyxFQUFFLHFCQUFxQjs7QUFFbEMsUUFBTSxxQkFBUTtBQUNkLEtBQUcsRUFBRSxvQkFBTyxHQUFHOztBQUVmLGdCQUFjLEVBQUUsd0JBQVMsSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUNqQyxRQUFJLGdCQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxVQUFVLEVBQUU7QUFDdEMsVUFBSSxFQUFFLEVBQUU7QUFDTixjQUFNLDJCQUFjLHlDQUF5QyxDQUFDLENBQUM7T0FDaEU7QUFDRCxvQkFBTyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzVCLE1BQU07QUFDTCxVQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUN6QjtHQUNGO0FBQ0Qsa0JBQWdCLEVBQUUsMEJBQVMsSUFBSSxFQUFFO0FBQy9CLFdBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUMzQjs7QUFFRCxpQkFBZSxFQUFFLHlCQUFTLElBQUksRUFBRSxPQUFPLEVBQUU7QUFDdkMsUUFBSSxnQkFBUyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssVUFBVSxFQUFFO0FBQ3RDLG9CQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDN0IsTUFBTTtBQUNMLFVBQUksT0FBTyxPQUFPLEtBQUssV0FBVyxFQUFFO0FBQ2xDLGNBQU0seUVBQ3dDLElBQUksb0JBQ2pELENBQUM7T0FDSDtBQUNELFVBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDO0tBQy9CO0dBQ0Y7QUFDRCxtQkFBaUIsRUFBRSwyQkFBUyxJQUFJLEVBQUU7QUFDaEMsV0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQzVCOztBQUVELG1CQUFpQixFQUFFLDJCQUFTLElBQUksRUFBRSxFQUFFLEVBQUU7QUFDcEMsUUFBSSxnQkFBUyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssVUFBVSxFQUFFO0FBQ3RDLFVBQUksRUFBRSxFQUFFO0FBQ04sY0FBTSwyQkFBYyw0Q0FBNEMsQ0FBQyxDQUFDO09BQ25FO0FBQ0Qsb0JBQU8sSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUMvQixNQUFNO0FBQ0wsVUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDNUI7R0FDRjtBQUNELHFCQUFtQixFQUFFLDZCQUFTLElBQUksRUFBRTtBQUNsQyxXQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDOUI7Ozs7O0FBS0QsNkJBQTJCLEVBQUEsdUNBQUc7QUFDNUIsZ0RBQXVCLENBQUM7R0FDekI7Q0FDRixDQUFDOztBQUVLLElBQUksR0FBRyxHQUFHLG9CQUFPLEdBQUcsQ0FBQzs7O1FBRW5CLFdBQVc7UUFBRSxNQUFNIiwiZmlsZSI6ImJhc2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVGcmFtZSwgZXh0ZW5kLCB0b1N0cmluZyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuL2V4Y2VwdGlvbic7XG5pbXBvcnQgeyByZWdpc3RlckRlZmF1bHRIZWxwZXJzIH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7IHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnMgfSBmcm9tICcuL2RlY29yYXRvcnMnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyByZXNldExvZ2dlZFByb3BlcnRpZXMgfSBmcm9tICcuL2ludGVybmFsL3Byb3RvLWFjY2Vzcyc7XG5cbmV4cG9ydCBjb25zdCBWRVJTSU9OID0gJzQuNy44JztcbmV4cG9ydCBjb25zdCBDT01QSUxFUl9SRVZJU0lPTiA9IDg7XG5leHBvcnQgY29uc3QgTEFTVF9DT01QQVRJQkxFX0NPTVBJTEVSX1JFVklTSU9OID0gNztcblxuZXhwb3J0IGNvbnN0IFJFVklTSU9OX0NIQU5HRVMgPSB7XG4gIDE6ICc8PSAxLjAucmMuMicsIC8vIDEuMC5yYy4yIGlzIGFjdHVhbGx5IHJldjIgYnV0IGRvZXNuJ3QgcmVwb3J0IGl0XG4gIDI6ICc9PSAxLjAuMC1yYy4zJyxcbiAgMzogJz09IDEuMC4wLXJjLjQnLFxuICA0OiAnPT0gMS54LngnLFxuICA1OiAnPT0gMi4wLjAtYWxwaGEueCcsXG4gIDY6ICc+PSAyLjAuMC1iZXRhLjEnLFxuICA3OiAnPj0gNC4wLjAgPDQuMy4wJyxcbiAgODogJz49IDQuMy4wJ1xufTtcblxuY29uc3Qgb2JqZWN0VHlwZSA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG5leHBvcnQgZnVuY3Rpb24gSGFuZGxlYmFyc0Vudmlyb25tZW50KGhlbHBlcnMsIHBhcnRpYWxzLCBkZWNvcmF0b3JzKSB7XG4gIHRoaXMuaGVscGVycyA9IGhlbHBlcnMgfHwge307XG4gIHRoaXMucGFydGlhbHMgPSBwYXJ0aWFscyB8fCB7fTtcbiAgdGhpcy5kZWNvcmF0b3JzID0gZGVjb3JhdG9ycyB8fCB7fTtcblxuICByZWdpc3RlckRlZmF1bHRIZWxwZXJzKHRoaXMpO1xuICByZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzKHRoaXMpO1xufVxuXG5IYW5kbGViYXJzRW52aXJvbm1lbnQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogSGFuZGxlYmFyc0Vudmlyb25tZW50LFxuXG4gIGxvZ2dlcjogbG9nZ2VyLFxuICBsb2c6IGxvZ2dlci5sb2csXG5cbiAgcmVnaXN0ZXJIZWxwZXI6IGZ1bmN0aW9uKG5hbWUsIGZuKSB7XG4gICAgaWYgKHRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcbiAgICAgIGlmIChmbikge1xuICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdBcmcgbm90IHN1cHBvcnRlZCB3aXRoIG11bHRpcGxlIGhlbHBlcnMnKTtcbiAgICAgIH1cbiAgICAgIGV4dGVuZCh0aGlzLmhlbHBlcnMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhlbHBlcnNbbmFtZV0gPSBmbjtcbiAgICB9XG4gIH0sXG4gIHVucmVnaXN0ZXJIZWxwZXI6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5oZWxwZXJzW25hbWVdO1xuICB9LFxuXG4gIHJlZ2lzdGVyUGFydGlhbDogZnVuY3Rpb24obmFtZSwgcGFydGlhbCkge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XG4gICAgICBleHRlbmQodGhpcy5wYXJ0aWFscywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgcGFydGlhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcbiAgICAgICAgICBgQXR0ZW1wdGluZyB0byByZWdpc3RlciBhIHBhcnRpYWwgY2FsbGVkIFwiJHtuYW1lfVwiIGFzIHVuZGVmaW5lZGBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFydGlhbHNbbmFtZV0gPSBwYXJ0aWFsO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5wYXJ0aWFsc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgZGVjb3JhdG9ycycpO1xuICAgICAgfVxuICAgICAgZXh0ZW5kKHRoaXMuZGVjb3JhdG9ycywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGVjb3JhdG9yc1tuYW1lXSA9IGZuO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLmRlY29yYXRvcnNbbmFtZV07XG4gIH0sXG4gIC8qKlxuICAgKiBSZXNldCB0aGUgbWVtb3J5IG9mIGlsbGVnYWwgcHJvcGVydHkgYWNjZXNzZXMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBsb2dnZWQuXG4gICAqIEBkZXByZWNhdGVkIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gaGFuZGxlYmFycyB0ZXN0LWNhc2VzXG4gICAqL1xuICByZXNldExvZ2dlZFByb3BlcnR5QWNjZXNzZXMoKSB7XG4gICAgcmVzZXRMb2dnZWRQcm9wZXJ0aWVzKCk7XG4gIH1cbn07XG5cbmV4cG9ydCBsZXQgbG9nID0gbG9nZ2VyLmxvZztcblxuZXhwb3J0IHsgY3JlYXRlRnJhbWUsIGxvZ2dlciB9O1xuIl19\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/base.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js":
/*!*********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js ***!
  \*********************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\n\nexports.__esModule = true;\nvar AST = {\n  // Public API used to evaluate derived attributes regarding AST nodes\n  helpers: {\n    // a mustache is definitely a helper if:\n    // * it is an eligible helper, and\n    // * it has at least one parameter or hash segment\n    helperExpression: function helperExpression(node) {\n      return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);\n    },\n\n    scopedId: function scopedId(path) {\n      return (/^\\.|this\\b/.test(path.original)\n      );\n    },\n\n    // an ID is simple if it only has one part, and that part is not\n    // `..` or `this`.\n    simpleId: function simpleId(path) {\n      return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;\n    }\n  }\n};\n\n// Must be exported as an object rather than the root of the module as the jison lexer\n// must modify the object to operate properly.\nexports[\"default\"] = AST;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL2FzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFJLEdBQUcsR0FBRzs7QUFFUixTQUFPLEVBQUU7Ozs7QUFJUCxvQkFBZ0IsRUFBRSwwQkFBUyxJQUFJLEVBQUU7QUFDL0IsYUFDRSxJQUFJLENBQUMsSUFBSSxLQUFLLGVBQWUsSUFDNUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLG1CQUFtQixJQUNqQyxJQUFJLENBQUMsSUFBSSxLQUFLLGdCQUFnQixDQUFBLElBQzlCLENBQUMsRUFBRSxBQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUssSUFBSSxDQUFDLElBQUksQ0FBQSxBQUFDLEFBQUMsQ0FDdkQ7S0FDSDs7QUFFRCxZQUFRLEVBQUUsa0JBQVMsSUFBSSxFQUFFO0FBQ3ZCLGFBQU8sYUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQUM7S0FDekM7Ozs7QUFJRCxZQUFRLEVBQUUsa0JBQVMsSUFBSSxFQUFFO0FBQ3ZCLGFBQ0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUNyRTtLQUNIO0dBQ0Y7Q0FDRixDQUFDOzs7O3FCQUlhLEdBQUciLCJmaWxlIjoiYXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IEFTVCA9IHtcbiAgLy8gUHVibGljIEFQSSB1c2VkIHRvIGV2YWx1YXRlIGRlcml2ZWQgYXR0cmlidXRlcyByZWdhcmRpbmcgQVNUIG5vZGVzXG4gIGhlbHBlcnM6IHtcbiAgICAvLyBhIG11c3RhY2hlIGlzIGRlZmluaXRlbHkgYSBoZWxwZXIgaWY6XG4gICAgLy8gKiBpdCBpcyBhbiBlbGlnaWJsZSBoZWxwZXIsIGFuZFxuICAgIC8vICogaXQgaGFzIGF0IGxlYXN0IG9uZSBwYXJhbWV0ZXIgb3IgaGFzaCBzZWdtZW50XG4gICAgaGVscGVyRXhwcmVzc2lvbjogZnVuY3Rpb24obm9kZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgbm9kZS50eXBlID09PSAnU3ViRXhwcmVzc2lvbicgfHxcbiAgICAgICAgKChub2RlLnR5cGUgPT09ICdNdXN0YWNoZVN0YXRlbWVudCcgfHxcbiAgICAgICAgICBub2RlLnR5cGUgPT09ICdCbG9ja1N0YXRlbWVudCcpICYmXG4gICAgICAgICAgISEoKG5vZGUucGFyYW1zICYmIG5vZGUucGFyYW1zLmxlbmd0aCkgfHwgbm9kZS5oYXNoKSlcbiAgICAgICk7XG4gICAgfSxcblxuICAgIHNjb3BlZElkOiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICByZXR1cm4gL15cXC58dGhpc1xcYi8udGVzdChwYXRoLm9yaWdpbmFsKTtcbiAgICB9LFxuXG4gICAgLy8gYW4gSUQgaXMgc2ltcGxlIGlmIGl0IG9ubHkgaGFzIG9uZSBwYXJ0LCBhbmQgdGhhdCBwYXJ0IGlzIG5vdFxuICAgIC8vIGAuLmAgb3IgYHRoaXNgLlxuICAgIHNpbXBsZUlkOiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwYXRoLnBhcnRzLmxlbmd0aCA9PT0gMSAmJiAhQVNULmhlbHBlcnMuc2NvcGVkSWQocGF0aCkgJiYgIXBhdGguZGVwdGhcbiAgICAgICk7XG4gICAgfVxuICB9XG59O1xuXG4vLyBNdXN0IGJlIGV4cG9ydGVkIGFzIGFuIG9iamVjdCByYXRoZXIgdGhhbiB0aGUgcm9vdCBvZiB0aGUgbW9kdWxlIGFzIHRoZSBqaXNvbiBsZXhlclxuLy8gbXVzdCBtb2RpZnkgdGhlIG9iamVjdCB0byBvcGVyYXRlIHByb3Blcmx5LlxuZXhwb3J0IGRlZmF1bHQgQVNUO1xuIl19\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/compiler/base.js":
/*!**********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/compiler/base.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.parseWithoutProcessing = parseWithoutProcessing;\nexports.parse = parse;\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _parser = __webpack_require__(/*! ./parser */ \"./node_modules/handlebars/dist/cjs/handlebars/compiler/parser.js\");\n\nvar _parser2 = _interopRequireDefault(_parser);\n\nvar _whitespaceControl = __webpack_require__(/*! ./whitespace-control */ \"./node_modules/handlebars/dist/cjs/handlebars/compiler/whitespace-control.js\");\n\nvar _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);\n\nvar _helpers = __webpack_require__(/*! ./helpers */ \"./node_modules/handlebars/dist/cjs/handlebars/compiler/helpers.js\");\n\nvar Helpers = _interopRequireWildcard(_helpers);\n\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/handlebars/dist/cjs/handlebars/utils.js\");\n\nexports.parser = _parser2['default'];\n\nvar yy = {};\n_utils.extend(yy, Helpers);\n\nfunction parseWithoutProcessing(input, options) {\n  // Just return if an already-compiled AST was passed in.\n  if (input.type === 'Program') {\n    return input;\n  }\n\n  _parser2['default'].yy = yy;\n\n  // Altering the shared object here, but this is ok as parser is a sync operation\n  yy.locInfo = function (locInfo) {\n    return new yy.SourceLocation(options && options.srcName, locInfo);\n  };\n\n  var ast = _parser2['default'].parse(input);\n\n  return ast;\n}\n\nfunction parse(input, options) {\n  var ast = parseWithoutProcessing(input, options);\n  var strip = new _whitespaceControl2['default'](options);\n\n  return strip.accept(ast);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL2Jhc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztzQkFBbUIsVUFBVTs7OztpQ0FDQyxzQkFBc0I7Ozs7dUJBQzNCLFdBQVc7O0lBQXhCLE9BQU87O3FCQUNJLFVBQVU7O1FBRXhCLE1BQU07O0FBRWYsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ1osY0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7O0FBRWIsU0FBUyxzQkFBc0IsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFOztBQUVyRCxNQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO0FBQzVCLFdBQU8sS0FBSyxDQUFDO0dBQ2Q7O0FBRUQsc0JBQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQzs7O0FBR2YsSUFBRSxDQUFDLE9BQU8sR0FBRyxVQUFTLE9BQU8sRUFBRTtBQUM3QixXQUFPLElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztHQUNuRSxDQUFDOztBQUVGLE1BQUksR0FBRyxHQUFHLG9CQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzs7QUFFOUIsU0FBTyxHQUFHLENBQUM7Q0FDWjs7QUFFTSxTQUFTLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO0FBQ3BDLE1BQUksR0FBRyxHQUFHLHNCQUFzQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNqRCxNQUFJLEtBQUssR0FBRyxtQ0FBc0IsT0FBTyxDQUFDLENBQUM7O0FBRTNDLFNBQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMxQiIsImZpbGUiOiJiYXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhcnNlciBmcm9tICcuL3BhcnNlcic7XG5pbXBvcnQgV2hpdGVzcGFjZUNvbnRyb2wgZnJvbSAnLi93aGl0ZXNwYWNlLWNvbnRyb2wnO1xuaW1wb3J0ICogYXMgSGVscGVycyBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgeyBwYXJzZXIgfTtcblxubGV0IHl5ID0ge307XG5leHRlbmQoeXksIEhlbHBlcnMpO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VXaXRob3V0UHJvY2Vzc2luZyhpbnB1dCwgb3B0aW9ucykge1xuICAvLyBKdXN0IHJldHVybiBpZiBhbiBhbHJlYWR5LWNvbXBpbGVkIEFTVCB3YXMgcGFzc2VkIGluLlxuICBpZiAoaW5wdXQudHlwZSA9PT0gJ1Byb2dyYW0nKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG5cbiAgcGFyc2VyLnl5ID0geXk7XG5cbiAgLy8gQWx0ZXJpbmcgdGhlIHNoYXJlZCBvYmplY3QgaGVyZSwgYnV0IHRoaXMgaXMgb2sgYXMgcGFyc2VyIGlzIGEgc3luYyBvcGVyYXRpb25cbiAgeXkubG9jSW5mbyA9IGZ1bmN0aW9uKGxvY0luZm8pIHtcbiAgICByZXR1cm4gbmV3IHl5LlNvdXJjZUxvY2F0aW9uKG9wdGlvbnMgJiYgb3B0aW9ucy5zcmNOYW1lLCBsb2NJbmZvKTtcbiAgfTtcblxuICBsZXQgYXN0ID0gcGFyc2VyLnBhcnNlKGlucHV0KTtcblxuICByZXR1cm4gYXN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgbGV0IGFzdCA9IHBhcnNlV2l0aG91dFByb2Nlc3NpbmcoaW5wdXQsIG9wdGlvbnMpO1xuICBsZXQgc3RyaXAgPSBuZXcgV2hpdGVzcGFjZUNvbnRyb2wob3B0aW9ucyk7XG5cbiAgcmV0dXJuIHN0cmlwLmFjY2VwdChhc3QpO1xufVxuIl19\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/compiler/base.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/compiler/code-gen.js":
/*!**************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/compiler/code-gen.js ***!
  \**************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* global define, require */\n\n\nexports.__esModule = true;\n\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/handlebars/dist/cjs/handlebars/utils.js\");\n\nvar SourceNode = undefined;\n\ntry {\n  /* istanbul ignore next */\n  if (false) { var SourceMap; }\n} catch (err) {}\n/* NOP */\n\n/* istanbul ignore if: tested but not covered in istanbul due to dist build  */\nif (!SourceNode) {\n  SourceNode = function (line, column, srcFile, chunks) {\n    this.src = '';\n    if (chunks) {\n      this.add(chunks);\n    }\n  };\n  /* istanbul ignore next */\n  SourceNode.prototype = {\n    add: function add(chunks) {\n      if (_utils.isArray(chunks)) {\n        chunks = chunks.join('');\n      }\n      this.src += chunks;\n    },\n    prepend: function prepend(chunks) {\n      if (_utils.isArray(chunks)) {\n        chunks = chunks.join('');\n      }\n      this.src = chunks + this.src;\n    },\n    toStringWithSourceMap: function toStringWithSourceMap() {\n      return { code: this.toString() };\n    },\n    toString: function toString() {\n      return this.src;\n    }\n  };\n}\n\nfunction castChunk(chunk, codeGen, loc) {\n  if (_utils.isArray(chunk)) {\n    var ret = [];\n\n    for (var i = 0, len = chunk.length; i < len; i++) {\n      ret.push(codeGen.wrap(chunk[i], loc));\n    }\n    return ret;\n  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {\n    // Handle primitives that the SourceNode will throw up on\n    return chunk + '';\n  }\n  return chunk;\n}\n\nfunction CodeGen(srcFile) {\n  this.srcFile = srcFile;\n  this.source = [];\n}\n\nCodeGen.prototype = {\n  isEmpty: function isEmpty() {\n    return !this.source.length;\n  },\n  prepend: function prepend(source, loc) {\n    this.source.unshift(this.wrap(source, loc));\n  },\n  push: function push(source, loc) {\n    this.source.push(this.wrap(source, loc));\n  },\n\n  merge: function merge() {\n    var source = this.empty();\n    this.each(function (line) {\n      source.add(['  ', line, '\\n']);\n    });\n    return source;\n  },\n\n  each: function each(iter) {\n    for (var i = 0, len = this.source.length; i < len; i++) {\n      iter(this.source[i]);\n    }\n  },\n\n  empty: function empty() {\n    var loc = this.currentLocation || { start: {} };\n    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);\n  },\n  wrap: function wrap(chunk) {\n    var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || { start: {} } : arguments[1];\n\n    if (chunk instanceof SourceNode) {\n      return chunk;\n    }\n\n    chunk = castChunk(chunk, this, loc);\n\n    return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);\n  },\n\n  functionCall: function functionCall(fn, type, params) {\n    params = this.generateList(params);\n    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);\n  },\n\n  quotedString: function quotedString(str) {\n    return '\"' + (str + '').replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\u2028/g, '\\\\u2028') // Per Ecma-262 7.3 + 7.8.4\n    .replace(/\\u2029/g, '\\\\u2029') + '\"';\n  },\n\n  objectLiteral: function objectLiteral(obj) {\n    // istanbul ignore next\n\n    var _this = this;\n\n    var pairs = [];\n\n    Object.keys(obj).forEach(function (key) {\n      var value = castChunk(obj[key], _this);\n      if (value !== 'undefined') {\n        pairs.push([_this.quotedString(key), ':', value]);\n      }\n    });\n\n    var ret = this.generateList(pairs);\n    ret.prepend('{');\n    ret.add('}');\n    return ret;\n  },\n\n  generateList: function generateList(entries) {\n    var ret = this.empty();\n\n    for (var i = 0, len = entries.length; i < len; i++) {\n      if (i) {\n        ret.add(',');\n      }\n\n      ret.add(castChunk(entries[i], this));\n    }\n\n    return ret;\n  },\n\n  generateArray: function generateArray(entries) {\n    var ret = this.generateList(entries);\n    ret.prepend('[');\n    ret.add(']');\n\n    return ret;\n  }\n};\n\nexports[\"default\"] = CodeGen;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/compiler/code-gen.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/compiler/compiler.js":
/*!**************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/compiler/compiler.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/* eslint-disable new-cap */\n\n\n\nexports.__esModule = true;\nexports.Compiler = Compiler;\nexports.precompile = precompile;\nexports.compile = compile;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _exception = __webpack_require__(/*! ../exception */ \"./node_modules/handlebars/dist/cjs/handlebars/exception.js\");\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/handlebars/dist/cjs/handlebars/utils.js\");\n\nvar _ast = __webpack_require__(/*! ./ast */ \"./node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js\");\n\nvar _ast2 = _interopRequireDefault(_ast);\n\nvar slice = [].slice;\n\nfunction Compiler() {}\n\n// the foundHelper register will disambiguate helper lookup from finding a\n// function in a context. This is necessary for mustache compatibility, which\n// requires that context functions in blocks are evaluated by blockHelperMissing,\n// and then proceed as if the resulting value was provided to blockHelperMissing.\n\nCompiler.prototype = {\n  compiler: Compiler,\n\n  equals: function equals(other) {\n    var len = this.opcodes.length;\n    if (other.opcodes.length !== len) {\n      return false;\n    }\n\n    for (var i = 0; i < len; i++) {\n      var opcode = this.opcodes[i],\n          otherOpcode = other.opcodes[i];\n      if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {\n        return false;\n      }\n    }\n\n    // We know that length is the same between the two arrays because they are directly tied\n    // to the opcode behavior above.\n    len = this.children.length;\n    for (var i = 0; i < len; i++) {\n      if (!this.children[i].equals(other.children[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  guid: 0,\n\n  compile: function compile(program, options) {\n    this.sourceNode = [];\n    this.opcodes = [];\n    this.children = [];\n    this.options = options;\n    this.stringParams = options.stringParams;\n    this.trackIds = options.trackIds;\n\n    options.blockParams = options.blockParams || [];\n\n    options.knownHelpers = _utils.extend(Object.create(null), {\n      helperMissing: true,\n      blockHelperMissing: true,\n      each: true,\n      'if': true,\n      unless: true,\n      'with': true,\n      log: true,\n      lookup: true\n    }, options.knownHelpers);\n\n    return this.accept(program);\n  },\n\n  compileProgram: function compileProgram(program) {\n    var childCompiler = new this.compiler(),\n        // eslint-disable-line new-cap\n    result = childCompiler.compile(program, this.options),\n        guid = this.guid++;\n\n    this.usePartial = this.usePartial || result.usePartial;\n\n    this.children[guid] = result;\n    this.useDepths = this.useDepths || result.useDepths;\n\n    return guid;\n  },\n\n  accept: function accept(node) {\n    /* istanbul ignore next: Sanity code */\n    if (!this[node.type]) {\n      throw new _exception2['default']('Unknown type: ' + node.type, node);\n    }\n\n    this.sourceNode.unshift(node);\n    var ret = this[node.type](node);\n    this.sourceNode.shift();\n    return ret;\n  },\n\n  Program: function Program(program) {\n    this.options.blockParams.unshift(program.blockParams);\n\n    var body = program.body,\n        bodyLength = body.length;\n    for (var i = 0; i < bodyLength; i++) {\n      this.accept(body[i]);\n    }\n\n    this.options.blockParams.shift();\n\n    this.isSimple = bodyLength === 1;\n    this.blockParams = program.blockParams ? program.blockParams.length : 0;\n\n    return this;\n  },\n\n  BlockStatement: function BlockStatement(block) {\n    transformLiteralToPath(block);\n\n    var program = block.program,\n        inverse = block.inverse;\n\n    program = program && this.compileProgram(program);\n    inverse = inverse && this.compileProgram(inverse);\n\n    var type = this.classifySexpr(block);\n\n    if (type === 'helper') {\n      this.helperSexpr(block, program, inverse);\n    } else if (type === 'simple') {\n      this.simpleSexpr(block);\n\n      // now that the simple mustache is resolved, we need to\n      // evaluate it by executing `blockHelperMissing`\n      this.opcode('pushProgram', program);\n      this.opcode('pushProgram', inverse);\n      this.opcode('emptyHash');\n      this.opcode('blockValue', block.path.original);\n    } else {\n      this.ambiguousSexpr(block, program, inverse);\n\n      // now that the simple mustache is resolved, we need to\n      // evaluate it by executing `blockHelperMissing`\n      this.opcode('pushProgram', program);\n      this.opcode('pushProgram', inverse);\n      this.opcode('emptyHash');\n      this.opcode('ambiguousBlockValue');\n    }\n\n    this.opcode('append');\n  },\n\n  DecoratorBlock: function DecoratorBlock(decorator) {\n    var program = decorator.program && this.compileProgram(decorator.program);\n    var params = this.setupFullMustacheParams(decorator, program, undefined),\n        path = decorator.path;\n\n    this.useDecorators = true;\n    this.opcode('registerDecorator', params.length, path.original);\n  },\n\n  PartialStatement: function PartialStatement(partial) {\n    this.usePartial = true;\n\n    var program = partial.program;\n    if (program) {\n      program = this.compileProgram(partial.program);\n    }\n\n    var params = partial.params;\n    if (params.length > 1) {\n      throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);\n    } else if (!params.length) {\n      if (this.options.explicitPartialContext) {\n        this.opcode('pushLiteral', 'undefined');\n      } else {\n        params.push({ type: 'PathExpression', parts: [], depth: 0 });\n      }\n    }\n\n    var partialName = partial.name.original,\n        isDynamic = partial.name.type === 'SubExpression';\n    if (isDynamic) {\n      this.accept(partial.name);\n    }\n\n    this.setupFullMustacheParams(partial, program, undefined, true);\n\n    var indent = partial.indent || '';\n    if (this.options.preventIndent && indent) {\n      this.opcode('appendContent', indent);\n      indent = '';\n    }\n\n    this.opcode('invokePartial', isDynamic, partialName, indent);\n    this.opcode('append');\n  },\n  PartialBlockStatement: function PartialBlockStatement(partialBlock) {\n    this.PartialStatement(partialBlock);\n  },\n\n  MustacheStatement: function MustacheStatement(mustache) {\n    this.SubExpression(mustache);\n\n    if (mustache.escaped && !this.options.noEscape) {\n      this.opcode('appendEscaped');\n    } else {\n      this.opcode('append');\n    }\n  },\n  Decorator: function Decorator(decorator) {\n    this.DecoratorBlock(decorator);\n  },\n\n  ContentStatement: function ContentStatement(content) {\n    if (content.value) {\n      this.opcode('appendContent', content.value);\n    }\n  },\n\n  CommentStatement: function CommentStatement() {},\n\n  SubExpression: function SubExpression(sexpr) {\n    transformLiteralToPath(sexpr);\n    var type = this.classifySexpr(sexpr);\n\n    if (type === 'simple') {\n      this.simpleSexpr(sexpr);\n    } else if (type === 'helper') {\n      this.helperSexpr(sexpr);\n    } else {\n      this.ambiguousSexpr(sexpr);\n    }\n  },\n  ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {\n    var path = sexpr.path,\n        name = path.parts[0],\n        isBlock = program != null || inverse != null;\n\n    this.opcode('getContext', path.depth);\n\n    this.opcode('pushProgram', program);\n    this.opcode('pushProgram', inverse);\n\n    path.strict = true;\n    this.accept(path);\n\n    this.opcode('invokeAmbiguous', name, isBlock);\n  },\n\n  simpleSexpr: function simpleSexpr(sexpr) {\n    var path = sexpr.path;\n    path.strict = true;\n    this.accept(path);\n    this.opcode('resolvePossibleLambda');\n  },\n\n  helperSexpr: function helperSexpr(sexpr, program, inverse) {\n    var params = this.setupFullMustacheParams(sexpr, program, inverse),\n        path = sexpr.path,\n        name = path.parts[0];\n\n    if (this.options.knownHelpers[name]) {\n      this.opcode('invokeKnownHelper', params.length, name);\n    } else if (this.options.knownHelpersOnly) {\n      throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);\n    } else {\n      path.strict = true;\n      path.falsy = true;\n\n      this.accept(path);\n      this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));\n    }\n  },\n\n  PathExpression: function PathExpression(path) {\n    this.addDepth(path.depth);\n    this.opcode('getContext', path.depth);\n\n    var name = path.parts[0],\n        scoped = _ast2['default'].helpers.scopedId(path),\n        blockParamId = !path.depth && !scoped && this.blockParamIndex(name);\n\n    if (blockParamId) {\n      this.opcode('lookupBlockParam', blockParamId, path.parts);\n    } else if (!name) {\n      // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`\n      this.opcode('pushContext');\n    } else if (path.data) {\n      this.options.data = true;\n      this.opcode('lookupData', path.depth, path.parts, path.strict);\n    } else {\n      this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);\n    }\n  },\n\n  StringLiteral: function StringLiteral(string) {\n    this.opcode('pushString', string.value);\n  },\n\n  NumberLiteral: function NumberLiteral(number) {\n    this.opcode('pushLiteral', number.value);\n  },\n\n  BooleanLiteral: function BooleanLiteral(bool) {\n    this.opcode('pushLiteral', bool.value);\n  },\n\n  UndefinedLiteral: function UndefinedLiteral() {\n    this.opcode('pushLiteral', 'undefined');\n  },\n\n  NullLiteral: function NullLiteral() {\n    this.opcode('pushLiteral', 'null');\n  },\n\n  Hash: function Hash(hash) {\n    var pairs = hash.pairs,\n        i = 0,\n        l = pairs.length;\n\n    this.opcode('pushHash');\n\n    for (; i < l; i++) {\n      this.pushParam(pairs[i].value);\n    }\n    while (i--) {\n      this.opcode('assignToHash', pairs[i].key);\n    }\n    this.opcode('popHash');\n  },\n\n  // HELPERS\n  opcode: function opcode(name) {\n    this.opcodes.push({\n      opcode: name,\n      args: slice.call(arguments, 1),\n      loc: this.sourceNode[0].loc\n    });\n  },\n\n  addDepth: function addDepth(depth) {\n    if (!depth) {\n      return;\n    }\n\n    this.useDepths = true;\n  },\n\n  classifySexpr: function classifySexpr(sexpr) {\n    var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);\n\n    var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);\n\n    // a mustache is an eligible helper if:\n    // * its id is simple (a single part, not `this` or `..`)\n    var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);\n\n    // if a mustache is an eligible helper but not a definite\n    // helper, it is ambiguous, and will be resolved in a later\n    // pass or at runtime.\n    var isEligible = !isBlockParam && (isHelper || isSimple);\n\n    // if ambiguous, we can possibly resolve the ambiguity now\n    // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.\n    if (isEligible && !isHelper) {\n      var _name = sexpr.path.parts[0],\n          options = this.options;\n      if (options.knownHelpers[_name]) {\n        isHelper = true;\n      } else if (options.knownHelpersOnly) {\n        isEligible = false;\n      }\n    }\n\n    if (isHelper) {\n      return 'helper';\n    } else if (isEligible) {\n      return 'ambiguous';\n    } else {\n      return 'simple';\n    }\n  },\n\n  pushParams: function pushParams(params) {\n    for (var i = 0, l = params.length; i < l; i++) {\n      this.pushParam(params[i]);\n    }\n  },\n\n  pushParam: function pushParam(val) {\n    var value = val.value != null ? val.value : val.original || '';\n\n    if (this.stringParams) {\n      if (value.replace) {\n        value = value.replace(/^(\\.?\\.\\/)*/g, '').replace(/\\//g, '.');\n      }\n\n      if (val.depth) {\n        this.addDepth(val.depth);\n      }\n      this.opcode('getContext', val.depth || 0);\n      this.opcode('pushStringParam', value, val.type);\n\n      if (val.type === 'SubExpression') {\n        // SubExpressions get evaluated and passed in\n        // in string params mode.\n        this.accept(val);\n      }\n    } else {\n      if (this.trackIds) {\n        var blockParamIndex = undefined;\n        if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {\n          blockParamIndex = this.blockParamIndex(val.parts[0]);\n        }\n        if (blockParamIndex) {\n          var blockParamChild = val.parts.slice(1).join('.');\n          this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);\n        } else {\n          value = val.original || value;\n          if (value.replace) {\n            value = value.replace(/^this(?:\\.|$)/, '').replace(/^\\.\\//, '').replace(/^\\.$/, '');\n          }\n\n          this.opcode('pushId', val.type, value);\n        }\n      }\n      this.accept(val);\n    }\n  },\n\n  setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {\n    var params = sexpr.params;\n    this.pushParams(params);\n\n    this.opcode('pushProgram', program);\n    this.opcode('pushProgram', inverse);\n\n    if (sexpr.hash) {\n      this.accept(sexpr.hash);\n    } else {\n      this.opcode('emptyHash', omitEmpty);\n    }\n\n    return params;\n  },\n\n  blockParamIndex: function blockParamIndex(name) {\n    for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {\n      var blockParams = this.options.blockParams[depth],\n          param = blockParams && _utils.indexOf(blockParams, name);\n      if (blockParams && param >= 0) {\n        return [depth, param];\n      }\n    }\n  }\n};\n\nfunction precompile(input, options, env) {\n  if (input == null || typeof input !== 'string' && input.type !== 'Program') {\n    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);\n  }\n\n  options = options || {};\n  if (!('data' in options)) {\n    options.data = true;\n  }\n  if (options.compat) {\n    options.useDepths = true;\n  }\n\n  var ast = env.parse(input, options),\n      environment = new env.Compiler().compile(ast, options);\n  return new env.JavaScriptCompiler().compile(environment, options);\n}\n\nfunction compile(input, options, env) {\n  if (options === undefined) options = {};\n\n  if (input == null || typeof input !== 'string' && input.type !== 'Program') {\n    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);\n  }\n\n  options = _utils.extend({}, options);\n  if (!('data' in options)) {\n    options.data = true;\n  }\n  if (options.compat) {\n    options.useDepths = true;\n  }\n\n  var compiled = undefined;\n\n  function compileInput() {\n    var ast = env.parse(input, options),\n        environment = new env.Compiler().compile(ast, options),\n        templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);\n    return env.template(templateSpec);\n  }\n\n  // Template is only compiled on first use and cached after that point.\n  function ret(context, execOptions) {\n    if (!compiled) {\n      compiled = compileInput();\n    }\n    return compiled.call(this, context, execOptions);\n  }\n  ret._setup = function (setupOptions) {\n    if (!compiled) {\n      compiled = compileInput();\n    }\n    return compiled._setup(setupOptions);\n  };\n  ret._child = function (i, data, blockParams, depths) {\n    if (!compiled) {\n      compiled = compileInput();\n    }\n    return compiled._child(i, data, blockParams, depths);\n  };\n  return ret;\n}\n\nfunction argEquals(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {\n    for (var i = 0; i < a.length; i++) {\n      if (!argEquals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nfunction transformLiteralToPath(sexpr) {\n  if (!sexpr.path.parts) {\n    var literal = sexpr.path;\n    // Casting to string here to make false and 0 literal values play nicely with the rest\n    // of the system.\n    sexpr.path = {\n      type: 'PathExpression',\n      data: false,\n      depth: 0,\n      parts: [literal.original + ''],\n      original: literal.original + '',\n      loc: literal.loc\n    };\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/compiler/compiler.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/compiler/helpers.js":
/*!*************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/compiler/helpers.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.SourceLocation = SourceLocation;\nexports.id = id;\nexports.stripFlags = stripFlags;\nexports.stripComment = stripComment;\nexports.preparePath = preparePath;\nexports.prepareMustache = prepareMustache;\nexports.prepareRawBlock = prepareRawBlock;\nexports.prepareBlock = prepareBlock;\nexports.prepareProgram = prepareProgram;\nexports.preparePartialBlock = preparePartialBlock;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _exception = __webpack_require__(/*! ../exception */ \"./node_modules/handlebars/dist/cjs/handlebars/exception.js\");\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nfunction validateClose(open, close) {\n  close = close.path ? close.path.original : close;\n\n  if (open.path.original !== close) {\n    var errorNode = { loc: open.path.loc };\n\n    throw new _exception2['default'](open.path.original + \" doesn't match \" + close, errorNode);\n  }\n}\n\nfunction SourceLocation(source, locInfo) {\n  this.source = source;\n  this.start = {\n    line: locInfo.first_line,\n    column: locInfo.first_column\n  };\n  this.end = {\n    line: locInfo.last_line,\n    column: locInfo.last_column\n  };\n}\n\nfunction id(token) {\n  if (/^\\[.*\\]$/.test(token)) {\n    return token.substring(1, token.length - 1);\n  } else {\n    return token;\n  }\n}\n\nfunction stripFlags(open, close) {\n  return {\n    open: open.charAt(2) === '~',\n    close: close.charAt(close.length - 3) === '~'\n  };\n}\n\nfunction stripComment(comment) {\n  return comment.replace(/^\\{\\{~?!-?-?/, '').replace(/-?-?~?\\}\\}$/, '');\n}\n\nfunction preparePath(data, parts, loc) {\n  loc = this.locInfo(loc);\n\n  var original = data ? '@' : '',\n      dig = [],\n      depth = 0;\n\n  for (var i = 0, l = parts.length; i < l; i++) {\n    var part = parts[i].part,\n\n    // If we have [] syntax then we do not treat path references as operators,\n    // i.e. foo.[this] resolves to approximately context.foo['this']\n    isLiteral = parts[i].original !== part;\n    original += (parts[i].separator || '') + part;\n\n    if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {\n      if (dig.length > 0) {\n        throw new _exception2['default']('Invalid path: ' + original, { loc: loc });\n      } else if (part === '..') {\n        depth++;\n      }\n    } else {\n      dig.push(part);\n    }\n  }\n\n  return {\n    type: 'PathExpression',\n    data: data,\n    depth: depth,\n    parts: dig,\n    original: original,\n    loc: loc\n  };\n}\n\nfunction prepareMustache(path, params, hash, open, strip, locInfo) {\n  // Must use charAt to support IE pre-10\n  var escapeFlag = open.charAt(3) || open.charAt(2),\n      escaped = escapeFlag !== '{' && escapeFlag !== '&';\n\n  var decorator = /\\*/.test(open);\n  return {\n    type: decorator ? 'Decorator' : 'MustacheStatement',\n    path: path,\n    params: params,\n    hash: hash,\n    escaped: escaped,\n    strip: strip,\n    loc: this.locInfo(locInfo)\n  };\n}\n\nfunction prepareRawBlock(openRawBlock, contents, close, locInfo) {\n  validateClose(openRawBlock, close);\n\n  locInfo = this.locInfo(locInfo);\n  var program = {\n    type: 'Program',\n    body: contents,\n    strip: {},\n    loc: locInfo\n  };\n\n  return {\n    type: 'BlockStatement',\n    path: openRawBlock.path,\n    params: openRawBlock.params,\n    hash: openRawBlock.hash,\n    program: program,\n    openStrip: {},\n    inverseStrip: {},\n    closeStrip: {},\n    loc: locInfo\n  };\n}\n\nfunction prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {\n  if (close && close.path) {\n    validateClose(openBlock, close);\n  }\n\n  var decorator = /\\*/.test(openBlock.open);\n\n  program.blockParams = openBlock.blockParams;\n\n  var inverse = undefined,\n      inverseStrip = undefined;\n\n  if (inverseAndProgram) {\n    if (decorator) {\n      throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);\n    }\n\n    if (inverseAndProgram.chain) {\n      inverseAndProgram.program.body[0].closeStrip = close.strip;\n    }\n\n    inverseStrip = inverseAndProgram.strip;\n    inverse = inverseAndProgram.program;\n  }\n\n  if (inverted) {\n    inverted = inverse;\n    inverse = program;\n    program = inverted;\n  }\n\n  return {\n    type: decorator ? 'DecoratorBlock' : 'BlockStatement',\n    path: openBlock.path,\n    params: openBlock.params,\n    hash: openBlock.hash,\n    program: program,\n    inverse: inverse,\n    openStrip: openBlock.strip,\n    inverseStrip: inverseStrip,\n    closeStrip: close && close.strip,\n    loc: this.locInfo(locInfo)\n  };\n}\n\nfunction prepareProgram(statements, loc) {\n  if (!loc && statements.length) {\n    var firstLoc = statements[0].loc,\n        lastLoc = statements[statements.length - 1].loc;\n\n    /* istanbul ignore else */\n    if (firstLoc && lastLoc) {\n      loc = {\n        source: firstLoc.source,\n        start: {\n          line: firstLoc.start.line,\n          column: firstLoc.start.column\n        },\n        end: {\n          line: lastLoc.end.line,\n          column: lastLoc.end.column\n        }\n      };\n    }\n  }\n\n  return {\n    type: 'Program',\n    body: statements,\n    strip: {},\n    loc: loc\n  };\n}\n\nfunction preparePartialBlock(open, program, close, locInfo) {\n  validateClose(open, close);\n\n  return {\n    type: 'PartialBlockStatement',\n    name: open.path,\n    params: open.params,\n    hash: open.hash,\n    program: program,\n    openStrip: open.strip,\n    closeStrip: close && close.strip,\n    loc: this.locInfo(locInfo)\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/compiler/helpers.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/compiler/javascript-compiler.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/compiler/javascript-compiler.js ***!
  \*************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _base = __webpack_require__(/*! ../base */ \"./node_modules/handlebars/dist/cjs/handlebars/base.js\");\n\nvar _exception = __webpack_require__(/*! ../exception */ \"./node_modules/handlebars/dist/cjs/handlebars/exception.js\");\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/handlebars/dist/cjs/handlebars/utils.js\");\n\nvar _codeGen = __webpack_require__(/*! ./code-gen */ \"./node_modules/handlebars/dist/cjs/handlebars/compiler/code-gen.js\");\n\nvar _codeGen2 = _interopRequireDefault(_codeGen);\n\nfunction Literal(value) {\n  this.value = value;\n}\n\nfunction JavaScriptCompiler() {}\n\nJavaScriptCompiler.prototype = {\n  // PUBLIC API: You can override these methods in a subclass to provide\n  // alternative compiled forms for name lookup and buffering semantics\n  nameLookup: function nameLookup(parent, name /*,  type */) {\n    return this.internalNameLookup(parent, name);\n  },\n  depthedLookup: function depthedLookup(name) {\n    return [this.aliasable('container.lookup'), '(depths, ', JSON.stringify(name), ')'];\n  },\n\n  compilerInfo: function compilerInfo() {\n    var revision = _base.COMPILER_REVISION,\n        versions = _base.REVISION_CHANGES[revision];\n    return [revision, versions];\n  },\n\n  appendToBuffer: function appendToBuffer(source, location, explicit) {\n    // Force a source as this simplifies the merge logic.\n    if (!_utils.isArray(source)) {\n      source = [source];\n    }\n    source = this.source.wrap(source, location);\n\n    if (this.environment.isSimple) {\n      return ['return ', source, ';'];\n    } else if (explicit) {\n      // This is a case where the buffer operation occurs as a child of another\n      // construct, generally braces. We have to explicitly output these buffer\n      // operations to ensure that the emitted code goes in the correct location.\n      return ['buffer += ', source, ';'];\n    } else {\n      source.appendToBuffer = true;\n      return source;\n    }\n  },\n\n  initializeBuffer: function initializeBuffer() {\n    return this.quotedString('');\n  },\n  // END PUBLIC API\n  internalNameLookup: function internalNameLookup(parent, name) {\n    this.lookupPropertyFunctionIsUsed = true;\n    return ['lookupProperty(', parent, ',', JSON.stringify(name), ')'];\n  },\n\n  lookupPropertyFunctionIsUsed: false,\n\n  compile: function compile(environment, options, context, asObject) {\n    this.environment = environment;\n    this.options = options;\n    this.stringParams = this.options.stringParams;\n    this.trackIds = this.options.trackIds;\n    this.precompile = !asObject;\n\n    this.name = this.environment.name;\n    this.isChild = !!context;\n    this.context = context || {\n      decorators: [],\n      programs: [],\n      environments: []\n    };\n\n    this.preamble();\n\n    this.stackSlot = 0;\n    this.stackVars = [];\n    this.aliases = {};\n    this.registers = { list: [] };\n    this.hashes = [];\n    this.compileStack = [];\n    this.inlineStack = [];\n    this.blockParams = [];\n\n    this.compileChildren(environment, options);\n\n    this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;\n    this.useBlockParams = this.useBlockParams || environment.useBlockParams;\n\n    var opcodes = environment.opcodes,\n        opcode = undefined,\n        firstLoc = undefined,\n        i = undefined,\n        l = undefined;\n\n    for (i = 0, l = opcodes.length; i < l; i++) {\n      opcode = opcodes[i];\n\n      this.source.currentLocation = opcode.loc;\n      firstLoc = firstLoc || opcode.loc;\n      this[opcode.opcode].apply(this, opcode.args);\n    }\n\n    // Flush any trailing content that might be pending.\n    this.source.currentLocation = firstLoc;\n    this.pushSource('');\n\n    /* istanbul ignore next */\n    if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {\n      throw new _exception2['default']('Compile completed with content left on stack');\n    }\n\n    if (!this.decorators.isEmpty()) {\n      this.useDecorators = true;\n\n      this.decorators.prepend(['var decorators = container.decorators, ', this.lookupPropertyFunctionVarDeclaration(), ';\\n']);\n      this.decorators.push('return fn;');\n\n      if (asObject) {\n        this.decorators = Function.apply(this, ['fn', 'props', 'container', 'depth0', 'data', 'blockParams', 'depths', this.decorators.merge()]);\n      } else {\n        this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\\n');\n        this.decorators.push('}\\n');\n        this.decorators = this.decorators.merge();\n      }\n    } else {\n      this.decorators = undefined;\n    }\n\n    var fn = this.createFunctionContext(asObject);\n    if (!this.isChild) {\n      var ret = {\n        compiler: this.compilerInfo(),\n        main: fn\n      };\n\n      if (this.decorators) {\n        ret.main_d = this.decorators; // eslint-disable-line camelcase\n        ret.useDecorators = true;\n      }\n\n      var _context = this.context;\n      var programs = _context.programs;\n      var decorators = _context.decorators;\n\n      for (i = 0, l = programs.length; i < l; i++) {\n        if (programs[i]) {\n          ret[i] = programs[i];\n          if (decorators[i]) {\n            ret[i + '_d'] = decorators[i];\n            ret.useDecorators = true;\n          }\n        }\n      }\n\n      if (this.environment.usePartial) {\n        ret.usePartial = true;\n      }\n      if (this.options.data) {\n        ret.useData = true;\n      }\n      if (this.useDepths) {\n        ret.useDepths = true;\n      }\n      if (this.useBlockParams) {\n        ret.useBlockParams = true;\n      }\n      if (this.options.compat) {\n        ret.compat = true;\n      }\n\n      if (!asObject) {\n        ret.compiler = JSON.stringify(ret.compiler);\n\n        this.source.currentLocation = { start: { line: 1, column: 0 } };\n        ret = this.objectLiteral(ret);\n\n        if (options.srcName) {\n          ret = ret.toStringWithSourceMap({ file: options.destName });\n          ret.map = ret.map && ret.map.toString();\n        } else {\n          ret = ret.toString();\n        }\n      } else {\n        ret.compilerOptions = this.options;\n      }\n\n      return ret;\n    } else {\n      return fn;\n    }\n  },\n\n  preamble: function preamble() {\n    // track the last context pushed into place to allow skipping the\n    // getContext opcode when it would be a noop\n    this.lastContext = 0;\n    this.source = new _codeGen2['default'](this.options.srcName);\n    this.decorators = new _codeGen2['default'](this.options.srcName);\n  },\n\n  createFunctionContext: function createFunctionContext(asObject) {\n    // istanbul ignore next\n\n    var _this = this;\n\n    var varDeclarations = '';\n\n    var locals = this.stackVars.concat(this.registers.list);\n    if (locals.length > 0) {\n      varDeclarations += ', ' + locals.join(', ');\n    }\n\n    // Generate minimizer alias mappings\n    //\n    // When using true SourceNodes, this will update all references to the given alias\n    // as the source nodes are reused in situ. For the non-source node compilation mode,\n    // aliases will not be used, but this case is already being run on the client and\n    // we aren't concern about minimizing the template size.\n    var aliasCount = 0;\n    Object.keys(this.aliases).forEach(function (alias) {\n      var node = _this.aliases[alias];\n      if (node.children && node.referenceCount > 1) {\n        varDeclarations += ', alias' + ++aliasCount + '=' + alias;\n        node.children[0] = 'alias' + aliasCount;\n      }\n    });\n\n    if (this.lookupPropertyFunctionIsUsed) {\n      varDeclarations += ', ' + this.lookupPropertyFunctionVarDeclaration();\n    }\n\n    var params = ['container', 'depth0', 'helpers', 'partials', 'data'];\n\n    if (this.useBlockParams || this.useDepths) {\n      params.push('blockParams');\n    }\n    if (this.useDepths) {\n      params.push('depths');\n    }\n\n    // Perform a second pass over the output to merge content when possible\n    var source = this.mergeSource(varDeclarations);\n\n    if (asObject) {\n      params.push(source);\n\n      return Function.apply(this, params);\n    } else {\n      return this.source.wrap(['function(', params.join(','), ') {\\n  ', source, '}']);\n    }\n  },\n  mergeSource: function mergeSource(varDeclarations) {\n    var isSimple = this.environment.isSimple,\n        appendOnly = !this.forceBuffer,\n        appendFirst = undefined,\n        sourceSeen = undefined,\n        bufferStart = undefined,\n        bufferEnd = undefined;\n    this.source.each(function (line) {\n      if (line.appendToBuffer) {\n        if (bufferStart) {\n          line.prepend('  + ');\n        } else {\n          bufferStart = line;\n        }\n        bufferEnd = line;\n      } else {\n        if (bufferStart) {\n          if (!sourceSeen) {\n            appendFirst = true;\n          } else {\n            bufferStart.prepend('buffer += ');\n          }\n          bufferEnd.add(';');\n          bufferStart = bufferEnd = undefined;\n        }\n\n        sourceSeen = true;\n        if (!isSimple) {\n          appendOnly = false;\n        }\n      }\n    });\n\n    if (appendOnly) {\n      if (bufferStart) {\n        bufferStart.prepend('return ');\n        bufferEnd.add(';');\n      } else if (!sourceSeen) {\n        this.source.push('return \"\";');\n      }\n    } else {\n      varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());\n\n      if (bufferStart) {\n        bufferStart.prepend('return buffer + ');\n        bufferEnd.add(';');\n      } else {\n        this.source.push('return buffer;');\n      }\n    }\n\n    if (varDeclarations) {\n      this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\\n'));\n    }\n\n    return this.source.merge();\n  },\n\n  lookupPropertyFunctionVarDeclaration: function lookupPropertyFunctionVarDeclaration() {\n    return '\\n      lookupProperty = container.lookupProperty || function(parent, propertyName) {\\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\\n          return parent[propertyName];\\n        }\\n        return undefined\\n    }\\n    '.trim();\n  },\n\n  // [blockValue]\n  //\n  // On stack, before: hash, inverse, program, value\n  // On stack, after: return value of blockHelperMissing\n  //\n  // The purpose of this opcode is to take a block of the form\n  // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and\n  // replace it on the stack with the result of properly\n  // invoking blockHelperMissing.\n  blockValue: function blockValue(name) {\n    var blockHelperMissing = this.aliasable('container.hooks.blockHelperMissing'),\n        params = [this.contextName(0)];\n    this.setupHelperArgs(name, 0, params);\n\n    var blockName = this.popStack();\n    params.splice(1, 0, blockName);\n\n    this.push(this.source.functionCall(blockHelperMissing, 'call', params));\n  },\n\n  // [ambiguousBlockValue]\n  //\n  // On stack, before: hash, inverse, program, value\n  // Compiler value, before: lastHelper=value of last found helper, if any\n  // On stack, after, if no lastHelper: same as [blockValue]\n  // On stack, after, if lastHelper: value\n  ambiguousBlockValue: function ambiguousBlockValue() {\n    // We're being a bit cheeky and reusing the options value from the prior exec\n    var blockHelperMissing = this.aliasable('container.hooks.blockHelperMissing'),\n        params = [this.contextName(0)];\n    this.setupHelperArgs('', 0, params, true);\n\n    this.flushInline();\n\n    var current = this.topStack();\n    params.splice(1, 0, current);\n\n    this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);\n  },\n\n  // [appendContent]\n  //\n  // On stack, before: ...\n  // On stack, after: ...\n  //\n  // Appends the string value of `content` to the current buffer\n  appendContent: function appendContent(content) {\n    if (this.pendingContent) {\n      content = this.pendingContent + content;\n    } else {\n      this.pendingLocation = this.source.currentLocation;\n    }\n\n    this.pendingContent = content;\n  },\n\n  // [append]\n  //\n  // On stack, before: value, ...\n  // On stack, after: ...\n  //\n  // Coerces `value` to a String and appends it to the current buffer.\n  //\n  // If `value` is truthy, or 0, it is coerced into a string and appended\n  // Otherwise, the empty string is appended\n  append: function append() {\n    if (this.isInline()) {\n      this.replaceStack(function (current) {\n        return [' != null ? ', current, ' : \"\"'];\n      });\n\n      this.pushSource(this.appendToBuffer(this.popStack()));\n    } else {\n      var local = this.popStack();\n      this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);\n      if (this.environment.isSimple) {\n        this.pushSource(['else { ', this.appendToBuffer(\"''\", undefined, true), ' }']);\n      }\n    }\n  },\n\n  // [appendEscaped]\n  //\n  // On stack, before: value, ...\n  // On stack, after: ...\n  //\n  // Escape `value` and append it to the buffer\n  appendEscaped: function appendEscaped() {\n    this.pushSource(this.appendToBuffer([this.aliasable('container.escapeExpression'), '(', this.popStack(), ')']));\n  },\n\n  // [getContext]\n  //\n  // On stack, before: ...\n  // On stack, after: ...\n  // Compiler value, after: lastContext=depth\n  //\n  // Set the value of the `lastContext` compiler value to the depth\n  getContext: function getContext(depth) {\n    this.lastContext = depth;\n  },\n\n  // [pushContext]\n  //\n  // On stack, before: ...\n  // On stack, after: currentContext, ...\n  //\n  // Pushes the value of the current context onto the stack.\n  pushContext: function pushContext() {\n    this.pushStackLiteral(this.contextName(this.lastContext));\n  },\n\n  // [lookupOnContext]\n  //\n  // On stack, before: ...\n  // On stack, after: currentContext[name], ...\n  //\n  // Looks up the value of `name` on the current context and pushes\n  // it onto the stack.\n  lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {\n    var i = 0;\n\n    if (!scoped && this.options.compat && !this.lastContext) {\n      // The depthed query is expected to handle the undefined logic for the root level that\n      // is implemented below, so we evaluate that directly in compat mode\n      this.push(this.depthedLookup(parts[i++]));\n    } else {\n      this.pushContext();\n    }\n\n    this.resolvePath('context', parts, i, falsy, strict);\n  },\n\n  // [lookupBlockParam]\n  //\n  // On stack, before: ...\n  // On stack, after: blockParam[name], ...\n  //\n  // Looks up the value of `parts` on the given block param and pushes\n  // it onto the stack.\n  lookupBlockParam: function lookupBlockParam(blockParamId, parts) {\n    this.useBlockParams = true;\n\n    this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);\n    this.resolvePath('context', parts, 1);\n  },\n\n  // [lookupData]\n  //\n  // On stack, before: ...\n  // On stack, after: data, ...\n  //\n  // Push the data lookup operator\n  lookupData: function lookupData(depth, parts, strict) {\n    if (!depth) {\n      this.pushStackLiteral('data');\n    } else {\n      this.pushStackLiteral('container.data(data, ' + depth + ')');\n    }\n\n    this.resolvePath('data', parts, 0, true, strict);\n  },\n\n  resolvePath: function resolvePath(type, parts, i, falsy, strict) {\n    // istanbul ignore next\n\n    var _this2 = this;\n\n    if (this.options.strict || this.options.assumeObjects) {\n      this.push(strictLookup(this.options.strict && strict, this, parts, i, type));\n      return;\n    }\n\n    var len = parts.length;\n    for (; i < len; i++) {\n      /* eslint-disable no-loop-func */\n      this.replaceStack(function (current) {\n        var lookup = _this2.nameLookup(current, parts[i], type);\n        // We want to ensure that zero and false are handled properly if the context (falsy flag)\n        // needs to have the special handling for these values.\n        if (!falsy) {\n          return [' != null ? ', lookup, ' : ', current];\n        } else {\n          // Otherwise we can use generic falsy handling\n          return [' && ', lookup];\n        }\n      });\n      /* eslint-enable no-loop-func */\n    }\n  },\n\n  // [resolvePossibleLambda]\n  //\n  // On stack, before: value, ...\n  // On stack, after: resolved value, ...\n  //\n  // If the `value` is a lambda, replace it on the stack by\n  // the return value of the lambda\n  resolvePossibleLambda: function resolvePossibleLambda() {\n    this.push([this.aliasable('container.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);\n  },\n\n  // [pushStringParam]\n  //\n  // On stack, before: ...\n  // On stack, after: string, currentContext, ...\n  //\n  // This opcode is designed for use in string mode, which\n  // provides the string value of a parameter along with its\n  // depth rather than resolving it immediately.\n  pushStringParam: function pushStringParam(string, type) {\n    this.pushContext();\n    this.pushString(type);\n\n    // If it's a subexpression, the string result\n    // will be pushed after this opcode.\n    if (type !== 'SubExpression') {\n      if (typeof string === 'string') {\n        this.pushString(string);\n      } else {\n        this.pushStackLiteral(string);\n      }\n    }\n  },\n\n  emptyHash: function emptyHash(omitEmpty) {\n    if (this.trackIds) {\n      this.push('{}'); // hashIds\n    }\n    if (this.stringParams) {\n      this.push('{}'); // hashContexts\n      this.push('{}'); // hashTypes\n    }\n    this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');\n  },\n  pushHash: function pushHash() {\n    if (this.hash) {\n      this.hashes.push(this.hash);\n    }\n    this.hash = { values: {}, types: [], contexts: [], ids: [] };\n  },\n  popHash: function popHash() {\n    var hash = this.hash;\n    this.hash = this.hashes.pop();\n\n    if (this.trackIds) {\n      this.push(this.objectLiteral(hash.ids));\n    }\n    if (this.stringParams) {\n      this.push(this.objectLiteral(hash.contexts));\n      this.push(this.objectLiteral(hash.types));\n    }\n\n    this.push(this.objectLiteral(hash.values));\n  },\n\n  // [pushString]\n  //\n  // On stack, before: ...\n  // On stack, after: quotedString(string), ...\n  //\n  // Push a quoted version of `string` onto the stack\n  pushString: function pushString(string) {\n    this.pushStackLiteral(this.quotedString(string));\n  },\n\n  // [pushLiteral]\n  //\n  // On stack, before: ...\n  // On stack, after: value, ...\n  //\n  // Pushes a value onto the stack. This operation prevents\n  // the compiler from creating a temporary variable to hold\n  // it.\n  pushLiteral: function pushLiteral(value) {\n    this.pushStackLiteral(value);\n  },\n\n  // [pushProgram]\n  //\n  // On stack, before: ...\n  // On stack, after: program(guid), ...\n  //\n  // Push a program expression onto the stack. This takes\n  // a compile-time guid and converts it into a runtime-accessible\n  // expression.\n  pushProgram: function pushProgram(guid) {\n    if (guid != null) {\n      this.pushStackLiteral(this.programExpression(guid));\n    } else {\n      this.pushStackLiteral(null);\n    }\n  },\n\n  // [registerDecorator]\n  //\n  // On stack, before: hash, program, params..., ...\n  // On stack, after: ...\n  //\n  // Pops off the decorator's parameters, invokes the decorator,\n  // and inserts the decorator into the decorators list.\n  registerDecorator: function registerDecorator(paramSize, name) {\n    var foundDecorator = this.nameLookup('decorators', name, 'decorator'),\n        options = this.setupHelperArgs(name, paramSize);\n\n    this.decorators.push(['fn = ', this.decorators.functionCall(foundDecorator, '', ['fn', 'props', 'container', options]), ' || fn;']);\n  },\n\n  // [invokeHelper]\n  //\n  // On stack, before: hash, inverse, program, params..., ...\n  // On stack, after: result of helper invocation\n  //\n  // Pops off the helper's parameters, invokes the helper,\n  // and pushes the helper's return value onto the stack.\n  //\n  // If the helper is not found, `helperMissing` is called.\n  invokeHelper: function invokeHelper(paramSize, name, isSimple) {\n    var nonHelper = this.popStack(),\n        helper = this.setupHelper(paramSize, name);\n\n    var possibleFunctionCalls = [];\n\n    if (isSimple) {\n      // direct call to helper\n      possibleFunctionCalls.push(helper.name);\n    }\n    // call a function from the input object\n    possibleFunctionCalls.push(nonHelper);\n    if (!this.options.strict) {\n      possibleFunctionCalls.push(this.aliasable('container.hooks.helperMissing'));\n    }\n\n    var functionLookupCode = ['(', this.itemsSeparatedBy(possibleFunctionCalls, '||'), ')'];\n    var functionCall = this.source.functionCall(functionLookupCode, 'call', helper.callParams);\n    this.push(functionCall);\n  },\n\n  itemsSeparatedBy: function itemsSeparatedBy(items, separator) {\n    var result = [];\n    result.push(items[0]);\n    for (var i = 1; i < items.length; i++) {\n      result.push(separator, items[i]);\n    }\n    return result;\n  },\n  // [invokeKnownHelper]\n  //\n  // On stack, before: hash, inverse, program, params..., ...\n  // On stack, after: result of helper invocation\n  //\n  // This operation is used when the helper is known to exist,\n  // so a `helperMissing` fallback is not required.\n  invokeKnownHelper: function invokeKnownHelper(paramSize, name) {\n    var helper = this.setupHelper(paramSize, name);\n    this.push(this.source.functionCall(helper.name, 'call', helper.callParams));\n  },\n\n  // [invokeAmbiguous]\n  //\n  // On stack, before: hash, inverse, program, params..., ...\n  // On stack, after: result of disambiguation\n  //\n  // This operation is used when an expression like `{{foo}}`\n  // is provided, but we don't know at compile-time whether it\n  // is a helper or a path.\n  //\n  // This operation emits more code than the other options,\n  // and can be avoided by passing the `knownHelpers` and\n  // `knownHelpersOnly` flags at compile-time.\n  invokeAmbiguous: function invokeAmbiguous(name, helperCall) {\n    this.useRegister('helper');\n\n    var nonHelper = this.popStack();\n\n    this.emptyHash();\n    var helper = this.setupHelper(0, name, helperCall);\n\n    var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');\n\n    var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];\n    if (!this.options.strict) {\n      lookup[0] = '(helper = ';\n      lookup.push(' != null ? helper : ', this.aliasable('container.hooks.helperMissing'));\n    }\n\n    this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('\"function\"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);\n  },\n\n  // [invokePartial]\n  //\n  // On stack, before: context, ...\n  // On stack after: result of partial invocation\n  //\n  // This operation pops off a context, invokes a partial with that context,\n  // and pushes the result of the invocation back.\n  invokePartial: function invokePartial(isDynamic, name, indent) {\n    var params = [],\n        options = this.setupParams(name, 1, params);\n\n    if (isDynamic) {\n      name = this.popStack();\n      delete options.name;\n    }\n\n    if (indent) {\n      options.indent = JSON.stringify(indent);\n    }\n    options.helpers = 'helpers';\n    options.partials = 'partials';\n    options.decorators = 'container.decorators';\n\n    if (!isDynamic) {\n      params.unshift(this.nameLookup('partials', name, 'partial'));\n    } else {\n      params.unshift(name);\n    }\n\n    if (this.options.compat) {\n      options.depths = 'depths';\n    }\n    options = this.objectLiteral(options);\n    params.push(options);\n\n    this.push(this.source.functionCall('container.invokePartial', '', params));\n  },\n\n  // [assignToHash]\n  //\n  // On stack, before: value, ..., hash, ...\n  // On stack, after: ..., hash, ...\n  //\n  // Pops a value off the stack and assigns it to the current hash\n  assignToHash: function assignToHash(key) {\n    var value = this.popStack(),\n        context = undefined,\n        type = undefined,\n        id = undefined;\n\n    if (this.trackIds) {\n      id = this.popStack();\n    }\n    if (this.stringParams) {\n      type = this.popStack();\n      context = this.popStack();\n    }\n\n    var hash = this.hash;\n    if (context) {\n      hash.contexts[key] = context;\n    }\n    if (type) {\n      hash.types[key] = type;\n    }\n    if (id) {\n      hash.ids[key] = id;\n    }\n    hash.values[key] = value;\n  },\n\n  pushId: function pushId(type, name, child) {\n    if (type === 'BlockParam') {\n      this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));\n    } else if (type === 'PathExpression') {\n      this.pushString(name);\n    } else if (type === 'SubExpression') {\n      this.pushStackLiteral('true');\n    } else {\n      this.pushStackLiteral('null');\n    }\n  },\n\n  // HELPERS\n\n  compiler: JavaScriptCompiler,\n\n  compileChildren: function compileChildren(environment, options) {\n    var children = environment.children,\n        child = undefined,\n        compiler = undefined;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      child = children[i];\n      compiler = new this.compiler(); // eslint-disable-line new-cap\n\n      var existing = this.matchExistingProgram(child);\n\n      if (existing == null) {\n        this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children\n        var index = this.context.programs.length;\n        child.index = index;\n        child.name = 'program' + index;\n        this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);\n        this.context.decorators[index] = compiler.decorators;\n        this.context.environments[index] = child;\n\n        this.useDepths = this.useDepths || compiler.useDepths;\n        this.useBlockParams = this.useBlockParams || compiler.useBlockParams;\n        child.useDepths = this.useDepths;\n        child.useBlockParams = this.useBlockParams;\n      } else {\n        child.index = existing.index;\n        child.name = 'program' + existing.index;\n\n        this.useDepths = this.useDepths || existing.useDepths;\n        this.useBlockParams = this.useBlockParams || existing.useBlockParams;\n      }\n    }\n  },\n  matchExistingProgram: function matchExistingProgram(child) {\n    for (var i = 0, len = this.context.environments.length; i < len; i++) {\n      var environment = this.context.environments[i];\n      if (environment && environment.equals(child)) {\n        return environment;\n      }\n    }\n  },\n\n  programExpression: function programExpression(guid) {\n    var child = this.environment.children[guid],\n        programParams = [child.index, 'data', child.blockParams];\n\n    if (this.useBlockParams || this.useDepths) {\n      programParams.push('blockParams');\n    }\n    if (this.useDepths) {\n      programParams.push('depths');\n    }\n\n    return 'container.program(' + programParams.join(', ') + ')';\n  },\n\n  useRegister: function useRegister(name) {\n    if (!this.registers[name]) {\n      this.registers[name] = true;\n      this.registers.list.push(name);\n    }\n  },\n\n  push: function push(expr) {\n    if (!(expr instanceof Literal)) {\n      expr = this.source.wrap(expr);\n    }\n\n    this.inlineStack.push(expr);\n    return expr;\n  },\n\n  pushStackLiteral: function pushStackLiteral(item) {\n    this.push(new Literal(item));\n  },\n\n  pushSource: function pushSource(source) {\n    if (this.pendingContent) {\n      this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));\n      this.pendingContent = undefined;\n    }\n\n    if (source) {\n      this.source.push(source);\n    }\n  },\n\n  replaceStack: function replaceStack(callback) {\n    var prefix = ['('],\n        stack = undefined,\n        createdStack = undefined,\n        usedLiteral = undefined;\n\n    /* istanbul ignore next */\n    if (!this.isInline()) {\n      throw new _exception2['default']('replaceStack on non-inline');\n    }\n\n    // We want to merge the inline statement into the replacement statement via ','\n    var top = this.popStack(true);\n\n    if (top instanceof Literal) {\n      // Literals do not need to be inlined\n      stack = [top.value];\n      prefix = ['(', stack];\n      usedLiteral = true;\n    } else {\n      // Get or create the current stack name for use by the inline\n      createdStack = true;\n      var _name = this.incrStack();\n\n      prefix = ['((', this.push(_name), ' = ', top, ')'];\n      stack = this.topStack();\n    }\n\n    var item = callback.call(this, stack);\n\n    if (!usedLiteral) {\n      this.popStack();\n    }\n    if (createdStack) {\n      this.stackSlot--;\n    }\n    this.push(prefix.concat(item, ')'));\n  },\n\n  incrStack: function incrStack() {\n    this.stackSlot++;\n    if (this.stackSlot > this.stackVars.length) {\n      this.stackVars.push('stack' + this.stackSlot);\n    }\n    return this.topStackName();\n  },\n  topStackName: function topStackName() {\n    return 'stack' + this.stackSlot;\n  },\n  flushInline: function flushInline() {\n    var inlineStack = this.inlineStack;\n    this.inlineStack = [];\n    for (var i = 0, len = inlineStack.length; i < len; i++) {\n      var entry = inlineStack[i];\n      /* istanbul ignore if */\n      if (entry instanceof Literal) {\n        this.compileStack.push(entry);\n      } else {\n        var stack = this.incrStack();\n        this.pushSource([stack, ' = ', entry, ';']);\n        this.compileStack.push(stack);\n      }\n    }\n  },\n  isInline: function isInline() {\n    return this.inlineStack.length;\n  },\n\n  popStack: function popStack(wrapped) {\n    var inline = this.isInline(),\n        item = (inline ? this.inlineStack : this.compileStack).pop();\n\n    if (!wrapped && item instanceof Literal) {\n      return item.value;\n    } else {\n      if (!inline) {\n        /* istanbul ignore next */\n        if (!this.stackSlot) {\n          throw new _exception2['default']('Invalid stack pop');\n        }\n        this.stackSlot--;\n      }\n      return item;\n    }\n  },\n\n  topStack: function topStack() {\n    var stack = this.isInline() ? this.inlineStack : this.compileStack,\n        item = stack[stack.length - 1];\n\n    /* istanbul ignore if */\n    if (item instanceof Literal) {\n      return item.value;\n    } else {\n      return item;\n    }\n  },\n\n  contextName: function contextName(context) {\n    if (this.useDepths && context) {\n      return 'depths[' + context + ']';\n    } else {\n      return 'depth' + context;\n    }\n  },\n\n  quotedString: function quotedString(str) {\n    return this.source.quotedString(str);\n  },\n\n  objectLiteral: function objectLiteral(obj) {\n    return this.source.objectLiteral(obj);\n  },\n\n  aliasable: function aliasable(name) {\n    var ret = this.aliases[name];\n    if (ret) {\n      ret.referenceCount++;\n      return ret;\n    }\n\n    ret = this.aliases[name] = this.source.wrap(name);\n    ret.aliasable = true;\n    ret.referenceCount = 1;\n\n    return ret;\n  },\n\n  setupHelper: function setupHelper(paramSize, name, blockHelper) {\n    var params = [],\n        paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);\n    var foundHelper = this.nameLookup('helpers', name, 'helper'),\n        callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : (container.nullContext || {})');\n\n    return {\n      params: params,\n      paramsInit: paramsInit,\n      name: foundHelper,\n      callParams: [callContext].concat(params)\n    };\n  },\n\n  setupParams: function setupParams(helper, paramSize, params) {\n    var options = {},\n        contexts = [],\n        types = [],\n        ids = [],\n        objectArgs = !params,\n        param = undefined;\n\n    if (objectArgs) {\n      params = [];\n    }\n\n    options.name = this.quotedString(helper);\n    options.hash = this.popStack();\n\n    if (this.trackIds) {\n      options.hashIds = this.popStack();\n    }\n    if (this.stringParams) {\n      options.hashTypes = this.popStack();\n      options.hashContexts = this.popStack();\n    }\n\n    var inverse = this.popStack(),\n        program = this.popStack();\n\n    // Avoid setting fn and inverse if neither are set. This allows\n    // helpers to do a check for `if (options.fn)`\n    if (program || inverse) {\n      options.fn = program || 'container.noop';\n      options.inverse = inverse || 'container.noop';\n    }\n\n    // The parameters go on to the stack in order (making sure that they are evaluated in order)\n    // so we need to pop them off the stack in reverse order\n    var i = paramSize;\n    while (i--) {\n      param = this.popStack();\n      params[i] = param;\n\n      if (this.trackIds) {\n        ids[i] = this.popStack();\n      }\n      if (this.stringParams) {\n        types[i] = this.popStack();\n        contexts[i] = this.popStack();\n      }\n    }\n\n    if (objectArgs) {\n      options.args = this.source.generateArray(params);\n    }\n\n    if (this.trackIds) {\n      options.ids = this.source.generateArray(ids);\n    }\n    if (this.stringParams) {\n      options.types = this.source.generateArray(types);\n      options.contexts = this.source.generateArray(contexts);\n    }\n\n    if (this.options.data) {\n      options.data = 'data';\n    }\n    if (this.useBlockParams) {\n      options.blockParams = 'blockParams';\n    }\n    return options;\n  },\n\n  setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {\n    var options = this.setupParams(helper, paramSize, params);\n    options.loc = JSON.stringify(this.source.currentLocation);\n    options = this.objectLiteral(options);\n    if (useRegister) {\n      this.useRegister('options');\n      params.push('options');\n      return ['options=', options];\n    } else if (params) {\n      params.push(options);\n      return '';\n    } else {\n      return options;\n    }\n  }\n};\n\n(function () {\n  var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');\n\n  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};\n\n  for (var i = 0, l = reservedWords.length; i < l; i++) {\n    compilerWords[reservedWords[i]] = true;\n  }\n})();\n\n/**\n * @deprecated May be removed in the next major version\n */\nJavaScriptCompiler.isValidJavaScriptVariableName = function (name) {\n  return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);\n};\n\nfunction strictLookup(requireTerminal, compiler, parts, i, type) {\n  var stack = compiler.popStack(),\n      len = parts.length;\n  if (requireTerminal) {\n    len--;\n  }\n\n  for (; i < len; i++) {\n    stack = compiler.nameLookup(stack, parts[i], type);\n  }\n\n  if (requireTerminal) {\n    return [compiler.aliasable('container.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ', ', JSON.stringify(compiler.source.currentLocation), ' )'];\n  } else {\n    return stack;\n  }\n}\n\nexports[\"default\"] = JavaScriptCompiler;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/compiler/javascript-compiler.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/compiler/parser.js":
/*!************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/compiler/parser.js ***!
  \************************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("// File ignored in coverage tests via setting in .istanbul.yml\n/* Jison generated parser */\n\n\nexports.__esModule = true;\nvar handlebars = (function () {\n    var parser = { trace: function trace() {},\n        yy: {},\n        symbols_: { \"error\": 2, \"root\": 3, \"program\": 4, \"EOF\": 5, \"program_repetition0\": 6, \"statement\": 7, \"mustache\": 8, \"block\": 9, \"rawBlock\": 10, \"partial\": 11, \"partialBlock\": 12, \"content\": 13, \"COMMENT\": 14, \"CONTENT\": 15, \"openRawBlock\": 16, \"rawBlock_repetition0\": 17, \"END_RAW_BLOCK\": 18, \"OPEN_RAW_BLOCK\": 19, \"helperName\": 20, \"openRawBlock_repetition0\": 21, \"openRawBlock_option0\": 22, \"CLOSE_RAW_BLOCK\": 23, \"openBlock\": 24, \"block_option0\": 25, \"closeBlock\": 26, \"openInverse\": 27, \"block_option1\": 28, \"OPEN_BLOCK\": 29, \"openBlock_repetition0\": 30, \"openBlock_option0\": 31, \"openBlock_option1\": 32, \"CLOSE\": 33, \"OPEN_INVERSE\": 34, \"openInverse_repetition0\": 35, \"openInverse_option0\": 36, \"openInverse_option1\": 37, \"openInverseChain\": 38, \"OPEN_INVERSE_CHAIN\": 39, \"openInverseChain_repetition0\": 40, \"openInverseChain_option0\": 41, \"openInverseChain_option1\": 42, \"inverseAndProgram\": 43, \"INVERSE\": 44, \"inverseChain\": 45, \"inverseChain_option0\": 46, \"OPEN_ENDBLOCK\": 47, \"OPEN\": 48, \"mustache_repetition0\": 49, \"mustache_option0\": 50, \"OPEN_UNESCAPED\": 51, \"mustache_repetition1\": 52, \"mustache_option1\": 53, \"CLOSE_UNESCAPED\": 54, \"OPEN_PARTIAL\": 55, \"partialName\": 56, \"partial_repetition0\": 57, \"partial_option0\": 58, \"openPartialBlock\": 59, \"OPEN_PARTIAL_BLOCK\": 60, \"openPartialBlock_repetition0\": 61, \"openPartialBlock_option0\": 62, \"param\": 63, \"sexpr\": 64, \"OPEN_SEXPR\": 65, \"sexpr_repetition0\": 66, \"sexpr_option0\": 67, \"CLOSE_SEXPR\": 68, \"hash\": 69, \"hash_repetition_plus0\": 70, \"hashSegment\": 71, \"ID\": 72, \"EQUALS\": 73, \"blockParams\": 74, \"OPEN_BLOCK_PARAMS\": 75, \"blockParams_repetition_plus0\": 76, \"CLOSE_BLOCK_PARAMS\": 77, \"path\": 78, \"dataName\": 79, \"STRING\": 80, \"NUMBER\": 81, \"BOOLEAN\": 82, \"UNDEFINED\": 83, \"NULL\": 84, \"DATA\": 85, \"pathSegments\": 86, \"SEP\": 87, \"$accept\": 0, \"$end\": 1 },\n        terminals_: { 2: \"error\", 5: \"EOF\", 14: \"COMMENT\", 15: \"CONTENT\", 18: \"END_RAW_BLOCK\", 19: \"OPEN_RAW_BLOCK\", 23: \"CLOSE_RAW_BLOCK\", 29: \"OPEN_BLOCK\", 33: \"CLOSE\", 34: \"OPEN_INVERSE\", 39: \"OPEN_INVERSE_CHAIN\", 44: \"INVERSE\", 47: \"OPEN_ENDBLOCK\", 48: \"OPEN\", 51: \"OPEN_UNESCAPED\", 54: \"CLOSE_UNESCAPED\", 55: \"OPEN_PARTIAL\", 60: \"OPEN_PARTIAL_BLOCK\", 65: \"OPEN_SEXPR\", 68: \"CLOSE_SEXPR\", 72: \"ID\", 73: \"EQUALS\", 75: \"OPEN_BLOCK_PARAMS\", 77: \"CLOSE_BLOCK_PARAMS\", 80: \"STRING\", 81: \"NUMBER\", 82: \"BOOLEAN\", 83: \"UNDEFINED\", 84: \"NULL\", 85: \"DATA\", 87: \"SEP\" },\n        productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 0], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],\n        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n\n            var $0 = $$.length - 1;\n            switch (yystate) {\n                case 1:\n                    return $$[$0 - 1];\n                    break;\n                case 2:\n                    this.$ = yy.prepareProgram($$[$0]);\n                    break;\n                case 3:\n                    this.$ = $$[$0];\n                    break;\n                case 4:\n                    this.$ = $$[$0];\n                    break;\n                case 5:\n                    this.$ = $$[$0];\n                    break;\n                case 6:\n                    this.$ = $$[$0];\n                    break;\n                case 7:\n                    this.$ = $$[$0];\n                    break;\n                case 8:\n                    this.$ = $$[$0];\n                    break;\n                case 9:\n                    this.$ = {\n                        type: 'CommentStatement',\n                        value: yy.stripComment($$[$0]),\n                        strip: yy.stripFlags($$[$0], $$[$0]),\n                        loc: yy.locInfo(this._$)\n                    };\n\n                    break;\n                case 10:\n                    this.$ = {\n                        type: 'ContentStatement',\n                        original: $$[$0],\n                        value: $$[$0],\n                        loc: yy.locInfo(this._$)\n                    };\n\n                    break;\n                case 11:\n                    this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);\n                    break;\n                case 12:\n                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };\n                    break;\n                case 13:\n                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);\n                    break;\n                case 14:\n                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);\n                    break;\n                case 15:\n                    this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };\n                    break;\n                case 16:\n                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };\n                    break;\n                case 17:\n                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };\n                    break;\n                case 18:\n                    this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };\n                    break;\n                case 19:\n                    var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),\n                        program = yy.prepareProgram([inverse], $$[$0 - 1].loc);\n                    program.chained = true;\n\n                    this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };\n\n                    break;\n                case 20:\n                    this.$ = $$[$0];\n                    break;\n                case 21:\n                    this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };\n                    break;\n                case 22:\n                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);\n                    break;\n                case 23:\n                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);\n                    break;\n                case 24:\n                    this.$ = {\n                        type: 'PartialStatement',\n                        name: $$[$0 - 3],\n                        params: $$[$0 - 2],\n                        hash: $$[$0 - 1],\n                        indent: '',\n                        strip: yy.stripFlags($$[$0 - 4], $$[$0]),\n                        loc: yy.locInfo(this._$)\n                    };\n\n                    break;\n                case 25:\n                    this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);\n                    break;\n                case 26:\n                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };\n                    break;\n                case 27:\n                    this.$ = $$[$0];\n                    break;\n                case 28:\n                    this.$ = $$[$0];\n                    break;\n                case 29:\n                    this.$ = {\n                        type: 'SubExpression',\n                        path: $$[$0 - 3],\n                        params: $$[$0 - 2],\n                        hash: $$[$0 - 1],\n                        loc: yy.locInfo(this._$)\n                    };\n\n                    break;\n                case 30:\n                    this.$ = { type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$) };\n                    break;\n                case 31:\n                    this.$ = { type: 'HashPair', key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };\n                    break;\n                case 32:\n                    this.$ = yy.id($$[$0 - 1]);\n                    break;\n                case 33:\n                    this.$ = $$[$0];\n                    break;\n                case 34:\n                    this.$ = $$[$0];\n                    break;\n                case 35:\n                    this.$ = { type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };\n                    break;\n                case 36:\n                    this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };\n                    break;\n                case 37:\n                    this.$ = { type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$) };\n                    break;\n                case 38:\n                    this.$ = { type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$) };\n                    break;\n                case 39:\n                    this.$ = { type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$) };\n                    break;\n                case 40:\n                    this.$ = $$[$0];\n                    break;\n                case 41:\n                    this.$ = $$[$0];\n                    break;\n                case 42:\n                    this.$ = yy.preparePath(true, $$[$0], this._$);\n                    break;\n                case 43:\n                    this.$ = yy.preparePath(false, $$[$0], this._$);\n                    break;\n                case 44:\n                    $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });this.$ = $$[$0 - 2];\n                    break;\n                case 45:\n                    this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];\n                    break;\n                case 46:\n                    this.$ = [];\n                    break;\n                case 47:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 48:\n                    this.$ = [];\n                    break;\n                case 49:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 50:\n                    this.$ = [];\n                    break;\n                case 51:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 58:\n                    this.$ = [];\n                    break;\n                case 59:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 64:\n                    this.$ = [];\n                    break;\n                case 65:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 70:\n                    this.$ = [];\n                    break;\n                case 71:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 78:\n                    this.$ = [];\n                    break;\n                case 79:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 82:\n                    this.$ = [];\n                    break;\n                case 83:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 86:\n                    this.$ = [];\n                    break;\n                case 87:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 90:\n                    this.$ = [];\n                    break;\n                case 91:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 94:\n                    this.$ = [];\n                    break;\n                case 95:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 98:\n                    this.$ = [$$[$0]];\n                    break;\n                case 99:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 100:\n                    this.$ = [$$[$0]];\n                    break;\n                case 101:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n            }\n        },\n        table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 15: [2, 48], 17: 39, 18: [2, 48] }, { 20: 41, 56: 40, 64: 42, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 44, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 45, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 41, 56: 48, 64: 42, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 49, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 50] }, { 72: [1, 35], 86: 51 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 52, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 53, 38: 55, 39: [1, 57], 43: 56, 44: [1, 58], 45: 54, 47: [2, 54] }, { 28: 59, 43: 60, 44: [1, 58], 47: [2, 56] }, { 13: 62, 15: [1, 20], 18: [1, 61] }, { 33: [2, 86], 57: 63, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 64, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 65, 47: [1, 66] }, { 30: 67, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 68, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 69, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 70, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 74, 33: [2, 80], 50: 71, 63: 72, 64: 75, 65: [1, 43], 69: 73, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 79] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 50] }, { 20: 74, 53: 80, 54: [2, 84], 63: 81, 64: 75, 65: [1, 43], 69: 82, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 83, 47: [1, 66] }, { 47: [2, 55] }, { 4: 84, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 85, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 86, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 87, 47: [1, 66] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 74, 33: [2, 88], 58: 88, 63: 89, 64: 75, 65: [1, 43], 69: 90, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 91, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 92, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 31: 93, 33: [2, 60], 63: 94, 64: 75, 65: [1, 43], 69: 95, 70: 76, 71: 77, 72: [1, 78], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 33: [2, 66], 36: 96, 63: 97, 64: 75, 65: [1, 43], 69: 98, 70: 76, 71: 77, 72: [1, 78], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 22: 99, 23: [2, 52], 63: 100, 64: 75, 65: [1, 43], 69: 101, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 33: [2, 92], 62: 102, 63: 103, 64: 75, 65: [1, 43], 69: 104, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 105] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 106, 72: [1, 107], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 108], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 109] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 55, 39: [1, 57], 43: 56, 44: [1, 58], 45: 111, 46: 110, 47: [2, 76] }, { 33: [2, 70], 40: 112, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 113] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 74, 63: 115, 64: 75, 65: [1, 43], 67: 114, 68: [2, 96], 69: 116, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 117] }, { 32: 118, 33: [2, 62], 74: 119, 75: [1, 120] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 121, 74: 122, 75: [1, 120] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 123] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 124] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 108] }, { 20: 74, 63: 125, 64: 75, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 74, 33: [2, 72], 41: 126, 63: 127, 64: 75, 65: [1, 43], 69: 128, 70: 76, 71: 77, 72: [1, 78], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 129] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 130] }, { 33: [2, 63] }, { 72: [1, 132], 76: 131 }, { 33: [1, 133] }, { 33: [2, 69] }, { 15: [2, 12], 18: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 134, 74: 135, 75: [1, 120] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 137], 77: [1, 136] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 138] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],\n        defaultActions: { 4: [2, 1], 54: [2, 55], 56: [2, 20], 60: [2, 57], 73: [2, 81], 82: [2, 85], 86: [2, 18], 90: [2, 89], 101: [2, 53], 104: [2, 93], 110: [2, 19], 111: [2, 77], 116: [2, 97], 119: [2, 63], 122: [2, 69], 135: [2, 75], 136: [2, 32] },\n        parseError: function parseError(str, hash) {\n            throw new Error(str);\n        },\n        parse: function parse(input) {\n            var self = this,\n                stack = [0],\n                vstack = [null],\n                lstack = [],\n                table = this.table,\n                yytext = \"\",\n                yylineno = 0,\n                yyleng = 0,\n                recovering = 0,\n                TERROR = 2,\n                EOF = 1;\n            this.lexer.setInput(input);\n            this.lexer.yy = this.yy;\n            this.yy.lexer = this.lexer;\n            this.yy.parser = this;\n            if (typeof this.lexer.yylloc == \"undefined\") this.lexer.yylloc = {};\n            var yyloc = this.lexer.yylloc;\n            lstack.push(yyloc);\n            var ranges = this.lexer.options && this.lexer.options.ranges;\n            if (typeof this.yy.parseError === \"function\") this.parseError = this.yy.parseError;\n            function popStack(n) {\n                stack.length = stack.length - 2 * n;\n                vstack.length = vstack.length - n;\n                lstack.length = lstack.length - n;\n            }\n            function lex() {\n                var token;\n                token = self.lexer.lex() || 1;\n                if (typeof token !== \"number\") {\n                    token = self.symbols_[token] || token;\n                }\n                return token;\n            }\n            var symbol,\n                preErrorSymbol,\n                state,\n                action,\n                a,\n                r,\n                yyval = {},\n                p,\n                len,\n                newState,\n                expected;\n            while (true) {\n                state = stack[stack.length - 1];\n                if (this.defaultActions[state]) {\n                    action = this.defaultActions[state];\n                } else {\n                    if (symbol === null || typeof symbol == \"undefined\") {\n                        symbol = lex();\n                    }\n                    action = table[state] && table[state][symbol];\n                }\n                if (typeof action === \"undefined\" || !action.length || !action[0]) {\n                    var errStr = \"\";\n                    if (!recovering) {\n                        expected = [];\n                        for (p in table[state]) if (this.terminals_[p] && p > 2) {\n                            expected.push(\"'\" + this.terminals_[p] + \"'\");\n                        }\n                        if (this.lexer.showPosition) {\n                            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + this.lexer.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n                        } else {\n                            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == 1 ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n                        }\n                        this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });\n                    }\n                }\n                if (action[0] instanceof Array && action.length > 1) {\n                    throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n                }\n                switch (action[0]) {\n                    case 1:\n                        stack.push(symbol);\n                        vstack.push(this.lexer.yytext);\n                        lstack.push(this.lexer.yylloc);\n                        stack.push(action[1]);\n                        symbol = null;\n                        if (!preErrorSymbol) {\n                            yyleng = this.lexer.yyleng;\n                            yytext = this.lexer.yytext;\n                            yylineno = this.lexer.yylineno;\n                            yyloc = this.lexer.yylloc;\n                            if (recovering > 0) recovering--;\n                        } else {\n                            symbol = preErrorSymbol;\n                            preErrorSymbol = null;\n                        }\n                        break;\n                    case 2:\n                        len = this.productions_[action[1]][1];\n                        yyval.$ = vstack[vstack.length - len];\n                        yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };\n                        if (ranges) {\n                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n                        }\n                        r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);\n                        if (typeof r !== \"undefined\") {\n                            return r;\n                        }\n                        if (len) {\n                            stack = stack.slice(0, -1 * len * 2);\n                            vstack = vstack.slice(0, -1 * len);\n                            lstack = lstack.slice(0, -1 * len);\n                        }\n                        stack.push(this.productions_[action[1]][0]);\n                        vstack.push(yyval.$);\n                        lstack.push(yyval._$);\n                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n                        stack.push(newState);\n                        break;\n                    case 3:\n                        return true;\n                }\n            }\n            return true;\n        }\n    };\n    /* Jison generated lexer */\n    var lexer = (function () {\n        var lexer = { EOF: 1,\n            parseError: function parseError(str, hash) {\n                if (this.yy.parser) {\n                    this.yy.parser.parseError(str, hash);\n                } else {\n                    throw new Error(str);\n                }\n            },\n            setInput: function setInput(input) {\n                this._input = input;\n                this._more = this._less = this.done = false;\n                this.yylineno = this.yyleng = 0;\n                this.yytext = this.matched = this.match = '';\n                this.conditionStack = ['INITIAL'];\n                this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };\n                if (this.options.ranges) this.yylloc.range = [0, 0];\n                this.offset = 0;\n                return this;\n            },\n            input: function input() {\n                var ch = this._input[0];\n                this.yytext += ch;\n                this.yyleng++;\n                this.offset++;\n                this.match += ch;\n                this.matched += ch;\n                var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n                if (lines) {\n                    this.yylineno++;\n                    this.yylloc.last_line++;\n                } else {\n                    this.yylloc.last_column++;\n                }\n                if (this.options.ranges) this.yylloc.range[1]++;\n\n                this._input = this._input.slice(1);\n                return ch;\n            },\n            unput: function unput(ch) {\n                var len = ch.length;\n                var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n                this._input = ch + this._input;\n                this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);\n                //this.yyleng -= len;\n                this.offset -= len;\n                var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n                this.match = this.match.substr(0, this.match.length - 1);\n                this.matched = this.matched.substr(0, this.matched.length - 1);\n\n                if (lines.length - 1) this.yylineno -= lines.length - 1;\n                var r = this.yylloc.range;\n\n                this.yylloc = { first_line: this.yylloc.first_line,\n                    last_line: this.yylineno + 1,\n                    first_column: this.yylloc.first_column,\n                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n                };\n\n                if (this.options.ranges) {\n                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n                }\n                return this;\n            },\n            more: function more() {\n                this._more = true;\n                return this;\n            },\n            less: function less(n) {\n                this.unput(this.match.slice(n));\n            },\n            pastInput: function pastInput() {\n                var past = this.matched.substr(0, this.matched.length - this.match.length);\n                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, \"\");\n            },\n            upcomingInput: function upcomingInput() {\n                var next = this.match;\n                if (next.length < 20) {\n                    next += this._input.substr(0, 20 - next.length);\n                }\n                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n            },\n            showPosition: function showPosition() {\n                var pre = this.pastInput();\n                var c = new Array(pre.length + 1).join(\"-\");\n                return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n            },\n            next: function next() {\n                if (this.done) {\n                    return this.EOF;\n                }\n                if (!this._input) this.done = true;\n\n                var token, match, tempMatch, index, col, lines;\n                if (!this._more) {\n                    this.yytext = '';\n                    this.match = '';\n                }\n                var rules = this._currentRules();\n                for (var i = 0; i < rules.length; i++) {\n                    tempMatch = this._input.match(this.rules[rules[i]]);\n                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                        match = tempMatch;\n                        index = i;\n                        if (!this.options.flex) break;\n                    }\n                }\n                if (match) {\n                    lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n                    if (lines) this.yylineno += lines.length;\n                    this.yylloc = { first_line: this.yylloc.last_line,\n                        last_line: this.yylineno + 1,\n                        first_column: this.yylloc.last_column,\n                        last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length };\n                    this.yytext += match[0];\n                    this.match += match[0];\n                    this.matches = match;\n                    this.yyleng = this.yytext.length;\n                    if (this.options.ranges) {\n                        this.yylloc.range = [this.offset, this.offset += this.yyleng];\n                    }\n                    this._more = false;\n                    this._input = this._input.slice(match[0].length);\n                    this.matched += match[0];\n                    token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);\n                    if (this.done && this._input) this.done = false;\n                    if (token) return token;else return;\n                }\n                if (this._input === \"\") {\n                    return this.EOF;\n                } else {\n                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), { text: \"\", token: null, line: this.yylineno });\n                }\n            },\n            lex: function lex() {\n                var r = this.next();\n                if (typeof r !== 'undefined') {\n                    return r;\n                } else {\n                    return this.lex();\n                }\n            },\n            begin: function begin(condition) {\n                this.conditionStack.push(condition);\n            },\n            popState: function popState() {\n                return this.conditionStack.pop();\n            },\n            _currentRules: function _currentRules() {\n                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n            },\n            topState: function topState() {\n                return this.conditionStack[this.conditionStack.length - 2];\n            },\n            pushState: function begin(condition) {\n                this.begin(condition);\n            } };\n        lexer.options = {};\n        lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n\n            function strip(start, end) {\n                return yy_.yytext = yy_.yytext.substring(start, yy_.yyleng - end + start);\n            }\n\n            var YYSTATE = YY_START;\n            switch ($avoiding_name_collisions) {\n                case 0:\n                    if (yy_.yytext.slice(-2) === \"\\\\\\\\\") {\n                        strip(0, 1);\n                        this.begin(\"mu\");\n                    } else if (yy_.yytext.slice(-1) === \"\\\\\") {\n                        strip(0, 1);\n                        this.begin(\"emu\");\n                    } else {\n                        this.begin(\"mu\");\n                    }\n                    if (yy_.yytext) return 15;\n\n                    break;\n                case 1:\n                    return 15;\n                    break;\n                case 2:\n                    this.popState();\n                    return 15;\n\n                    break;\n                case 3:\n                    this.begin('raw');return 15;\n                    break;\n                case 4:\n                    this.popState();\n                    // Should be using `this.topState()` below, but it currently\n                    // returns the second top instead of the first top. Opened an\n                    // issue about it at https://github.com/zaach/jison/issues/291\n                    if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {\n                        return 15;\n                    } else {\n                        strip(5, 9);\n                        return 'END_RAW_BLOCK';\n                    }\n\n                    break;\n                case 5:\n                    return 15;\n                    break;\n                case 6:\n                    this.popState();\n                    return 14;\n\n                    break;\n                case 7:\n                    return 65;\n                    break;\n                case 8:\n                    return 68;\n                    break;\n                case 9:\n                    return 19;\n                    break;\n                case 10:\n                    this.popState();\n                    this.begin('raw');\n                    return 23;\n\n                    break;\n                case 11:\n                    return 55;\n                    break;\n                case 12:\n                    return 60;\n                    break;\n                case 13:\n                    return 29;\n                    break;\n                case 14:\n                    return 47;\n                    break;\n                case 15:\n                    this.popState();return 44;\n                    break;\n                case 16:\n                    this.popState();return 44;\n                    break;\n                case 17:\n                    return 34;\n                    break;\n                case 18:\n                    return 39;\n                    break;\n                case 19:\n                    return 51;\n                    break;\n                case 20:\n                    return 48;\n                    break;\n                case 21:\n                    this.unput(yy_.yytext);\n                    this.popState();\n                    this.begin('com');\n\n                    break;\n                case 22:\n                    this.popState();\n                    return 14;\n\n                    break;\n                case 23:\n                    return 48;\n                    break;\n                case 24:\n                    return 73;\n                    break;\n                case 25:\n                    return 72;\n                    break;\n                case 26:\n                    return 72;\n                    break;\n                case 27:\n                    return 87;\n                    break;\n                case 28:\n                    // ignore whitespace\n                    break;\n                case 29:\n                    this.popState();return 54;\n                    break;\n                case 30:\n                    this.popState();return 33;\n                    break;\n                case 31:\n                    yy_.yytext = strip(1, 2).replace(/\\\\\"/g, '\"');return 80;\n                    break;\n                case 32:\n                    yy_.yytext = strip(1, 2).replace(/\\\\'/g, \"'\");return 80;\n                    break;\n                case 33:\n                    return 85;\n                    break;\n                case 34:\n                    return 82;\n                    break;\n                case 35:\n                    return 82;\n                    break;\n                case 36:\n                    return 83;\n                    break;\n                case 37:\n                    return 84;\n                    break;\n                case 38:\n                    return 81;\n                    break;\n                case 39:\n                    return 75;\n                    break;\n                case 40:\n                    return 77;\n                    break;\n                case 41:\n                    return 72;\n                    break;\n                case 42:\n                    yy_.yytext = yy_.yytext.replace(/\\\\([\\\\\\]])/g, '$1');return 72;\n                    break;\n                case 43:\n                    return 'INVALID';\n                    break;\n                case 44:\n                    return 5;\n                    break;\n            }\n        };\n        lexer.rules = [/^(?:[^\\x00]*?(?=(\\{\\{)))/, /^(?:[^\\x00]+)/, /^(?:[^\\x00]{2,}?(?=(\\{\\{|\\\\\\{\\{|\\\\\\\\\\{\\{|$)))/, /^(?:\\{\\{\\{\\{(?=[^/]))/, /^(?:\\{\\{\\{\\{\\/[^\\s!\"#%-,\\.\\/;->@\\[-\\^`\\{-~]+(?=[=}\\s\\/.])\\}\\}\\}\\})/, /^(?:[^\\x00]+?(?=(\\{\\{\\{\\{)))/, /^(?:[\\s\\S]*?--(~)?\\}\\})/, /^(?:\\()/, /^(?:\\))/, /^(?:\\{\\{\\{\\{)/, /^(?:\\}\\}\\}\\})/, /^(?:\\{\\{(~)?>)/, /^(?:\\{\\{(~)?#>)/, /^(?:\\{\\{(~)?#\\*?)/, /^(?:\\{\\{(~)?\\/)/, /^(?:\\{\\{(~)?\\^\\s*(~)?\\}\\})/, /^(?:\\{\\{(~)?\\s*else\\s*(~)?\\}\\})/, /^(?:\\{\\{(~)?\\^)/, /^(?:\\{\\{(~)?\\s*else\\b)/, /^(?:\\{\\{(~)?\\{)/, /^(?:\\{\\{(~)?&)/, /^(?:\\{\\{(~)?!--)/, /^(?:\\{\\{(~)?![\\s\\S]*?\\}\\})/, /^(?:\\{\\{(~)?\\*?)/, /^(?:=)/, /^(?:\\.\\.)/, /^(?:\\.(?=([=~}\\s\\/.)|])))/, /^(?:[\\/.])/, /^(?:\\s+)/, /^(?:\\}(~)?\\}\\})/, /^(?:(~)?\\}\\})/, /^(?:\"(\\\\[\"]|[^\"])*\")/, /^(?:'(\\\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\\s)])))/, /^(?:false(?=([~}\\s)])))/, /^(?:undefined(?=([~}\\s)])))/, /^(?:null(?=([~}\\s)])))/, /^(?:-?[0-9]+(?:\\.[0-9]+)?(?=([~}\\s)])))/, /^(?:as\\s+\\|)/, /^(?:\\|)/, /^(?:([^\\s!\"#%-,\\.\\/;->@\\[-\\^`\\{-~]+(?=([=~}\\s\\/.)|]))))/, /^(?:\\[(\\\\\\]|[^\\]])*\\])/, /^(?:.)/, /^(?:$)/];\n        lexer.conditions = { \"mu\": { \"rules\": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], \"inclusive\": false }, \"emu\": { \"rules\": [2], \"inclusive\": false }, \"com\": { \"rules\": [6], \"inclusive\": false }, \"raw\": { \"rules\": [3, 4, 5], \"inclusive\": false }, \"INITIAL\": { \"rules\": [0, 1, 44], \"inclusive\": true } };\n        return lexer;\n    })();\n    parser.lexer = lexer;\n    function Parser() {\n        this.yy = {};\n    }Parser.prototype = parser;parser.Parser = Parser;\n    return new Parser();\n})();exports[\"default\"] = handlebars;\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/compiler/parser.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js":
/*!*************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js ***!
  \*************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _exception = __webpack_require__(/*! ../exception */ \"./node_modules/handlebars/dist/cjs/handlebars/exception.js\");\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nfunction Visitor() {\n  this.parents = [];\n}\n\nVisitor.prototype = {\n  constructor: Visitor,\n  mutating: false,\n\n  // Visits a given value. If mutating, will replace the value if necessary.\n  acceptKey: function acceptKey(node, name) {\n    var value = this.accept(node[name]);\n    if (this.mutating) {\n      // Hacky sanity check: This may have a few false positives for type for the helper\n      // methods but will generally do the right thing without a lot of overhead.\n      if (value && !Visitor.prototype[value.type]) {\n        throw new _exception2['default']('Unexpected node type \"' + value.type + '\" found when accepting ' + name + ' on ' + node.type);\n      }\n      node[name] = value;\n    }\n  },\n\n  // Performs an accept operation with added sanity check to ensure\n  // required keys are not removed.\n  acceptRequired: function acceptRequired(node, name) {\n    this.acceptKey(node, name);\n\n    if (!node[name]) {\n      throw new _exception2['default'](node.type + ' requires ' + name);\n    }\n  },\n\n  // Traverses a given array. If mutating, empty respnses will be removed\n  // for child elements.\n  acceptArray: function acceptArray(array) {\n    for (var i = 0, l = array.length; i < l; i++) {\n      this.acceptKey(array, i);\n\n      if (!array[i]) {\n        array.splice(i, 1);\n        i--;\n        l--;\n      }\n    }\n  },\n\n  accept: function accept(object) {\n    if (!object) {\n      return;\n    }\n\n    /* istanbul ignore next: Sanity code */\n    if (!this[object.type]) {\n      throw new _exception2['default']('Unknown type: ' + object.type, object);\n    }\n\n    if (this.current) {\n      this.parents.unshift(this.current);\n    }\n    this.current = object;\n\n    var ret = this[object.type](object);\n\n    this.current = this.parents.shift();\n\n    if (!this.mutating || ret) {\n      return ret;\n    } else if (ret !== false) {\n      return object;\n    }\n  },\n\n  Program: function Program(program) {\n    this.acceptArray(program.body);\n  },\n\n  MustacheStatement: visitSubExpression,\n  Decorator: visitSubExpression,\n\n  BlockStatement: visitBlock,\n  DecoratorBlock: visitBlock,\n\n  PartialStatement: visitPartial,\n  PartialBlockStatement: function PartialBlockStatement(partial) {\n    visitPartial.call(this, partial);\n\n    this.acceptKey(partial, 'program');\n  },\n\n  ContentStatement: function ContentStatement() /* content */{},\n  CommentStatement: function CommentStatement() /* comment */{},\n\n  SubExpression: visitSubExpression,\n\n  PathExpression: function PathExpression() /* path */{},\n\n  StringLiteral: function StringLiteral() /* string */{},\n  NumberLiteral: function NumberLiteral() /* number */{},\n  BooleanLiteral: function BooleanLiteral() /* bool */{},\n  UndefinedLiteral: function UndefinedLiteral() /* literal */{},\n  NullLiteral: function NullLiteral() /* literal */{},\n\n  Hash: function Hash(hash) {\n    this.acceptArray(hash.pairs);\n  },\n  HashPair: function HashPair(pair) {\n    this.acceptRequired(pair, 'value');\n  }\n};\n\nfunction visitSubExpression(mustache) {\n  this.acceptRequired(mustache, 'path');\n  this.acceptArray(mustache.params);\n  this.acceptKey(mustache, 'hash');\n}\nfunction visitBlock(block) {\n  visitSubExpression.call(this, block);\n\n  this.acceptKey(block, 'program');\n  this.acceptKey(block, 'inverse');\n}\nfunction visitPartial(partial) {\n  this.acceptRequired(partial, 'name');\n  this.acceptArray(partial.params);\n  this.acceptKey(partial, 'hash');\n}\n\nexports[\"default\"] = Visitor;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/compiler/whitespace-control.js":
/*!************************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/compiler/whitespace-control.js ***!
  \************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _visitor = __webpack_require__(/*! ./visitor */ \"./node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js\");\n\nvar _visitor2 = _interopRequireDefault(_visitor);\n\nfunction WhitespaceControl() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n  this.options = options;\n}\nWhitespaceControl.prototype = new _visitor2['default']();\n\nWhitespaceControl.prototype.Program = function (program) {\n  var doStandalone = !this.options.ignoreStandalone;\n\n  var isRoot = !this.isRootSeen;\n  this.isRootSeen = true;\n\n  var body = program.body;\n  for (var i = 0, l = body.length; i < l; i++) {\n    var current = body[i],\n        strip = this.accept(current);\n\n    if (!strip) {\n      continue;\n    }\n\n    var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),\n        _isNextWhitespace = isNextWhitespace(body, i, isRoot),\n        openStandalone = strip.openStandalone && _isPrevWhitespace,\n        closeStandalone = strip.closeStandalone && _isNextWhitespace,\n        inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;\n\n    if (strip.close) {\n      omitRight(body, i, true);\n    }\n    if (strip.open) {\n      omitLeft(body, i, true);\n    }\n\n    if (doStandalone && inlineStandalone) {\n      omitRight(body, i);\n\n      if (omitLeft(body, i)) {\n        // If we are on a standalone node, save the indent info for partials\n        if (current.type === 'PartialStatement') {\n          // Pull out the whitespace from the final line\n          current.indent = /([ \\t]+$)/.exec(body[i - 1].original)[1];\n        }\n      }\n    }\n    if (doStandalone && openStandalone) {\n      omitRight((current.program || current.inverse).body);\n\n      // Strip out the previous content node if it's whitespace only\n      omitLeft(body, i);\n    }\n    if (doStandalone && closeStandalone) {\n      // Always strip the next node\n      omitRight(body, i);\n\n      omitLeft((current.inverse || current.program).body);\n    }\n  }\n\n  return program;\n};\n\nWhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (block) {\n  this.accept(block.program);\n  this.accept(block.inverse);\n\n  // Find the inverse program that is involed with whitespace stripping.\n  var program = block.program || block.inverse,\n      inverse = block.program && block.inverse,\n      firstInverse = inverse,\n      lastInverse = inverse;\n\n  if (inverse && inverse.chained) {\n    firstInverse = inverse.body[0].program;\n\n    // Walk the inverse chain to find the last inverse that is actually in the chain.\n    while (lastInverse.chained) {\n      lastInverse = lastInverse.body[lastInverse.body.length - 1].program;\n    }\n  }\n\n  var strip = {\n    open: block.openStrip.open,\n    close: block.closeStrip.close,\n\n    // Determine the standalone candiacy. Basically flag our content as being possibly standalone\n    // so our parent can determine if we actually are standalone\n    openStandalone: isNextWhitespace(program.body),\n    closeStandalone: isPrevWhitespace((firstInverse || program).body)\n  };\n\n  if (block.openStrip.close) {\n    omitRight(program.body, null, true);\n  }\n\n  if (inverse) {\n    var inverseStrip = block.inverseStrip;\n\n    if (inverseStrip.open) {\n      omitLeft(program.body, null, true);\n    }\n\n    if (inverseStrip.close) {\n      omitRight(firstInverse.body, null, true);\n    }\n    if (block.closeStrip.open) {\n      omitLeft(lastInverse.body, null, true);\n    }\n\n    // Find standalone else statments\n    if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {\n      omitLeft(program.body);\n      omitRight(firstInverse.body);\n    }\n  } else if (block.closeStrip.open) {\n    omitLeft(program.body, null, true);\n  }\n\n  return strip;\n};\n\nWhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (mustache) {\n  return mustache.strip;\n};\n\nWhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {\n  /* istanbul ignore next */\n  var strip = node.strip || {};\n  return {\n    inlineStandalone: true,\n    open: strip.open,\n    close: strip.close\n  };\n};\n\nfunction isPrevWhitespace(body, i, isRoot) {\n  if (i === undefined) {\n    i = body.length;\n  }\n\n  // Nodes that end with newlines are considered whitespace (but are special\n  // cased for strip operations)\n  var prev = body[i - 1],\n      sibling = body[i - 2];\n  if (!prev) {\n    return isRoot;\n  }\n\n  if (prev.type === 'ContentStatement') {\n    return (sibling || !isRoot ? /\\r?\\n\\s*?$/ : /(^|\\r?\\n)\\s*?$/).test(prev.original);\n  }\n}\nfunction isNextWhitespace(body, i, isRoot) {\n  if (i === undefined) {\n    i = -1;\n  }\n\n  var next = body[i + 1],\n      sibling = body[i + 2];\n  if (!next) {\n    return isRoot;\n  }\n\n  if (next.type === 'ContentStatement') {\n    return (sibling || !isRoot ? /^\\s*?\\r?\\n/ : /^\\s*?(\\r?\\n|$)/).test(next.original);\n  }\n}\n\n// Marks the node to the right of the position as omitted.\n// I.e. {{foo}}' ' will mark the ' ' node as omitted.\n//\n// If i is undefined, then the first child will be marked as such.\n//\n// If mulitple is truthy then all whitespace will be stripped out until non-whitespace\n// content is met.\nfunction omitRight(body, i, multiple) {\n  var current = body[i == null ? 0 : i + 1];\n  if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {\n    return;\n  }\n\n  var original = current.value;\n  current.value = current.value.replace(multiple ? /^\\s+/ : /^[ \\t]*\\r?\\n?/, '');\n  current.rightStripped = current.value !== original;\n}\n\n// Marks the node to the left of the position as omitted.\n// I.e. ' '{{foo}} will mark the ' ' node as omitted.\n//\n// If i is undefined then the last child will be marked as such.\n//\n// If mulitple is truthy then all whitespace will be stripped out until non-whitespace\n// content is met.\nfunction omitLeft(body, i, multiple) {\n  var current = body[i == null ? body.length - 1 : i - 1];\n  if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {\n    return;\n  }\n\n  // We omit the last node if it's whitespace only and not preceded by a non-content node.\n  var original = current.value;\n  current.value = current.value.replace(multiple ? /\\s+$/ : /[ \\t]+$/, '');\n  current.leftStripped = current.value !== original;\n  return current.leftStripped;\n}\n\nexports[\"default\"] = WhitespaceControl;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/compiler/whitespace-control.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/decorators.js":
/*!*******************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/decorators.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.registerDefaultDecorators = registerDefaultDecorators;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _decoratorsInline = __webpack_require__(/*! ./decorators/inline */ \"./node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js\");\n\nvar _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);\n\nfunction registerDefaultDecorators(instance) {\n  _decoratorsInline2['default'](instance);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Z0NBQTJCLHFCQUFxQjs7OztBQUV6QyxTQUFTLHlCQUF5QixDQUFDLFFBQVEsRUFBRTtBQUNsRCxnQ0FBZSxRQUFRLENBQUMsQ0FBQztDQUMxQiIsImZpbGUiOiJkZWNvcmF0b3JzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlZ2lzdGVySW5saW5lIGZyb20gJy4vZGVjb3JhdG9ycy9pbmxpbmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyhpbnN0YW5jZSkge1xuICByZWdpc3RlcklubGluZShpbnN0YW5jZSk7XG59XG4iXX0=\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/decorators.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js":
/*!**************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js ***!
  \**************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\n\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/handlebars/dist/cjs/handlebars/utils.js\");\n\nexports[\"default\"] = function (instance) {\n  instance.registerDecorator('inline', function (fn, props, container, options) {\n    var ret = fn;\n    if (!props.partials) {\n      props.partials = {};\n      ret = function (context, options) {\n        // Create a new partials stack frame prior to exec.\n        var original = container.partials;\n        container.partials = _utils.extend({}, original, props.partials);\n        var ret = fn(context, options);\n        container.partials = original;\n        return ret;\n      };\n    }\n\n    props.partials[options.args[0]] = options.fn;\n\n    return ret;\n  });\n};\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMvaW5saW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQXVCLFVBQVU7O3FCQUVsQixVQUFTLFFBQVEsRUFBRTtBQUNoQyxVQUFRLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFVBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFO0FBQzNFLFFBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFFBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFO0FBQ25CLFdBQUssQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLFNBQUcsR0FBRyxVQUFTLE9BQU8sRUFBRSxPQUFPLEVBQUU7O0FBRS9CLFlBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDbEMsaUJBQVMsQ0FBQyxRQUFRLEdBQUcsY0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxRCxZQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLGlCQUFTLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUM5QixlQUFPLEdBQUcsQ0FBQztPQUNaLENBQUM7S0FDSDs7QUFFRCxTQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUU3QyxXQUFPLEdBQUcsQ0FBQztHQUNaLENBQUMsQ0FBQztDQUNKIiwiZmlsZSI6ImlubGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJEZWNvcmF0b3IoJ2lubGluZScsIGZ1bmN0aW9uKGZuLCBwcm9wcywgY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgbGV0IHJldCA9IGZuO1xuICAgIGlmICghcHJvcHMucGFydGlhbHMpIHtcbiAgICAgIHByb3BzLnBhcnRpYWxzID0ge307XG4gICAgICByZXQgPSBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyBwYXJ0aWFscyBzdGFjayBmcmFtZSBwcmlvciB0byBleGVjLlxuICAgICAgICBsZXQgb3JpZ2luYWwgPSBjb250YWluZXIucGFydGlhbHM7XG4gICAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IGV4dGVuZCh7fSwgb3JpZ2luYWwsIHByb3BzLnBhcnRpYWxzKTtcbiAgICAgICAgbGV0IHJldCA9IGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBvcmlnaW5hbDtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcHJvcHMucGFydGlhbHNbb3B0aW9ucy5hcmdzWzBdXSA9IG9wdGlvbnMuZm47XG5cbiAgICByZXR1cm4gcmV0O1xuICB9KTtcbn1cbiJdfQ==\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/exception.js":
/*!******************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/exception.js ***!
  \******************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\n\nexports.__esModule = true;\nvar errorProps = ['description', 'fileName', 'lineNumber', 'endLineNumber', 'message', 'name', 'number', 'stack'];\n\nfunction Exception(message, node) {\n  var loc = node && node.loc,\n      line = undefined,\n      endLineNumber = undefined,\n      column = undefined,\n      endColumn = undefined;\n\n  if (loc) {\n    line = loc.start.line;\n    endLineNumber = loc.end.line;\n    column = loc.start.column;\n    endColumn = loc.end.column;\n\n    message += ' - ' + line + ':' + column;\n  }\n\n  var tmp = Error.prototype.constructor.call(this, message);\n\n  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.\n  for (var idx = 0; idx < errorProps.length; idx++) {\n    this[errorProps[idx]] = tmp[errorProps[idx]];\n  }\n\n  /* istanbul ignore else */\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, Exception);\n  }\n\n  try {\n    if (loc) {\n      this.lineNumber = line;\n      this.endLineNumber = endLineNumber;\n\n      // Work around issue under safari where we can't directly set the column value\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(this, 'column', {\n          value: column,\n          enumerable: true\n        });\n        Object.defineProperty(this, 'endColumn', {\n          value: endColumn,\n          enumerable: true\n        });\n      } else {\n        this.column = column;\n        this.endColumn = endColumn;\n      }\n    }\n  } catch (nop) {\n    /* Ignore if the browser is very particular */\n  }\n}\n\nException.prototype = new Error();\n\nexports[\"default\"] = Exception;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2V4Y2VwdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFNLFVBQVUsR0FBRyxDQUNqQixhQUFhLEVBQ2IsVUFBVSxFQUNWLFlBQVksRUFDWixlQUFlLEVBQ2YsU0FBUyxFQUNULE1BQU0sRUFDTixRQUFRLEVBQ1IsT0FBTyxDQUNSLENBQUM7O0FBRUYsU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRTtBQUNoQyxNQUFJLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUc7TUFDeEIsSUFBSSxZQUFBO01BQ0osYUFBYSxZQUFBO01BQ2IsTUFBTSxZQUFBO01BQ04sU0FBUyxZQUFBLENBQUM7O0FBRVosTUFBSSxHQUFHLEVBQUU7QUFDUCxRQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDdEIsaUJBQWEsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztBQUM3QixVQUFNLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDMUIsYUFBUyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDOztBQUUzQixXQUFPLElBQUksS0FBSyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDO0dBQ3hDOztBQUVELE1BQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7OztBQUcxRCxPQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRTtBQUNoRCxRQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0dBQzlDOzs7QUFHRCxNQUFJLEtBQUssQ0FBQyxpQkFBaUIsRUFBRTtBQUMzQixTQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0dBQzFDOztBQUVELE1BQUk7QUFDRixRQUFJLEdBQUcsRUFBRTtBQUNQLFVBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3ZCLFVBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDOzs7O0FBSW5DLFVBQUksTUFBTSxDQUFDLGNBQWMsRUFBRTtBQUN6QixjQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUU7QUFDcEMsZUFBSyxFQUFFLE1BQU07QUFDYixvQkFBVSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO0FBQ0gsY0FBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFO0FBQ3ZDLGVBQUssRUFBRSxTQUFTO0FBQ2hCLG9CQUFVLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUM7T0FDSixNQUFNO0FBQ0wsWUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDckIsWUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7T0FDNUI7S0FDRjtHQUNGLENBQUMsT0FBTyxHQUFHLEVBQUU7O0dBRWI7Q0FDRjs7QUFFRCxTQUFTLENBQUMsU0FBUyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7O3FCQUVuQixTQUFTIiwiZmlsZSI6ImV4Y2VwdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGVycm9yUHJvcHMgPSBbXG4gICdkZXNjcmlwdGlvbicsXG4gICdmaWxlTmFtZScsXG4gICdsaW5lTnVtYmVyJyxcbiAgJ2VuZExpbmVOdW1iZXInLFxuICAnbWVzc2FnZScsXG4gICduYW1lJyxcbiAgJ251bWJlcicsXG4gICdzdGFjaydcbl07XG5cbmZ1bmN0aW9uIEV4Y2VwdGlvbihtZXNzYWdlLCBub2RlKSB7XG4gIGxldCBsb2MgPSBub2RlICYmIG5vZGUubG9jLFxuICAgIGxpbmUsXG4gICAgZW5kTGluZU51bWJlcixcbiAgICBjb2x1bW4sXG4gICAgZW5kQ29sdW1uO1xuXG4gIGlmIChsb2MpIHtcbiAgICBsaW5lID0gbG9jLnN0YXJ0LmxpbmU7XG4gICAgZW5kTGluZU51bWJlciA9IGxvYy5lbmQubGluZTtcbiAgICBjb2x1bW4gPSBsb2Muc3RhcnQuY29sdW1uO1xuICAgIGVuZENvbHVtbiA9IGxvYy5lbmQuY29sdW1uO1xuXG4gICAgbWVzc2FnZSArPSAnIC0gJyArIGxpbmUgKyAnOicgKyBjb2x1bW47XG4gIH1cblxuICBsZXQgdG1wID0gRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG5cbiAgLy8gVW5mb3J0dW5hdGVseSBlcnJvcnMgYXJlIG5vdCBlbnVtZXJhYmxlIGluIENocm9tZSAoYXQgbGVhc3QpLCBzbyBgZm9yIHByb3AgaW4gdG1wYCBkb2Vzbid0IHdvcmsuXG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGVycm9yUHJvcHMubGVuZ3RoOyBpZHgrKykge1xuICAgIHRoaXNbZXJyb3JQcm9wc1tpZHhdXSA9IHRtcFtlcnJvclByb3BzW2lkeF1dO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRXhjZXB0aW9uKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgaWYgKGxvYykge1xuICAgICAgdGhpcy5saW5lTnVtYmVyID0gbGluZTtcbiAgICAgIHRoaXMuZW5kTGluZU51bWJlciA9IGVuZExpbmVOdW1iZXI7XG5cbiAgICAgIC8vIFdvcmsgYXJvdW5kIGlzc3VlIHVuZGVyIHNhZmFyaSB3aGVyZSB3ZSBjYW4ndCBkaXJlY3RseSBzZXQgdGhlIGNvbHVtbiB2YWx1ZVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjb2x1bW4nLCB7XG4gICAgICAgICAgdmFsdWU6IGNvbHVtbixcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2VuZENvbHVtbicsIHtcbiAgICAgICAgICB2YWx1ZTogZW5kQ29sdW1uLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbHVtbiA9IGNvbHVtbjtcbiAgICAgICAgdGhpcy5lbmRDb2x1bW4gPSBlbmRDb2x1bW47XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChub3ApIHtcbiAgICAvKiBJZ25vcmUgaWYgdGhlIGJyb3dzZXIgaXMgdmVyeSBwYXJ0aWN1bGFyICovXG4gIH1cbn1cblxuRXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuXG5leHBvcnQgZGVmYXVsdCBFeGNlcHRpb247XG4iXX0=\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/exception.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers.js":
/*!****************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.registerDefaultHelpers = registerDefaultHelpers;\nexports.moveHelperToHooks = moveHelperToHooks;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _helpersBlockHelperMissing = __webpack_require__(/*! ./helpers/block-helper-missing */ \"./node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js\");\n\nvar _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);\n\nvar _helpersEach = __webpack_require__(/*! ./helpers/each */ \"./node_modules/handlebars/dist/cjs/handlebars/helpers/each.js\");\n\nvar _helpersEach2 = _interopRequireDefault(_helpersEach);\n\nvar _helpersHelperMissing = __webpack_require__(/*! ./helpers/helper-missing */ \"./node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js\");\n\nvar _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);\n\nvar _helpersIf = __webpack_require__(/*! ./helpers/if */ \"./node_modules/handlebars/dist/cjs/handlebars/helpers/if.js\");\n\nvar _helpersIf2 = _interopRequireDefault(_helpersIf);\n\nvar _helpersLog = __webpack_require__(/*! ./helpers/log */ \"./node_modules/handlebars/dist/cjs/handlebars/helpers/log.js\");\n\nvar _helpersLog2 = _interopRequireDefault(_helpersLog);\n\nvar _helpersLookup = __webpack_require__(/*! ./helpers/lookup */ \"./node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js\");\n\nvar _helpersLookup2 = _interopRequireDefault(_helpersLookup);\n\nvar _helpersWith = __webpack_require__(/*! ./helpers/with */ \"./node_modules/handlebars/dist/cjs/handlebars/helpers/with.js\");\n\nvar _helpersWith2 = _interopRequireDefault(_helpersWith);\n\nfunction registerDefaultHelpers(instance) {\n  _helpersBlockHelperMissing2['default'](instance);\n  _helpersEach2['default'](instance);\n  _helpersHelperMissing2['default'](instance);\n  _helpersIf2['default'](instance);\n  _helpersLog2['default'](instance);\n  _helpersLookup2['default'](instance);\n  _helpersWith2['default'](instance);\n}\n\nfunction moveHelperToHooks(instance, helperName, keepHelper) {\n  if (instance.helpers[helperName]) {\n    instance.hooks[helperName] = instance.helpers[helperName];\n    if (!keepHelper) {\n      delete instance.helpers[helperName];\n    }\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O3lDQUF1QyxnQ0FBZ0M7Ozs7MkJBQzlDLGdCQUFnQjs7OztvQ0FDUCwwQkFBMEI7Ozs7eUJBQ3JDLGNBQWM7Ozs7MEJBQ2IsZUFBZTs7Ozs2QkFDWixrQkFBa0I7Ozs7MkJBQ3BCLGdCQUFnQjs7OztBQUVsQyxTQUFTLHNCQUFzQixDQUFDLFFBQVEsRUFBRTtBQUMvQyx5Q0FBMkIsUUFBUSxDQUFDLENBQUM7QUFDckMsMkJBQWEsUUFBUSxDQUFDLENBQUM7QUFDdkIsb0NBQXNCLFFBQVEsQ0FBQyxDQUFDO0FBQ2hDLHlCQUFXLFFBQVEsQ0FBQyxDQUFDO0FBQ3JCLDBCQUFZLFFBQVEsQ0FBQyxDQUFDO0FBQ3RCLDZCQUFlLFFBQVEsQ0FBQyxDQUFDO0FBQ3pCLDJCQUFhLFFBQVEsQ0FBQyxDQUFDO0NBQ3hCOztBQUVNLFNBQVMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7QUFDbEUsTUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQ2hDLFlBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMxRCxRQUFJLENBQUMsVUFBVSxFQUFFO0FBQ2YsYUFBTyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ3JDO0dBQ0Y7Q0FDRiIsImZpbGUiOiJoZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlZ2lzdGVyQmxvY2tIZWxwZXJNaXNzaW5nIGZyb20gJy4vaGVscGVycy9ibG9jay1oZWxwZXItbWlzc2luZyc7XG5pbXBvcnQgcmVnaXN0ZXJFYWNoIGZyb20gJy4vaGVscGVycy9lYWNoJztcbmltcG9ydCByZWdpc3RlckhlbHBlck1pc3NpbmcgZnJvbSAnLi9oZWxwZXJzL2hlbHBlci1taXNzaW5nJztcbmltcG9ydCByZWdpc3RlcklmIGZyb20gJy4vaGVscGVycy9pZic7XG5pbXBvcnQgcmVnaXN0ZXJMb2cgZnJvbSAnLi9oZWxwZXJzL2xvZyc7XG5pbXBvcnQgcmVnaXN0ZXJMb29rdXAgZnJvbSAnLi9oZWxwZXJzL2xvb2t1cCc7XG5pbXBvcnQgcmVnaXN0ZXJXaXRoIGZyb20gJy4vaGVscGVycy93aXRoJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnMoaW5zdGFuY2UpIHtcbiAgcmVnaXN0ZXJCbG9ja0hlbHBlck1pc3NpbmcoaW5zdGFuY2UpO1xuICByZWdpc3RlckVhY2goaW5zdGFuY2UpO1xuICByZWdpc3RlckhlbHBlck1pc3NpbmcoaW5zdGFuY2UpO1xuICByZWdpc3RlcklmKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJMb2coaW5zdGFuY2UpO1xuICByZWdpc3Rlckxvb2t1cChpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyV2l0aChpbnN0YW5jZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlSGVscGVyVG9Ib29rcyhpbnN0YW5jZSwgaGVscGVyTmFtZSwga2VlcEhlbHBlcikge1xuICBpZiAoaW5zdGFuY2UuaGVscGVyc1toZWxwZXJOYW1lXSkge1xuICAgIGluc3RhbmNlLmhvb2tzW2hlbHBlck5hbWVdID0gaW5zdGFuY2UuaGVscGVyc1toZWxwZXJOYW1lXTtcbiAgICBpZiAoIWtlZXBIZWxwZXIpIHtcbiAgICAgIGRlbGV0ZSBpbnN0YW5jZS5oZWxwZXJzW2hlbHBlck5hbWVdO1xuICAgIH1cbiAgfVxufVxuIl19\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/helpers.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js ***!
  \*************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\n\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/handlebars/dist/cjs/handlebars/utils.js\");\n\nexports[\"default\"] = function (instance) {\n  instance.registerHelper('blockHelperMissing', function (context, options) {\n    var inverse = options.inverse,\n        fn = options.fn;\n\n    if (context === true) {\n      return fn(this);\n    } else if (context === false || context == null) {\n      return inverse(this);\n    } else if (_utils.isArray(context)) {\n      if (context.length > 0) {\n        if (options.ids) {\n          options.ids = [options.name];\n        }\n\n        return instance.helpers.each(context, options);\n      } else {\n        return inverse(this);\n      }\n    } else {\n      if (options.data && options.ids) {\n        var data = _utils.createFrame(options.data);\n        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);\n        options = { data: data };\n      }\n\n      return fn(context, options);\n    }\n  });\n};\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztxQkFBd0QsVUFBVTs7cUJBRW5ELFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLEVBQUUsVUFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQ3ZFLFFBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPO1FBQzNCLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUVsQixRQUFJLE9BQU8sS0FBSyxJQUFJLEVBQUU7QUFDcEIsYUFBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDakIsTUFBTSxJQUFJLE9BQU8sS0FBSyxLQUFLLElBQUksT0FBTyxJQUFJLElBQUksRUFBRTtBQUMvQyxhQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN0QixNQUFNLElBQUksZUFBUSxPQUFPLENBQUMsRUFBRTtBQUMzQixVQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ3RCLFlBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUNmLGlCQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCOztBQUVELGVBQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO09BQ2hELE1BQU07QUFDTCxlQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztPQUN0QjtLQUNGLE1BQU07QUFDTCxVQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUMvQixZQUFJLElBQUksR0FBRyxtQkFBWSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDckMsWUFBSSxDQUFDLFdBQVcsR0FBRyx5QkFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQ3hCLE9BQU8sQ0FBQyxJQUFJLENBQ2IsQ0FBQztBQUNGLGVBQU8sR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztPQUMxQjs7QUFFRCxhQUFPLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDN0I7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJibG9jay1oZWxwZXItbWlzc2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFwcGVuZENvbnRleHRQYXRoLCBjcmVhdGVGcmFtZSwgaXNBcnJheSB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2Jsb2NrSGVscGVyTWlzc2luZycsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBsZXQgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcbiAgICAgIGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmIChjb250ZXh0ID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZm4odGhpcyk7XG4gICAgfSBlbHNlIGlmIChjb250ZXh0ID09PSBmYWxzZSB8fCBjb250ZXh0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgICBvcHRpb25zLmlkcyA9IFtvcHRpb25zLm5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGxldCBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKFxuICAgICAgICAgIG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCxcbiAgICAgICAgICBvcHRpb25zLm5hbWVcbiAgICAgICAgKTtcbiAgICAgICAgb3B0aW9ucyA9IHsgZGF0YTogZGF0YSB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm4oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgfVxuICB9KTtcbn1cbiJdfQ==\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/each.js":
/*!*********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/each.js ***!
  \*********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/handlebars/dist/cjs/handlebars/utils.js\");\n\nvar _exception = __webpack_require__(/*! ../exception */ \"./node_modules/handlebars/dist/cjs/handlebars/exception.js\");\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nexports[\"default\"] = function (instance) {\n  instance.registerHelper('each', function (context, options) {\n    if (!options) {\n      throw new _exception2['default']('Must pass iterator to #each');\n    }\n\n    var fn = options.fn,\n        inverse = options.inverse,\n        i = 0,\n        ret = '',\n        data = undefined,\n        contextPath = undefined;\n\n    if (options.data && options.ids) {\n      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';\n    }\n\n    if (_utils.isFunction(context)) {\n      context = context.call(this);\n    }\n\n    if (options.data) {\n      data = _utils.createFrame(options.data);\n    }\n\n    function execIteration(field, index, last) {\n      if (data) {\n        data.key = field;\n        data.index = index;\n        data.first = index === 0;\n        data.last = !!last;\n\n        if (contextPath) {\n          data.contextPath = contextPath + field;\n        }\n      }\n\n      ret = ret + fn(context[field], {\n        data: data,\n        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])\n      });\n    }\n\n    if (context && typeof context === 'object') {\n      if (_utils.isArray(context)) {\n        for (var j = context.length; i < j; i++) {\n          if (i in context) {\n            execIteration(i, i, i === context.length - 1);\n          }\n        }\n      } else if (typeof Symbol === 'function' && context[Symbol.iterator]) {\n        var newContext = [];\n        var iterator = context[Symbol.iterator]();\n        for (var it = iterator.next(); !it.done; it = iterator.next()) {\n          newContext.push(it.value);\n        }\n        context = newContext;\n        for (var j = context.length; i < j; i++) {\n          execIteration(i, i, i === context.length - 1);\n        }\n      } else {\n        (function () {\n          var priorKey = undefined;\n\n          Object.keys(context).forEach(function (key) {\n            // We're running the iterations one step out of sync so we can detect\n            // the last iteration without have to scan the object twice and create\n            // an itermediate keys array.\n            if (priorKey !== undefined) {\n              execIteration(priorKey, i - 1);\n            }\n            priorKey = key;\n            i++;\n          });\n          if (priorKey !== undefined) {\n            execIteration(priorKey, i - 1, true);\n          }\n        })();\n      }\n    }\n\n    if (i === 0) {\n      ret = inverse(this);\n    }\n\n    return ret;\n  });\n};\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvZWFjaC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O3FCQU1PLFVBQVU7O3lCQUNLLGNBQWM7Ozs7cUJBRXJCLFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFVBQVMsT0FBTyxFQUFFLE9BQU8sRUFBRTtBQUN6RCxRQUFJLENBQUMsT0FBTyxFQUFFO0FBQ1osWUFBTSwyQkFBYyw2QkFBNkIsQ0FBQyxDQUFDO0tBQ3BEOztBQUVELFFBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQ2pCLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTztRQUN6QixDQUFDLEdBQUcsQ0FBQztRQUNMLEdBQUcsR0FBRyxFQUFFO1FBQ1IsSUFBSSxZQUFBO1FBQ0osV0FBVyxZQUFBLENBQUM7O0FBRWQsUUFBSSxPQUFPLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUU7QUFDL0IsaUJBQVcsR0FDVCx5QkFBa0IsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztLQUNyRTs7QUFFRCxRQUFJLGtCQUFXLE9BQU8sQ0FBQyxFQUFFO0FBQ3ZCLGFBQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzlCOztBQUVELFFBQUksT0FBTyxDQUFDLElBQUksRUFBRTtBQUNoQixVQUFJLEdBQUcsbUJBQVksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2xDOztBQUVELGFBQVMsYUFBYSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO0FBQ3pDLFVBQUksSUFBSSxFQUFFO0FBQ1IsWUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7QUFDakIsWUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDbkIsWUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLEtBQUssQ0FBQyxDQUFDO0FBQ3pCLFlBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQzs7QUFFbkIsWUFBSSxXQUFXLEVBQUU7QUFDZixjQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsR0FBRyxLQUFLLENBQUM7U0FDeEM7T0FDRjs7QUFFRCxTQUFHLEdBQ0QsR0FBRyxHQUNILEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDakIsWUFBSSxFQUFFLElBQUk7QUFDVixtQkFBVyxFQUFFLG1CQUNYLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUN2QixDQUFDLFdBQVcsR0FBRyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQzVCO09BQ0YsQ0FBQyxDQUFDO0tBQ047O0FBRUQsUUFBSSxPQUFPLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO0FBQzFDLFVBQUksZUFBUSxPQUFPLENBQUMsRUFBRTtBQUNwQixhQUFLLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN2QyxjQUFJLENBQUMsSUFBSSxPQUFPLEVBQUU7QUFDaEIseUJBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1dBQy9DO1NBQ0Y7T0FDRixNQUFNLElBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDbkUsWUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDO0FBQ3RCLFlBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztBQUM1QyxhQUFLLElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRTtBQUM3RCxvQkFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7QUFDRCxlQUFPLEdBQUcsVUFBVSxDQUFDO0FBQ3JCLGFBQUssSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3ZDLHVCQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMvQztPQUNGLE1BQU07O0FBQ0wsY0FBSSxRQUFRLFlBQUEsQ0FBQzs7QUFFYixnQkFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHLEVBQUk7Ozs7QUFJbEMsZ0JBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtBQUMxQiwyQkFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDaEM7QUFDRCxvQkFBUSxHQUFHLEdBQUcsQ0FBQztBQUNmLGFBQUMsRUFBRSxDQUFDO1dBQ0wsQ0FBQyxDQUFDO0FBQ0gsY0FBSSxRQUFRLEtBQUssU0FBUyxFQUFFO0FBQzFCLHlCQUFhLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7V0FDdEM7O09BQ0Y7S0FDRjs7QUFFRCxRQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDWCxTQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3JCOztBQUVELFdBQU8sR0FBRyxDQUFDO0dBQ1osQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoiZWFjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGFwcGVuZENvbnRleHRQYXRoLFxuICBibG9ja1BhcmFtcyxcbiAgY3JlYXRlRnJhbWUsXG4gIGlzQXJyYXksXG4gIGlzRnVuY3Rpb25cbn0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignZWFjaCcsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ011c3QgcGFzcyBpdGVyYXRvciB0byAjZWFjaCcpO1xuICAgIH1cblxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm4sXG4gICAgICBpbnZlcnNlID0gb3B0aW9ucy5pbnZlcnNlLFxuICAgICAgaSA9IDAsXG4gICAgICByZXQgPSAnJyxcbiAgICAgIGRhdGEsXG4gICAgICBjb250ZXh0UGF0aDtcblxuICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcbiAgICAgIGNvbnRleHRQYXRoID1cbiAgICAgICAgYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSkgKyAnLic7XG4gICAgfVxuXG4gICAgaWYgKGlzRnVuY3Rpb24oY29udGV4dCkpIHtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0LmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZGF0YSkge1xuICAgICAgZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhlY0l0ZXJhdGlvbihmaWVsZCwgaW5kZXgsIGxhc3QpIHtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGRhdGEua2V5ID0gZmllbGQ7XG4gICAgICAgIGRhdGEuaW5kZXggPSBpbmRleDtcbiAgICAgICAgZGF0YS5maXJzdCA9IGluZGV4ID09PSAwO1xuICAgICAgICBkYXRhLmxhc3QgPSAhIWxhc3Q7XG5cbiAgICAgICAgaWYgKGNvbnRleHRQYXRoKSB7XG4gICAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGNvbnRleHRQYXRoICsgZmllbGQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0ID1cbiAgICAgICAgcmV0ICtcbiAgICAgICAgZm4oY29udGV4dFtmaWVsZF0sIHtcbiAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhcbiAgICAgICAgICAgIFtjb250ZXh0W2ZpZWxkXSwgZmllbGRdLFxuICAgICAgICAgICAgW2NvbnRleHRQYXRoICsgZmllbGQsIG51bGxdXG4gICAgICAgICAgKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoY29udGV4dCAmJiB0eXBlb2YgY29udGV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChpc0FycmF5KGNvbnRleHQpKSB7XG4gICAgICAgIGZvciAobGV0IGogPSBjb250ZXh0Lmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICAgIGlmIChpIGluIGNvbnRleHQpIHtcbiAgICAgICAgICAgIGV4ZWNJdGVyYXRpb24oaSwgaSwgaSA9PT0gY29udGV4dC5sZW5ndGggLSAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBjb250ZXh0W1N5bWJvbC5pdGVyYXRvcl0pIHtcbiAgICAgICAgY29uc3QgbmV3Q29udGV4dCA9IFtdO1xuICAgICAgICBjb25zdCBpdGVyYXRvciA9IGNvbnRleHRbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgICBmb3IgKGxldCBpdCA9IGl0ZXJhdG9yLm5leHQoKTsgIWl0LmRvbmU7IGl0ID0gaXRlcmF0b3IubmV4dCgpKSB7XG4gICAgICAgICAgbmV3Q29udGV4dC5wdXNoKGl0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0ID0gbmV3Q29udGV4dDtcbiAgICAgICAgZm9yIChsZXQgaiA9IGNvbnRleHQubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgZXhlY0l0ZXJhdGlvbihpLCBpLCBpID09PSBjb250ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcHJpb3JLZXk7XG5cbiAgICAgICAgT2JqZWN0LmtleXMoY29udGV4dCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgIC8vIFdlJ3JlIHJ1bm5pbmcgdGhlIGl0ZXJhdGlvbnMgb25lIHN0ZXAgb3V0IG9mIHN5bmMgc28gd2UgY2FuIGRldGVjdFxuICAgICAgICAgIC8vIHRoZSBsYXN0IGl0ZXJhdGlvbiB3aXRob3V0IGhhdmUgdG8gc2NhbiB0aGUgb2JqZWN0IHR3aWNlIGFuZCBjcmVhdGVcbiAgICAgICAgICAvLyBhbiBpdGVybWVkaWF0ZSBrZXlzIGFycmF5LlxuICAgICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByaW9yS2V5ID0ga2V5O1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZXhlY0l0ZXJhdGlvbihwcmlvcktleSwgaSAtIDEsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIHJldCA9IGludmVyc2UodGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfSk7XG59XG4iXX0=\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/helpers/each.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js ***!
  \*******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _exception = __webpack_require__(/*! ../exception */ \"./node_modules/handlebars/dist/cjs/handlebars/exception.js\");\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nexports[\"default\"] = function (instance) {\n  instance.registerHelper('helperMissing', function () /* [args, ]options */{\n    if (arguments.length === 1) {\n      // A missing field in a {{foo}} construct.\n      return undefined;\n    } else {\n      // Someone is actually trying to call something, blow up.\n      throw new _exception2['default']('Missing helper: \"' + arguments[arguments.length - 1].name + '\"');\n    }\n  });\n};\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaGVscGVyLW1pc3NpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozt5QkFBc0IsY0FBYzs7OztxQkFFckIsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUUsaUNBQWdDO0FBQ3ZFLFFBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7O0FBRTFCLGFBQU8sU0FBUyxDQUFDO0tBQ2xCLE1BQU07O0FBRUwsWUFBTSwyQkFDSixtQkFBbUIsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUNqRSxDQUFDO0tBQ0g7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJoZWxwZXItbWlzc2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbigvKiBbYXJncywgXW9wdGlvbnMgKi8pIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gQSBtaXNzaW5nIGZpZWxkIGluIGEge3tmb299fSBjb25zdHJ1Y3QuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTb21lb25lIGlzIGFjdHVhbGx5IHRyeWluZyB0byBjYWxsIHNvbWV0aGluZywgYmxvdyB1cC5cbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXG4gICAgICAgICdNaXNzaW5nIGhlbHBlcjogXCInICsgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXS5uYW1lICsgJ1wiJ1xuICAgICAgKTtcbiAgICB9XG4gIH0pO1xufVxuIl19\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/if.js":
/*!*******************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/if.js ***!
  \*******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/handlebars/dist/cjs/handlebars/utils.js\");\n\nvar _exception = __webpack_require__(/*! ../exception */ \"./node_modules/handlebars/dist/cjs/handlebars/exception.js\");\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nexports[\"default\"] = function (instance) {\n  instance.registerHelper('if', function (conditional, options) {\n    if (arguments.length != 2) {\n      throw new _exception2['default']('#if requires exactly one argument');\n    }\n    if (_utils.isFunction(conditional)) {\n      conditional = conditional.call(this);\n    }\n\n    // Default behavior is to render the positive path if the value is truthy and not empty.\n    // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {\n      return options.inverse(this);\n    } else {\n      return options.fn(this);\n    }\n  });\n\n  instance.registerHelper('unless', function (conditional, options) {\n    if (arguments.length != 2) {\n      throw new _exception2['default']('#unless requires exactly one argument');\n    }\n    return instance.helpers['if'].call(this, conditional, {\n      fn: options.inverse,\n      inverse: options.fn,\n      hash: options.hash\n    });\n  });\n};\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaWYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztxQkFBb0MsVUFBVTs7eUJBQ3hCLGNBQWM7Ozs7cUJBRXJCLFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVMsV0FBVyxFQUFFLE9BQU8sRUFBRTtBQUMzRCxRQUFJLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO0FBQ3pCLFlBQU0sMkJBQWMsbUNBQW1DLENBQUMsQ0FBQztLQUMxRDtBQUNELFFBQUksa0JBQVcsV0FBVyxDQUFDLEVBQUU7QUFDM0IsaUJBQVcsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3RDOzs7OztBQUtELFFBQUksQUFBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsV0FBVyxJQUFLLGVBQVEsV0FBVyxDQUFDLEVBQUU7QUFDdkUsYUFBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzlCLE1BQU07QUFDTCxhQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDekI7R0FDRixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBUyxXQUFXLEVBQUUsT0FBTyxFQUFFO0FBQy9ELFFBQUksU0FBUyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7QUFDekIsWUFBTSwyQkFBYyx1Q0FBdUMsQ0FBQyxDQUFDO0tBQzlEO0FBQ0QsV0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFO0FBQ3BELFFBQUUsRUFBRSxPQUFPLENBQUMsT0FBTztBQUNuQixhQUFPLEVBQUUsT0FBTyxDQUFDLEVBQUU7QUFDbkIsVUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO0tBQ25CLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUNKIiwiZmlsZSI6ImlmLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNFbXB0eSwgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2lmJywgZnVuY3Rpb24oY29uZGl0aW9uYWwsIG9wdGlvbnMpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPSAyKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCcjaWYgcmVxdWlyZXMgZXhhY3RseSBvbmUgYXJndW1lbnQnKTtcbiAgICB9XG4gICAgaWYgKGlzRnVuY3Rpb24oY29uZGl0aW9uYWwpKSB7XG4gICAgICBjb25kaXRpb25hbCA9IGNvbmRpdGlvbmFsLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCBiZWhhdmlvciBpcyB0byByZW5kZXIgdGhlIHBvc2l0aXZlIHBhdGggaWYgdGhlIHZhbHVlIGlzIHRydXRoeSBhbmQgbm90IGVtcHR5LlxuICAgIC8vIFRoZSBgaW5jbHVkZVplcm9gIG9wdGlvbiBtYXkgYmUgc2V0IHRvIHRyZWF0IHRoZSBjb25kdGlvbmFsIGFzIHB1cmVseSBub3QgZW1wdHkgYmFzZWQgb24gdGhlXG4gICAgLy8gYmVoYXZpb3Igb2YgaXNFbXB0eS4gRWZmZWN0aXZlbHkgdGhpcyBkZXRlcm1pbmVzIGlmIDAgaXMgaGFuZGxlZCBieSB0aGUgcG9zaXRpdmUgcGF0aCBvciBuZWdhdGl2ZS5cbiAgICBpZiAoKCFvcHRpb25zLmhhc2guaW5jbHVkZVplcm8gJiYgIWNvbmRpdGlvbmFsKSB8fCBpc0VtcHR5KGNvbmRpdGlvbmFsKSkge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuZm4odGhpcyk7XG4gICAgfVxuICB9KTtcblxuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcigndW5sZXNzJywgZnVuY3Rpb24oY29uZGl0aW9uYWwsIG9wdGlvbnMpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPSAyKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCcjdW5sZXNzIHJlcXVpcmVzIGV4YWN0bHkgb25lIGFyZ3VtZW50Jyk7XG4gICAgfVxuICAgIHJldHVybiBpbnN0YW5jZS5oZWxwZXJzWydpZiddLmNhbGwodGhpcywgY29uZGl0aW9uYWwsIHtcbiAgICAgIGZuOiBvcHRpb25zLmludmVyc2UsXG4gICAgICBpbnZlcnNlOiBvcHRpb25zLmZuLFxuICAgICAgaGFzaDogb3B0aW9ucy5oYXNoXG4gICAgfSk7XG4gIH0pO1xufVxuIl19\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/helpers/if.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/log.js":
/*!********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/log.js ***!
  \********************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\n\nexports.__esModule = true;\n\nexports[\"default\"] = function (instance) {\n  instance.registerHelper('log', function () /* message, options */{\n    var args = [undefined],\n        options = arguments[arguments.length - 1];\n    for (var i = 0; i < arguments.length - 1; i++) {\n      args.push(arguments[i]);\n    }\n\n    var level = 1;\n    if (options.hash.level != null) {\n      level = options.hash.level;\n    } else if (options.data && options.data.level != null) {\n      level = options.data.level;\n    }\n    args[0] = level;\n\n    instance.log.apply(instance, args);\n  });\n};\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvbG9nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWUsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsa0NBQWlDO0FBQzlELFFBQUksSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDO1FBQ3BCLE9BQU8sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM1QyxTQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDN0MsVUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN6Qjs7QUFFRCxRQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDZCxRQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRTtBQUM5QixXQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7S0FDNUIsTUFBTSxJQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO0FBQ3JELFdBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztLQUM1QjtBQUNELFFBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7O0FBRWhCLFlBQVEsQ0FBQyxHQUFHLE1BQUEsQ0FBWixRQUFRLEVBQVEsSUFBSSxDQUFDLENBQUM7R0FDdkIsQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoibG9nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2xvZycsIGZ1bmN0aW9uKC8qIG1lc3NhZ2UsIG9wdGlvbnMgKi8pIHtcbiAgICBsZXQgYXJncyA9IFt1bmRlZmluZWRdLFxuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG5cbiAgICBsZXQgbGV2ZWwgPSAxO1xuICAgIGlmIChvcHRpb25zLmhhc2gubGV2ZWwgIT0gbnVsbCkge1xuICAgICAgbGV2ZWwgPSBvcHRpb25zLmhhc2gubGV2ZWw7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5kYXRhLmxldmVsICE9IG51bGwpIHtcbiAgICAgIGxldmVsID0gb3B0aW9ucy5kYXRhLmxldmVsO1xuICAgIH1cbiAgICBhcmdzWzBdID0gbGV2ZWw7XG5cbiAgICBpbnN0YW5jZS5sb2coLi4uYXJncyk7XG4gIH0pO1xufVxuIl19\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/helpers/log.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js":
/*!***********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js ***!
  \***********************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\n\nexports.__esModule = true;\n\nexports[\"default\"] = function (instance) {\n  instance.registerHelper('lookup', function (obj, field, options) {\n    if (!obj) {\n      // Note for 5.0: Change to \"obj == null\" in 5.0\n      return obj;\n    }\n    return options.lookupProperty(obj, field);\n  });\n};\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvbG9va3VwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWUsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBUyxHQUFHLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRTtBQUM5RCxRQUFJLENBQUMsR0FBRyxFQUFFOztBQUVSLGFBQU8sR0FBRyxDQUFDO0tBQ1o7QUFDRCxXQUFPLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0dBQzNDLENBQUMsQ0FBQztDQUNKIiwiZmlsZSI6Imxvb2t1cC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdsb29rdXAnLCBmdW5jdGlvbihvYmosIGZpZWxkLCBvcHRpb25zKSB7XG4gICAgaWYgKCFvYmopIHtcbiAgICAgIC8vIE5vdGUgZm9yIDUuMDogQ2hhbmdlIHRvIFwib2JqID09IG51bGxcIiBpbiA1LjBcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zLmxvb2t1cFByb3BlcnR5KG9iaiwgZmllbGQpO1xuICB9KTtcbn1cbiJdfQ==\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/with.js":
/*!*********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/with.js ***!
  \*********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/handlebars/dist/cjs/handlebars/utils.js\");\n\nvar _exception = __webpack_require__(/*! ../exception */ \"./node_modules/handlebars/dist/cjs/handlebars/exception.js\");\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nexports[\"default\"] = function (instance) {\n  instance.registerHelper('with', function (context, options) {\n    if (arguments.length != 2) {\n      throw new _exception2['default']('#with requires exactly one argument');\n    }\n    if (_utils.isFunction(context)) {\n      context = context.call(this);\n    }\n\n    var fn = options.fn;\n\n    if (!_utils.isEmpty(context)) {\n      var data = options.data;\n      if (options.data && options.ids) {\n        data = _utils.createFrame(options.data);\n        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);\n      }\n\n      return fn(context, {\n        data: data,\n        blockParams: _utils.blockParams([context], [data && data.contextPath])\n      });\n    } else {\n      return options.inverse(this);\n    }\n  });\n};\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvd2l0aC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O3FCQU1PLFVBQVU7O3lCQUNLLGNBQWM7Ozs7cUJBRXJCLFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFVBQVMsT0FBTyxFQUFFLE9BQU8sRUFBRTtBQUN6RCxRQUFJLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO0FBQ3pCLFlBQU0sMkJBQWMscUNBQXFDLENBQUMsQ0FBQztLQUM1RDtBQUNELFFBQUksa0JBQVcsT0FBTyxDQUFDLEVBQUU7QUFDdkIsYUFBTyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDOUI7O0FBRUQsUUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQzs7QUFFcEIsUUFBSSxDQUFDLGVBQVEsT0FBTyxDQUFDLEVBQUU7QUFDckIsVUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztBQUN4QixVQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUMvQixZQUFJLEdBQUcsbUJBQVksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLFlBQUksQ0FBQyxXQUFXLEdBQUcseUJBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUNmLENBQUM7T0FDSDs7QUFFRCxhQUFPLEVBQUUsQ0FBQyxPQUFPLEVBQUU7QUFDakIsWUFBSSxFQUFFLElBQUk7QUFDVixtQkFBVyxFQUFFLG1CQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO09BQ2hFLENBQUMsQ0FBQztLQUNKLE1BQU07QUFDTCxhQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDOUI7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJ3aXRoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYXBwZW5kQ29udGV4dFBhdGgsXG4gIGJsb2NrUGFyYW1zLFxuICBjcmVhdGVGcmFtZSxcbiAgaXNFbXB0eSxcbiAgaXNGdW5jdGlvblxufSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCd3aXRoJywgZnVuY3Rpb24oY29udGV4dCwgb3B0aW9ucykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9IDIpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJyN3aXRoIHJlcXVpcmVzIGV4YWN0bHkgb25lIGFyZ3VtZW50Jyk7XG4gICAgfVxuICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRleHQpKSB7XG4gICAgICBjb250ZXh0ID0gY29udGV4dC5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm47XG5cbiAgICBpZiAoIWlzRW1wdHkoY29udGV4dCkpIHtcbiAgICAgIGxldCBkYXRhID0gb3B0aW9ucy5kYXRhO1xuICAgICAgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmlkcykge1xuICAgICAgICBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKFxuICAgICAgICAgIG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCxcbiAgICAgICAgICBvcHRpb25zLmlkc1swXVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm4oY29udGV4dCwge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBibG9ja1BhcmFtczogYmxvY2tQYXJhbXMoW2NvbnRleHRdLCBbZGF0YSAmJiBkYXRhLmNvbnRleHRQYXRoXSlcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/helpers/with.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/internal/create-new-lookup-object.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/internal/create-new-lookup-object.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.createNewLookupObject = createNewLookupObject;\n\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/handlebars/dist/cjs/handlebars/utils.js\");\n\n/**\n * Create a new object with \"null\"-prototype to avoid truthy results on prototype properties.\n * The resulting object can be used with \"object[property]\" to check if a property exists\n * @param {...object} sources a varargs parameter of source objects that will be merged\n * @returns {object}\n */\n\nfunction createNewLookupObject() {\n  for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n\n  return _utils.extend.apply(undefined, [Object.create(null)].concat(sources));\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2ludGVybmFsL2NyZWF0ZS1uZXctbG9va3VwLW9iamVjdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztxQkFBdUIsVUFBVTs7Ozs7Ozs7O0FBUTFCLFNBQVMscUJBQXFCLEdBQWE7b0NBQVQsT0FBTztBQUFQLFdBQU87OztBQUM5QyxTQUFPLGdDQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQUssT0FBTyxFQUFDLENBQUM7Q0FDaEQiLCJmaWxlIjoiY3JlYXRlLW5ldy1sb29rdXAtb2JqZWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCBcIm51bGxcIi1wcm90b3R5cGUgdG8gYXZvaWQgdHJ1dGh5IHJlc3VsdHMgb24gcHJvdG90eXBlIHByb3BlcnRpZXMuXG4gKiBUaGUgcmVzdWx0aW5nIG9iamVjdCBjYW4gYmUgdXNlZCB3aXRoIFwib2JqZWN0W3Byb3BlcnR5XVwiIHRvIGNoZWNrIGlmIGEgcHJvcGVydHkgZXhpc3RzXG4gKiBAcGFyYW0gey4uLm9iamVjdH0gc291cmNlcyBhIHZhcmFyZ3MgcGFyYW1ldGVyIG9mIHNvdXJjZSBvYmplY3RzIHRoYXQgd2lsbCBiZSBtZXJnZWRcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOZXdMb29rdXBPYmplY3QoLi4uc291cmNlcykge1xuICByZXR1cm4gZXh0ZW5kKE9iamVjdC5jcmVhdGUobnVsbCksIC4uLnNvdXJjZXMpO1xufVxuIl19\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/internal/create-new-lookup-object.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/internal/proto-access.js":
/*!******************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/internal/proto-access.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.createProtoAccessControl = createProtoAccessControl;\nexports.resultIsAllowed = resultIsAllowed;\nexports.resetLoggedProperties = resetLoggedProperties;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _createNewLookupObject = __webpack_require__(/*! ./create-new-lookup-object */ \"./node_modules/handlebars/dist/cjs/handlebars/internal/create-new-lookup-object.js\");\n\nvar _logger = __webpack_require__(/*! ../logger */ \"./node_modules/handlebars/dist/cjs/handlebars/logger.js\");\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar loggedProperties = Object.create(null);\n\nfunction createProtoAccessControl(runtimeOptions) {\n  var defaultMethodWhiteList = Object.create(null);\n  defaultMethodWhiteList['constructor'] = false;\n  defaultMethodWhiteList['__defineGetter__'] = false;\n  defaultMethodWhiteList['__defineSetter__'] = false;\n  defaultMethodWhiteList['__lookupGetter__'] = false;\n\n  var defaultPropertyWhiteList = Object.create(null);\n  // eslint-disable-next-line no-proto\n  defaultPropertyWhiteList['__proto__'] = false;\n\n  return {\n    properties: {\n      whitelist: _createNewLookupObject.createNewLookupObject(defaultPropertyWhiteList, runtimeOptions.allowedProtoProperties),\n      defaultValue: runtimeOptions.allowProtoPropertiesByDefault\n    },\n    methods: {\n      whitelist: _createNewLookupObject.createNewLookupObject(defaultMethodWhiteList, runtimeOptions.allowedProtoMethods),\n      defaultValue: runtimeOptions.allowProtoMethodsByDefault\n    }\n  };\n}\n\nfunction resultIsAllowed(result, protoAccessControl, propertyName) {\n  if (typeof result === 'function') {\n    return checkWhiteList(protoAccessControl.methods, propertyName);\n  } else {\n    return checkWhiteList(protoAccessControl.properties, propertyName);\n  }\n}\n\nfunction checkWhiteList(protoAccessControlForType, propertyName) {\n  if (protoAccessControlForType.whitelist[propertyName] !== undefined) {\n    return protoAccessControlForType.whitelist[propertyName] === true;\n  }\n  if (protoAccessControlForType.defaultValue !== undefined) {\n    return protoAccessControlForType.defaultValue;\n  }\n  logUnexpecedPropertyAccessOnce(propertyName);\n  return false;\n}\n\nfunction logUnexpecedPropertyAccessOnce(propertyName) {\n  if (loggedProperties[propertyName] !== true) {\n    loggedProperties[propertyName] = true;\n    _logger2['default'].log('error', 'Handlebars: Access has been denied to resolve the property \"' + propertyName + '\" because it is not an \"own property\" of its parent.\\n' + 'You can add a runtime option to disable the check or this warning:\\n' + 'See https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details');\n  }\n}\n\nfunction resetLoggedProperties() {\n  Object.keys(loggedProperties).forEach(function (propertyName) {\n    delete loggedProperties[propertyName];\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2ludGVybmFsL3Byb3RvLWFjY2Vzcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O3FDQUFzQyw0QkFBNEI7O3NCQUMvQyxXQUFXOzs7O0FBRTlCLElBQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQzs7QUFFdEMsU0FBUyx3QkFBd0IsQ0FBQyxjQUFjLEVBQUU7QUFDdkQsTUFBSSxzQkFBc0IsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pELHdCQUFzQixDQUFDLGFBQWEsQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUM5Qyx3QkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUNuRCx3QkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUNuRCx3QkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEtBQUssQ0FBQzs7QUFFbkQsTUFBSSx3QkFBd0IsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDOztBQUVuRCwwQkFBd0IsQ0FBQyxXQUFXLENBQUMsR0FBRyxLQUFLLENBQUM7O0FBRTlDLFNBQU87QUFDTCxjQUFVLEVBQUU7QUFDVixlQUFTLEVBQUUsNkNBQ1Qsd0JBQXdCLEVBQ3hCLGNBQWMsQ0FBQyxzQkFBc0IsQ0FDdEM7QUFDRCxrQkFBWSxFQUFFLGNBQWMsQ0FBQyw2QkFBNkI7S0FDM0Q7QUFDRCxXQUFPLEVBQUU7QUFDUCxlQUFTLEVBQUUsNkNBQ1Qsc0JBQXNCLEVBQ3RCLGNBQWMsQ0FBQyxtQkFBbUIsQ0FDbkM7QUFDRCxrQkFBWSxFQUFFLGNBQWMsQ0FBQywwQkFBMEI7S0FDeEQ7R0FDRixDQUFDO0NBQ0g7O0FBRU0sU0FBUyxlQUFlLENBQUMsTUFBTSxFQUFFLGtCQUFrQixFQUFFLFlBQVksRUFBRTtBQUN4RSxNQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsRUFBRTtBQUNoQyxXQUFPLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7R0FDakUsTUFBTTtBQUNMLFdBQU8sY0FBYyxDQUFDLGtCQUFrQixDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQztHQUNwRTtDQUNGOztBQUVELFNBQVMsY0FBYyxDQUFDLHlCQUF5QixFQUFFLFlBQVksRUFBRTtBQUMvRCxNQUFJLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsS0FBSyxTQUFTLEVBQUU7QUFDbkUsV0FBTyx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLEtBQUssSUFBSSxDQUFDO0dBQ25FO0FBQ0QsTUFBSSx5QkFBeUIsQ0FBQyxZQUFZLEtBQUssU0FBUyxFQUFFO0FBQ3hELFdBQU8seUJBQXlCLENBQUMsWUFBWSxDQUFDO0dBQy9DO0FBQ0QsZ0NBQThCLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDN0MsU0FBTyxLQUFLLENBQUM7Q0FDZDs7QUFFRCxTQUFTLDhCQUE4QixDQUFDLFlBQVksRUFBRTtBQUNwRCxNQUFJLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxLQUFLLElBQUksRUFBRTtBQUMzQyxvQkFBZ0IsQ0FBQyxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDdEMsd0JBQU8sR0FBRyxDQUNSLE9BQU8sRUFDUCxpRUFBK0QsWUFBWSxvSUFDSCxvSEFDMkMsQ0FDcEgsQ0FBQztHQUNIO0NBQ0Y7O0FBRU0sU0FBUyxxQkFBcUIsR0FBRztBQUN0QyxRQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsWUFBWSxFQUFJO0FBQ3BELFdBQU8sZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUM7R0FDdkMsQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoicHJvdG8tYWNjZXNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlTmV3TG9va3VwT2JqZWN0IH0gZnJvbSAnLi9jcmVhdGUtbmV3LWxvb2t1cC1vYmplY3QnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuXG5jb25zdCBsb2dnZWRQcm9wZXJ0aWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb3RvQWNjZXNzQ29udHJvbChydW50aW1lT3B0aW9ucykge1xuICBsZXQgZGVmYXVsdE1ldGhvZFdoaXRlTGlzdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGRlZmF1bHRNZXRob2RXaGl0ZUxpc3RbJ2NvbnN0cnVjdG9yJ10gPSBmYWxzZTtcbiAgZGVmYXVsdE1ldGhvZFdoaXRlTGlzdFsnX19kZWZpbmVHZXR0ZXJfXyddID0gZmFsc2U7XG4gIGRlZmF1bHRNZXRob2RXaGl0ZUxpc3RbJ19fZGVmaW5lU2V0dGVyX18nXSA9IGZhbHNlO1xuICBkZWZhdWx0TWV0aG9kV2hpdGVMaXN0WydfX2xvb2t1cEdldHRlcl9fJ10gPSBmYWxzZTtcblxuICBsZXQgZGVmYXVsdFByb3BlcnR5V2hpdGVMaXN0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvXG4gIGRlZmF1bHRQcm9wZXJ0eVdoaXRlTGlzdFsnX19wcm90b19fJ10gPSBmYWxzZTtcblxuICByZXR1cm4ge1xuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIHdoaXRlbGlzdDogY3JlYXRlTmV3TG9va3VwT2JqZWN0KFxuICAgICAgICBkZWZhdWx0UHJvcGVydHlXaGl0ZUxpc3QsXG4gICAgICAgIHJ1bnRpbWVPcHRpb25zLmFsbG93ZWRQcm90b1Byb3BlcnRpZXNcbiAgICAgICksXG4gICAgICBkZWZhdWx0VmFsdWU6IHJ1bnRpbWVPcHRpb25zLmFsbG93UHJvdG9Qcm9wZXJ0aWVzQnlEZWZhdWx0XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICB3aGl0ZWxpc3Q6IGNyZWF0ZU5ld0xvb2t1cE9iamVjdChcbiAgICAgICAgZGVmYXVsdE1ldGhvZFdoaXRlTGlzdCxcbiAgICAgICAgcnVudGltZU9wdGlvbnMuYWxsb3dlZFByb3RvTWV0aG9kc1xuICAgICAgKSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogcnVudGltZU9wdGlvbnMuYWxsb3dQcm90b01ldGhvZHNCeURlZmF1bHRcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXN1bHRJc0FsbG93ZWQocmVzdWx0LCBwcm90b0FjY2Vzc0NvbnRyb2wsIHByb3BlcnR5TmFtZSkge1xuICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBjaGVja1doaXRlTGlzdChwcm90b0FjY2Vzc0NvbnRyb2wubWV0aG9kcywgcHJvcGVydHlOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY2hlY2tXaGl0ZUxpc3QocHJvdG9BY2Nlc3NDb250cm9sLnByb3BlcnRpZXMsIHByb3BlcnR5TmFtZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tXaGl0ZUxpc3QocHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZSwgcHJvcGVydHlOYW1lKSB7XG4gIGlmIChwcm90b0FjY2Vzc0NvbnRyb2xGb3JUeXBlLndoaXRlbGlzdFtwcm9wZXJ0eU5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZS53aGl0ZWxpc3RbcHJvcGVydHlOYW1lXSA9PT0gdHJ1ZTtcbiAgfVxuICBpZiAocHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZS5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBwcm90b0FjY2Vzc0NvbnRyb2xGb3JUeXBlLmRlZmF1bHRWYWx1ZTtcbiAgfVxuICBsb2dVbmV4cGVjZWRQcm9wZXJ0eUFjY2Vzc09uY2UocHJvcGVydHlOYW1lKTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBsb2dVbmV4cGVjZWRQcm9wZXJ0eUFjY2Vzc09uY2UocHJvcGVydHlOYW1lKSB7XG4gIGlmIChsb2dnZWRQcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV0gIT09IHRydWUpIHtcbiAgICBsb2dnZWRQcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV0gPSB0cnVlO1xuICAgIGxvZ2dlci5sb2coXG4gICAgICAnZXJyb3InLFxuICAgICAgYEhhbmRsZWJhcnM6IEFjY2VzcyBoYXMgYmVlbiBkZW5pZWQgdG8gcmVzb2x2ZSB0aGUgcHJvcGVydHkgXCIke3Byb3BlcnR5TmFtZX1cIiBiZWNhdXNlIGl0IGlzIG5vdCBhbiBcIm93biBwcm9wZXJ0eVwiIG9mIGl0cyBwYXJlbnQuXFxuYCArXG4gICAgICAgIGBZb3UgY2FuIGFkZCBhIHJ1bnRpbWUgb3B0aW9uIHRvIGRpc2FibGUgdGhlIGNoZWNrIG9yIHRoaXMgd2FybmluZzpcXG5gICtcbiAgICAgICAgYFNlZSBodHRwczovL2hhbmRsZWJhcnNqcy5jb20vYXBpLXJlZmVyZW5jZS9ydW50aW1lLW9wdGlvbnMuaHRtbCNvcHRpb25zLXRvLWNvbnRyb2wtcHJvdG90eXBlLWFjY2VzcyBmb3IgZGV0YWlsc2BcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNldExvZ2dlZFByb3BlcnRpZXMoKSB7XG4gIE9iamVjdC5rZXlzKGxvZ2dlZFByb3BlcnRpZXMpLmZvckVhY2gocHJvcGVydHlOYW1lID0+IHtcbiAgICBkZWxldGUgbG9nZ2VkUHJvcGVydGllc1twcm9wZXJ0eU5hbWVdO1xuICB9KTtcbn1cbiJdfQ==\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/internal/proto-access.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/internal/wrapHelper.js":
/*!****************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/internal/wrapHelper.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.wrapHelper = wrapHelper;\n\nfunction wrapHelper(helper, transformOptionsFn) {\n  if (typeof helper !== 'function') {\n    // This should not happen, but apparently it does in https://github.com/wycats/handlebars.js/issues/1639\n    // We try to make the wrapper least-invasive by not wrapping it, if the helper is not a function.\n    return helper;\n  }\n  var wrapper = function wrapper() /* dynamic arguments */{\n    var options = arguments[arguments.length - 1];\n    arguments[arguments.length - 1] = transformOptionsFn(options);\n    return helper.apply(this, arguments);\n  };\n  return wrapper;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2ludGVybmFsL3dyYXBIZWxwZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxTQUFTLFVBQVUsQ0FBQyxNQUFNLEVBQUUsa0JBQWtCLEVBQUU7QUFDckQsTUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLEVBQUU7OztBQUdoQyxXQUFPLE1BQU0sQ0FBQztHQUNmO0FBQ0QsTUFBSSxPQUFPLEdBQUcsU0FBVixPQUFPLDBCQUFxQztBQUM5QyxRQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNoRCxhQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM5RCxXQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0dBQ3RDLENBQUM7QUFDRixTQUFPLE9BQU8sQ0FBQztDQUNoQiIsImZpbGUiOiJ3cmFwSGVscGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHdyYXBIZWxwZXIoaGVscGVyLCB0cmFuc2Zvcm1PcHRpb25zRm4pIHtcbiAgaWYgKHR5cGVvZiBoZWxwZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBUaGlzIHNob3VsZCBub3QgaGFwcGVuLCBidXQgYXBwYXJlbnRseSBpdCBkb2VzIGluIGh0dHBzOi8vZ2l0aHViLmNvbS93eWNhdHMvaGFuZGxlYmFycy5qcy9pc3N1ZXMvMTYzOVxuICAgIC8vIFdlIHRyeSB0byBtYWtlIHRoZSB3cmFwcGVyIGxlYXN0LWludmFzaXZlIGJ5IG5vdCB3cmFwcGluZyBpdCwgaWYgdGhlIGhlbHBlciBpcyBub3QgYSBmdW5jdGlvbi5cbiAgICByZXR1cm4gaGVscGVyO1xuICB9XG4gIGxldCB3cmFwcGVyID0gZnVuY3Rpb24oLyogZHluYW1pYyBhcmd1bWVudHMgKi8pIHtcbiAgICBjb25zdCBvcHRpb25zID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcbiAgICBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdID0gdHJhbnNmb3JtT3B0aW9uc0ZuKG9wdGlvbnMpO1xuICAgIHJldHVybiBoZWxwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbiAgcmV0dXJuIHdyYXBwZXI7XG59XG4iXX0=\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/internal/wrapHelper.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/logger.js":
/*!***************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/logger.js ***!
  \***************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\n\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/handlebars/dist/cjs/handlebars/utils.js\");\n\nvar logger = {\n  methodMap: ['debug', 'info', 'warn', 'error'],\n  level: 'info',\n\n  // Maps a given level value to the `methodMap` indexes above.\n  lookupLevel: function lookupLevel(level) {\n    if (typeof level === 'string') {\n      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());\n      if (levelMap >= 0) {\n        level = levelMap;\n      } else {\n        level = parseInt(level, 10);\n      }\n    }\n\n    return level;\n  },\n\n  // Can be overridden in the host environment\n  log: function log(level) {\n    level = logger.lookupLevel(level);\n\n    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {\n      var method = logger.methodMap[level];\n      // eslint-disable-next-line no-console\n      if (!console[method]) {\n        method = 'log';\n      }\n\n      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        message[_key - 1] = arguments[_key];\n      }\n\n      console[method].apply(console, message); // eslint-disable-line no-console\n    }\n  }\n};\n\nexports[\"default\"] = logger;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2xvZ2dlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3FCQUF3QixTQUFTOztBQUVqQyxJQUFJLE1BQU0sR0FBRztBQUNYLFdBQVMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQztBQUM3QyxPQUFLLEVBQUUsTUFBTTs7O0FBR2IsYUFBVyxFQUFFLHFCQUFTLEtBQUssRUFBRTtBQUMzQixRQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtBQUM3QixVQUFJLFFBQVEsR0FBRyxlQUFRLE1BQU0sQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDOUQsVUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO0FBQ2pCLGFBQUssR0FBRyxRQUFRLENBQUM7T0FDbEIsTUFBTTtBQUNMLGFBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO09BQzdCO0tBQ0Y7O0FBRUQsV0FBTyxLQUFLLENBQUM7R0FDZDs7O0FBR0QsS0FBRyxFQUFFLGFBQVMsS0FBSyxFQUFjO0FBQy9CLFNBQUssR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUVsQyxRQUNFLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFDOUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxFQUN6QztBQUNBLFVBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7O0FBRXJDLFVBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDcEIsY0FBTSxHQUFHLEtBQUssQ0FBQztPQUNoQjs7d0NBWG1CLE9BQU87QUFBUCxlQUFPOzs7QUFZM0IsYUFBTyxDQUFDLE1BQU0sT0FBQyxDQUFmLE9BQU8sRUFBWSxPQUFPLENBQUMsQ0FBQztLQUM3QjtHQUNGO0NBQ0YsQ0FBQzs7cUJBRWEsTUFBTSIsImZpbGUiOiJsb2dnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmRleE9mIH0gZnJvbSAnLi91dGlscyc7XG5cbmxldCBsb2dnZXIgPSB7XG4gIG1ldGhvZE1hcDogWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXSxcbiAgbGV2ZWw6ICdpbmZvJyxcblxuICAvLyBNYXBzIGEgZ2l2ZW4gbGV2ZWwgdmFsdWUgdG8gdGhlIGBtZXRob2RNYXBgIGluZGV4ZXMgYWJvdmUuXG4gIGxvb2t1cExldmVsOiBmdW5jdGlvbihsZXZlbCkge1xuICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgbGV2ZWxNYXAgPSBpbmRleE9mKGxvZ2dlci5tZXRob2RNYXAsIGxldmVsLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKGxldmVsTWFwID49IDApIHtcbiAgICAgICAgbGV2ZWwgPSBsZXZlbE1hcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldmVsID0gcGFyc2VJbnQobGV2ZWwsIDEwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGV2ZWw7XG4gIH0sXG5cbiAgLy8gQ2FuIGJlIG92ZXJyaWRkZW4gaW4gdGhlIGhvc3QgZW52aXJvbm1lbnRcbiAgbG9nOiBmdW5jdGlvbihsZXZlbCwgLi4ubWVzc2FnZSkge1xuICAgIGxldmVsID0gbG9nZ2VyLmxvb2t1cExldmVsKGxldmVsKTtcblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgbG9nZ2VyLmxvb2t1cExldmVsKGxvZ2dlci5sZXZlbCkgPD0gbGV2ZWxcbiAgICApIHtcbiAgICAgIGxldCBtZXRob2QgPSBsb2dnZXIubWV0aG9kTWFwW2xldmVsXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBpZiAoIWNvbnNvbGVbbWV0aG9kXSkge1xuICAgICAgICBtZXRob2QgPSAnbG9nJztcbiAgICAgIH1cbiAgICAgIGNvbnNvbGVbbWV0aG9kXSguLi5tZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2dnZXI7XG4iXX0=\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/logger.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js":
/*!********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js ***!
  \********************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("/* global globalThis */\n\n\nexports.__esModule = true;\n\nexports[\"default\"] = function (Handlebars) {\n  /* istanbul ignore next */\n  // https://mathiasbynens.be/notes/globalthis\n  (function () {\n    if (typeof globalThis === 'object') return;\n    Object.prototype.__defineGetter__('__magic__', function () {\n      return this;\n    });\n    __magic__.globalThis = __magic__; // eslint-disable-line no-undef\n    delete Object.prototype.__magic__;\n  })();\n\n  var $Handlebars = globalThis.Handlebars;\n\n  /* istanbul ignore next */\n  Handlebars.noConflict = function () {\n    if (globalThis.Handlebars === Handlebars) {\n      globalThis.Handlebars = $Handlebars;\n    }\n    return Handlebars;\n  };\n};\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL25vLWNvbmZsaWN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O3FCQUNlLFVBQVMsVUFBVSxFQUFFOzs7QUFHbEMsR0FBQyxZQUFXO0FBQ1YsUUFBSSxPQUFPLFVBQVUsS0FBSyxRQUFRLEVBQUUsT0FBTztBQUMzQyxVQUFNLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxZQUFXO0FBQ3hELGFBQU8sSUFBSSxDQUFDO0tBQ2IsQ0FBQyxDQUFDO0FBQ0gsYUFBUyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7QUFDakMsV0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztHQUNuQyxDQUFBLEVBQUcsQ0FBQzs7QUFFTCxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDOzs7QUFHMUMsWUFBVSxDQUFDLFVBQVUsR0FBRyxZQUFXO0FBQ2pDLFFBQUksVUFBVSxDQUFDLFVBQVUsS0FBSyxVQUFVLEVBQUU7QUFDeEMsZ0JBQVUsQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDO0tBQ3JDO0FBQ0QsV0FBTyxVQUFVLENBQUM7R0FDbkIsQ0FBQztDQUNIIiwiZmlsZSI6Im5vLWNvbmZsaWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIGdsb2JhbFRoaXMgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKEhhbmRsZWJhcnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgLy8gaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2dsb2JhbHRoaXNcbiAgKGZ1bmN0aW9uKCkge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybjtcbiAgICBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oJ19fbWFnaWNfXycsIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSk7XG4gICAgX19tYWdpY19fLmdsb2JhbFRoaXMgPSBfX21hZ2ljX187IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICBkZWxldGUgT2JqZWN0LnByb3RvdHlwZS5fX21hZ2ljX187XG4gIH0pKCk7XG5cbiAgY29uc3QgJEhhbmRsZWJhcnMgPSBnbG9iYWxUaGlzLkhhbmRsZWJhcnM7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgSGFuZGxlYmFycy5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGdsb2JhbFRoaXMuSGFuZGxlYmFycyA9PT0gSGFuZGxlYmFycykge1xuICAgICAgZ2xvYmFsVGhpcy5IYW5kbGViYXJzID0gJEhhbmRsZWJhcnM7XG4gICAgfVxuICAgIHJldHVybiBIYW5kbGViYXJzO1xuICB9O1xufVxuIl19\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/runtime.js":
/*!****************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/runtime.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.checkRevision = checkRevision;\nexports.template = template;\nexports.wrapProgram = wrapProgram;\nexports.resolvePartial = resolvePartial;\nexports.invokePartial = invokePartial;\nexports.noop = noop;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/handlebars/dist/cjs/handlebars/utils.js\");\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _exception = __webpack_require__(/*! ./exception */ \"./node_modules/handlebars/dist/cjs/handlebars/exception.js\");\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nvar _base = __webpack_require__(/*! ./base */ \"./node_modules/handlebars/dist/cjs/handlebars/base.js\");\n\nvar _helpers = __webpack_require__(/*! ./helpers */ \"./node_modules/handlebars/dist/cjs/handlebars/helpers.js\");\n\nvar _internalWrapHelper = __webpack_require__(/*! ./internal/wrapHelper */ \"./node_modules/handlebars/dist/cjs/handlebars/internal/wrapHelper.js\");\n\nvar _internalProtoAccess = __webpack_require__(/*! ./internal/proto-access */ \"./node_modules/handlebars/dist/cjs/handlebars/internal/proto-access.js\");\n\nfunction checkRevision(compilerInfo) {\n  var compilerRevision = compilerInfo && compilerInfo[0] || 1,\n      currentRevision = _base.COMPILER_REVISION;\n\n  if (compilerRevision >= _base.LAST_COMPATIBLE_COMPILER_REVISION && compilerRevision <= _base.COMPILER_REVISION) {\n    return;\n  }\n\n  if (compilerRevision < _base.LAST_COMPATIBLE_COMPILER_REVISION) {\n    var runtimeVersions = _base.REVISION_CHANGES[currentRevision],\n        compilerVersions = _base.REVISION_CHANGES[compilerRevision];\n    throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');\n  } else {\n    // Use the embedded version info since the runtime doesn't know about this revision yet\n    throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');\n  }\n}\n\nfunction template(templateSpec, env) {\n  /* istanbul ignore next */\n  if (!env) {\n    throw new _exception2['default']('No environment passed to template');\n  }\n  if (!templateSpec || !templateSpec.main) {\n    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);\n  }\n\n  templateSpec.main.decorator = templateSpec.main_d;\n\n  // Note: Using env.VM references rather than local var references throughout this section to allow\n  // for external users to override these as pseudo-supported APIs.\n  env.VM.checkRevision(templateSpec.compiler);\n\n  // backwards compatibility for precompiled templates with compiler-version 7 (<4.3.0)\n  var templateWasPrecompiledWithCompilerV7 = templateSpec.compiler && templateSpec.compiler[0] === 7;\n\n  function invokePartialWrapper(partial, context, options) {\n    if (options.hash) {\n      context = Utils.extend({}, context, options.hash);\n      if (options.ids) {\n        options.ids[0] = true;\n      }\n    }\n    partial = env.VM.resolvePartial.call(this, partial, context, options);\n\n    var extendedOptions = Utils.extend({}, options, {\n      hooks: this.hooks,\n      protoAccessControl: this.protoAccessControl\n    });\n\n    var result = env.VM.invokePartial.call(this, partial, context, extendedOptions);\n\n    if (result == null && env.compile) {\n      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);\n      result = options.partials[options.name](context, extendedOptions);\n    }\n    if (result != null) {\n      if (options.indent) {\n        var lines = result.split('\\n');\n        for (var i = 0, l = lines.length; i < l; i++) {\n          if (!lines[i] && i + 1 === l) {\n            break;\n          }\n\n          lines[i] = options.indent + lines[i];\n        }\n        result = lines.join('\\n');\n      }\n      return result;\n    } else {\n      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');\n    }\n  }\n\n  // Just add water\n  var container = {\n    strict: function strict(obj, name, loc) {\n      if (!obj || !(name in obj)) {\n        throw new _exception2['default']('\"' + name + '\" not defined in ' + obj, {\n          loc: loc\n        });\n      }\n      return container.lookupProperty(obj, name);\n    },\n    lookupProperty: function lookupProperty(parent, propertyName) {\n      var result = parent[propertyName];\n      if (result == null) {\n        return result;\n      }\n      if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n        return result;\n      }\n\n      if (_internalProtoAccess.resultIsAllowed(result, container.protoAccessControl, propertyName)) {\n        return result;\n      }\n      return undefined;\n    },\n    lookup: function lookup(depths, name) {\n      var len = depths.length;\n      for (var i = 0; i < len; i++) {\n        var result = depths[i] && container.lookupProperty(depths[i], name);\n        if (result != null) {\n          return depths[i][name];\n        }\n      }\n    },\n    lambda: function lambda(current, context) {\n      return typeof current === 'function' ? current.call(context) : current;\n    },\n\n    escapeExpression: Utils.escapeExpression,\n    invokePartial: invokePartialWrapper,\n\n    fn: function fn(i) {\n      var ret = templateSpec[i];\n      ret.decorator = templateSpec[i + '_d'];\n      return ret;\n    },\n\n    programs: [],\n    program: function program(i, data, declaredBlockParams, blockParams, depths) {\n      var programWrapper = this.programs[i],\n          fn = this.fn(i);\n      if (data || depths || blockParams || declaredBlockParams) {\n        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);\n      } else if (!programWrapper) {\n        programWrapper = this.programs[i] = wrapProgram(this, i, fn);\n      }\n      return programWrapper;\n    },\n\n    data: function data(value, depth) {\n      while (value && depth--) {\n        value = value._parent;\n      }\n      return value;\n    },\n    mergeIfNeeded: function mergeIfNeeded(param, common) {\n      var obj = param || common;\n\n      if (param && common && param !== common) {\n        obj = Utils.extend({}, common, param);\n      }\n\n      return obj;\n    },\n    // An empty object to use as replacement for null-contexts\n    nullContext: Object.seal({}),\n\n    noop: env.VM.noop,\n    compilerInfo: templateSpec.compiler\n  };\n\n  function ret(context) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var data = options.data;\n\n    ret._setup(options);\n    if (!options.partial && templateSpec.useData) {\n      data = initData(context, data);\n    }\n    var depths = undefined,\n        blockParams = templateSpec.useBlockParams ? [] : undefined;\n    if (templateSpec.useDepths) {\n      if (options.depths) {\n        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;\n      } else {\n        depths = [context];\n      }\n    }\n\n    function main(context /*, options*/) {\n      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);\n    }\n\n    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);\n    return main(context, options);\n  }\n\n  ret.isTop = true;\n\n  ret._setup = function (options) {\n    if (!options.partial) {\n      var mergedHelpers = Utils.extend({}, env.helpers, options.helpers);\n      wrapHelpersToPassLookupProperty(mergedHelpers, container);\n      container.helpers = mergedHelpers;\n\n      if (templateSpec.usePartial) {\n        // Use mergeIfNeeded here to prevent compiling global partials multiple times\n        container.partials = container.mergeIfNeeded(options.partials, env.partials);\n      }\n      if (templateSpec.usePartial || templateSpec.useDecorators) {\n        container.decorators = Utils.extend({}, env.decorators, options.decorators);\n      }\n\n      container.hooks = {};\n      container.protoAccessControl = _internalProtoAccess.createProtoAccessControl(options);\n\n      var keepHelperInHelpers = options.allowCallsToHelperMissing || templateWasPrecompiledWithCompilerV7;\n      _helpers.moveHelperToHooks(container, 'helperMissing', keepHelperInHelpers);\n      _helpers.moveHelperToHooks(container, 'blockHelperMissing', keepHelperInHelpers);\n    } else {\n      container.protoAccessControl = options.protoAccessControl; // internal option\n      container.helpers = options.helpers;\n      container.partials = options.partials;\n      container.decorators = options.decorators;\n      container.hooks = options.hooks;\n    }\n  };\n\n  ret._child = function (i, data, blockParams, depths) {\n    if (templateSpec.useBlockParams && !blockParams) {\n      throw new _exception2['default']('must pass block params');\n    }\n    if (templateSpec.useDepths && !depths) {\n      throw new _exception2['default']('must pass parent depths');\n    }\n\n    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);\n  };\n  return ret;\n}\n\nfunction wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {\n  function prog(context) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var currentDepths = depths;\n    if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {\n      currentDepths = [context].concat(depths);\n    }\n\n    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);\n  }\n\n  prog = executeDecorators(fn, prog, container, depths, data, blockParams);\n\n  prog.program = i;\n  prog.depth = depths ? depths.length : 0;\n  prog.blockParams = declaredBlockParams || 0;\n  return prog;\n}\n\n/**\n * This is currently part of the official API, therefore implementation details should not be changed.\n */\n\nfunction resolvePartial(partial, context, options) {\n  if (!partial) {\n    if (options.name === '@partial-block') {\n      partial = options.data['partial-block'];\n    } else {\n      partial = options.partials[options.name];\n    }\n  } else if (!partial.call && !options.name) {\n    // This is a dynamic partial that returned a string\n    options.name = partial;\n    partial = options.partials[partial];\n  }\n  return partial;\n}\n\nfunction invokePartial(partial, context, options) {\n  // Use the current closure context to save the partial-block if this partial\n  var currentPartialBlock = options.data && options.data['partial-block'];\n  options.partial = true;\n  if (options.ids) {\n    options.data.contextPath = options.ids[0] || options.data.contextPath;\n  }\n\n  var partialBlock = undefined;\n  if (options.fn && options.fn !== noop) {\n    (function () {\n      options.data = _base.createFrame(options.data);\n      // Wrapper function to get access to currentPartialBlock from the closure\n      var fn = options.fn;\n      partialBlock = options.data['partial-block'] = function partialBlockWrapper(context) {\n        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n        // Restore the partial-block from the closure for the execution of the block\n        // i.e. the part inside the block of the partial call.\n        options.data = _base.createFrame(options.data);\n        options.data['partial-block'] = currentPartialBlock;\n        return fn(context, options);\n      };\n      if (fn.partials) {\n        options.partials = Utils.extend({}, options.partials, fn.partials);\n      }\n    })();\n  }\n\n  if (partial === undefined && partialBlock) {\n    partial = partialBlock;\n  }\n\n  if (partial === undefined) {\n    throw new _exception2['default']('The partial ' + options.name + ' could not be found');\n  } else if (partial instanceof Function) {\n    return partial(context, options);\n  }\n}\n\nfunction noop() {\n  return '';\n}\n\nfunction initData(context, data) {\n  if (!data || !('root' in data)) {\n    data = data ? _base.createFrame(data) : {};\n    data.root = context;\n  }\n  return data;\n}\n\nfunction executeDecorators(fn, prog, container, depths, data, blockParams) {\n  if (fn.decorator) {\n    var props = {};\n    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);\n    Utils.extend(prog, props);\n  }\n  return prog;\n}\n\nfunction wrapHelpersToPassLookupProperty(mergedHelpers, container) {\n  Object.keys(mergedHelpers).forEach(function (helperName) {\n    var helper = mergedHelpers[helperName];\n    mergedHelpers[helperName] = passLookupPropertyOption(helper, container);\n  });\n}\n\nfunction passLookupPropertyOption(helper, container) {\n  var lookupProperty = container.lookupProperty;\n  return _internalWrapHelper.wrapHelper(helper, function (options) {\n    return Utils.extend({ lookupProperty: lookupProperty }, options);\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/runtime.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/safe-string.js":
/*!********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/safe-string.js ***!
  \********************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("// Build out our basic SafeString type\n\n\nexports.__esModule = true;\nfunction SafeString(string) {\n  this.string = string;\n}\n\nSafeString.prototype.toString = SafeString.prototype.toHTML = function () {\n  return '' + this.string;\n};\n\nexports[\"default\"] = SafeString;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3NhZmUtc3RyaW5nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxTQUFTLFVBQVUsQ0FBQyxNQUFNLEVBQUU7QUFDMUIsTUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Q0FDdEI7O0FBRUQsVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsWUFBVztBQUN2RSxTQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0NBQ3pCLENBQUM7O3FCQUVhLFVBQVUiLCJmaWxlIjoic2FmZS1zdHJpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCdWlsZCBvdXQgb3VyIGJhc2ljIFNhZmVTdHJpbmcgdHlwZVxuZnVuY3Rpb24gU2FmZVN0cmluZyhzdHJpbmcpIHtcbiAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG59XG5cblNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gU2FmZVN0cmluZy5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnJyArIHRoaXMuc3RyaW5nO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2FmZVN0cmluZztcbiJdfQ==\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/safe-string.js?");

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.extend = extend;\nexports.indexOf = indexOf;\nexports.escapeExpression = escapeExpression;\nexports.isEmpty = isEmpty;\nexports.createFrame = createFrame;\nexports.blockParams = blockParams;\nexports.appendContextPath = appendContextPath;\nvar escape = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n  '=': '&#x3D;'\n};\n\nvar badChars = /[&<>\"'`=]/g,\n    possible = /[&<>\"'`=]/;\n\nfunction escapeChar(chr) {\n  return escape[chr];\n}\n\nfunction extend(obj /* , ...source */) {\n  for (var i = 1; i < arguments.length; i++) {\n    for (var key in arguments[i]) {\n      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {\n        obj[key] = arguments[i][key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nvar toString = Object.prototype.toString;\n\nexports.toString = toString;\n// Sourced from lodash\n// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt\n/* eslint-disable func-style */\nvar isFunction = function isFunction(value) {\n  return typeof value === 'function';\n};\n// fallback for older versions of Chrome and Safari\n/* istanbul ignore next */\nif (isFunction(/x/)) {\n  exports.isFunction = isFunction = function (value) {\n    return typeof value === 'function' && toString.call(value) === '[object Function]';\n  };\n}\nexports.isFunction = isFunction;\n\n/* eslint-enable func-style */\n\n/* istanbul ignore next */\nvar isArray = Array.isArray || function (value) {\n  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;\n};\n\nexports.isArray = isArray;\n// Older IE versions do not directly support indexOf so we must implement our own, sadly.\n\nfunction indexOf(array, value) {\n  for (var i = 0, len = array.length; i < len; i++) {\n    if (array[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction escapeExpression(string) {\n  if (typeof string !== 'string') {\n    // don't escape SafeStrings, since they're already safe\n    if (string && string.toHTML) {\n      return string.toHTML();\n    } else if (string == null) {\n      return '';\n    } else if (!string) {\n      return string + '';\n    }\n\n    // Force a string conversion as this will be done by the append regardless and\n    // the regex test will do this transparently behind the scenes, causing issues if\n    // an object's to string has escaped characters in it.\n    string = '' + string;\n  }\n\n  if (!possible.test(string)) {\n    return string;\n  }\n  return string.replace(badChars, escapeChar);\n}\n\nfunction isEmpty(value) {\n  if (!value && value !== 0) {\n    return true;\n  } else if (isArray(value) && value.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction createFrame(object) {\n  var frame = extend({}, object);\n  frame._parent = object;\n  return frame;\n}\n\nfunction blockParams(params, ids) {\n  params.path = ids;\n  return params;\n}\n\nfunction appendContextPath(contextPath, id) {\n  return (contextPath ? contextPath + '.' : '') + id;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFNLE1BQU0sR0FBRztBQUNiLEtBQUcsRUFBRSxPQUFPO0FBQ1osS0FBRyxFQUFFLE1BQU07QUFDWCxLQUFHLEVBQUUsTUFBTTtBQUNYLEtBQUcsRUFBRSxRQUFRO0FBQ2IsS0FBRyxFQUFFLFFBQVE7QUFDYixLQUFHLEVBQUUsUUFBUTtBQUNiLEtBQUcsRUFBRSxRQUFRO0NBQ2QsQ0FBQzs7QUFFRixJQUFNLFFBQVEsR0FBRyxZQUFZO0lBQzNCLFFBQVEsR0FBRyxXQUFXLENBQUM7O0FBRXpCLFNBQVMsVUFBVSxDQUFDLEdBQUcsRUFBRTtBQUN2QixTQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNwQjs7QUFFTSxTQUFTLE1BQU0sQ0FBQyxHQUFHLG9CQUFvQjtBQUM1QyxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN6QyxTQUFLLElBQUksR0FBRyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUM1QixVQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUU7QUFDM0QsV0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztPQUM5QjtLQUNGO0dBQ0Y7O0FBRUQsU0FBTyxHQUFHLENBQUM7Q0FDWjs7QUFFTSxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQzs7Ozs7O0FBS2hELElBQUksVUFBVSxHQUFHLG9CQUFTLEtBQUssRUFBRTtBQUMvQixTQUFPLE9BQU8sS0FBSyxLQUFLLFVBQVUsQ0FBQztDQUNwQyxDQUFDOzs7QUFHRixJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNuQixVQU9PLFVBQVUsR0FQakIsVUFBVSxHQUFHLFVBQVMsS0FBSyxFQUFFO0FBQzNCLFdBQ0UsT0FBTyxLQUFLLEtBQUssVUFBVSxJQUMzQixRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLG1CQUFtQixDQUM1QztHQUNILENBQUM7Q0FDSDtRQUNRLFVBQVUsR0FBVixVQUFVOzs7OztBQUlaLElBQU0sT0FBTyxHQUNsQixLQUFLLENBQUMsT0FBTyxJQUNiLFVBQVMsS0FBSyxFQUFFO0FBQ2QsU0FBTyxLQUFLLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxHQUNyQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLGdCQUFnQixHQUN6QyxLQUFLLENBQUM7Q0FDWCxDQUFDOzs7OztBQUdHLFNBQVMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDcEMsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNoRCxRQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUU7QUFDdEIsYUFBTyxDQUFDLENBQUM7S0FDVjtHQUNGO0FBQ0QsU0FBTyxDQUFDLENBQUMsQ0FBQztDQUNYOztBQUVNLFNBQVMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFO0FBQ3ZDLE1BQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFOztBQUU5QixRQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO0FBQzNCLGFBQU8sTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQ3hCLE1BQU0sSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFO0FBQ3pCLGFBQU8sRUFBRSxDQUFDO0tBQ1gsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ2xCLGFBQU8sTUFBTSxHQUFHLEVBQUUsQ0FBQztLQUNwQjs7Ozs7QUFLRCxVQUFNLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQztHQUN0Qjs7QUFFRCxNQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUMxQixXQUFPLE1BQU0sQ0FBQztHQUNmO0FBQ0QsU0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztDQUM3Qzs7QUFFTSxTQUFTLE9BQU8sQ0FBQyxLQUFLLEVBQUU7QUFDN0IsTUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQ3pCLFdBQU8sSUFBSSxDQUFDO0dBQ2IsTUFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUMvQyxXQUFPLElBQUksQ0FBQztHQUNiLE1BQU07QUFDTCxXQUFPLEtBQUssQ0FBQztHQUNkO0NBQ0Y7O0FBRU0sU0FBUyxXQUFXLENBQUMsTUFBTSxFQUFFO0FBQ2xDLE1BQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDL0IsT0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDdkIsU0FBTyxLQUFLLENBQUM7Q0FDZDs7QUFFTSxTQUFTLFdBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO0FBQ3ZDLFFBQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0FBQ2xCLFNBQU8sTUFBTSxDQUFDO0NBQ2Y7O0FBRU0sU0FBUyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsRUFBRSxFQUFFO0FBQ2pELFNBQU8sQ0FBQyxXQUFXLEdBQUcsV0FBVyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUEsR0FBSSxFQUFFLENBQUM7Q0FDcEQiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBlc2NhcGUgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmI3gyNzsnLFxuICAnYCc6ICcmI3g2MDsnLFxuICAnPSc6ICcmI3gzRDsnXG59O1xuXG5jb25zdCBiYWRDaGFycyA9IC9bJjw+XCInYD1dL2csXG4gIHBvc3NpYmxlID0gL1smPD5cIidgPV0vO1xuXG5mdW5jdGlvbiBlc2NhcGVDaGFyKGNocikge1xuICByZXR1cm4gZXNjYXBlW2Nocl07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQob2JqIC8qICwgLi4uc291cmNlICovKSB7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQga2V5IGluIGFyZ3VtZW50c1tpXSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcmd1bWVudHNbaV0sIGtleSkpIHtcbiAgICAgICAgb2JqW2tleV0gPSBhcmd1bWVudHNbaV1ba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5leHBvcnQgbGV0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLy8gU291cmNlZCBmcm9tIGxvZGFzaFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL2xvZGFzaC9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dFxuLyogZXNsaW50LWRpc2FibGUgZnVuYy1zdHlsZSAqL1xubGV0IGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufTtcbi8vIGZhbGxiYWNrIGZvciBvbGRlciB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpc0Z1bmN0aW9uKC94LykpIHtcbiAgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSdcbiAgICApO1xuICB9O1xufVxuZXhwb3J0IHsgaXNGdW5jdGlvbiB9O1xuLyogZXNsaW50LWVuYWJsZSBmdW5jLXN0eWxlICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgaXNBcnJheSA9XG4gIEFycmF5LmlzQXJyYXkgfHxcbiAgZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0J1xuICAgICAgPyB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJ1xuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuLy8gT2xkZXIgSUUgdmVyc2lvbnMgZG8gbm90IGRpcmVjdGx5IHN1cHBvcnQgaW5kZXhPZiBzbyB3ZSBtdXN0IGltcGxlbWVudCBvdXIgb3duLCBzYWRseS5cbmV4cG9ydCBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoYXJyYXlbaV0gPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlRXhwcmVzc2lvbihzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgZXNjYXBlIFNhZmVTdHJpbmdzLCBzaW5jZSB0aGV5J3JlIGFscmVhZHkgc2FmZVxuICAgIGlmIChzdHJpbmcgJiYgc3RyaW5nLnRvSFRNTCkge1xuICAgICAgcmV0dXJuIHN0cmluZy50b0hUTUwoKTtcbiAgICB9IGVsc2UgaWYgKHN0cmluZyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSBlbHNlIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm4gc3RyaW5nICsgJyc7XG4gICAgfVxuXG4gICAgLy8gRm9yY2UgYSBzdHJpbmcgY29udmVyc2lvbiBhcyB0aGlzIHdpbGwgYmUgZG9uZSBieSB0aGUgYXBwZW5kIHJlZ2FyZGxlc3MgYW5kXG4gICAgLy8gdGhlIHJlZ2V4IHRlc3Qgd2lsbCBkbyB0aGlzIHRyYW5zcGFyZW50bHkgYmVoaW5kIHRoZSBzY2VuZXMsIGNhdXNpbmcgaXNzdWVzIGlmXG4gICAgLy8gYW4gb2JqZWN0J3MgdG8gc3RyaW5nIGhhcyBlc2NhcGVkIGNoYXJhY3RlcnMgaW4gaXQuXG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmc7XG4gIH1cblxuICBpZiAoIXBvc3NpYmxlLnRlc3Qoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKGJhZENoYXJzLCBlc2NhcGVDaGFyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRnJhbWUob2JqZWN0KSB7XG4gIGxldCBmcmFtZSA9IGV4dGVuZCh7fSwgb2JqZWN0KTtcbiAgZnJhbWUuX3BhcmVudCA9IG9iamVjdDtcbiAgcmV0dXJuIGZyYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmxvY2tQYXJhbXMocGFyYW1zLCBpZHMpIHtcbiAgcGFyYW1zLnBhdGggPSBpZHM7XG4gIHJldHVybiBwYXJhbXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRDb250ZXh0UGF0aChjb250ZXh0UGF0aCwgaWQpIHtcbiAgcmV0dXJuIChjb250ZXh0UGF0aCA/IGNvbnRleHRQYXRoICsgJy4nIDogJycpICsgaWQ7XG59XG4iXX0=\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/dist/cjs/handlebars/utils.js?");

/***/ }),

/***/ "./node_modules/handlebars/runtime.js":
/*!********************************************!*\
  !*** ./node_modules/handlebars/runtime.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Create a simple path alias to allow browserify to resolve\n// the runtime on a supported path.\nmodule.exports = __webpack_require__(/*! ./dist/cjs/handlebars.runtime */ \"./node_modules/handlebars/dist/cjs/handlebars.runtime.js\")[\"default\"];\n\n\n//# sourceURL=webpack://templates/./node_modules/handlebars/runtime.js?");

/***/ }),

/***/ "./node_modules/react-dom/cjs/react-dom.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-dom/cjs/react-dom.development.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * @license React\n * react-dom.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n\n          'use strict';\n\n/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n}\n          var React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar Scheduler = __webpack_require__(/*! scheduler */ \"./node_modules/scheduler/index.js\");\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nvar suppressWarning = false;\nfunction setSuppressWarning(newSuppressWarning) {\n  {\n    suppressWarning = newSuppressWarning;\n  }\n} // In DEV, calls to console.warn and console.error get replaced\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nfunction warn(format) {\n  {\n    if (!suppressWarning) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      printWarning('warn', format, args);\n    }\n  }\n}\nfunction error(format) {\n  {\n    if (!suppressWarning) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\nvar FunctionComponent = 0;\nvar ClassComponent = 1;\nvar IndeterminateComponent = 2; // Before we know whether it is function or class\n\nvar HostRoot = 3; // Root of a host tree. Could be nested inside another node.\n\nvar HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\n\nvar HostComponent = 5;\nvar HostText = 6;\nvar Fragment = 7;\nvar Mode = 8;\nvar ContextConsumer = 9;\nvar ContextProvider = 10;\nvar ForwardRef = 11;\nvar Profiler = 12;\nvar SuspenseComponent = 13;\nvar MemoComponent = 14;\nvar SimpleMemoComponent = 15;\nvar LazyComponent = 16;\nvar IncompleteClassComponent = 17;\nvar DehydratedFragment = 18;\nvar SuspenseListComponent = 19;\nvar ScopeComponent = 21;\nvar OffscreenComponent = 22;\nvar LegacyHiddenComponent = 23;\nvar CacheComponent = 24;\nvar TracingMarkerComponent = 25;\n\n// -----------------------------------------------------------------------------\n\nvar enableClientRenderFallbackOnTextMismatch = true; // TODO: Need to review this code one more time before landing\n// the react-reconciler package.\n\nvar enableNewReconciler = false; // Support legacy Primer support on internal FB www\n\nvar enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n\nvar enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz\n// React DOM Chopping Block\n//\n// Similar to main Chopping Block but only flags related to React DOM. These are\n// grouped because we will likely batch all of them into a single major release.\n// -----------------------------------------------------------------------------\n// Disable support for comment nodes as React DOM containers. Already disabled\n// in open source, but www codebase still relies on it. Need to remove.\n\nvar disableCommentsAsDOMContainers = true; // Disable javascript: URL strings in href for XSS protection.\n// and client rendering, mostly to allow JSX attributes to apply to the custom\n// element's object properties instead of only HTML attributes.\n// https://github.com/facebook/react/issues/11347\n\nvar enableCustomElementPropertySupport = false; // Disables children for <textarea> elements\nvar warnAboutStringRefs = true; // -----------------------------------------------------------------------------\n// Debugging and DevTools\n// -----------------------------------------------------------------------------\n// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n// for an experimental timeline tool.\n\nvar enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState\n\nvar enableProfilerTimer = true; // Record durations for commit and passive effects phases.\n\nvar enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an \"update\" and a \"cascading-update\".\n\nvar allNativeEvents = new Set();\n/**\n * Mapping from registration name to event name\n */\n\n\nvar registrationNameDependencies = {};\n/**\n * Mapping from lowercase registration names to the properly cased version,\n * used to warn in the case of missing event handlers. Available\n * only in true.\n * @type {Object}\n */\n\nvar possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true\n\nfunction registerTwoPhaseEvent(registrationName, dependencies) {\n  registerDirectEvent(registrationName, dependencies);\n  registerDirectEvent(registrationName + 'Capture', dependencies);\n}\nfunction registerDirectEvent(registrationName, dependencies) {\n  {\n    if (registrationNameDependencies[registrationName]) {\n      error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);\n    }\n  }\n\n  registrationNameDependencies[registrationName] = dependencies;\n\n  {\n    var lowerCasedName = registrationName.toLowerCase();\n    possibleRegistrationNames[lowerCasedName] = registrationName;\n\n    if (registrationName === 'onDoubleClick') {\n      possibleRegistrationNames.ondblclick = registrationName;\n    }\n  }\n\n  for (var i = 0; i < dependencies.length; i++) {\n    allNativeEvents.add(dependencies[i]);\n  }\n}\n\nvar canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\n\nfunction checkAttributeStringCoercion(value, attributeName) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided `%s` attribute is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', attributeName, typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nfunction checkPropStringCoercion(value, propName) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nfunction checkCSSPropertyStringCoercion(value, propName) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided `%s` CSS property is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nfunction checkHtmlStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided HTML markup uses a value of unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nfunction checkFormFieldValueStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('Form field values (value, checked, defaultValue, or defaultChecked props)' + ' must be strings, not %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\n// A reserved attribute.\n// It is handled by React separately and shouldn't be written to the DOM.\nvar RESERVED = 0; // A simple string attribute.\n// Attributes that aren't in the filter are presumed to have this type.\n\nvar STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called\n// \"enumerated\" attributes with \"true\" and \"false\" as possible values.\n// When true, it should be set to a \"true\" string.\n// When false, it should be set to a \"false\" string.\n\nvar BOOLEANISH_STRING = 2; // A real boolean attribute.\n// When true, it should be present (set either to an empty string or its name).\n// When false, it should be omitted.\n\nvar BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.\n// When true, it should be present (set either to an empty string or its name).\n// When false, it should be omitted.\n// For any other value, should be present with that value.\n\nvar OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.\n// When falsy, it should be removed.\n\nvar NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.\n// When falsy, it should be removed.\n\nvar POSITIVE_NUMERIC = 6;\n\n/* eslint-disable max-len */\nvar ATTRIBUTE_NAME_START_CHAR = \":A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n/* eslint-enable max-len */\n\nvar ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + \"\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\nvar VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');\nvar illegalAttributeNameCache = {};\nvar validatedAttributeNameCache = {};\nfunction isAttributeNameSafe(attributeName) {\n  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {\n    return true;\n  }\n\n  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {\n    return false;\n  }\n\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n    validatedAttributeNameCache[attributeName] = true;\n    return true;\n  }\n\n  illegalAttributeNameCache[attributeName] = true;\n\n  {\n    error('Invalid attribute name: `%s`', attributeName);\n  }\n\n  return false;\n}\nfunction shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {\n  if (propertyInfo !== null) {\n    return propertyInfo.type === RESERVED;\n  }\n\n  if (isCustomComponentTag) {\n    return false;\n  }\n\n  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {\n    return true;\n  }\n\n  return false;\n}\nfunction shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {\n  if (propertyInfo !== null && propertyInfo.type === RESERVED) {\n    return false;\n  }\n\n  switch (typeof value) {\n    case 'function': // $FlowIssue symbol is perfectly valid here\n\n    case 'symbol':\n      // eslint-disable-line\n      return true;\n\n    case 'boolean':\n      {\n        if (isCustomComponentTag) {\n          return false;\n        }\n\n        if (propertyInfo !== null) {\n          return !propertyInfo.acceptsBooleans;\n        } else {\n          var prefix = name.toLowerCase().slice(0, 5);\n          return prefix !== 'data-' && prefix !== 'aria-';\n        }\n      }\n\n    default:\n      return false;\n  }\n}\nfunction shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {\n  if (value === null || typeof value === 'undefined') {\n    return true;\n  }\n\n  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {\n    return true;\n  }\n\n  if (isCustomComponentTag) {\n\n    return false;\n  }\n\n  if (propertyInfo !== null) {\n\n    switch (propertyInfo.type) {\n      case BOOLEAN:\n        return !value;\n\n      case OVERLOADED_BOOLEAN:\n        return value === false;\n\n      case NUMERIC:\n        return isNaN(value);\n\n      case POSITIVE_NUMERIC:\n        return isNaN(value) || value < 1;\n    }\n  }\n\n  return false;\n}\nfunction getPropertyInfo(name) {\n  return properties.hasOwnProperty(name) ? properties[name] : null;\n}\n\nfunction PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {\n  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;\n  this.attributeName = attributeName;\n  this.attributeNamespace = attributeNamespace;\n  this.mustUseProperty = mustUseProperty;\n  this.propertyName = name;\n  this.type = type;\n  this.sanitizeURL = sanitizeURL;\n  this.removeEmptyString = removeEmptyString;\n} // When adding attributes to this list, be sure to also add them to\n// the `possibleStandardNames` module to ensure casing and incorrect\n// name warnings.\n\n\nvar properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.\n\nvar reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular\n// elements (not just inputs). Now that ReactDOMInput assigns to the\n// defaultValue property -- do we need this?\n'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];\n\nreservedProps.forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty\n  name, // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // A few React string attributes have a different name.\n// This is a mapping from React prop names to the attribute names.\n\n[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {\n  var name = _ref[0],\n      attributeName = _ref[1];\n  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\n  attributeName, // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are \"enumerated\" HTML attributes that accept \"true\" and \"false\".\n// In React, we let users pass `true` and `false` even though technically\n// these aren't boolean attributes (they are coerced to strings).\n\n['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty\n  name.toLowerCase(), // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are \"enumerated\" SVG attributes that accept \"true\" and \"false\".\n// In React, we let users pass `true` and `false` even though technically\n// these aren't boolean attributes (they are coerced to strings).\n// Since these are SVG attributes, their attribute names are case-sensitive.\n\n['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty\n  name, // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are HTML boolean attributes.\n\n['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM\n// on the client side because the browsers are inconsistent. Instead we call focus().\n'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata\n'itemScope'].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty\n  name.toLowerCase(), // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are the few React props that we set as DOM properties\n// rather than attributes. These are all booleans.\n\n['checked', // Note: `option.selected` is not updated if `select.multiple` is\n// disabled with `removeAttribute`. We have special logic for handling this.\n'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,\n// you'll need to set attributeName to name.toLowerCase()\n// instead in the assignment below.\n].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty\n  name, // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are HTML attributes that are \"overloaded booleans\": they behave like\n// booleans, but can also accept a string value.\n\n['capture', 'download' // NOTE: if you add a camelCased prop to this list,\n// you'll need to set attributeName to name.toLowerCase()\n// instead in the assignment below.\n].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty\n  name, // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are HTML attributes that must be positive numbers.\n\n['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,\n// you'll need to set attributeName to name.toLowerCase()\n// instead in the assignment below.\n].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty\n  name, // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are HTML attributes that must be numbers.\n\n['rowSpan', 'start'].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty\n  name.toLowerCase(), // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n});\nvar CAMELIZE = /[\\-\\:]([a-z])/g;\n\nvar capitalize = function (token) {\n  return token[1].toUpperCase();\n}; // This is a list of all SVG attributes that need special casing, namespacing,\n// or boolean value assignment. Regular attributes that just accept strings\n// and have the same names are omitted, just like in the HTML attribute filter.\n// Some of these attributes can be hard to find. This list was created by\n// scraping the MDN documentation.\n\n\n['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,\n// you'll need to set attributeName to name.toLowerCase()\n// instead in the assignment below.\n].forEach(function (attributeName) {\n  var name = attributeName.replace(CAMELIZE, capitalize);\n  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\n  attributeName, null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // String SVG attributes with the xlink namespace.\n\n['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,\n// you'll need to set attributeName to name.toLowerCase()\n// instead in the assignment below.\n].forEach(function (attributeName) {\n  var name = attributeName.replace(CAMELIZE, capitalize);\n  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\n  attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL\n  false);\n}); // String SVG attributes with the xml namespace.\n\n['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,\n// you'll need to set attributeName to name.toLowerCase()\n// instead in the assignment below.\n].forEach(function (attributeName) {\n  var name = attributeName.replace(CAMELIZE, capitalize);\n  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\n  attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL\n  false);\n}); // These attribute exists both in HTML and SVG.\n// The attribute name is case-sensitive in SVG so we can't just use\n// the React name like we do for attributes that exist only in HTML.\n\n['tabIndex', 'crossOrigin'].forEach(function (attributeName) {\n  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty\n  attributeName.toLowerCase(), // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These attributes accept URLs. These must not allow javascript: URLS.\n// These will also need to accept Trusted Types object in the future.\n\nvar xlinkHref = 'xlinkHref';\nproperties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty\n'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL\nfalse);\n['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {\n  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty\n  attributeName.toLowerCase(), // attributeName\n  null, // attributeNamespace\n  true, // sanitizeURL\n  true);\n});\n\n// and any newline or tab are filtered out as if they're not part of the URL.\n// https://url.spec.whatwg.org/#url-parsing\n// Tab or newline are defined as \\r\\n\\t:\n// https://infra.spec.whatwg.org/#ascii-tab-or-newline\n// A C0 control is a code point in the range \\u0000 NULL to \\u001F\n// INFORMATION SEPARATOR ONE, inclusive:\n// https://infra.spec.whatwg.org/#c0-control-or-space\n\n/* eslint-disable max-len */\n\nvar isJavaScriptProtocol = /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*\\:/i;\nvar didWarn = false;\n\nfunction sanitizeURL(url) {\n  {\n    if (!didWarn && isJavaScriptProtocol.test(url)) {\n      didWarn = true;\n\n      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));\n    }\n  }\n}\n\n/**\n * Get the value for a property on a node. Only used in DEV for SSR validation.\n * The \"expected\" argument is used as a hint of what the expected value is.\n * Some properties have multiple equivalent values.\n */\nfunction getValueForProperty(node, name, expected, propertyInfo) {\n  {\n    if (propertyInfo.mustUseProperty) {\n      var propertyName = propertyInfo.propertyName;\n      return node[propertyName];\n    } else {\n      // This check protects multiple uses of `expected`, which is why the\n      // react-internal/safe-string-coercion rule is disabled in several spots\n      // below.\n      {\n        checkAttributeStringCoercion(expected, name);\n      }\n\n      if ( propertyInfo.sanitizeURL) {\n        // If we haven't fully disabled javascript: URLs, and if\n        // the hydration is successful of a javascript: URL, we\n        // still want to warn on the client.\n        // eslint-disable-next-line react-internal/safe-string-coercion\n        sanitizeURL('' + expected);\n      }\n\n      var attributeName = propertyInfo.attributeName;\n      var stringValue = null;\n\n      if (propertyInfo.type === OVERLOADED_BOOLEAN) {\n        if (node.hasAttribute(attributeName)) {\n          var value = node.getAttribute(attributeName);\n\n          if (value === '') {\n            return true;\n          }\n\n          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {\n            return value;\n          } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n          if (value === '' + expected) {\n            return expected;\n          }\n\n          return value;\n        }\n      } else if (node.hasAttribute(attributeName)) {\n        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {\n          // We had an attribute but shouldn't have had one, so read it\n          // for the error message.\n          return node.getAttribute(attributeName);\n        }\n\n        if (propertyInfo.type === BOOLEAN) {\n          // If this was a boolean, it doesn't matter what the value is\n          // the fact that we have it is the same as the expected.\n          return expected;\n        } // Even if this property uses a namespace we use getAttribute\n        // because we assume its namespaced name is the same as our config.\n        // To use getAttributeNS we need the local name which we don't have\n        // in our config atm.\n\n\n        stringValue = node.getAttribute(attributeName);\n      }\n\n      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {\n        return stringValue === null ? expected : stringValue; // eslint-disable-next-line react-internal/safe-string-coercion\n      } else if (stringValue === '' + expected) {\n        return expected;\n      } else {\n        return stringValue;\n      }\n    }\n  }\n}\n/**\n * Get the value for a attribute on a node. Only used in DEV for SSR validation.\n * The third argument is used as a hint of what the expected value is. Some\n * attributes have multiple equivalent values.\n */\n\nfunction getValueForAttribute(node, name, expected, isCustomComponentTag) {\n  {\n    if (!isAttributeNameSafe(name)) {\n      return;\n    }\n\n    if (!node.hasAttribute(name)) {\n      return expected === undefined ? undefined : null;\n    }\n\n    var value = node.getAttribute(name);\n\n    {\n      checkAttributeStringCoercion(expected, name);\n    }\n\n    if (value === '' + expected) {\n      return expected;\n    }\n\n    return value;\n  }\n}\n/**\n * Sets the value for a property on a node.\n *\n * @param {DOMElement} node\n * @param {string} name\n * @param {*} value\n */\n\nfunction setValueForProperty(node, name, value, isCustomComponentTag) {\n  var propertyInfo = getPropertyInfo(name);\n\n  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {\n    return;\n  }\n\n  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {\n    value = null;\n  }\n\n\n  if (isCustomComponentTag || propertyInfo === null) {\n    if (isAttributeNameSafe(name)) {\n      var _attributeName = name;\n\n      if (value === null) {\n        node.removeAttribute(_attributeName);\n      } else {\n        {\n          checkAttributeStringCoercion(value, name);\n        }\n\n        node.setAttribute(_attributeName,  '' + value);\n      }\n    }\n\n    return;\n  }\n\n  var mustUseProperty = propertyInfo.mustUseProperty;\n\n  if (mustUseProperty) {\n    var propertyName = propertyInfo.propertyName;\n\n    if (value === null) {\n      var type = propertyInfo.type;\n      node[propertyName] = type === BOOLEAN ? false : '';\n    } else {\n      // Contrary to `setAttribute`, object properties are properly\n      // `toString`ed by IE8/9.\n      node[propertyName] = value;\n    }\n\n    return;\n  } // The rest are treated as attributes with special cases.\n\n\n  var attributeName = propertyInfo.attributeName,\n      attributeNamespace = propertyInfo.attributeNamespace;\n\n  if (value === null) {\n    node.removeAttribute(attributeName);\n  } else {\n    var _type = propertyInfo.type;\n    var attributeValue;\n\n    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {\n      // If attribute type is boolean, we know for sure it won't be an execution sink\n      // and we won't require Trusted Type here.\n      attributeValue = '';\n    } else {\n      // `setAttribute` with objects becomes only `[object]` in IE8/9,\n      // ('' + value) makes it output the correct toString()-value.\n      {\n        {\n          checkAttributeStringCoercion(value, attributeName);\n        }\n\n        attributeValue = '' + value;\n      }\n\n      if (propertyInfo.sanitizeURL) {\n        sanitizeURL(attributeValue.toString());\n      }\n    }\n\n    if (attributeNamespace) {\n      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);\n    } else {\n      node.setAttribute(attributeName, attributeValue);\n    }\n  }\n}\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_SCOPE_TYPE = Symbol.for('react.scope');\nvar REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\n\nfunction describeClassComponentFrame(ctor, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(ctor, true);\n  }\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nfunction describeFiber(fiber) {\n  var owner =  fiber._debugOwner ? fiber._debugOwner.type : null ;\n  var source =  fiber._debugSource ;\n\n  switch (fiber.tag) {\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type);\n\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy');\n\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList');\n\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type);\n\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render);\n\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type);\n\n    default:\n      return '';\n  }\n}\n\nfunction getStackByFiberInDevAndProd(workInProgress) {\n  try {\n    var info = '';\n    var node = workInProgress;\n\n    do {\n      info += describeFiber(node);\n      node = node.return;\n    } while (node);\n\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nfunction getWrappedName$1(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n} // Keep in sync with shared/getComponentNameFromType\n\n\nfunction getContextName$1(type) {\n  return type.displayName || 'Context';\n}\n\nfunction getComponentNameFromFiber(fiber) {\n  var tag = fiber.tag,\n      type = fiber.type;\n\n  switch (tag) {\n    case CacheComponent:\n      return 'Cache';\n\n    case ContextConsumer:\n      var context = type;\n      return getContextName$1(context) + '.Consumer';\n\n    case ContextProvider:\n      var provider = type;\n      return getContextName$1(provider._context) + '.Provider';\n\n    case DehydratedFragment:\n      return 'DehydratedFragment';\n\n    case ForwardRef:\n      return getWrappedName$1(type, type.render, 'ForwardRef');\n\n    case Fragment:\n      return 'Fragment';\n\n    case HostComponent:\n      // Host component type is the display name (e.g. \"div\", \"View\")\n      return type;\n\n    case HostPortal:\n      return 'Portal';\n\n    case HostRoot:\n      return 'Root';\n\n    case HostText:\n      return 'Text';\n\n    case LazyComponent:\n      // Name comes from the type in this case; we don't have a tag.\n      return getComponentNameFromType(type);\n\n    case Mode:\n      if (type === REACT_STRICT_MODE_TYPE) {\n        // Don't be less specific than shared/getComponentNameFromType\n        return 'StrictMode';\n      }\n\n      return 'Mode';\n\n    case OffscreenComponent:\n      return 'Offscreen';\n\n    case Profiler:\n      return 'Profiler';\n\n    case ScopeComponent:\n      return 'Scope';\n\n    case SuspenseComponent:\n      return 'Suspense';\n\n    case SuspenseListComponent:\n      return 'SuspenseList';\n\n    case TracingMarkerComponent:\n      return 'TracingMarker';\n    // The display name for this tags come from the user-provided type:\n\n    case ClassComponent:\n    case FunctionComponent:\n    case IncompleteClassComponent:\n    case IndeterminateComponent:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      if (typeof type === 'function') {\n        return type.displayName || type.name || null;\n      }\n\n      if (typeof type === 'string') {\n        return type;\n      }\n\n      break;\n\n  }\n\n  return null;\n}\n\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar current = null;\nvar isRendering = false;\nfunction getCurrentFiberOwnerNameInDevOrNull() {\n  {\n    if (current === null) {\n      return null;\n    }\n\n    var owner = current._debugOwner;\n\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentNameFromFiber(owner);\n    }\n  }\n\n  return null;\n}\n\nfunction getCurrentFiberStackInDev() {\n  {\n    if (current === null) {\n      return '';\n    } // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n\n\n    return getStackByFiberInDevAndProd(current);\n  }\n}\n\nfunction resetCurrentFiber() {\n  {\n    ReactDebugCurrentFrame.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\nfunction setCurrentFiber(fiber) {\n  {\n    ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\nfunction getCurrentFiber() {\n  {\n    return current;\n  }\n}\nfunction setIsRendering(rendering) {\n  {\n    isRendering = rendering;\n  }\n}\n\n// Flow does not allow string concatenation of most non-string types. To work\n// around this limitation, we use an opaque type that can only be obtained by\n// passing the value through getToStringValue first.\nfunction toString(value) {\n  // The coercion safety check is performed in getToStringValue().\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction getToStringValue(value) {\n  switch (typeof value) {\n    case 'boolean':\n    case 'number':\n    case 'string':\n    case 'undefined':\n      return value;\n\n    case 'object':\n      {\n        checkFormFieldValueStringCoercion(value);\n      }\n\n      return value;\n\n    default:\n      // function, symbol are assigned as empty strings\n      return '';\n  }\n}\n\nvar hasReadOnlyValue = {\n  button: true,\n  checkbox: true,\n  image: true,\n  hidden: true,\n  radio: true,\n  reset: true,\n  submit: true\n};\nfunction checkControlledValueProps(tagName, props) {\n  {\n    if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {\n      error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n    }\n\n    if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {\n      error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n    }\n  }\n}\n\nfunction isCheckable(elem) {\n  var type = elem.type;\n  var nodeName = elem.nodeName;\n  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');\n}\n\nfunction getTracker(node) {\n  return node._valueTracker;\n}\n\nfunction detachTracker(node) {\n  node._valueTracker = null;\n}\n\nfunction getValueFromNode(node) {\n  var value = '';\n\n  if (!node) {\n    return value;\n  }\n\n  if (isCheckable(node)) {\n    value = node.checked ? 'true' : 'false';\n  } else {\n    value = node.value;\n  }\n\n  return value;\n}\n\nfunction trackValueOnNode(node) {\n  var valueField = isCheckable(node) ? 'checked' : 'value';\n  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);\n\n  {\n    checkFormFieldValueStringCoercion(node[valueField]);\n  }\n\n  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail\n  // and don't track value will cause over reporting of changes,\n  // but it's better then a hard failure\n  // (needed for certain tests that spyOn input values and Safari)\n\n  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {\n    return;\n  }\n\n  var get = descriptor.get,\n      set = descriptor.set;\n  Object.defineProperty(node, valueField, {\n    configurable: true,\n    get: function () {\n      return get.call(this);\n    },\n    set: function (value) {\n      {\n        checkFormFieldValueStringCoercion(value);\n      }\n\n      currentValue = '' + value;\n      set.call(this, value);\n    }\n  }); // We could've passed this the first time\n  // but it triggers a bug in IE11 and Edge 14/15.\n  // Calling defineProperty() again should be equivalent.\n  // https://github.com/facebook/react/issues/11768\n\n  Object.defineProperty(node, valueField, {\n    enumerable: descriptor.enumerable\n  });\n  var tracker = {\n    getValue: function () {\n      return currentValue;\n    },\n    setValue: function (value) {\n      {\n        checkFormFieldValueStringCoercion(value);\n      }\n\n      currentValue = '' + value;\n    },\n    stopTracking: function () {\n      detachTracker(node);\n      delete node[valueField];\n    }\n  };\n  return tracker;\n}\n\nfunction track(node) {\n  if (getTracker(node)) {\n    return;\n  } // TODO: Once it's just Fiber we can move this to node._wrapperState\n\n\n  node._valueTracker = trackValueOnNode(node);\n}\nfunction updateValueIfChanged(node) {\n  if (!node) {\n    return false;\n  }\n\n  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely\n  // that trying again will succeed\n\n  if (!tracker) {\n    return true;\n  }\n\n  var lastValue = tracker.getValue();\n  var nextValue = getValueFromNode(node);\n\n  if (nextValue !== lastValue) {\n    tracker.setValue(nextValue);\n    return true;\n  }\n\n  return false;\n}\n\nfunction getActiveElement(doc) {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\nvar didWarnValueDefaultValue = false;\nvar didWarnCheckedDefaultChecked = false;\nvar didWarnControlledToUncontrolled = false;\nvar didWarnUncontrolledToControlled = false;\n\nfunction isControlled(props) {\n  var usesChecked = props.type === 'checkbox' || props.type === 'radio';\n  return usesChecked ? props.checked != null : props.value != null;\n}\n/**\n * Implements an <input> host component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\n\n\nfunction getHostProps(element, props) {\n  var node = element;\n  var checked = props.checked;\n  var hostProps = assign({}, props, {\n    defaultChecked: undefined,\n    defaultValue: undefined,\n    value: undefined,\n    checked: checked != null ? checked : node._wrapperState.initialChecked\n  });\n  return hostProps;\n}\nfunction initWrapperState(element, props) {\n  {\n    checkControlledValueProps('input', props);\n\n    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {\n      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);\n\n      didWarnCheckedDefaultChecked = true;\n    }\n\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {\n      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);\n\n      didWarnValueDefaultValue = true;\n    }\n  }\n\n  var node = element;\n  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;\n  node._wrapperState = {\n    initialChecked: props.checked != null ? props.checked : props.defaultChecked,\n    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),\n    controlled: isControlled(props)\n  };\n}\nfunction updateChecked(element, props) {\n  var node = element;\n  var checked = props.checked;\n\n  if (checked != null) {\n    setValueForProperty(node, 'checked', checked, false);\n  }\n}\nfunction updateWrapper(element, props) {\n  var node = element;\n\n  {\n    var controlled = isControlled(props);\n\n    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {\n      error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');\n\n      didWarnUncontrolledToControlled = true;\n    }\n\n    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {\n      error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');\n\n      didWarnControlledToUncontrolled = true;\n    }\n  }\n\n  updateChecked(element, props);\n  var value = getToStringValue(props.value);\n  var type = props.type;\n\n  if (value != null) {\n    if (type === 'number') {\n      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.\n      // eslint-disable-next-line\n      node.value != value) {\n        node.value = toString(value);\n      }\n    } else if (node.value !== toString(value)) {\n      node.value = toString(value);\n    }\n  } else if (type === 'submit' || type === 'reset') {\n    // Submit/reset inputs need the attribute removed completely to avoid\n    // blank-text buttons.\n    node.removeAttribute('value');\n    return;\n  }\n\n  {\n    // When syncing the value attribute, the value comes from a cascade of\n    // properties:\n    //  1. The value React property\n    //  2. The defaultValue React property\n    //  3. Otherwise there should be no change\n    if (props.hasOwnProperty('value')) {\n      setDefaultValue(node, props.type, value);\n    } else if (props.hasOwnProperty('defaultValue')) {\n      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));\n    }\n  }\n\n  {\n    // When syncing the checked attribute, it only changes when it needs\n    // to be removed, such as transitioning from a checkbox into a text input\n    if (props.checked == null && props.defaultChecked != null) {\n      node.defaultChecked = !!props.defaultChecked;\n    }\n  }\n}\nfunction postMountWrapper(element, props, isHydrating) {\n  var node = element; // Do not assign value if it is already set. This prevents user text input\n  // from being lost during SSR hydration.\n\n  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {\n    var type = props.type;\n    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the\n    // default value provided by the browser. See: #12872\n\n    if (isButton && (props.value === undefined || props.value === null)) {\n      return;\n    }\n\n    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input\n    // from being lost during SSR hydration.\n\n    if (!isHydrating) {\n      {\n        // When syncing the value attribute, the value property should use\n        // the wrapperState._initialValue property. This uses:\n        //\n        //   1. The value React property when present\n        //   2. The defaultValue React property when present\n        //   3. An empty string\n        if (initialValue !== node.value) {\n          node.value = initialValue;\n        }\n      }\n    }\n\n    {\n      // Otherwise, the value attribute is synchronized to the property,\n      // so we assign defaultValue to the same thing as the value property\n      // assignment step above.\n      node.defaultValue = initialValue;\n    }\n  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug\n  // this is needed to work around a chrome bug where setting defaultChecked\n  // will sometimes influence the value of checked (even after detachment).\n  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416\n  // We need to temporarily unset name to avoid disrupting radio button groups.\n\n\n  var name = node.name;\n\n  if (name !== '') {\n    node.name = '';\n  }\n\n  {\n    // When syncing the checked attribute, both the checked property and\n    // attribute are assigned at the same time using defaultChecked. This uses:\n    //\n    //   1. The checked React property when present\n    //   2. The defaultChecked React property when present\n    //   3. Otherwise, false\n    node.defaultChecked = !node.defaultChecked;\n    node.defaultChecked = !!node._wrapperState.initialChecked;\n  }\n\n  if (name !== '') {\n    node.name = name;\n  }\n}\nfunction restoreControlledState(element, props) {\n  var node = element;\n  updateWrapper(node, props);\n  updateNamedCousins(node, props);\n}\n\nfunction updateNamedCousins(rootNode, props) {\n  var name = props.name;\n\n  if (props.type === 'radio' && name != null) {\n    var queryRoot = rootNode;\n\n    while (queryRoot.parentNode) {\n      queryRoot = queryRoot.parentNode;\n    } // If `rootNode.form` was non-null, then we could try `form.elements`,\n    // but that sometimes behaves strangely in IE8. We could also try using\n    // `form.getElementsByName`, but that will only return direct children\n    // and won't include inputs that use the HTML5 `form=` attribute. Since\n    // the input might not even be in a form. It might not even be in the\n    // document. Let's just use the local `querySelectorAll` to ensure we don't\n    // miss anything.\n\n\n    {\n      checkAttributeStringCoercion(name, 'name');\n    }\n\n    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n    for (var i = 0; i < group.length; i++) {\n      var otherNode = group[i];\n\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n        continue;\n      } // This will throw if radio buttons rendered by different copies of React\n      // and the same name are rendered into the same form (same as #1939).\n      // That's probably okay; we don't support it just as we don't support\n      // mixing React radio buttons with non-React ones.\n\n\n      var otherProps = getFiberCurrentPropsFromNode(otherNode);\n\n      if (!otherProps) {\n        throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');\n      } // We need update the tracked value on the named cousin since the value\n      // was changed but the input saw no event or value set\n\n\n      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that\n      // was previously checked to update will cause it to be come re-checked\n      // as appropriate.\n\n      updateWrapper(otherNode, otherProps);\n    }\n  }\n} // In Chrome, assigning defaultValue to certain input types triggers input validation.\n// For number inputs, the display value loses trailing decimal points. For email inputs,\n// Chrome raises \"The specified value <x> is not a valid email address\".\n//\n// Here we check to see if the defaultValue has actually changed, avoiding these problems\n// when the user is inputting text\n//\n// https://github.com/facebook/react/issues/7253\n\n\nfunction setDefaultValue(node, type, value) {\n  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js\n  type !== 'number' || getActiveElement(node.ownerDocument) !== node) {\n    if (value == null) {\n      node.defaultValue = toString(node._wrapperState.initialValue);\n    } else if (node.defaultValue !== toString(value)) {\n      node.defaultValue = toString(value);\n    }\n  }\n}\n\nvar didWarnSelectedSetOnOption = false;\nvar didWarnInvalidChild = false;\nvar didWarnInvalidInnerHTML = false;\n/**\n * Implements an <option> host component that warns when `selected` is set.\n */\n\nfunction validateProps(element, props) {\n  {\n    // If a value is not provided, then the children must be simple.\n    if (props.value == null) {\n      if (typeof props.children === 'object' && props.children !== null) {\n        React.Children.forEach(props.children, function (child) {\n          if (child == null) {\n            return;\n          }\n\n          if (typeof child === 'string' || typeof child === 'number') {\n            return;\n          }\n\n          if (!didWarnInvalidChild) {\n            didWarnInvalidChild = true;\n\n            error('Cannot infer the option value of complex children. ' + 'Pass a `value` prop or use a plain string as children to <option>.');\n          }\n        });\n      } else if (props.dangerouslySetInnerHTML != null) {\n        if (!didWarnInvalidInnerHTML) {\n          didWarnInvalidInnerHTML = true;\n\n          error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' + 'which value should be selected.');\n        }\n      }\n    } // TODO: Remove support for `selected` in <option>.\n\n\n    if (props.selected != null && !didWarnSelectedSetOnOption) {\n      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');\n\n      didWarnSelectedSetOnOption = true;\n    }\n  }\n}\nfunction postMountWrapper$1(element, props) {\n  // value=\"\" should make a value attribute (#6219)\n  if (props.value != null) {\n    element.setAttribute('value', toString(getToStringValue(props.value)));\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\nvar didWarnValueDefaultValue$1;\n\n{\n  didWarnValueDefaultValue$1 = false;\n}\n\nfunction getDeclarationErrorAddendum() {\n  var ownerName = getCurrentFiberOwnerNameInDevOrNull();\n\n  if (ownerName) {\n    return '\\n\\nCheck the render method of `' + ownerName + '`.';\n  }\n\n  return '';\n}\n\nvar valuePropNames = ['value', 'defaultValue'];\n/**\n * Validation function for `value` and `defaultValue`.\n */\n\nfunction checkSelectPropTypes(props) {\n  {\n    checkControlledValueProps('select', props);\n\n    for (var i = 0; i < valuePropNames.length; i++) {\n      var propName = valuePropNames[i];\n\n      if (props[propName] == null) {\n        continue;\n      }\n\n      var propNameIsArray = isArray(props[propName]);\n\n      if (props.multiple && !propNameIsArray) {\n        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());\n      } else if (!props.multiple && propNameIsArray) {\n        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());\n      }\n    }\n  }\n}\n\nfunction updateOptions(node, multiple, propValue, setDefaultSelected) {\n  var options = node.options;\n\n  if (multiple) {\n    var selectedValues = propValue;\n    var selectedValue = {};\n\n    for (var i = 0; i < selectedValues.length; i++) {\n      // Prefix to avoid chaos with special keys.\n      selectedValue['$' + selectedValues[i]] = true;\n    }\n\n    for (var _i = 0; _i < options.length; _i++) {\n      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);\n\n      if (options[_i].selected !== selected) {\n        options[_i].selected = selected;\n      }\n\n      if (selected && setDefaultSelected) {\n        options[_i].defaultSelected = true;\n      }\n    }\n  } else {\n    // Do not set `select.value` as exact behavior isn't consistent across all\n    // browsers for all cases.\n    var _selectedValue = toString(getToStringValue(propValue));\n\n    var defaultSelected = null;\n\n    for (var _i2 = 0; _i2 < options.length; _i2++) {\n      if (options[_i2].value === _selectedValue) {\n        options[_i2].selected = true;\n\n        if (setDefaultSelected) {\n          options[_i2].defaultSelected = true;\n        }\n\n        return;\n      }\n\n      if (defaultSelected === null && !options[_i2].disabled) {\n        defaultSelected = options[_i2];\n      }\n    }\n\n    if (defaultSelected !== null) {\n      defaultSelected.selected = true;\n    }\n  }\n}\n/**\n * Implements a <select> host component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * stringable. If `multiple` is true, the prop must be an array of stringables.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\n\n\nfunction getHostProps$1(element, props) {\n  return assign({}, props, {\n    value: undefined\n  });\n}\nfunction initWrapperState$1(element, props) {\n  var node = element;\n\n  {\n    checkSelectPropTypes(props);\n  }\n\n  node._wrapperState = {\n    wasMultiple: !!props.multiple\n  };\n\n  {\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {\n      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');\n\n      didWarnValueDefaultValue$1 = true;\n    }\n  }\n}\nfunction postMountWrapper$2(element, props) {\n  var node = element;\n  node.multiple = !!props.multiple;\n  var value = props.value;\n\n  if (value != null) {\n    updateOptions(node, !!props.multiple, value, false);\n  } else if (props.defaultValue != null) {\n    updateOptions(node, !!props.multiple, props.defaultValue, true);\n  }\n}\nfunction postUpdateWrapper(element, props) {\n  var node = element;\n  var wasMultiple = node._wrapperState.wasMultiple;\n  node._wrapperState.wasMultiple = !!props.multiple;\n  var value = props.value;\n\n  if (value != null) {\n    updateOptions(node, !!props.multiple, value, false);\n  } else if (wasMultiple !== !!props.multiple) {\n    // For simplicity, reapply `defaultValue` if `multiple` is toggled.\n    if (props.defaultValue != null) {\n      updateOptions(node, !!props.multiple, props.defaultValue, true);\n    } else {\n      // Revert the select back to its default unselected state.\n      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);\n    }\n  }\n}\nfunction restoreControlledState$1(element, props) {\n  var node = element;\n  var value = props.value;\n\n  if (value != null) {\n    updateOptions(node, !!props.multiple, value, false);\n  }\n}\n\nvar didWarnValDefaultVal = false;\n\n/**\n * Implements a <textarea> host component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nfunction getHostProps$2(element, props) {\n  var node = element;\n\n  if (props.dangerouslySetInnerHTML != null) {\n    throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');\n  } // Always set children to the same thing. In IE9, the selection range will\n  // get reset if `textContent` is mutated.  We could add a check in setTextContent\n  // to only set the value if/when the value differs from the node value (which would\n  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this\n  // solution. The value can be a boolean or object so that's why it's forced\n  // to be a string.\n\n\n  var hostProps = assign({}, props, {\n    value: undefined,\n    defaultValue: undefined,\n    children: toString(node._wrapperState.initialValue)\n  });\n\n  return hostProps;\n}\nfunction initWrapperState$2(element, props) {\n  var node = element;\n\n  {\n    checkControlledValueProps('textarea', props);\n\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {\n      error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');\n\n      didWarnValDefaultVal = true;\n    }\n  }\n\n  var initialValue = props.value; // Only bother fetching default value if we're going to use it\n\n  if (initialValue == null) {\n    var children = props.children,\n        defaultValue = props.defaultValue;\n\n    if (children != null) {\n      {\n        error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');\n      }\n\n      {\n        if (defaultValue != null) {\n          throw new Error('If you supply `defaultValue` on a <textarea>, do not pass children.');\n        }\n\n        if (isArray(children)) {\n          if (children.length > 1) {\n            throw new Error('<textarea> can only have at most one child.');\n          }\n\n          children = children[0];\n        }\n\n        defaultValue = children;\n      }\n    }\n\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n\n    initialValue = defaultValue;\n  }\n\n  node._wrapperState = {\n    initialValue: getToStringValue(initialValue)\n  };\n}\nfunction updateWrapper$1(element, props) {\n  var node = element;\n  var value = getToStringValue(props.value);\n  var defaultValue = getToStringValue(props.defaultValue);\n\n  if (value != null) {\n    // Cast `value` to a string to ensure the value is set correctly. While\n    // browsers typically do this as necessary, jsdom doesn't.\n    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed\n\n    if (newValue !== node.value) {\n      node.value = newValue;\n    }\n\n    if (props.defaultValue == null && node.defaultValue !== newValue) {\n      node.defaultValue = newValue;\n    }\n  }\n\n  if (defaultValue != null) {\n    node.defaultValue = toString(defaultValue);\n  }\n}\nfunction postMountWrapper$3(element, props) {\n  var node = element; // This is in postMount because we need access to the DOM node, which is not\n  // available until after the component has mounted.\n\n  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected\n  // initial value. In IE10/IE11 there is a bug where the placeholder attribute\n  // will populate textContent as well.\n  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/\n\n  if (textContent === node._wrapperState.initialValue) {\n    if (textContent !== '' && textContent !== null) {\n      node.value = textContent;\n    }\n  }\n}\nfunction restoreControlledState$2(element, props) {\n  // DOM component is still mounted; update\n  updateWrapper$1(element, props);\n}\n\nvar HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\nvar MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\nvar SVG_NAMESPACE = 'http://www.w3.org/2000/svg'; // Assumes there is no parent namespace.\n\nfunction getIntrinsicNamespace(type) {\n  switch (type) {\n    case 'svg':\n      return SVG_NAMESPACE;\n\n    case 'math':\n      return MATH_NAMESPACE;\n\n    default:\n      return HTML_NAMESPACE;\n  }\n}\nfunction getChildNamespace(parentNamespace, type) {\n  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {\n    // No (or default) parent namespace: potential entry point.\n    return getIntrinsicNamespace(type);\n  }\n\n  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {\n    // We're leaving SVG.\n    return HTML_NAMESPACE;\n  } // By default, pass namespace below.\n\n\n  return parentNamespace;\n}\n\n/* globals MSApp */\n\n/**\n * Create a function which has 'unsafe' privileges (required by windows8 apps)\n */\nvar createMicrosoftUnsafeLocalFunction = function (func) {\n  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {\n    return function (arg0, arg1, arg2, arg3) {\n      MSApp.execUnsafeLocalFunction(function () {\n        return func(arg0, arg1, arg2, arg3);\n      });\n    };\n  } else {\n    return func;\n  }\n};\n\nvar reusableSVGContainer;\n/**\n * Set the innerHTML property of a node\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\n\nvar setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {\n  if (node.namespaceURI === SVG_NAMESPACE) {\n\n    if (!('innerHTML' in node)) {\n      // IE does not have innerHTML for SVG nodes, so instead we inject the\n      // new markup in a temp node and then move the child nodes across into\n      // the target node\n      reusableSVGContainer = reusableSVGContainer || document.createElement('div');\n      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';\n      var svgNode = reusableSVGContainer.firstChild;\n\n      while (node.firstChild) {\n        node.removeChild(node.firstChild);\n      }\n\n      while (svgNode.firstChild) {\n        node.appendChild(svgNode.firstChild);\n      }\n\n      return;\n    }\n  }\n\n  node.innerHTML = html;\n});\n\n/**\n * HTML nodeType values that represent the type of the node\n */\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\nvar DOCUMENT_NODE = 9;\nvar DOCUMENT_FRAGMENT_NODE = 11;\n\n/**\n * Set the textContent property of a node. For text updates, it's faster\n * to set the `nodeValue` of the Text node directly instead of using\n * `.textContent` which will remove the existing node and create a new one.\n *\n * @param {DOMElement} node\n * @param {string} text\n * @internal\n */\n\nvar setTextContent = function (node, text) {\n  if (text) {\n    var firstChild = node.firstChild;\n\n    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {\n      firstChild.nodeValue = text;\n      return;\n    }\n  }\n\n  node.textContent = text;\n};\n\n// List derived from Gecko source code:\n// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js\nvar shorthandToLonghand = {\n  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],\n  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],\n  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],\n  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],\n  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],\n  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],\n  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],\n  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],\n  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],\n  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],\n  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],\n  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],\n  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],\n  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],\n  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],\n  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],\n  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],\n  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],\n  columns: ['columnCount', 'columnWidth'],\n  flex: ['flexBasis', 'flexGrow', 'flexShrink'],\n  flexFlow: ['flexDirection', 'flexWrap'],\n  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],\n  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],\n  gap: ['columnGap', 'rowGap'],\n  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],\n  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],\n  gridColumn: ['gridColumnEnd', 'gridColumnStart'],\n  gridColumnGap: ['columnGap'],\n  gridGap: ['columnGap', 'rowGap'],\n  gridRow: ['gridRowEnd', 'gridRowStart'],\n  gridRowGap: ['rowGap'],\n  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],\n  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],\n  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],\n  marker: ['markerEnd', 'markerMid', 'markerStart'],\n  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],\n  maskPosition: ['maskPositionX', 'maskPositionY'],\n  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],\n  overflow: ['overflowX', 'overflowY'],\n  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],\n  placeContent: ['alignContent', 'justifyContent'],\n  placeItems: ['alignItems', 'justifyItems'],\n  placeSelf: ['alignSelf', 'justifySelf'],\n  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],\n  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],\n  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],\n  wordWrap: ['overflowWrap']\n};\n\n/**\n * CSS properties which accept numbers but are not in units of \"px\".\n */\nvar isUnitlessNumber = {\n  animationIterationCount: true,\n  aspectRatio: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  columns: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridArea: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowSpan: true,\n  gridRowStart: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnSpan: true,\n  gridColumnStart: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n  // SVG-related properties\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true\n};\n/**\n * @param {string} prefix vendor-specific prefix, eg: Webkit\n * @param {string} key style name, eg: transitionDuration\n * @return {string} style name prefixed with `prefix`, properly camelCased, eg:\n * WebkitTransitionDuration\n */\n\nfunction prefixKey(prefix, key) {\n  return prefix + key.charAt(0).toUpperCase() + key.substring(1);\n}\n/**\n * Support style names that may come passed in prefixed by adding permutations\n * of vendor prefixes.\n */\n\n\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an\n// infinite loop, because it iterates over the newly added props too.\n\nObject.keys(isUnitlessNumber).forEach(function (prop) {\n  prefixes.forEach(function (prefix) {\n    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];\n  });\n});\n\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @return {string} Normalized style value with dimensions applied.\n */\n\nfunction dangerousStyleValue(name, value, isCustomProperty) {\n  // Note that we've removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn't repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we're going to\n  // trust URLs moving forward. See #2115901\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n\n  if (isEmpty) {\n    return '';\n  }\n\n  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {\n    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers\n  }\n\n  {\n    checkCSSPropertyStringCoercion(value, name);\n  }\n\n  return ('' + value).trim();\n}\n\nvar uppercasePattern = /([A-Z])/g;\nvar msPattern = /^ms-/;\n/**\n * Hyphenates a camelcased CSS property name, for example:\n *\n *   > hyphenateStyleName('backgroundColor')\n *   < \"background-color\"\n *   > hyphenateStyleName('MozTransition')\n *   < \"-moz-transition\"\n *   > hyphenateStyleName('msTransition')\n *   < \"-ms-transition\"\n *\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\n * is converted to `-ms-`.\n */\n\nfunction hyphenateStyleName(name) {\n  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');\n}\n\nvar warnValidStyle = function () {};\n\n{\n  // 'msTransform' is correct, but the other prefixes should be capitalized\n  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;\n  var msPattern$1 = /^-ms-/;\n  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon\n\n  var badStyleValueWithSemicolonPattern = /;\\s*$/;\n  var warnedStyleNames = {};\n  var warnedStyleValues = {};\n  var warnedForNaNValue = false;\n  var warnedForInfinityValue = false;\n\n  var camelize = function (string) {\n    return string.replace(hyphenPattern, function (_, character) {\n      return character.toUpperCase();\n    });\n  };\n\n  var warnHyphenatedStyleName = function (name) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n\n    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests\n    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix\n    // is converted to lowercase `ms`.\n    camelize(name.replace(msPattern$1, 'ms-')));\n  };\n\n  var warnBadVendoredStyleName = function (name) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n\n    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));\n  };\n\n  var warnStyleValueWithSemicolon = function (name, value) {\n    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n      return;\n    }\n\n    warnedStyleValues[value] = true;\n\n    error(\"Style property values shouldn't contain a semicolon. \" + 'Try \"%s: %s\" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));\n  };\n\n  var warnStyleValueIsNaN = function (name, value) {\n    if (warnedForNaNValue) {\n      return;\n    }\n\n    warnedForNaNValue = true;\n\n    error('`NaN` is an invalid value for the `%s` css style property.', name);\n  };\n\n  var warnStyleValueIsInfinity = function (name, value) {\n    if (warnedForInfinityValue) {\n      return;\n    }\n\n    warnedForInfinityValue = true;\n\n    error('`Infinity` is an invalid value for the `%s` css style property.', name);\n  };\n\n  warnValidStyle = function (name, value) {\n    if (name.indexOf('-') > -1) {\n      warnHyphenatedStyleName(name);\n    } else if (badVendoredStyleNamePattern.test(name)) {\n      warnBadVendoredStyleName(name);\n    } else if (badStyleValueWithSemicolonPattern.test(value)) {\n      warnStyleValueWithSemicolon(name, value);\n    }\n\n    if (typeof value === 'number') {\n      if (isNaN(value)) {\n        warnStyleValueIsNaN(name, value);\n      } else if (!isFinite(value)) {\n        warnStyleValueIsInfinity(name, value);\n      }\n    }\n  };\n}\n\nvar warnValidStyle$1 = warnValidStyle;\n\n/**\n * Operations for dealing with CSS properties.\n */\n\n/**\n * This creates a string that is expected to be equivalent to the style\n * attribute generated by server-side rendering. It by-passes warnings and\n * security checks so it's not safe to use this value for anything other than\n * comparison. It is only used in DEV for SSR validation.\n */\n\nfunction createDangerousStringForStyles(styles) {\n  {\n    var serialized = '';\n    var delimiter = '';\n\n    for (var styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n\n      var styleValue = styles[styleName];\n\n      if (styleValue != null) {\n        var isCustomProperty = styleName.indexOf('--') === 0;\n        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';\n        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);\n        delimiter = ';';\n      }\n    }\n\n    return serialized || null;\n  }\n}\n/**\n * Sets the value for multiple styles on a node.  If a value is specified as\n * '' (empty string), the corresponding style property will be unset.\n *\n * @param {DOMElement} node\n * @param {object} styles\n */\n\nfunction setValueForStyles(node, styles) {\n  var style = node.style;\n\n  for (var styleName in styles) {\n    if (!styles.hasOwnProperty(styleName)) {\n      continue;\n    }\n\n    var isCustomProperty = styleName.indexOf('--') === 0;\n\n    {\n      if (!isCustomProperty) {\n        warnValidStyle$1(styleName, styles[styleName]);\n      }\n    }\n\n    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);\n\n    if (styleName === 'float') {\n      styleName = 'cssFloat';\n    }\n\n    if (isCustomProperty) {\n      style.setProperty(styleName, styleValue);\n    } else {\n      style[styleName] = styleValue;\n    }\n  }\n}\n\nfunction isValueEmpty(value) {\n  return value == null || typeof value === 'boolean' || value === '';\n}\n/**\n * Given {color: 'red', overflow: 'hidden'} returns {\n *   color: 'color',\n *   overflowX: 'overflow',\n *   overflowY: 'overflow',\n * }. This can be read as \"the overflowY property was set by the overflow\n * shorthand\". That is, the values are the property that each was derived from.\n */\n\n\nfunction expandShorthandMap(styles) {\n  var expanded = {};\n\n  for (var key in styles) {\n    var longhands = shorthandToLonghand[key] || [key];\n\n    for (var i = 0; i < longhands.length; i++) {\n      expanded[longhands[i]] = key;\n    }\n  }\n\n  return expanded;\n}\n/**\n * When mixing shorthand and longhand property names, we warn during updates if\n * we expect an incorrect result to occur. In particular, we warn for:\n *\n * Updating a shorthand property (longhand gets overwritten):\n *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}\n *   becomes .style.font = 'baz'\n * Removing a shorthand property (longhand gets lost too):\n *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}\n *   becomes .style.font = ''\n * Removing a longhand property (should revert to shorthand; doesn't):\n *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}\n *   becomes .style.fontVariant = ''\n */\n\n\nfunction validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {\n  {\n    if (!nextStyles) {\n      return;\n    }\n\n    var expandedUpdates = expandShorthandMap(styleUpdates);\n    var expandedStyles = expandShorthandMap(nextStyles);\n    var warnedAbout = {};\n\n    for (var key in expandedUpdates) {\n      var originalKey = expandedUpdates[key];\n      var correctOriginalKey = expandedStyles[key];\n\n      if (correctOriginalKey && originalKey !== correctOriginalKey) {\n        var warningKey = originalKey + ',' + correctOriginalKey;\n\n        if (warnedAbout[warningKey]) {\n          continue;\n        }\n\n        warnedAbout[warningKey] = true;\n\n        error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + \"avoid this, don't mix shorthand and non-shorthand properties \" + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);\n      }\n    }\n  }\n}\n\n// For HTML, certain tags should omit their close tag. We keep a list for\n// those special-case tags.\nvar omittedCloseTags = {\n  area: true,\n  base: true,\n  br: true,\n  col: true,\n  embed: true,\n  hr: true,\n  img: true,\n  input: true,\n  keygen: true,\n  link: true,\n  meta: true,\n  param: true,\n  source: true,\n  track: true,\n  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.\n\n};\n\n// `omittedCloseTags` except that `menuitem` should still have its closing tag.\n\nvar voidElementTags = assign({\n  menuitem: true\n}, omittedCloseTags);\n\nvar HTML = '__html';\n\nfunction assertValidProps(tag, props) {\n  if (!props) {\n    return;\n  } // Note the use of `==` which checks for null or undefined.\n\n\n  if (voidElementTags[tag]) {\n    if (props.children != null || props.dangerouslySetInnerHTML != null) {\n      throw new Error(tag + \" is a void element tag and must neither have `children` nor \" + 'use `dangerouslySetInnerHTML`.');\n    }\n  }\n\n  if (props.dangerouslySetInnerHTML != null) {\n    if (props.children != null) {\n      throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');\n    }\n\n    if (typeof props.dangerouslySetInnerHTML !== 'object' || !(HTML in props.dangerouslySetInnerHTML)) {\n      throw new Error('`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://reactjs.org/link/dangerously-set-inner-html ' + 'for more information.');\n    }\n  }\n\n  {\n    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {\n      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');\n    }\n  }\n\n  if (props.style != null && typeof props.style !== 'object') {\n    throw new Error('The `style` prop expects a mapping from style properties to values, ' + \"not a string. For example, style={{marginRight: spacing + 'em'}} when \" + 'using JSX.');\n  }\n}\n\nfunction isCustomComponent(tagName, props) {\n  if (tagName.indexOf('-') === -1) {\n    return typeof props.is === 'string';\n  }\n\n  switch (tagName) {\n    // These are reserved SVG and MathML elements.\n    // We don't mind this list too much because we expect it to never grow.\n    // The alternative is to track the namespace in a few places which is convoluted.\n    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts\n    case 'annotation-xml':\n    case 'color-profile':\n    case 'font-face':\n    case 'font-face-src':\n    case 'font-face-uri':\n    case 'font-face-format':\n    case 'font-face-name':\n    case 'missing-glyph':\n      return false;\n\n    default:\n      return true;\n  }\n}\n\n// When adding attributes to the HTML or SVG allowed attribute list, be sure to\n// also add them to this module to ensure casing and incorrect name\n// warnings.\nvar possibleStandardNames = {\n  // HTML\n  accept: 'accept',\n  acceptcharset: 'acceptCharset',\n  'accept-charset': 'acceptCharset',\n  accesskey: 'accessKey',\n  action: 'action',\n  allowfullscreen: 'allowFullScreen',\n  alt: 'alt',\n  as: 'as',\n  async: 'async',\n  autocapitalize: 'autoCapitalize',\n  autocomplete: 'autoComplete',\n  autocorrect: 'autoCorrect',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  autosave: 'autoSave',\n  capture: 'capture',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  challenge: 'challenge',\n  charset: 'charSet',\n  checked: 'checked',\n  children: 'children',\n  cite: 'cite',\n  class: 'className',\n  classid: 'classID',\n  classname: 'className',\n  cols: 'cols',\n  colspan: 'colSpan',\n  content: 'content',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  controls: 'controls',\n  controlslist: 'controlsList',\n  coords: 'coords',\n  crossorigin: 'crossOrigin',\n  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',\n  data: 'data',\n  datetime: 'dateTime',\n  default: 'default',\n  defaultchecked: 'defaultChecked',\n  defaultvalue: 'defaultValue',\n  defer: 'defer',\n  dir: 'dir',\n  disabled: 'disabled',\n  disablepictureinpicture: 'disablePictureInPicture',\n  disableremoteplayback: 'disableRemotePlayback',\n  download: 'download',\n  draggable: 'draggable',\n  enctype: 'encType',\n  enterkeyhint: 'enterKeyHint',\n  for: 'htmlFor',\n  form: 'form',\n  formmethod: 'formMethod',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  headers: 'headers',\n  height: 'height',\n  hidden: 'hidden',\n  high: 'high',\n  href: 'href',\n  hreflang: 'hrefLang',\n  htmlfor: 'htmlFor',\n  httpequiv: 'httpEquiv',\n  'http-equiv': 'httpEquiv',\n  icon: 'icon',\n  id: 'id',\n  imagesizes: 'imageSizes',\n  imagesrcset: 'imageSrcSet',\n  innerhtml: 'innerHTML',\n  inputmode: 'inputMode',\n  integrity: 'integrity',\n  is: 'is',\n  itemid: 'itemID',\n  itemprop: 'itemProp',\n  itemref: 'itemRef',\n  itemscope: 'itemScope',\n  itemtype: 'itemType',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  kind: 'kind',\n  label: 'label',\n  lang: 'lang',\n  list: 'list',\n  loop: 'loop',\n  low: 'low',\n  manifest: 'manifest',\n  marginwidth: 'marginWidth',\n  marginheight: 'marginHeight',\n  max: 'max',\n  maxlength: 'maxLength',\n  media: 'media',\n  mediagroup: 'mediaGroup',\n  method: 'method',\n  min: 'min',\n  minlength: 'minLength',\n  multiple: 'multiple',\n  muted: 'muted',\n  name: 'name',\n  nomodule: 'noModule',\n  nonce: 'nonce',\n  novalidate: 'noValidate',\n  open: 'open',\n  optimum: 'optimum',\n  pattern: 'pattern',\n  placeholder: 'placeholder',\n  playsinline: 'playsInline',\n  poster: 'poster',\n  preload: 'preload',\n  profile: 'profile',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  referrerpolicy: 'referrerPolicy',\n  rel: 'rel',\n  required: 'required',\n  reversed: 'reversed',\n  role: 'role',\n  rows: 'rows',\n  rowspan: 'rowSpan',\n  sandbox: 'sandbox',\n  scope: 'scope',\n  scoped: 'scoped',\n  scrolling: 'scrolling',\n  seamless: 'seamless',\n  selected: 'selected',\n  shape: 'shape',\n  size: 'size',\n  sizes: 'sizes',\n  span: 'span',\n  spellcheck: 'spellCheck',\n  src: 'src',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  start: 'start',\n  step: 'step',\n  style: 'style',\n  summary: 'summary',\n  tabindex: 'tabIndex',\n  target: 'target',\n  title: 'title',\n  type: 'type',\n  usemap: 'useMap',\n  value: 'value',\n  width: 'width',\n  wmode: 'wmode',\n  wrap: 'wrap',\n  // SVG\n  about: 'about',\n  accentheight: 'accentHeight',\n  'accent-height': 'accentHeight',\n  accumulate: 'accumulate',\n  additive: 'additive',\n  alignmentbaseline: 'alignmentBaseline',\n  'alignment-baseline': 'alignmentBaseline',\n  allowreorder: 'allowReorder',\n  alphabetic: 'alphabetic',\n  amplitude: 'amplitude',\n  arabicform: 'arabicForm',\n  'arabic-form': 'arabicForm',\n  ascent: 'ascent',\n  attributename: 'attributeName',\n  attributetype: 'attributeType',\n  autoreverse: 'autoReverse',\n  azimuth: 'azimuth',\n  basefrequency: 'baseFrequency',\n  baselineshift: 'baselineShift',\n  'baseline-shift': 'baselineShift',\n  baseprofile: 'baseProfile',\n  bbox: 'bbox',\n  begin: 'begin',\n  bias: 'bias',\n  by: 'by',\n  calcmode: 'calcMode',\n  capheight: 'capHeight',\n  'cap-height': 'capHeight',\n  clip: 'clip',\n  clippath: 'clipPath',\n  'clip-path': 'clipPath',\n  clippathunits: 'clipPathUnits',\n  cliprule: 'clipRule',\n  'clip-rule': 'clipRule',\n  color: 'color',\n  colorinterpolation: 'colorInterpolation',\n  'color-interpolation': 'colorInterpolation',\n  colorinterpolationfilters: 'colorInterpolationFilters',\n  'color-interpolation-filters': 'colorInterpolationFilters',\n  colorprofile: 'colorProfile',\n  'color-profile': 'colorProfile',\n  colorrendering: 'colorRendering',\n  'color-rendering': 'colorRendering',\n  contentscripttype: 'contentScriptType',\n  contentstyletype: 'contentStyleType',\n  cursor: 'cursor',\n  cx: 'cx',\n  cy: 'cy',\n  d: 'd',\n  datatype: 'datatype',\n  decelerate: 'decelerate',\n  descent: 'descent',\n  diffuseconstant: 'diffuseConstant',\n  direction: 'direction',\n  display: 'display',\n  divisor: 'divisor',\n  dominantbaseline: 'dominantBaseline',\n  'dominant-baseline': 'dominantBaseline',\n  dur: 'dur',\n  dx: 'dx',\n  dy: 'dy',\n  edgemode: 'edgeMode',\n  elevation: 'elevation',\n  enablebackground: 'enableBackground',\n  'enable-background': 'enableBackground',\n  end: 'end',\n  exponent: 'exponent',\n  externalresourcesrequired: 'externalResourcesRequired',\n  fill: 'fill',\n  fillopacity: 'fillOpacity',\n  'fill-opacity': 'fillOpacity',\n  fillrule: 'fillRule',\n  'fill-rule': 'fillRule',\n  filter: 'filter',\n  filterres: 'filterRes',\n  filterunits: 'filterUnits',\n  floodopacity: 'floodOpacity',\n  'flood-opacity': 'floodOpacity',\n  floodcolor: 'floodColor',\n  'flood-color': 'floodColor',\n  focusable: 'focusable',\n  fontfamily: 'fontFamily',\n  'font-family': 'fontFamily',\n  fontsize: 'fontSize',\n  'font-size': 'fontSize',\n  fontsizeadjust: 'fontSizeAdjust',\n  'font-size-adjust': 'fontSizeAdjust',\n  fontstretch: 'fontStretch',\n  'font-stretch': 'fontStretch',\n  fontstyle: 'fontStyle',\n  'font-style': 'fontStyle',\n  fontvariant: 'fontVariant',\n  'font-variant': 'fontVariant',\n  fontweight: 'fontWeight',\n  'font-weight': 'fontWeight',\n  format: 'format',\n  from: 'from',\n  fx: 'fx',\n  fy: 'fy',\n  g1: 'g1',\n  g2: 'g2',\n  glyphname: 'glyphName',\n  'glyph-name': 'glyphName',\n  glyphorientationhorizontal: 'glyphOrientationHorizontal',\n  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',\n  glyphorientationvertical: 'glyphOrientationVertical',\n  'glyph-orientation-vertical': 'glyphOrientationVertical',\n  glyphref: 'glyphRef',\n  gradienttransform: 'gradientTransform',\n  gradientunits: 'gradientUnits',\n  hanging: 'hanging',\n  horizadvx: 'horizAdvX',\n  'horiz-adv-x': 'horizAdvX',\n  horizoriginx: 'horizOriginX',\n  'horiz-origin-x': 'horizOriginX',\n  ideographic: 'ideographic',\n  imagerendering: 'imageRendering',\n  'image-rendering': 'imageRendering',\n  in2: 'in2',\n  in: 'in',\n  inlist: 'inlist',\n  intercept: 'intercept',\n  k1: 'k1',\n  k2: 'k2',\n  k3: 'k3',\n  k4: 'k4',\n  k: 'k',\n  kernelmatrix: 'kernelMatrix',\n  kernelunitlength: 'kernelUnitLength',\n  kerning: 'kerning',\n  keypoints: 'keyPoints',\n  keysplines: 'keySplines',\n  keytimes: 'keyTimes',\n  lengthadjust: 'lengthAdjust',\n  letterspacing: 'letterSpacing',\n  'letter-spacing': 'letterSpacing',\n  lightingcolor: 'lightingColor',\n  'lighting-color': 'lightingColor',\n  limitingconeangle: 'limitingConeAngle',\n  local: 'local',\n  markerend: 'markerEnd',\n  'marker-end': 'markerEnd',\n  markerheight: 'markerHeight',\n  markermid: 'markerMid',\n  'marker-mid': 'markerMid',\n  markerstart: 'markerStart',\n  'marker-start': 'markerStart',\n  markerunits: 'markerUnits',\n  markerwidth: 'markerWidth',\n  mask: 'mask',\n  maskcontentunits: 'maskContentUnits',\n  maskunits: 'maskUnits',\n  mathematical: 'mathematical',\n  mode: 'mode',\n  numoctaves: 'numOctaves',\n  offset: 'offset',\n  opacity: 'opacity',\n  operator: 'operator',\n  order: 'order',\n  orient: 'orient',\n  orientation: 'orientation',\n  origin: 'origin',\n  overflow: 'overflow',\n  overlineposition: 'overlinePosition',\n  'overline-position': 'overlinePosition',\n  overlinethickness: 'overlineThickness',\n  'overline-thickness': 'overlineThickness',\n  paintorder: 'paintOrder',\n  'paint-order': 'paintOrder',\n  panose1: 'panose1',\n  'panose-1': 'panose1',\n  pathlength: 'pathLength',\n  patterncontentunits: 'patternContentUnits',\n  patterntransform: 'patternTransform',\n  patternunits: 'patternUnits',\n  pointerevents: 'pointerEvents',\n  'pointer-events': 'pointerEvents',\n  points: 'points',\n  pointsatx: 'pointsAtX',\n  pointsaty: 'pointsAtY',\n  pointsatz: 'pointsAtZ',\n  prefix: 'prefix',\n  preservealpha: 'preserveAlpha',\n  preserveaspectratio: 'preserveAspectRatio',\n  primitiveunits: 'primitiveUnits',\n  property: 'property',\n  r: 'r',\n  radius: 'radius',\n  refx: 'refX',\n  refy: 'refY',\n  renderingintent: 'renderingIntent',\n  'rendering-intent': 'renderingIntent',\n  repeatcount: 'repeatCount',\n  repeatdur: 'repeatDur',\n  requiredextensions: 'requiredExtensions',\n  requiredfeatures: 'requiredFeatures',\n  resource: 'resource',\n  restart: 'restart',\n  result: 'result',\n  results: 'results',\n  rotate: 'rotate',\n  rx: 'rx',\n  ry: 'ry',\n  scale: 'scale',\n  security: 'security',\n  seed: 'seed',\n  shaperendering: 'shapeRendering',\n  'shape-rendering': 'shapeRendering',\n  slope: 'slope',\n  spacing: 'spacing',\n  specularconstant: 'specularConstant',\n  specularexponent: 'specularExponent',\n  speed: 'speed',\n  spreadmethod: 'spreadMethod',\n  startoffset: 'startOffset',\n  stddeviation: 'stdDeviation',\n  stemh: 'stemh',\n  stemv: 'stemv',\n  stitchtiles: 'stitchTiles',\n  stopcolor: 'stopColor',\n  'stop-color': 'stopColor',\n  stopopacity: 'stopOpacity',\n  'stop-opacity': 'stopOpacity',\n  strikethroughposition: 'strikethroughPosition',\n  'strikethrough-position': 'strikethroughPosition',\n  strikethroughthickness: 'strikethroughThickness',\n  'strikethrough-thickness': 'strikethroughThickness',\n  string: 'string',\n  stroke: 'stroke',\n  strokedasharray: 'strokeDasharray',\n  'stroke-dasharray': 'strokeDasharray',\n  strokedashoffset: 'strokeDashoffset',\n  'stroke-dashoffset': 'strokeDashoffset',\n  strokelinecap: 'strokeLinecap',\n  'stroke-linecap': 'strokeLinecap',\n  strokelinejoin: 'strokeLinejoin',\n  'stroke-linejoin': 'strokeLinejoin',\n  strokemiterlimit: 'strokeMiterlimit',\n  'stroke-miterlimit': 'strokeMiterlimit',\n  strokewidth: 'strokeWidth',\n  'stroke-width': 'strokeWidth',\n  strokeopacity: 'strokeOpacity',\n  'stroke-opacity': 'strokeOpacity',\n  suppresscontenteditablewarning: 'suppressContentEditableWarning',\n  suppresshydrationwarning: 'suppressHydrationWarning',\n  surfacescale: 'surfaceScale',\n  systemlanguage: 'systemLanguage',\n  tablevalues: 'tableValues',\n  targetx: 'targetX',\n  targety: 'targetY',\n  textanchor: 'textAnchor',\n  'text-anchor': 'textAnchor',\n  textdecoration: 'textDecoration',\n  'text-decoration': 'textDecoration',\n  textlength: 'textLength',\n  textrendering: 'textRendering',\n  'text-rendering': 'textRendering',\n  to: 'to',\n  transform: 'transform',\n  typeof: 'typeof',\n  u1: 'u1',\n  u2: 'u2',\n  underlineposition: 'underlinePosition',\n  'underline-position': 'underlinePosition',\n  underlinethickness: 'underlineThickness',\n  'underline-thickness': 'underlineThickness',\n  unicode: 'unicode',\n  unicodebidi: 'unicodeBidi',\n  'unicode-bidi': 'unicodeBidi',\n  unicoderange: 'unicodeRange',\n  'unicode-range': 'unicodeRange',\n  unitsperem: 'unitsPerEm',\n  'units-per-em': 'unitsPerEm',\n  unselectable: 'unselectable',\n  valphabetic: 'vAlphabetic',\n  'v-alphabetic': 'vAlphabetic',\n  values: 'values',\n  vectoreffect: 'vectorEffect',\n  'vector-effect': 'vectorEffect',\n  version: 'version',\n  vertadvy: 'vertAdvY',\n  'vert-adv-y': 'vertAdvY',\n  vertoriginx: 'vertOriginX',\n  'vert-origin-x': 'vertOriginX',\n  vertoriginy: 'vertOriginY',\n  'vert-origin-y': 'vertOriginY',\n  vhanging: 'vHanging',\n  'v-hanging': 'vHanging',\n  videographic: 'vIdeographic',\n  'v-ideographic': 'vIdeographic',\n  viewbox: 'viewBox',\n  viewtarget: 'viewTarget',\n  visibility: 'visibility',\n  vmathematical: 'vMathematical',\n  'v-mathematical': 'vMathematical',\n  vocab: 'vocab',\n  widths: 'widths',\n  wordspacing: 'wordSpacing',\n  'word-spacing': 'wordSpacing',\n  writingmode: 'writingMode',\n  'writing-mode': 'writingMode',\n  x1: 'x1',\n  x2: 'x2',\n  x: 'x',\n  xchannelselector: 'xChannelSelector',\n  xheight: 'xHeight',\n  'x-height': 'xHeight',\n  xlinkactuate: 'xlinkActuate',\n  'xlink:actuate': 'xlinkActuate',\n  xlinkarcrole: 'xlinkArcrole',\n  'xlink:arcrole': 'xlinkArcrole',\n  xlinkhref: 'xlinkHref',\n  'xlink:href': 'xlinkHref',\n  xlinkrole: 'xlinkRole',\n  'xlink:role': 'xlinkRole',\n  xlinkshow: 'xlinkShow',\n  'xlink:show': 'xlinkShow',\n  xlinktitle: 'xlinkTitle',\n  'xlink:title': 'xlinkTitle',\n  xlinktype: 'xlinkType',\n  'xlink:type': 'xlinkType',\n  xmlbase: 'xmlBase',\n  'xml:base': 'xmlBase',\n  xmllang: 'xmlLang',\n  'xml:lang': 'xmlLang',\n  xmlns: 'xmlns',\n  'xml:space': 'xmlSpace',\n  xmlnsxlink: 'xmlnsXlink',\n  'xmlns:xlink': 'xmlnsXlink',\n  xmlspace: 'xmlSpace',\n  y1: 'y1',\n  y2: 'y2',\n  y: 'y',\n  ychannelselector: 'yChannelSelector',\n  z: 'z',\n  zoomandpan: 'zoomAndPan'\n};\n\nvar ariaProperties = {\n  'aria-current': 0,\n  // state\n  'aria-description': 0,\n  'aria-details': 0,\n  'aria-disabled': 0,\n  // state\n  'aria-hidden': 0,\n  // state\n  'aria-invalid': 0,\n  // state\n  'aria-keyshortcuts': 0,\n  'aria-label': 0,\n  'aria-roledescription': 0,\n  // Widget Attributes\n  'aria-autocomplete': 0,\n  'aria-checked': 0,\n  'aria-expanded': 0,\n  'aria-haspopup': 0,\n  'aria-level': 0,\n  'aria-modal': 0,\n  'aria-multiline': 0,\n  'aria-multiselectable': 0,\n  'aria-orientation': 0,\n  'aria-placeholder': 0,\n  'aria-pressed': 0,\n  'aria-readonly': 0,\n  'aria-required': 0,\n  'aria-selected': 0,\n  'aria-sort': 0,\n  'aria-valuemax': 0,\n  'aria-valuemin': 0,\n  'aria-valuenow': 0,\n  'aria-valuetext': 0,\n  // Live Region Attributes\n  'aria-atomic': 0,\n  'aria-busy': 0,\n  'aria-live': 0,\n  'aria-relevant': 0,\n  // Drag-and-Drop Attributes\n  'aria-dropeffect': 0,\n  'aria-grabbed': 0,\n  // Relationship Attributes\n  'aria-activedescendant': 0,\n  'aria-colcount': 0,\n  'aria-colindex': 0,\n  'aria-colspan': 0,\n  'aria-controls': 0,\n  'aria-describedby': 0,\n  'aria-errormessage': 0,\n  'aria-flowto': 0,\n  'aria-labelledby': 0,\n  'aria-owns': 0,\n  'aria-posinset': 0,\n  'aria-rowcount': 0,\n  'aria-rowindex': 0,\n  'aria-rowspan': 0,\n  'aria-setsize': 0\n};\n\nvar warnedProperties = {};\nvar rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');\nvar rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');\n\nfunction validateProperty(tagName, name) {\n  {\n    if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {\n      return true;\n    }\n\n    if (rARIACamel.test(name)) {\n      var ariaName = 'aria-' + name.slice(4).toLowerCase();\n      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM\n      // DOM properties, then it is an invalid aria-* attribute.\n\n      if (correctName == null) {\n        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);\n\n        warnedProperties[name] = true;\n        return true;\n      } // aria-* attributes should be lowercase; suggest the lowercase version.\n\n\n      if (name !== correctName) {\n        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);\n\n        warnedProperties[name] = true;\n        return true;\n      }\n    }\n\n    if (rARIA.test(name)) {\n      var lowerCasedName = name.toLowerCase();\n      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM\n      // DOM properties, then it is an invalid aria-* attribute.\n\n      if (standardName == null) {\n        warnedProperties[name] = true;\n        return false;\n      } // aria-* attributes should be lowercase; suggest the lowercase version.\n\n\n      if (name !== standardName) {\n        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);\n\n        warnedProperties[name] = true;\n        return true;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction warnInvalidARIAProps(type, props) {\n  {\n    var invalidProps = [];\n\n    for (var key in props) {\n      var isValid = validateProperty(type, key);\n\n      if (!isValid) {\n        invalidProps.push(key);\n      }\n    }\n\n    var unknownPropString = invalidProps.map(function (prop) {\n      return '`' + prop + '`';\n    }).join(', ');\n\n    if (invalidProps.length === 1) {\n      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);\n    } else if (invalidProps.length > 1) {\n      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);\n    }\n  }\n}\n\nfunction validateProperties(type, props) {\n  if (isCustomComponent(type, props)) {\n    return;\n  }\n\n  warnInvalidARIAProps(type, props);\n}\n\nvar didWarnValueNull = false;\nfunction validateProperties$1(type, props) {\n  {\n    if (type !== 'input' && type !== 'textarea' && type !== 'select') {\n      return;\n    }\n\n    if (props != null && props.value === null && !didWarnValueNull) {\n      didWarnValueNull = true;\n\n      if (type === 'select' && props.multiple) {\n        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);\n      } else {\n        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);\n      }\n    }\n  }\n}\n\nvar validateProperty$1 = function () {};\n\n{\n  var warnedProperties$1 = {};\n  var EVENT_NAME_REGEX = /^on./;\n  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;\n  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');\n  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');\n\n  validateProperty$1 = function (tagName, name, value, eventRegistry) {\n    if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {\n      return true;\n    }\n\n    var lowerCasedName = name.toLowerCase();\n\n    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {\n      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');\n\n      warnedProperties$1[name] = true;\n      return true;\n    } // We can't rely on the event system being injected on the server.\n\n\n    if (eventRegistry != null) {\n      var registrationNameDependencies = eventRegistry.registrationNameDependencies,\n          possibleRegistrationNames = eventRegistry.possibleRegistrationNames;\n\n      if (registrationNameDependencies.hasOwnProperty(name)) {\n        return true;\n      }\n\n      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;\n\n      if (registrationName != null) {\n        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);\n\n        warnedProperties$1[name] = true;\n        return true;\n      }\n\n      if (EVENT_NAME_REGEX.test(name)) {\n        error('Unknown event handler property `%s`. It will be ignored.', name);\n\n        warnedProperties$1[name] = true;\n        return true;\n      }\n    } else if (EVENT_NAME_REGEX.test(name)) {\n      // If no event plugins have been injected, we are in a server environment.\n      // So we can't tell if the event name is correct for sure, but we can filter\n      // out known bad ones like `onclick`. We can't suggest a specific replacement though.\n      if (INVALID_EVENT_NAME_REGEX.test(name)) {\n        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);\n      }\n\n      warnedProperties$1[name] = true;\n      return true;\n    } // Let the ARIA attribute hook validate ARIA attributes\n\n\n    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {\n      return true;\n    }\n\n    if (lowerCasedName === 'innerhtml') {\n      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');\n\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName === 'aria') {\n      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');\n\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {\n      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);\n\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    if (typeof value === 'number' && isNaN(value)) {\n      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);\n\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    var propertyInfo = getPropertyInfo(name);\n    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.\n\n    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {\n      var standardName = possibleStandardNames[lowerCasedName];\n\n      if (standardName !== name) {\n        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);\n\n        warnedProperties$1[name] = true;\n        return true;\n      }\n    } else if (!isReserved && name !== lowerCasedName) {\n      // Unknown attributes should have lowercase casing since that's how they\n      // will be cased anyway with server rendering.\n      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);\n\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {\n      if (value) {\n        error('Received `%s` for a non-boolean attribute `%s`.\\n\\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s=\"%s\" or %s={value.toString()}.', value, name, name, value, name);\n      } else {\n        error('Received `%s` for a non-boolean attribute `%s`.\\n\\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s=\"%s\" or %s={value.toString()}.\\n\\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);\n      }\n\n      warnedProperties$1[name] = true;\n      return true;\n    } // Now that we've validated casing, do not validate\n    // data types for reserved props\n\n\n    if (isReserved) {\n      return true;\n    } // Warn when a known attribute is a bad type\n\n\n    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {\n      warnedProperties$1[name] = true;\n      return false;\n    } // Warn when passing the strings 'false' or 'true' into a boolean prop\n\n\n    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {\n      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string \"false\".', name, value);\n\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    return true;\n  };\n}\n\nvar warnUnknownProperties = function (type, props, eventRegistry) {\n  {\n    var unknownProps = [];\n\n    for (var key in props) {\n      var isValid = validateProperty$1(type, key, props[key], eventRegistry);\n\n      if (!isValid) {\n        unknownProps.push(key);\n      }\n    }\n\n    var unknownPropString = unknownProps.map(function (prop) {\n      return '`' + prop + '`';\n    }).join(', ');\n\n    if (unknownProps.length === 1) {\n      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);\n    } else if (unknownProps.length > 1) {\n      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);\n    }\n  }\n};\n\nfunction validateProperties$2(type, props, eventRegistry) {\n  if (isCustomComponent(type, props)) {\n    return;\n  }\n\n  warnUnknownProperties(type, props, eventRegistry);\n}\n\nvar IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;\nvar IS_NON_DELEGATED = 1 << 1;\nvar IS_CAPTURE_PHASE = 1 << 2;\n// set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when\n// we call willDeferLaterForLegacyFBSupport, thus not bailing out\n// will result in endless cycles like an infinite loop.\n// We also don't want to defer during event replaying.\n\nvar SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;\n\n// This exists to avoid circular dependency between ReactDOMEventReplaying\n// and DOMPluginEventSystem.\nvar currentReplayingEvent = null;\nfunction setReplayingEvent(event) {\n  {\n    if (currentReplayingEvent !== null) {\n      error('Expected currently replaying event to be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');\n    }\n  }\n\n  currentReplayingEvent = event;\n}\nfunction resetReplayingEvent() {\n  {\n    if (currentReplayingEvent === null) {\n      error('Expected currently replaying event to not be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');\n    }\n  }\n\n  currentReplayingEvent = null;\n}\nfunction isReplayingEvent(event) {\n  return event === currentReplayingEvent;\n}\n\n/**\n * Gets the target node from a native browser event by accounting for\n * inconsistencies in browser DOM APIs.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {DOMEventTarget} Target node.\n */\n\nfunction getEventTarget(nativeEvent) {\n  // Fallback to nativeEvent.srcElement for IE9\n  // https://github.com/facebook/react/issues/12506\n  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963\n\n  if (target.correspondingUseElement) {\n    target = target.correspondingUseElement;\n  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).\n  // @see http://www.quirksmode.org/js/events_properties.html\n\n\n  return target.nodeType === TEXT_NODE ? target.parentNode : target;\n}\n\nvar restoreImpl = null;\nvar restoreTarget = null;\nvar restoreQueue = null;\n\nfunction restoreStateOfTarget(target) {\n  // We perform this translation at the end of the event loop so that we\n  // always receive the correct fiber here\n  var internalInstance = getInstanceFromNode(target);\n\n  if (!internalInstance) {\n    // Unmounted\n    return;\n  }\n\n  if (typeof restoreImpl !== 'function') {\n    throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.\n\n  if (stateNode) {\n    var _props = getFiberCurrentPropsFromNode(stateNode);\n\n    restoreImpl(internalInstance.stateNode, internalInstance.type, _props);\n  }\n}\n\nfunction setRestoreImplementation(impl) {\n  restoreImpl = impl;\n}\nfunction enqueueStateRestore(target) {\n  if (restoreTarget) {\n    if (restoreQueue) {\n      restoreQueue.push(target);\n    } else {\n      restoreQueue = [target];\n    }\n  } else {\n    restoreTarget = target;\n  }\n}\nfunction needsStateRestore() {\n  return restoreTarget !== null || restoreQueue !== null;\n}\nfunction restoreStateIfNeeded() {\n  if (!restoreTarget) {\n    return;\n  }\n\n  var target = restoreTarget;\n  var queuedTargets = restoreQueue;\n  restoreTarget = null;\n  restoreQueue = null;\n  restoreStateOfTarget(target);\n\n  if (queuedTargets) {\n    for (var i = 0; i < queuedTargets.length; i++) {\n      restoreStateOfTarget(queuedTargets[i]);\n    }\n  }\n}\n\n// the renderer. Such as when we're dispatching events or if third party\n// libraries need to call batchedUpdates. Eventually, this API will go away when\n// everything is batched by default. We'll then have a similar API to opt-out of\n// scheduled work and instead do synchronous work.\n// Defaults\n\nvar batchedUpdatesImpl = function (fn, bookkeeping) {\n  return fn(bookkeeping);\n};\n\nvar flushSyncImpl = function () {};\n\nvar isInsideEventHandler = false;\n\nfunction finishEventHandler() {\n  // Here we wait until all updates have propagated, which is important\n  // when using controlled components within layers:\n  // https://github.com/facebook/react/issues/1698\n  // Then we restore state of any controlled component.\n  var controlledComponentsHavePendingUpdates = needsStateRestore();\n\n  if (controlledComponentsHavePendingUpdates) {\n    // If a controlled event was fired, we may need to restore the state of\n    // the DOM node back to the controlled value. This is necessary when React\n    // bails out of the update without touching the DOM.\n    // TODO: Restore state in the microtask, after the discrete updates flush,\n    // instead of early flushing them here.\n    flushSyncImpl();\n    restoreStateIfNeeded();\n  }\n}\n\nfunction batchedUpdates(fn, a, b) {\n  if (isInsideEventHandler) {\n    // If we are currently inside another batch, we need to wait until it\n    // fully completes before restoring state.\n    return fn(a, b);\n  }\n\n  isInsideEventHandler = true;\n\n  try {\n    return batchedUpdatesImpl(fn, a, b);\n  } finally {\n    isInsideEventHandler = false;\n    finishEventHandler();\n  }\n} // TODO: Replace with flushSync\nfunction setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {\n  batchedUpdatesImpl = _batchedUpdatesImpl;\n  flushSyncImpl = _flushSyncImpl;\n}\n\nfunction isInteractive(tag) {\n  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';\n}\n\nfunction shouldPreventMouseEvent(name, type, props) {\n  switch (name) {\n    case 'onClick':\n    case 'onClickCapture':\n    case 'onDoubleClick':\n    case 'onDoubleClickCapture':\n    case 'onMouseDown':\n    case 'onMouseDownCapture':\n    case 'onMouseMove':\n    case 'onMouseMoveCapture':\n    case 'onMouseUp':\n    case 'onMouseUpCapture':\n    case 'onMouseEnter':\n      return !!(props.disabled && isInteractive(type));\n\n    default:\n      return false;\n  }\n}\n/**\n * @param {object} inst The instance, which is the source of events.\n * @param {string} registrationName Name of listener (e.g. `onClick`).\n * @return {?function} The stored callback.\n */\n\n\nfunction getListener(inst, registrationName) {\n  var stateNode = inst.stateNode;\n\n  if (stateNode === null) {\n    // Work in progress (ex: onload events in incremental mode).\n    return null;\n  }\n\n  var props = getFiberCurrentPropsFromNode(stateNode);\n\n  if (props === null) {\n    // Work in progress.\n    return null;\n  }\n\n  var listener = props[registrationName];\n\n  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {\n    return null;\n  }\n\n  if (listener && typeof listener !== 'function') {\n    throw new Error(\"Expected `\" + registrationName + \"` listener to be a function, instead got a value of `\" + typeof listener + \"` type.\");\n  }\n\n  return listener;\n}\n\nvar passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners\n// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n\nif (canUseDOM) {\n  try {\n    var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value\n\n    Object.defineProperty(options, 'passive', {\n      get: function () {\n        passiveBrowserEventsSupported = true;\n      }\n    });\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, options);\n  } catch (e) {\n    passiveBrowserEventsSupported = false;\n  }\n}\n\nfunction invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {\n  var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n  try {\n    func.apply(context, funcArgs);\n  } catch (error) {\n    this.onError(error);\n  }\n}\n\nvar invokeGuardedCallbackImpl = invokeGuardedCallbackProd;\n\n{\n  // In DEV mode, we swap out invokeGuardedCallback for a special version\n  // that plays more nicely with the browser's DevTools. The idea is to preserve\n  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n  // functions in invokeGuardedCallback, and the production version of\n  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n  // like caught exceptions, and the DevTools won't pause unless the developer\n  // takes the extra step of enabling pause on caught exceptions. This is\n  // unintuitive, though, because even though React has caught the error, from\n  // the developer's perspective, the error is uncaught.\n  //\n  // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n  // DOM node, and call the user-provided callback from inside an event handler\n  // for that fake event. If the callback throws, the error is \"captured\" using\n  // a global event handler. But because the error happens in a different\n  // event loop context, it does not interrupt the normal program flow.\n  // Effectively, this gives us try-catch behavior without actually using\n  // try-catch. Neat!\n  // Check that the browser supports the APIs we need to implement our special\n  // DEV version of invokeGuardedCallback\n  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n    var fakeNode = document.createElement('react');\n\n    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {\n      // If document doesn't exist we know for sure we will crash in this method\n      // when we call document.createEvent(). However this can cause confusing\n      // errors: https://github.com/facebook/create-react-app/issues/3482\n      // So we preemptively throw with a better message instead.\n      if (typeof document === 'undefined' || document === null) {\n        throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');\n      }\n\n      var evt = document.createEvent('Event');\n      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We\n      // set this to true at the beginning, then set it to false right after\n      // calling the function. If the function errors, `didError` will never be\n      // set to false. This strategy works even if the browser is flaky and\n      // fails to call our global error handler, because it doesn't rely on\n      // the error event at all.\n\n      var didError = true; // Keeps track of the value of window.event so that we can reset it\n      // during the callback to let user code access window.event in the\n      // browsers that support it.\n\n      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event\n      // dispatching: https://github.com/facebook/react/issues/13688\n\n      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');\n\n      function restoreAfterDispatch() {\n        // We immediately remove the callback from event listeners so that\n        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n        // nested call would trigger the fake event handlers of any call higher\n        // in the stack.\n        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the\n        // window.event assignment in both IE <= 10 as they throw an error\n        // \"Member not found\" in strict mode, and in Firefox which does not\n        // support window.event.\n\n        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {\n          window.event = windowEvent;\n        }\n      } // Create an event handler for our fake event. We will synchronously\n      // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n      // call the user-provided callback.\n\n\n      var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n      function callCallback() {\n        didCall = true;\n        restoreAfterDispatch();\n        func.apply(context, funcArgs);\n        didError = false;\n      } // Create a global error event handler. We use this to capture the value\n      // that was thrown. It's possible that this error handler will fire more\n      // than once; for example, if non-React code also calls `dispatchEvent`\n      // and a handler for that event throws. We should be resilient to most of\n      // those cases. Even if our error event handler fires more than once, the\n      // last error event is always used. If the callback actually does error,\n      // we know that the last error event is the correct one, because it's not\n      // possible for anything else to have happened in between our callback\n      // erroring and the code that follows the `dispatchEvent` call below. If\n      // the callback doesn't error, but the error event was fired, we know to\n      // ignore it because `didError` will be false, as described above.\n\n\n      var error; // Use this to track whether the error event is ever called.\n\n      var didSetError = false;\n      var isCrossOriginError = false;\n\n      function handleWindowError(event) {\n        error = event.error;\n        didSetError = true;\n\n        if (error === null && event.colno === 0 && event.lineno === 0) {\n          isCrossOriginError = true;\n        }\n\n        if (event.defaultPrevented) {\n          // Some other error handler has prevented default.\n          // Browsers silence the error report if this happens.\n          // We'll remember this to later decide whether to log it or not.\n          if (error != null && typeof error === 'object') {\n            try {\n              error._suppressLogging = true;\n            } catch (inner) {// Ignore.\n            }\n          }\n        }\n      } // Create a fake event type.\n\n\n      var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers\n\n      window.addEventListener('error', handleWindowError);\n      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function\n      // errors, it will trigger our global error handler.\n\n      evt.initEvent(evtType, false, false);\n      fakeNode.dispatchEvent(evt);\n\n      if (windowEventDescriptor) {\n        Object.defineProperty(window, 'event', windowEventDescriptor);\n      }\n\n      if (didCall && didError) {\n        if (!didSetError) {\n          // The callback errored, but the error event never fired.\n          // eslint-disable-next-line react-internal/prod-error-codes\n          error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');\n        } else if (isCrossOriginError) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');\n        }\n\n        this.onError(error);\n      } // Remove our event listeners\n\n\n      window.removeEventListener('error', handleWindowError);\n\n      if (!didCall) {\n        // Something went really wrong, and our event was not dispatched.\n        // https://github.com/facebook/react/issues/16734\n        // https://github.com/facebook/react/issues/16585\n        // Fall back to the production implementation.\n        restoreAfterDispatch();\n        return invokeGuardedCallbackProd.apply(this, arguments);\n      }\n    };\n  }\n}\n\nvar invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;\n\nvar hasError = false;\nvar caughtError = null; // Used by event system to capture/rethrow the first error.\n\nvar hasRethrowError = false;\nvar rethrowError = null;\nvar reporter = {\n  onError: function (error) {\n    hasError = true;\n    caughtError = error;\n  }\n};\n/**\n * Call a function while guarding against errors that happens within it.\n * Returns an error if it throws, otherwise null.\n *\n * In production, this is implemented using a try-catch. The reason we don't\n * use a try-catch directly is so that we can swap out a different\n * implementation in DEV mode.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\n\nfunction invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\n  hasError = false;\n  caughtError = null;\n  invokeGuardedCallbackImpl$1.apply(reporter, arguments);\n}\n/**\n * Same as invokeGuardedCallback, but instead of returning an error, it stores\n * it in a global so it can be rethrown by `rethrowCaughtError` later.\n * TODO: See if caughtError and rethrowError can be unified.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\n\nfunction invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {\n  invokeGuardedCallback.apply(this, arguments);\n\n  if (hasError) {\n    var error = clearCaughtError();\n\n    if (!hasRethrowError) {\n      hasRethrowError = true;\n      rethrowError = error;\n    }\n  }\n}\n/**\n * During execution of guarded functions we will capture the first error which\n * we will rethrow to be handled by the top level error handler.\n */\n\nfunction rethrowCaughtError() {\n  if (hasRethrowError) {\n    var error = rethrowError;\n    hasRethrowError = false;\n    rethrowError = null;\n    throw error;\n  }\n}\nfunction hasCaughtError() {\n  return hasError;\n}\nfunction clearCaughtError() {\n  if (hasError) {\n    var error = caughtError;\n    hasError = false;\n    caughtError = null;\n    return error;\n  } else {\n    throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');\n  }\n}\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\nfunction get(key) {\n  return key._reactInternals;\n}\nfunction has(key) {\n  return key._reactInternals !== undefined;\n}\nfunction set(key, value) {\n  key._reactInternals = value;\n}\n\n// Don't change these two values. They're used by React Dev Tools.\nvar NoFlags =\n/*                      */\n0;\nvar PerformedWork =\n/*                */\n1; // You can change the rest (and add more).\n\nvar Placement =\n/*                    */\n2;\nvar Update =\n/*                       */\n4;\nvar ChildDeletion =\n/*                */\n16;\nvar ContentReset =\n/*                 */\n32;\nvar Callback =\n/*                     */\n64;\nvar DidCapture =\n/*                   */\n128;\nvar ForceClientRender =\n/*            */\n256;\nvar Ref =\n/*                          */\n512;\nvar Snapshot =\n/*                     */\n1024;\nvar Passive =\n/*                      */\n2048;\nvar Hydrating =\n/*                    */\n4096;\nvar Visibility =\n/*                   */\n8192;\nvar StoreConsistency =\n/*             */\n16384;\nvar LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)\n\nvar HostEffectMask =\n/*               */\n32767; // These are not really side effects, but we still reuse this field.\n\nvar Incomplete =\n/*                   */\n32768;\nvar ShouldCapture =\n/*                */\n65536;\nvar ForceUpdateForLegacySuspense =\n/* */\n131072;\nvar Forked =\n/*                       */\n1048576; // Static tags describe aspects of a fiber that are not specific to a render,\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n// This enables us to defer more work in the unmount case,\n// since we can defer traversing the tree during layout to look for Passive effects,\n// and instead rely on the static flag as a signal that there may be cleanup work.\n\nvar RefStatic =\n/*                    */\n2097152;\nvar LayoutStatic =\n/*                 */\n4194304;\nvar PassiveStatic =\n/*                */\n8388608; // These flags allow us to traverse to fibers that have effects on mount\n// without traversing the entire tree after every commit for\n// double invoking\n\nvar MountLayoutDev =\n/*               */\n16777216;\nvar MountPassiveDev =\n/*              */\n33554432; // Groups of flags that are used in the commit phase to skip over trees that\n// don't contain effects, by checking subtreeFlags.\n\nvar BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n// flag logic (see #20043)\nUpdate | Snapshot | ( 0);\nvar MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;\nvar LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask\n\nvar PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.\n// This allows certain concepts to persist without recalculating them,\n// e.g. whether a subtree contains passive effects or portals.\n\nvar StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nfunction getNearestMountedFiber(fiber) {\n  var node = fiber;\n  var nearestMounted = fiber;\n\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    var nextNode = node;\n\n    do {\n      node = nextNode;\n\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      }\n\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  } // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n\n\n  return null;\n}\nfunction getSuspenseInstanceFromFiber(fiber) {\n  if (fiber.tag === SuspenseComponent) {\n    var suspenseState = fiber.memoizedState;\n\n    if (suspenseState === null) {\n      var current = fiber.alternate;\n\n      if (current !== null) {\n        suspenseState = current.memoizedState;\n      }\n    }\n\n    if (suspenseState !== null) {\n      return suspenseState.dehydrated;\n    }\n  }\n\n  return null;\n}\nfunction getContainerFromFiber(fiber) {\n  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;\n}\nfunction isFiberMounted(fiber) {\n  return getNearestMountedFiber(fiber) === fiber;\n}\nfunction isMounted(component) {\n  {\n    var owner = ReactCurrentOwner.current;\n\n    if (owner !== null && owner.tag === ClassComponent) {\n      var ownerFiber = owner;\n      var instance = ownerFiber.stateNode;\n\n      if (!instance._warnedAboutRefsInRender) {\n        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');\n      }\n\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  var fiber = get(component);\n\n  if (!fiber) {\n    return false;\n  }\n\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nfunction assertIsMounted(fiber) {\n  if (getNearestMountedFiber(fiber) !== fiber) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n}\n\nfunction findCurrentFiberUsingSlowPath(fiber) {\n  var alternate = fiber.alternate;\n\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    var nearestMounted = getNearestMountedFiber(fiber);\n\n    if (nearestMounted === null) {\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n\n    return fiber;\n  } // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n\n\n  var a = fiber;\n  var b = alternate;\n\n  while (true) {\n    var parentA = a.return;\n\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n\n    var parentB = parentA.alternate;\n\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      var nextParent = parentA.return;\n\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      } // If there's no parent, we're at the root.\n\n\n      break;\n    } // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n\n\n    if (parentA.child === parentB.child) {\n      var child = parentA.child;\n\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n\n        child = child.sibling;\n      } // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n\n\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      var didFindChild = false;\n      var _child = parentA.child;\n\n      while (_child) {\n        if (_child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n\n        if (_child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n\n        _child = _child.sibling;\n      }\n\n      if (!didFindChild) {\n        // Search parent B's child set\n        _child = parentB.child;\n\n        while (_child) {\n          if (_child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n\n          if (_child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n\n          _child = _child.sibling;\n        }\n\n        if (!didFindChild) {\n          throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');\n        }\n      }\n    }\n\n    if (a.alternate !== b) {\n      throw new Error(\"Return fibers should always be each others' alternates. \" + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n  } // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n\n\n  if (a.tag !== HostRoot) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  } // Otherwise B has to be current branch.\n\n\n  return alternate;\n}\nfunction findCurrentHostFiber(parent) {\n  var currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;\n}\n\nfunction findCurrentHostFiberImpl(node) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  var child = node.child;\n\n  while (child !== null) {\n    var match = findCurrentHostFiberImpl(child);\n\n    if (match !== null) {\n      return match;\n    }\n\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nfunction findCurrentHostFiberWithNoPortals(parent) {\n  var currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;\n}\n\nfunction findCurrentHostFiberWithNoPortalsImpl(node) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  var child = node.child;\n\n  while (child !== null) {\n    if (child.tag !== HostPortal) {\n      var match = findCurrentHostFiberWithNoPortalsImpl(child);\n\n      if (match !== null) {\n        return match;\n      }\n    }\n\n    child = child.sibling;\n  }\n\n  return null;\n}\n\n// This module only exists as an ESM wrapper around the external CommonJS\nvar scheduleCallback = Scheduler.unstable_scheduleCallback;\nvar cancelCallback = Scheduler.unstable_cancelCallback;\nvar shouldYield = Scheduler.unstable_shouldYield;\nvar requestPaint = Scheduler.unstable_requestPaint;\nvar now = Scheduler.unstable_now;\nvar getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;\nvar ImmediatePriority = Scheduler.unstable_ImmediatePriority;\nvar UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\nvar NormalPriority = Scheduler.unstable_NormalPriority;\nvar LowPriority = Scheduler.unstable_LowPriority;\nvar IdlePriority = Scheduler.unstable_IdlePriority;\n// this doesn't actually exist on the scheduler, but it *does*\n// on scheduler/unstable_mock, which we'll need for internal testing\nvar unstable_yieldValue = Scheduler.unstable_yieldValue;\nvar unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;\n\nvar rendererID = null;\nvar injectedHook = null;\nvar injectedProfilingHooks = null;\nvar hasLoggedError = false;\nvar isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\nfunction injectInternals(internals) {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n\n  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n\n  if (!hook.supportsFiber) {\n    {\n      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');\n    } // DevTools exists, even though it doesn't support Fiber.\n\n\n    return true;\n  }\n\n  try {\n    if (enableSchedulingProfiler) {\n      // Conditionally inject these hooks only if Timeline profiler is supported by this build.\n      // This gives DevTools a way to feature detect that isn't tied to version number\n      // (since profiling and timeline are controlled by different feature flags).\n      internals = assign({}, internals, {\n        getLaneLabelMap: getLaneLabelMap,\n        injectProfilingHooks: injectProfilingHooks\n      });\n    }\n\n    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.\n\n    injectedHook = hook;\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    {\n      error('React instrumentation encountered an error: %s.', err);\n    }\n  }\n\n  if (hook.checkDCE) {\n    // This is the real DevTools.\n    return true;\n  } else {\n    // This is likely a hook installed by Fast Refresh runtime.\n    return false;\n  }\n}\nfunction onScheduleRoot(root, children) {\n  {\n    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {\n      try {\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n      } catch (err) {\n        if ( !hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction onCommitRoot(root, eventPriority) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      var didError = (root.current.flags & DidCapture) === DidCapture;\n\n      if (enableProfilerTimer) {\n        var schedulerPriority;\n\n        switch (eventPriority) {\n          case DiscreteEventPriority:\n            schedulerPriority = ImmediatePriority;\n            break;\n\n          case ContinuousEventPriority:\n            schedulerPriority = UserBlockingPriority;\n            break;\n\n          case DefaultEventPriority:\n            schedulerPriority = NormalPriority;\n            break;\n\n          case IdleEventPriority:\n            schedulerPriority = IdlePriority;\n            break;\n\n          default:\n            schedulerPriority = NormalPriority;\n            break;\n        }\n\n        injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);\n      } else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n      {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction onPostCommitRoot(root) {\n  if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {\n    try {\n      injectedHook.onPostCommitFiberRoot(rendererID, root);\n    } catch (err) {\n      {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction onCommitUnmount(fiber) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n      {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction setIsStrictModeForDevtools(newIsStrictMode) {\n  {\n    if (typeof unstable_yieldValue === 'function') {\n      // We're in a test because Scheduler.unstable_yieldValue only exists\n      // in SchedulerMock. To reduce the noise in strict mode tests,\n      // suppress warnings and disable scheduler yielding during the double render\n      unstable_setDisableYieldValue(newIsStrictMode);\n      setSuppressWarning(newIsStrictMode);\n    }\n\n    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {\n      try {\n        injectedHook.setStrictMode(rendererID, newIsStrictMode);\n      } catch (err) {\n        {\n          if (!hasLoggedError) {\n            hasLoggedError = true;\n\n            error('React instrumentation encountered an error: %s', err);\n          }\n        }\n      }\n    }\n  }\n} // Profiler API hooks\n\nfunction injectProfilingHooks(profilingHooks) {\n  injectedProfilingHooks = profilingHooks;\n}\n\nfunction getLaneLabelMap() {\n  {\n    var map = new Map();\n    var lane = 1;\n\n    for (var index = 0; index < TotalLanes; index++) {\n      var label = getLabelForLane(lane);\n      map.set(lane, label);\n      lane *= 2;\n    }\n\n    return map;\n  }\n}\n\nfunction markCommitStarted(lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') {\n      injectedProfilingHooks.markCommitStarted(lanes);\n    }\n  }\n}\nfunction markCommitStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') {\n      injectedProfilingHooks.markCommitStopped();\n    }\n  }\n}\nfunction markComponentRenderStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') {\n      injectedProfilingHooks.markComponentRenderStarted(fiber);\n    }\n  }\n}\nfunction markComponentRenderStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') {\n      injectedProfilingHooks.markComponentRenderStopped();\n    }\n  }\n}\nfunction markComponentPassiveEffectMountStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') {\n      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);\n    }\n  }\n}\nfunction markComponentPassiveEffectMountStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') {\n      injectedProfilingHooks.markComponentPassiveEffectMountStopped();\n    }\n  }\n}\nfunction markComponentPassiveEffectUnmountStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);\n    }\n  }\n}\nfunction markComponentPassiveEffectUnmountStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();\n    }\n  }\n}\nfunction markComponentLayoutEffectMountStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') {\n      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);\n    }\n  }\n}\nfunction markComponentLayoutEffectMountStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') {\n      injectedProfilingHooks.markComponentLayoutEffectMountStopped();\n    }\n  }\n}\nfunction markComponentLayoutEffectUnmountStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);\n    }\n  }\n}\nfunction markComponentLayoutEffectUnmountStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();\n    }\n  }\n}\nfunction markComponentErrored(fiber, thrownValue, lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') {\n      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);\n    }\n  }\n}\nfunction markComponentSuspended(fiber, wakeable, lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') {\n      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);\n    }\n  }\n}\nfunction markLayoutEffectsStarted(lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') {\n      injectedProfilingHooks.markLayoutEffectsStarted(lanes);\n    }\n  }\n}\nfunction markLayoutEffectsStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') {\n      injectedProfilingHooks.markLayoutEffectsStopped();\n    }\n  }\n}\nfunction markPassiveEffectsStarted(lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') {\n      injectedProfilingHooks.markPassiveEffectsStarted(lanes);\n    }\n  }\n}\nfunction markPassiveEffectsStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') {\n      injectedProfilingHooks.markPassiveEffectsStopped();\n    }\n  }\n}\nfunction markRenderStarted(lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') {\n      injectedProfilingHooks.markRenderStarted(lanes);\n    }\n  }\n}\nfunction markRenderYielded() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') {\n      injectedProfilingHooks.markRenderYielded();\n    }\n  }\n}\nfunction markRenderStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') {\n      injectedProfilingHooks.markRenderStopped();\n    }\n  }\n}\nfunction markRenderScheduled(lane) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') {\n      injectedProfilingHooks.markRenderScheduled(lane);\n    }\n  }\n}\nfunction markForceUpdateScheduled(fiber, lane) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') {\n      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);\n    }\n  }\n}\nfunction markStateUpdateScheduled(fiber, lane) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') {\n      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\n    }\n  }\n}\n\nvar NoMode =\n/*                         */\n0; // TODO: Remove ConcurrentMode by reading from the root tag instead\n\nvar ConcurrentMode =\n/*                 */\n1;\nvar ProfileMode =\n/*                    */\n2;\nvar StrictLegacyMode =\n/*               */\n8;\nvar StrictEffectsMode =\n/*              */\n16;\n\n// TODO: This is pretty well supported by browsers. Maybe we can drop it.\nvar clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\nvar log = Math.log;\nvar LN2 = Math.LN2;\n\nfunction clz32Fallback(x) {\n  var asUint = x >>> 0;\n\n  if (asUint === 0) {\n    return 32;\n  }\n\n  return 31 - (log(asUint) / LN2 | 0) | 0;\n}\n\n// If those values are changed that package should be rebuilt and redeployed.\n\nvar TotalLanes = 31;\nvar NoLanes =\n/*                        */\n0;\nvar NoLane =\n/*                          */\n0;\nvar SyncLane =\n/*                        */\n1;\nvar InputContinuousHydrationLane =\n/*    */\n2;\nvar InputContinuousLane =\n/*             */\n4;\nvar DefaultHydrationLane =\n/*            */\n8;\nvar DefaultLane =\n/*                     */\n16;\nvar TransitionHydrationLane =\n/*                */\n32;\nvar TransitionLanes =\n/*                       */\n4194240;\nvar TransitionLane1 =\n/*                        */\n64;\nvar TransitionLane2 =\n/*                        */\n128;\nvar TransitionLane3 =\n/*                        */\n256;\nvar TransitionLane4 =\n/*                        */\n512;\nvar TransitionLane5 =\n/*                        */\n1024;\nvar TransitionLane6 =\n/*                        */\n2048;\nvar TransitionLane7 =\n/*                        */\n4096;\nvar TransitionLane8 =\n/*                        */\n8192;\nvar TransitionLane9 =\n/*                        */\n16384;\nvar TransitionLane10 =\n/*                       */\n32768;\nvar TransitionLane11 =\n/*                       */\n65536;\nvar TransitionLane12 =\n/*                       */\n131072;\nvar TransitionLane13 =\n/*                       */\n262144;\nvar TransitionLane14 =\n/*                       */\n524288;\nvar TransitionLane15 =\n/*                       */\n1048576;\nvar TransitionLane16 =\n/*                       */\n2097152;\nvar RetryLanes =\n/*                            */\n130023424;\nvar RetryLane1 =\n/*                             */\n4194304;\nvar RetryLane2 =\n/*                             */\n8388608;\nvar RetryLane3 =\n/*                             */\n16777216;\nvar RetryLane4 =\n/*                             */\n33554432;\nvar RetryLane5 =\n/*                             */\n67108864;\nvar SomeRetryLane = RetryLane1;\nvar SelectiveHydrationLane =\n/*          */\n134217728;\nvar NonIdleLanes =\n/*                          */\n268435455;\nvar IdleHydrationLane =\n/*               */\n268435456;\nvar IdleLane =\n/*                        */\n536870912;\nvar OffscreenLane =\n/*                   */\n1073741824; // This function is used for the experimental timeline (react-devtools-timeline)\n// It should be kept in sync with the Lanes values above.\n\nfunction getLabelForLane(lane) {\n  {\n    if (lane & SyncLane) {\n      return 'Sync';\n    }\n\n    if (lane & InputContinuousHydrationLane) {\n      return 'InputContinuousHydration';\n    }\n\n    if (lane & InputContinuousLane) {\n      return 'InputContinuous';\n    }\n\n    if (lane & DefaultHydrationLane) {\n      return 'DefaultHydration';\n    }\n\n    if (lane & DefaultLane) {\n      return 'Default';\n    }\n\n    if (lane & TransitionHydrationLane) {\n      return 'TransitionHydration';\n    }\n\n    if (lane & TransitionLanes) {\n      return 'Transition';\n    }\n\n    if (lane & RetryLanes) {\n      return 'Retry';\n    }\n\n    if (lane & SelectiveHydrationLane) {\n      return 'SelectiveHydration';\n    }\n\n    if (lane & IdleHydrationLane) {\n      return 'IdleHydration';\n    }\n\n    if (lane & IdleLane) {\n      return 'Idle';\n    }\n\n    if (lane & OffscreenLane) {\n      return 'Offscreen';\n    }\n  }\n}\nvar NoTimestamp = -1;\nvar nextTransitionLane = TransitionLane1;\nvar nextRetryLane = RetryLane1;\n\nfunction getHighestPriorityLanes(lanes) {\n  switch (getHighestPriorityLane(lanes)) {\n    case SyncLane:\n      return SyncLane;\n\n    case InputContinuousHydrationLane:\n      return InputContinuousHydrationLane;\n\n    case InputContinuousLane:\n      return InputContinuousLane;\n\n    case DefaultHydrationLane:\n      return DefaultHydrationLane;\n\n    case DefaultLane:\n      return DefaultLane;\n\n    case TransitionHydrationLane:\n      return TransitionHydrationLane;\n\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return lanes & TransitionLanes;\n\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      return lanes & RetryLanes;\n\n    case SelectiveHydrationLane:\n      return SelectiveHydrationLane;\n\n    case IdleHydrationLane:\n      return IdleHydrationLane;\n\n    case IdleLane:\n      return IdleLane;\n\n    case OffscreenLane:\n      return OffscreenLane;\n\n    default:\n      {\n        error('Should have found matching lanes. This is a bug in React.');\n      } // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n\n\n      return lanes;\n  }\n}\n\nfunction getNextLanes(root, wipLanes) {\n  // Early bailout if there's no pending work left.\n  var pendingLanes = root.pendingLanes;\n\n  if (pendingLanes === NoLanes) {\n    return NoLanes;\n  }\n\n  var nextLanes = NoLanes;\n  var suspendedLanes = root.suspendedLanes;\n  var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,\n  // even if the work is suspended.\n\n  var nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n\n  if (nonIdlePendingLanes !== NoLanes) {\n    var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n\n    if (nonIdleUnblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n    } else {\n      var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n\n      if (nonIdlePingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n      }\n    }\n  } else {\n    // The only remaining work is Idle.\n    var unblockedLanes = pendingLanes & ~suspendedLanes;\n\n    if (unblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(unblockedLanes);\n    } else {\n      if (pingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(pingedLanes);\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  } // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n\n\n  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't\n  // bother waiting until the root is complete.\n  (wipLanes & suspendedLanes) === NoLanes) {\n    var nextLane = getHighestPriorityLane(nextLanes);\n    var wipLane = getHighestPriorityLane(wipLanes);\n\n    if ( // Tests whether the next lane is equal or lower priority than the wip\n    // one. This works because the bits decrease in priority as you go left.\n    nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The\n    // only difference between default updates and transition updates is that\n    // default updates do not support refresh transitions.\n    nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {\n      // Keep working on the existing in-progress tree. Do not interrupt.\n      return wipLanes;\n    }\n  }\n\n  if ((nextLanes & InputContinuousLane) !== NoLanes) {\n    // When updates are sync by default, we entangle continuous priority updates\n    // and default updates, so they render in the same batch. The only reason\n    // they use separate lanes is because continuous updates should interrupt\n    // transitions, but default updates should not.\n    nextLanes |= pendingLanes & DefaultLane;\n  } // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  // TODO: Reconsider this. The counter-argument is that the partial work\n  // represents an intermediate state, which we don't want to show to the user.\n  // And by spending extra time finishing it, we're increasing the amount of\n  // time it takes to show the final state, which is what they are actually\n  // waiting for.\n  //\n  // For those exceptions where entanglement is semantically important, like\n  // useMutableSource, we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n\n\n  var entangledLanes = root.entangledLanes;\n\n  if (entangledLanes !== NoLanes) {\n    var entanglements = root.entanglements;\n    var lanes = nextLanes & entangledLanes;\n\n    while (lanes > 0) {\n      var index = pickArbitraryLaneIndex(lanes);\n      var lane = 1 << index;\n      nextLanes |= entanglements[index];\n      lanes &= ~lane;\n    }\n  }\n\n  return nextLanes;\n}\nfunction getMostRecentEventTime(root, lanes) {\n  var eventTimes = root.eventTimes;\n  var mostRecentEventTime = NoTimestamp;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    var eventTime = eventTimes[index];\n\n    if (eventTime > mostRecentEventTime) {\n      mostRecentEventTime = eventTime;\n    }\n\n    lanes &= ~lane;\n  }\n\n  return mostRecentEventTime;\n}\n\nfunction computeExpirationTime(lane, currentTime) {\n  switch (lane) {\n    case SyncLane:\n    case InputContinuousHydrationLane:\n    case InputContinuousLane:\n      // User interactions should expire slightly more quickly.\n      //\n      // NOTE: This is set to the corresponding constant as in Scheduler.js.\n      // When we made it larger, a product metric in www regressed, suggesting\n      // there's a user interaction that's being starved by a series of\n      // synchronous updates. If that theory is correct, the proper solution is\n      // to fix the starvation. However, this scenario supports the idea that\n      // expiration times are an important safeguard when starvation\n      // does happen.\n      return currentTime + 250;\n\n    case DefaultHydrationLane:\n    case DefaultLane:\n    case TransitionHydrationLane:\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return currentTime + 5000;\n\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      // TODO: Retries should be allowed to expire if they are CPU bound for\n      // too long, but when I made this change it caused a spike in browser\n      // crashes. There must be some other underlying bug; not super urgent but\n      // ideally should figure out why and fix it. Unfortunately we don't have\n      // a repro for the crashes, only detected via production metrics.\n      return NoTimestamp;\n\n    case SelectiveHydrationLane:\n    case IdleHydrationLane:\n    case IdleLane:\n    case OffscreenLane:\n      // Anything idle priority or lower should never expire.\n      return NoTimestamp;\n\n    default:\n      {\n        error('Should have found matching lanes. This is a bug in React.');\n      }\n\n      return NoTimestamp;\n  }\n}\n\nfunction markStarvedLanesAsExpired(root, currentTime) {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n  var pendingLanes = root.pendingLanes;\n  var suspendedLanes = root.suspendedLanes;\n  var pingedLanes = root.pingedLanes;\n  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n\n  var lanes = pendingLanes;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    var expirationTime = expirationTimes[index];\n\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n} // This returns the highest priority pending lanes regardless of whether they\n// are suspended.\n\nfunction getHighestPriorityPendingLanes(root) {\n  return getHighestPriorityLanes(root.pendingLanes);\n}\nfunction getLanesToRetrySynchronouslyOnError(root) {\n  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n\n  return NoLanes;\n}\nfunction includesSyncLane(lanes) {\n  return (lanes & SyncLane) !== NoLanes;\n}\nfunction includesNonIdleWork(lanes) {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nfunction includesOnlyRetries(lanes) {\n  return (lanes & RetryLanes) === lanes;\n}\nfunction includesOnlyNonUrgentLanes(lanes) {\n  var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\n  return (lanes & UrgentLanes) === NoLanes;\n}\nfunction includesOnlyTransitions(lanes) {\n  return (lanes & TransitionLanes) === lanes;\n}\nfunction includesBlockingLane(root, lanes) {\n\n  var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;\n  return (lanes & SyncDefaultLanes) !== NoLanes;\n}\nfunction includesExpiredLane(root, lanes) {\n  // This is a separate check from includesBlockingLane because a lane can\n  // expire after a render has already started.\n  return (lanes & root.expiredLanes) !== NoLanes;\n}\nfunction isTransitionLane(lane) {\n  return (lane & TransitionLanes) !== NoLanes;\n}\nfunction claimNextTransitionLane() {\n  // Cycle through the lanes, assigning each new transition to the next lane.\n  // In most cases, this means every transition gets its own lane, until we\n  // run out of lanes and cycle back to the beginning.\n  var lane = nextTransitionLane;\n  nextTransitionLane <<= 1;\n\n  if ((nextTransitionLane & TransitionLanes) === NoLanes) {\n    nextTransitionLane = TransitionLane1;\n  }\n\n  return lane;\n}\nfunction claimNextRetryLane() {\n  var lane = nextRetryLane;\n  nextRetryLane <<= 1;\n\n  if ((nextRetryLane & RetryLanes) === NoLanes) {\n    nextRetryLane = RetryLane1;\n  }\n\n  return lane;\n}\nfunction getHighestPriorityLane(lanes) {\n  return lanes & -lanes;\n}\nfunction pickArbitraryLane(lanes) {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nfunction includesSomeLane(a, b) {\n  return (a & b) !== NoLanes;\n}\nfunction isSubsetOfLanes(set, subset) {\n  return (set & subset) === subset;\n}\nfunction mergeLanes(a, b) {\n  return a | b;\n}\nfunction removeLanes(set, subset) {\n  return set & ~subset;\n}\nfunction intersectLanes(a, b) {\n  return a & b;\n} // Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\n\nfunction laneToLanes(lane) {\n  return lane;\n}\nfunction higherPriorityLane(a, b) {\n  // This works because the bit ranges decrease in priority as you go left.\n  return a !== NoLane && a < b ? a : b;\n}\nfunction createLaneMap(initial) {\n  // Intentionally pushing one by one.\n  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n  var laneMap = [];\n\n  for (var i = 0; i < TotalLanes; i++) {\n    laneMap.push(initial);\n  }\n\n  return laneMap;\n}\nfunction markRootUpdated(root, updateLane, eventTime) {\n  root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update\n  // could unblock them. Clear the suspended lanes so that we can try rendering\n  // them again.\n  //\n  // TODO: We really only need to unsuspend only lanes that are in the\n  // `subtreeLanes` of the updated fiber, or the update lanes of the return\n  // path. This would exclude suspended updates in an unrelated sibling tree,\n  // since there's no way for this update to unblock it.\n  //\n  // We don't do this if the incoming update is idle, because we never process\n  // idle updates until after all the regular updates have finished; there's no\n  // way it could unblock a transition.\n\n  if (updateLane !== IdleLane) {\n    root.suspendedLanes = NoLanes;\n    root.pingedLanes = NoLanes;\n  }\n\n  var eventTimes = root.eventTimes;\n  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most\n  // recent event, and we assume time is monotonically increasing.\n\n  eventTimes[index] = eventTime;\n}\nfunction markRootSuspended(root, suspendedLanes) {\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n\n  var expirationTimes = root.expirationTimes;\n  var lanes = suspendedLanes;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    expirationTimes[index] = NoTimestamp;\n    lanes &= ~lane;\n  }\n}\nfunction markRootPinged(root, pingedLanes, eventTime) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n}\nfunction markRootFinished(root, remainingLanes) {\n  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n  root.pendingLanes = remainingLanes; // Let's try everything again\n\n  root.suspendedLanes = NoLanes;\n  root.pingedLanes = NoLanes;\n  root.expiredLanes &= remainingLanes;\n  root.mutableReadLanes &= remainingLanes;\n  root.entangledLanes &= remainingLanes;\n  var entanglements = root.entanglements;\n  var eventTimes = root.eventTimes;\n  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work\n\n  var lanes = noLongerPendingLanes;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    entanglements[index] = NoLanes;\n    eventTimes[index] = NoTimestamp;\n    expirationTimes[index] = NoTimestamp;\n    lanes &= ~lane;\n  }\n}\nfunction markRootEntangled(root, entangledLanes) {\n  // In addition to entangling each of the given lanes with each other, we also\n  // have to consider _transitive_ entanglements. For each lane that is already\n  // entangled with *any* of the given lanes, that lane is now transitively\n  // entangled with *all* the given lanes.\n  //\n  // Translated: If C is entangled with A, then entangling A with B also\n  // entangles C with B.\n  //\n  // If this is hard to grasp, it might help to intentionally break this\n  // function and look at the tests that fail in ReactTransition-test.js. Try\n  // commenting out one of the conditions below.\n  var rootEntangledLanes = root.entangledLanes |= entangledLanes;\n  var entanglements = root.entanglements;\n  var lanes = rootEntangledLanes;\n\n  while (lanes) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n\n    if ( // Is this one of the newly entangled lanes?\n    lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?\n    entanglements[index] & entangledLanes) {\n      entanglements[index] |= entangledLanes;\n    }\n\n    lanes &= ~lane;\n  }\n}\nfunction getBumpedLaneForHydration(root, renderLanes) {\n  var renderLane = getHighestPriorityLane(renderLanes);\n  var lane;\n\n  switch (renderLane) {\n    case InputContinuousLane:\n      lane = InputContinuousHydrationLane;\n      break;\n\n    case DefaultLane:\n      lane = DefaultHydrationLane;\n      break;\n\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      lane = TransitionHydrationLane;\n      break;\n\n    case IdleLane:\n      lane = IdleHydrationLane;\n      break;\n\n    default:\n      // Everything else is already either a hydration lane, or shouldn't\n      // be retried at a hydration lane.\n      lane = NoLane;\n      break;\n  } // Check if the lane we chose is suspended. If so, that indicates that we\n  // already attempted and failed to hydrate at that level. Also check if we're\n  // already rendering that lane, which is rare but could happen.\n\n\n  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n    // Give up trying to hydrate and fall back to client render.\n    return NoLane;\n  }\n\n  return lane;\n}\nfunction addFiberToLanesMap(root, fiber, lanes) {\n\n  if (!isDevToolsPresent) {\n    return;\n  }\n\n  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n\n  while (lanes > 0) {\n    var index = laneToIndex(lanes);\n    var lane = 1 << index;\n    var updaters = pendingUpdatersLaneMap[index];\n    updaters.add(fiber);\n    lanes &= ~lane;\n  }\n}\nfunction movePendingFibersToMemoized(root, lanes) {\n\n  if (!isDevToolsPresent) {\n    return;\n  }\n\n  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  var memoizedUpdaters = root.memoizedUpdaters;\n\n  while (lanes > 0) {\n    var index = laneToIndex(lanes);\n    var lane = 1 << index;\n    var updaters = pendingUpdatersLaneMap[index];\n\n    if (updaters.size > 0) {\n      updaters.forEach(function (fiber) {\n        var alternate = fiber.alternate;\n\n        if (alternate === null || !memoizedUpdaters.has(alternate)) {\n          memoizedUpdaters.add(fiber);\n        }\n      });\n      updaters.clear();\n    }\n\n    lanes &= ~lane;\n  }\n}\nfunction getTransitionsForLanes(root, lanes) {\n  {\n    return null;\n  }\n}\n\nvar DiscreteEventPriority = SyncLane;\nvar ContinuousEventPriority = InputContinuousLane;\nvar DefaultEventPriority = DefaultLane;\nvar IdleEventPriority = IdleLane;\nvar currentUpdatePriority = NoLane;\nfunction getCurrentUpdatePriority() {\n  return currentUpdatePriority;\n}\nfunction setCurrentUpdatePriority(newPriority) {\n  currentUpdatePriority = newPriority;\n}\nfunction runWithPriority(priority, fn) {\n  var previousPriority = currentUpdatePriority;\n\n  try {\n    currentUpdatePriority = priority;\n    return fn();\n  } finally {\n    currentUpdatePriority = previousPriority;\n  }\n}\nfunction higherEventPriority(a, b) {\n  return a !== 0 && a < b ? a : b;\n}\nfunction lowerEventPriority(a, b) {\n  return a === 0 || a > b ? a : b;\n}\nfunction isHigherEventPriority(a, b) {\n  return a !== 0 && a < b;\n}\nfunction lanesToEventPriority(lanes) {\n  var lane = getHighestPriorityLane(lanes);\n\n  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n    return DiscreteEventPriority;\n  }\n\n  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n    return ContinuousEventPriority;\n  }\n\n  if (includesNonIdleWork(lane)) {\n    return DefaultEventPriority;\n  }\n\n  return IdleEventPriority;\n}\n\n// This is imported by the event replaying implementation in React DOM. It's\n// in a separate file to break a circular dependency between the renderer and\n// the reconciler.\nfunction isRootDehydrated(root) {\n  var currentState = root.current.memoizedState;\n  return currentState.isDehydrated;\n}\n\nvar _attemptSynchronousHydration;\n\nfunction setAttemptSynchronousHydration(fn) {\n  _attemptSynchronousHydration = fn;\n}\nfunction attemptSynchronousHydration(fiber) {\n  _attemptSynchronousHydration(fiber);\n}\nvar attemptContinuousHydration;\nfunction setAttemptContinuousHydration(fn) {\n  attemptContinuousHydration = fn;\n}\nvar attemptHydrationAtCurrentPriority;\nfunction setAttemptHydrationAtCurrentPriority(fn) {\n  attemptHydrationAtCurrentPriority = fn;\n}\nvar getCurrentUpdatePriority$1;\nfunction setGetCurrentUpdatePriority(fn) {\n  getCurrentUpdatePriority$1 = fn;\n}\nvar attemptHydrationAtPriority;\nfunction setAttemptHydrationAtPriority(fn) {\n  attemptHydrationAtPriority = fn;\n} // TODO: Upgrade this definition once we're on a newer version of Flow that\n// has this definition built-in.\n\nvar hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.\n\nvar queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.\n// if the last target was dehydrated.\n\nvar queuedFocus = null;\nvar queuedDrag = null;\nvar queuedMouse = null; // For pointer events there can be one latest event per pointerId.\n\nvar queuedPointers = new Map();\nvar queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.\n\nvar queuedExplicitHydrationTargets = [];\nvar discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase\n'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset', 'submit'];\nfunction isDiscreteEventThatRequiresHydration(eventType) {\n  return discreteReplayableEvents.indexOf(eventType) > -1;\n}\n\nfunction createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {\n  return {\n    blockedOn: blockedOn,\n    domEventName: domEventName,\n    eventSystemFlags: eventSystemFlags,\n    nativeEvent: nativeEvent,\n    targetContainers: [targetContainer]\n  };\n}\n\nfunction clearIfContinuousEvent(domEventName, nativeEvent) {\n  switch (domEventName) {\n    case 'focusin':\n    case 'focusout':\n      queuedFocus = null;\n      break;\n\n    case 'dragenter':\n    case 'dragleave':\n      queuedDrag = null;\n      break;\n\n    case 'mouseover':\n    case 'mouseout':\n      queuedMouse = null;\n      break;\n\n    case 'pointerover':\n    case 'pointerout':\n      {\n        var pointerId = nativeEvent.pointerId;\n        queuedPointers.delete(pointerId);\n        break;\n      }\n\n    case 'gotpointercapture':\n    case 'lostpointercapture':\n      {\n        var _pointerId = nativeEvent.pointerId;\n        queuedPointerCaptures.delete(_pointerId);\n        break;\n      }\n  }\n}\n\nfunction accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {\n  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {\n    var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);\n\n    if (blockedOn !== null) {\n      var _fiber2 = getInstanceFromNode(blockedOn);\n\n      if (_fiber2 !== null) {\n        // Attempt to increase the priority of this target.\n        attemptContinuousHydration(_fiber2);\n      }\n    }\n\n    return queuedEvent;\n  } // If we have already queued this exact event, then it's because\n  // the different event systems have different DOM event listeners.\n  // We can accumulate the flags, and the targetContainers, and\n  // store a single event to be replayed.\n\n\n  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;\n  var targetContainers = existingQueuedEvent.targetContainers;\n\n  if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {\n    targetContainers.push(targetContainer);\n  }\n\n  return existingQueuedEvent;\n}\n\nfunction queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {\n  // These set relatedTarget to null because the replayed event will be treated as if we\n  // moved from outside the window (no target) onto the target once it hydrates.\n  // Instead of mutating we could clone the event.\n  switch (domEventName) {\n    case 'focusin':\n      {\n        var focusEvent = nativeEvent;\n        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);\n        return true;\n      }\n\n    case 'dragenter':\n      {\n        var dragEvent = nativeEvent;\n        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);\n        return true;\n      }\n\n    case 'mouseover':\n      {\n        var mouseEvent = nativeEvent;\n        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);\n        return true;\n      }\n\n    case 'pointerover':\n      {\n        var pointerEvent = nativeEvent;\n        var pointerId = pointerEvent.pointerId;\n        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));\n        return true;\n      }\n\n    case 'gotpointercapture':\n      {\n        var _pointerEvent = nativeEvent;\n        var _pointerId2 = _pointerEvent.pointerId;\n        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));\n        return true;\n      }\n  }\n\n  return false;\n} // Check if this target is unblocked. Returns true if it's unblocked.\n\nfunction attemptExplicitHydrationTarget(queuedTarget) {\n  // TODO: This function shares a lot of logic with findInstanceBlockingEvent.\n  // Try to unify them. It's a bit tricky since it would require two return\n  // values.\n  var targetInst = getClosestInstanceFromNode(queuedTarget.target);\n\n  if (targetInst !== null) {\n    var nearestMounted = getNearestMountedFiber(targetInst);\n\n    if (nearestMounted !== null) {\n      var tag = nearestMounted.tag;\n\n      if (tag === SuspenseComponent) {\n        var instance = getSuspenseInstanceFromFiber(nearestMounted);\n\n        if (instance !== null) {\n          // We're blocked on hydrating this boundary.\n          // Increase its priority.\n          queuedTarget.blockedOn = instance;\n          attemptHydrationAtPriority(queuedTarget.priority, function () {\n            attemptHydrationAtCurrentPriority(nearestMounted);\n          });\n          return;\n        }\n      } else if (tag === HostRoot) {\n        var root = nearestMounted.stateNode;\n\n        if (isRootDehydrated(root)) {\n          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of\n          // a root other than sync.\n\n          return;\n        }\n      }\n    }\n  }\n\n  queuedTarget.blockedOn = null;\n}\n\nfunction queueExplicitHydrationTarget(target) {\n  // TODO: This will read the priority if it's dispatched by the React\n  // event system but not native events. Should read window.event.type, like\n  // we do for updates (getCurrentEventPriority).\n  var updatePriority = getCurrentUpdatePriority$1();\n  var queuedTarget = {\n    blockedOn: null,\n    target: target,\n    priority: updatePriority\n  };\n  var i = 0;\n\n  for (; i < queuedExplicitHydrationTargets.length; i++) {\n    // Stop once we hit the first target with lower priority than\n    if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {\n      break;\n    }\n  }\n\n  queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);\n\n  if (i === 0) {\n    attemptExplicitHydrationTarget(queuedTarget);\n  }\n}\n\nfunction attemptReplayContinuousQueuedEvent(queuedEvent) {\n  if (queuedEvent.blockedOn !== null) {\n    return false;\n  }\n\n  var targetContainers = queuedEvent.targetContainers;\n\n  while (targetContainers.length > 0) {\n    var targetContainer = targetContainers[0];\n    var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);\n\n    if (nextBlockedOn === null) {\n      {\n        var nativeEvent = queuedEvent.nativeEvent;\n        var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);\n        setReplayingEvent(nativeEventClone);\n        nativeEvent.target.dispatchEvent(nativeEventClone);\n        resetReplayingEvent();\n      }\n    } else {\n      // We're still blocked. Try again later.\n      var _fiber3 = getInstanceFromNode(nextBlockedOn);\n\n      if (_fiber3 !== null) {\n        attemptContinuousHydration(_fiber3);\n      }\n\n      queuedEvent.blockedOn = nextBlockedOn;\n      return false;\n    } // This target container was successfully dispatched. Try the next.\n\n\n    targetContainers.shift();\n  }\n\n  return true;\n}\n\nfunction attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {\n  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {\n    map.delete(key);\n  }\n}\n\nfunction replayUnblockedEvents() {\n  hasScheduledReplayAttempt = false;\n\n\n  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {\n    queuedFocus = null;\n  }\n\n  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {\n    queuedDrag = null;\n  }\n\n  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {\n    queuedMouse = null;\n  }\n\n  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);\n  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);\n}\n\nfunction scheduleCallbackIfUnblocked(queuedEvent, unblocked) {\n  if (queuedEvent.blockedOn === unblocked) {\n    queuedEvent.blockedOn = null;\n\n    if (!hasScheduledReplayAttempt) {\n      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are\n      // now unblocked. This first might not actually be unblocked yet.\n      // We could check it early to avoid scheduling an unnecessary callback.\n\n      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);\n    }\n  }\n}\n\nfunction retryIfBlockedOn(unblocked) {\n  // Mark anything that was blocked on this as no longer blocked\n  // and eligible for a replay.\n  if (queuedDiscreteEvents.length > 0) {\n    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's\n    // worth it because we expect very few discrete events to queue up and once\n    // we are actually fully unblocked it will be fast to replay them.\n\n    for (var i = 1; i < queuedDiscreteEvents.length; i++) {\n      var queuedEvent = queuedDiscreteEvents[i];\n\n      if (queuedEvent.blockedOn === unblocked) {\n        queuedEvent.blockedOn = null;\n      }\n    }\n  }\n\n  if (queuedFocus !== null) {\n    scheduleCallbackIfUnblocked(queuedFocus, unblocked);\n  }\n\n  if (queuedDrag !== null) {\n    scheduleCallbackIfUnblocked(queuedDrag, unblocked);\n  }\n\n  if (queuedMouse !== null) {\n    scheduleCallbackIfUnblocked(queuedMouse, unblocked);\n  }\n\n  var unblock = function (queuedEvent) {\n    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);\n  };\n\n  queuedPointers.forEach(unblock);\n  queuedPointerCaptures.forEach(unblock);\n\n  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {\n    var queuedTarget = queuedExplicitHydrationTargets[_i];\n\n    if (queuedTarget.blockedOn === unblocked) {\n      queuedTarget.blockedOn = null;\n    }\n  }\n\n  while (queuedExplicitHydrationTargets.length > 0) {\n    var nextExplicitTarget = queuedExplicitHydrationTargets[0];\n\n    if (nextExplicitTarget.blockedOn !== null) {\n      // We're still blocked.\n      break;\n    } else {\n      attemptExplicitHydrationTarget(nextExplicitTarget);\n\n      if (nextExplicitTarget.blockedOn === null) {\n        // We're unblocked.\n        queuedExplicitHydrationTargets.shift();\n      }\n    }\n  }\n}\n\nvar ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig; // TODO: can we stop exporting these?\n\nvar _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.\n// We'd like to remove this but it's not clear if this is safe.\n\nfunction setEnabled(enabled) {\n  _enabled = !!enabled;\n}\nfunction isEnabled() {\n  return _enabled;\n}\nfunction createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {\n  var eventPriority = getEventPriority(domEventName);\n  var listenerWrapper;\n\n  switch (eventPriority) {\n    case DiscreteEventPriority:\n      listenerWrapper = dispatchDiscreteEvent;\n      break;\n\n    case ContinuousEventPriority:\n      listenerWrapper = dispatchContinuousEvent;\n      break;\n\n    case DefaultEventPriority:\n    default:\n      listenerWrapper = dispatchEvent;\n      break;\n  }\n\n  return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);\n}\n\nfunction dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {\n  var previousPriority = getCurrentUpdatePriority();\n  var prevTransition = ReactCurrentBatchConfig.transition;\n  ReactCurrentBatchConfig.transition = null;\n\n  try {\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  }\n}\n\nfunction dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {\n  var previousPriority = getCurrentUpdatePriority();\n  var prevTransition = ReactCurrentBatchConfig.transition;\n  ReactCurrentBatchConfig.transition = null;\n\n  try {\n    setCurrentUpdatePriority(ContinuousEventPriority);\n    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  }\n}\n\nfunction dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {\n  if (!_enabled) {\n    return;\n  }\n\n  {\n    dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);\n  }\n}\n\nfunction dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {\n  var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);\n\n  if (blockedOn === null) {\n    dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);\n    clearIfContinuousEvent(domEventName, nativeEvent);\n    return;\n  }\n\n  if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {\n    nativeEvent.stopPropagation();\n    return;\n  } // We need to clear only if we didn't queue because\n  // queueing is accumulative.\n\n\n  clearIfContinuousEvent(domEventName, nativeEvent);\n\n  if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {\n    while (blockedOn !== null) {\n      var fiber = getInstanceFromNode(blockedOn);\n\n      if (fiber !== null) {\n        attemptSynchronousHydration(fiber);\n      }\n\n      var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);\n\n      if (nextBlockedOn === null) {\n        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);\n      }\n\n      if (nextBlockedOn === blockedOn) {\n        break;\n      }\n\n      blockedOn = nextBlockedOn;\n    }\n\n    if (blockedOn !== null) {\n      nativeEvent.stopPropagation();\n    }\n\n    return;\n  } // This is not replayable so we'll invoke it but without a target,\n  // in case the event system needs to trace it.\n\n\n  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);\n}\n\nvar return_targetInst = null; // Returns a SuspenseInstance or Container if it's blocked.\n// The return_targetInst field above is conceptually part of the return value.\n\nfunction findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {\n  // TODO: Warn if _enabled is false.\n  return_targetInst = null;\n  var nativeEventTarget = getEventTarget(nativeEvent);\n  var targetInst = getClosestInstanceFromNode(nativeEventTarget);\n\n  if (targetInst !== null) {\n    var nearestMounted = getNearestMountedFiber(targetInst);\n\n    if (nearestMounted === null) {\n      // This tree has been unmounted already. Dispatch without a target.\n      targetInst = null;\n    } else {\n      var tag = nearestMounted.tag;\n\n      if (tag === SuspenseComponent) {\n        var instance = getSuspenseInstanceFromFiber(nearestMounted);\n\n        if (instance !== null) {\n          // Queue the event to be replayed later. Abort dispatching since we\n          // don't want this event dispatched twice through the event system.\n          // TODO: If this is the first discrete event in the queue. Schedule an increased\n          // priority for this boundary.\n          return instance;\n        } // This shouldn't happen, something went wrong but to avoid blocking\n        // the whole system, dispatch the event without a target.\n        // TODO: Warn.\n\n\n        targetInst = null;\n      } else if (tag === HostRoot) {\n        var root = nearestMounted.stateNode;\n\n        if (isRootDehydrated(root)) {\n          // If this happens during a replay something went wrong and it might block\n          // the whole system.\n          return getContainerFromFiber(nearestMounted);\n        }\n\n        targetInst = null;\n      } else if (nearestMounted !== targetInst) {\n        // If we get an event (ex: img onload) before committing that\n        // component's mount, ignore it for now (that is, treat it as if it was an\n        // event on a non-React tree). We might also consider queueing events and\n        // dispatching them after the mount.\n        targetInst = null;\n      }\n    }\n  }\n\n  return_targetInst = targetInst; // We're not blocked on anything.\n\n  return null;\n}\nfunction getEventPriority(domEventName) {\n  switch (domEventName) {\n    // Used by SimpleEventPlugin:\n    case 'cancel':\n    case 'click':\n    case 'close':\n    case 'contextmenu':\n    case 'copy':\n    case 'cut':\n    case 'auxclick':\n    case 'dblclick':\n    case 'dragend':\n    case 'dragstart':\n    case 'drop':\n    case 'focusin':\n    case 'focusout':\n    case 'input':\n    case 'invalid':\n    case 'keydown':\n    case 'keypress':\n    case 'keyup':\n    case 'mousedown':\n    case 'mouseup':\n    case 'paste':\n    case 'pause':\n    case 'play':\n    case 'pointercancel':\n    case 'pointerdown':\n    case 'pointerup':\n    case 'ratechange':\n    case 'reset':\n    case 'resize':\n    case 'seeked':\n    case 'submit':\n    case 'touchcancel':\n    case 'touchend':\n    case 'touchstart':\n    case 'volumechange': // Used by polyfills:\n    // eslint-disable-next-line no-fallthrough\n\n    case 'change':\n    case 'selectionchange':\n    case 'textInput':\n    case 'compositionstart':\n    case 'compositionend':\n    case 'compositionupdate': // Only enableCreateEventHandleAPI:\n    // eslint-disable-next-line no-fallthrough\n\n    case 'beforeblur':\n    case 'afterblur': // Not used by React but could be by user code:\n    // eslint-disable-next-line no-fallthrough\n\n    case 'beforeinput':\n    case 'blur':\n    case 'fullscreenchange':\n    case 'focus':\n    case 'hashchange':\n    case 'popstate':\n    case 'select':\n    case 'selectstart':\n      return DiscreteEventPriority;\n\n    case 'drag':\n    case 'dragenter':\n    case 'dragexit':\n    case 'dragleave':\n    case 'dragover':\n    case 'mousemove':\n    case 'mouseout':\n    case 'mouseover':\n    case 'pointermove':\n    case 'pointerout':\n    case 'pointerover':\n    case 'scroll':\n    case 'toggle':\n    case 'touchmove':\n    case 'wheel': // Not used by React but could be by user code:\n    // eslint-disable-next-line no-fallthrough\n\n    case 'mouseenter':\n    case 'mouseleave':\n    case 'pointerenter':\n    case 'pointerleave':\n      return ContinuousEventPriority;\n\n    case 'message':\n      {\n        // We might be in the Scheduler callback.\n        // Eventually this mechanism will be replaced by a check\n        // of the current priority on the native scheduler.\n        var schedulerPriority = getCurrentPriorityLevel();\n\n        switch (schedulerPriority) {\n          case ImmediatePriority:\n            return DiscreteEventPriority;\n\n          case UserBlockingPriority:\n            return ContinuousEventPriority;\n\n          case NormalPriority:\n          case LowPriority:\n            // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.\n            return DefaultEventPriority;\n\n          case IdlePriority:\n            return IdleEventPriority;\n\n          default:\n            return DefaultEventPriority;\n        }\n      }\n\n    default:\n      return DefaultEventPriority;\n  }\n}\n\nfunction addEventBubbleListener(target, eventType, listener) {\n  target.addEventListener(eventType, listener, false);\n  return listener;\n}\nfunction addEventCaptureListener(target, eventType, listener) {\n  target.addEventListener(eventType, listener, true);\n  return listener;\n}\nfunction addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {\n  target.addEventListener(eventType, listener, {\n    capture: true,\n    passive: passive\n  });\n  return listener;\n}\nfunction addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {\n  target.addEventListener(eventType, listener, {\n    passive: passive\n  });\n  return listener;\n}\n\n/**\n * These variables store information about text content of a target node,\n * allowing comparison of content before and after a given event.\n *\n * Identify the node where selection currently begins, then observe\n * both its text content and its current position in the DOM. Since the\n * browser may natively replace the target node during composition, we can\n * use its position to find its replacement.\n *\n *\n */\nvar root = null;\nvar startText = null;\nvar fallbackText = null;\nfunction initialize(nativeEventTarget) {\n  root = nativeEventTarget;\n  startText = getText();\n  return true;\n}\nfunction reset() {\n  root = null;\n  startText = null;\n  fallbackText = null;\n}\nfunction getData() {\n  if (fallbackText) {\n    return fallbackText;\n  }\n\n  var start;\n  var startValue = startText;\n  var startLength = startValue.length;\n  var end;\n  var endValue = getText();\n  var endLength = endValue.length;\n\n  for (start = 0; start < startLength; start++) {\n    if (startValue[start] !== endValue[start]) {\n      break;\n    }\n  }\n\n  var minEnd = startLength - start;\n\n  for (end = 1; end <= minEnd; end++) {\n    if (startValue[startLength - end] !== endValue[endLength - end]) {\n      break;\n    }\n  }\n\n  var sliceTail = end > 1 ? 1 - end : undefined;\n  fallbackText = endValue.slice(start, sliceTail);\n  return fallbackText;\n}\nfunction getText() {\n  if ('value' in root) {\n    return root.value;\n  }\n\n  return root.textContent;\n}\n\n/**\n * `charCode` represents the actual \"character code\" and is safe to use with\n * `String.fromCharCode`. As such, only keys that correspond to printable\n * characters produce a valid `charCode`, the only exception to this is Enter.\n * The Tab-key is considered non-printable and does not have a `charCode`,\n * presumably because it does not produce a tab-character in browsers.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {number} Normalized `charCode` property.\n */\nfunction getEventCharCode(nativeEvent) {\n  var charCode;\n  var keyCode = nativeEvent.keyCode;\n\n  if ('charCode' in nativeEvent) {\n    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.\n\n    if (charCode === 0 && keyCode === 13) {\n      charCode = 13;\n    }\n  } else {\n    // IE8 does not implement `charCode`, but `keyCode` has the correct value.\n    charCode = keyCode;\n  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)\n  // report Enter as charCode 10 when ctrl is pressed.\n\n\n  if (charCode === 10) {\n    charCode = 13;\n  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.\n  // Must not discard the (non-)printable Enter-key.\n\n\n  if (charCode >= 32 || charCode === 13) {\n    return charCode;\n  }\n\n  return 0;\n}\n\nfunction functionThatReturnsTrue() {\n  return true;\n}\n\nfunction functionThatReturnsFalse() {\n  return false;\n} // This is intentionally a factory so that we have different returned constructors.\n// If we had a single constructor, it would be megamorphic and engines would deopt.\n\n\nfunction createSyntheticEvent(Interface) {\n  /**\n   * Synthetic events are dispatched by event plugins, typically in response to a\n   * top-level event delegation handler.\n   *\n   * These systems should generally use pooling to reduce the frequency of garbage\n   * collection. The system should check `isPersistent` to determine whether the\n   * event should be released into the pool after being dispatched. Users that\n   * need a persisted event should invoke `persist`.\n   *\n   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by\n   * normalizing browser quirks. Subclasses do not necessarily have to implement a\n   * DOM interface; custom application-specific events can also subclass this.\n   */\n  function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {\n    this._reactName = reactName;\n    this._targetInst = targetInst;\n    this.type = reactEventType;\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEventTarget;\n    this.currentTarget = null;\n\n    for (var _propName in Interface) {\n      if (!Interface.hasOwnProperty(_propName)) {\n        continue;\n      }\n\n      var normalize = Interface[_propName];\n\n      if (normalize) {\n        this[_propName] = normalize(nativeEvent);\n      } else {\n        this[_propName] = nativeEvent[_propName];\n      }\n    }\n\n    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;\n\n    if (defaultPrevented) {\n      this.isDefaultPrevented = functionThatReturnsTrue;\n    } else {\n      this.isDefaultPrevented = functionThatReturnsFalse;\n    }\n\n    this.isPropagationStopped = functionThatReturnsFalse;\n    return this;\n  }\n\n  assign(SyntheticBaseEvent.prototype, {\n    preventDefault: function () {\n      this.defaultPrevented = true;\n      var event = this.nativeEvent;\n\n      if (!event) {\n        return;\n      }\n\n      if (event.preventDefault) {\n        event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE\n      } else if (typeof event.returnValue !== 'unknown') {\n        event.returnValue = false;\n      }\n\n      this.isDefaultPrevented = functionThatReturnsTrue;\n    },\n    stopPropagation: function () {\n      var event = this.nativeEvent;\n\n      if (!event) {\n        return;\n      }\n\n      if (event.stopPropagation) {\n        event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE\n      } else if (typeof event.cancelBubble !== 'unknown') {\n        // The ChangeEventPlugin registers a \"propertychange\" event for\n        // IE. This event does not support bubbling or cancelling, and\n        // any references to cancelBubble throw \"Member not found\".  A\n        // typeof check of \"unknown\" circumvents this issue (and is also\n        // IE specific).\n        event.cancelBubble = true;\n      }\n\n      this.isPropagationStopped = functionThatReturnsTrue;\n    },\n\n    /**\n     * We release all dispatched `SyntheticEvent`s after each event loop, adding\n     * them back into the pool. This allows a way to hold onto a reference that\n     * won't be added back into the pool.\n     */\n    persist: function () {// Modern event system doesn't use pooling.\n    },\n\n    /**\n     * Checks if this event should be released back into the pool.\n     *\n     * @return {boolean} True if this should not be released, false otherwise.\n     */\n    isPersistent: functionThatReturnsTrue\n  });\n  return SyntheticBaseEvent;\n}\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n\n\nvar EventInterface = {\n  eventPhase: 0,\n  bubbles: 0,\n  cancelable: 0,\n  timeStamp: function (event) {\n    return event.timeStamp || Date.now();\n  },\n  defaultPrevented: 0,\n  isTrusted: 0\n};\nvar SyntheticEvent = createSyntheticEvent(EventInterface);\n\nvar UIEventInterface = assign({}, EventInterface, {\n  view: 0,\n  detail: 0\n});\n\nvar SyntheticUIEvent = createSyntheticEvent(UIEventInterface);\nvar lastMovementX;\nvar lastMovementY;\nvar lastMouseEvent;\n\nfunction updateMouseMovementPolyfillState(event) {\n  if (event !== lastMouseEvent) {\n    if (lastMouseEvent && event.type === 'mousemove') {\n      lastMovementX = event.screenX - lastMouseEvent.screenX;\n      lastMovementY = event.screenY - lastMouseEvent.screenY;\n    } else {\n      lastMovementX = 0;\n      lastMovementY = 0;\n    }\n\n    lastMouseEvent = event;\n  }\n}\n/**\n * @interface MouseEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n\n\nvar MouseEventInterface = assign({}, UIEventInterface, {\n  screenX: 0,\n  screenY: 0,\n  clientX: 0,\n  clientY: 0,\n  pageX: 0,\n  pageY: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  altKey: 0,\n  metaKey: 0,\n  getModifierState: getEventModifierState,\n  button: 0,\n  buttons: 0,\n  relatedTarget: function (event) {\n    if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;\n    return event.relatedTarget;\n  },\n  movementX: function (event) {\n    if ('movementX' in event) {\n      return event.movementX;\n    }\n\n    updateMouseMovementPolyfillState(event);\n    return lastMovementX;\n  },\n  movementY: function (event) {\n    if ('movementY' in event) {\n      return event.movementY;\n    } // Don't need to call updateMouseMovementPolyfillState() here\n    // because it's guaranteed to have already run when movementX\n    // was copied.\n\n\n    return lastMovementY;\n  }\n});\n\nvar SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);\n/**\n * @interface DragEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n\nvar DragEventInterface = assign({}, MouseEventInterface, {\n  dataTransfer: 0\n});\n\nvar SyntheticDragEvent = createSyntheticEvent(DragEventInterface);\n/**\n * @interface FocusEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n\nvar FocusEventInterface = assign({}, UIEventInterface, {\n  relatedTarget: 0\n});\n\nvar SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);\n/**\n * @interface Event\n * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface\n * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent\n */\n\nvar AnimationEventInterface = assign({}, EventInterface, {\n  animationName: 0,\n  elapsedTime: 0,\n  pseudoElement: 0\n});\n\nvar SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);\n/**\n * @interface Event\n * @see http://www.w3.org/TR/clipboard-apis/\n */\n\nvar ClipboardEventInterface = assign({}, EventInterface, {\n  clipboardData: function (event) {\n    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;\n  }\n});\n\nvar SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents\n */\n\nvar CompositionEventInterface = assign({}, EventInterface, {\n  data: 0\n});\n\nvar SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105\n *      /#events-inputevents\n */\n// Happens to share the same list for now.\n\nvar SyntheticInputEvent = SyntheticCompositionEvent;\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\n\nvar normalizeKey = {\n  Esc: 'Escape',\n  Spacebar: ' ',\n  Left: 'ArrowLeft',\n  Up: 'ArrowUp',\n  Right: 'ArrowRight',\n  Down: 'ArrowDown',\n  Del: 'Delete',\n  Win: 'OS',\n  Menu: 'ContextMenu',\n  Apps: 'ContextMenu',\n  Scroll: 'ScrollLock',\n  MozPrintableKey: 'Unidentified'\n};\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\n\nvar translateToKey = {\n  '8': 'Backspace',\n  '9': 'Tab',\n  '12': 'Clear',\n  '13': 'Enter',\n  '16': 'Shift',\n  '17': 'Control',\n  '18': 'Alt',\n  '19': 'Pause',\n  '20': 'CapsLock',\n  '27': 'Escape',\n  '32': ' ',\n  '33': 'PageUp',\n  '34': 'PageDown',\n  '35': 'End',\n  '36': 'Home',\n  '37': 'ArrowLeft',\n  '38': 'ArrowUp',\n  '39': 'ArrowRight',\n  '40': 'ArrowDown',\n  '45': 'Insert',\n  '46': 'Delete',\n  '112': 'F1',\n  '113': 'F2',\n  '114': 'F3',\n  '115': 'F4',\n  '116': 'F5',\n  '117': 'F6',\n  '118': 'F7',\n  '119': 'F8',\n  '120': 'F9',\n  '121': 'F10',\n  '122': 'F11',\n  '123': 'F12',\n  '144': 'NumLock',\n  '145': 'ScrollLock',\n  '224': 'Meta'\n};\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\n\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  } // Browser does not implement `key`, polyfill as much of it as we can.\n\n\n  if (nativeEvent.type === 'keypress') {\n    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n\n  return '';\n}\n/**\n * Translation from modifier key to the associated property in the event.\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers\n */\n\n\nvar modifierKeyToProp = {\n  Alt: 'altKey',\n  Control: 'ctrlKey',\n  Meta: 'metaKey',\n  Shift: 'shiftKey'\n}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support\n// getModifierState. If getModifierState is not supported, we map it to a set of\n// modifier keys exposed by the event. In this case, Lock-keys are not supported.\n\nfunction modifierStateGetter(keyArg) {\n  var syntheticEvent = this;\n  var nativeEvent = syntheticEvent.nativeEvent;\n\n  if (nativeEvent.getModifierState) {\n    return nativeEvent.getModifierState(keyArg);\n  }\n\n  var keyProp = modifierKeyToProp[keyArg];\n  return keyProp ? !!nativeEvent[keyProp] : false;\n}\n\nfunction getEventModifierState(nativeEvent) {\n  return modifierStateGetter;\n}\n/**\n * @interface KeyboardEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n\n\nvar KeyboardEventInterface = assign({}, UIEventInterface, {\n  key: getEventKey,\n  code: 0,\n  location: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  altKey: 0,\n  metaKey: 0,\n  repeat: 0,\n  locale: 0,\n  getModifierState: getEventModifierState,\n  // Legacy Interface\n  charCode: function (event) {\n    // `charCode` is the result of a KeyPress event and represents the value of\n    // the actual printable character.\n    // KeyPress is deprecated, but its replacement is not yet final and not\n    // implemented in any major browser. Only KeyPress has charCode.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n\n    return 0;\n  },\n  keyCode: function (event) {\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\n    // physical keyboard key.\n    // The actual meaning of the value depends on the users' keyboard layout\n    // which cannot be detected. Assuming that it is a US keyboard layout\n    // provides a surprisingly accurate mapping for US and European users.\n    // Due to this, it is left to the user to implement at this time.\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n\n    return 0;\n  },\n  which: function (event) {\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\n    // type of the event.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n\n    return 0;\n  }\n});\n\nvar SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);\n/**\n * @interface PointerEvent\n * @see http://www.w3.org/TR/pointerevents/\n */\n\nvar PointerEventInterface = assign({}, MouseEventInterface, {\n  pointerId: 0,\n  width: 0,\n  height: 0,\n  pressure: 0,\n  tangentialPressure: 0,\n  tiltX: 0,\n  tiltY: 0,\n  twist: 0,\n  pointerType: 0,\n  isPrimary: 0\n});\n\nvar SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);\n/**\n * @interface TouchEvent\n * @see http://www.w3.org/TR/touch-events/\n */\n\nvar TouchEventInterface = assign({}, UIEventInterface, {\n  touches: 0,\n  targetTouches: 0,\n  changedTouches: 0,\n  altKey: 0,\n  metaKey: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  getModifierState: getEventModifierState\n});\n\nvar SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-\n * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent\n */\n\nvar TransitionEventInterface = assign({}, EventInterface, {\n  propertyName: 0,\n  elapsedTime: 0,\n  pseudoElement: 0\n});\n\nvar SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);\n/**\n * @interface WheelEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n\nvar WheelEventInterface = assign({}, MouseEventInterface, {\n  deltaX: function (event) {\n    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).\n    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;\n  },\n  deltaY: function (event) {\n    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).\n    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).\n    'wheelDelta' in event ? -event.wheelDelta : 0;\n  },\n  deltaZ: 0,\n  // Browsers without \"deltaMode\" is reporting in raw wheel delta where one\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.\n  deltaMode: 0\n});\n\nvar SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n\nvar START_KEYCODE = 229;\nvar canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;\nvar documentMode = null;\n\nif (canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n} // Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\n\n\nvar canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\n\nvar useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n\nfunction registerEvents() {\n  registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);\n  registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);\n  registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);\n  registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);\n} // Track whether we've ever handled a keypress on the space key.\n\n\nvar hasSpaceKeypress = false;\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\n\nfunction isKeypressCommand(nativeEvent) {\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\n}\n/**\n * Translate native top level events into event types.\n */\n\n\nfunction getCompositionEventType(domEventName) {\n  switch (domEventName) {\n    case 'compositionstart':\n      return 'onCompositionStart';\n\n    case 'compositionend':\n      return 'onCompositionEnd';\n\n    case 'compositionupdate':\n      return 'onCompositionUpdate';\n  }\n}\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n */\n\n\nfunction isFallbackCompositionStart(domEventName, nativeEvent) {\n  return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;\n}\n/**\n * Does our fallback mode think that this event is the end of composition?\n */\n\n\nfunction isFallbackCompositionEnd(domEventName, nativeEvent) {\n  switch (domEventName) {\n    case 'keyup':\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n\n    case 'keydown':\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n\n    case 'keypress':\n    case 'mousedown':\n    case 'focusout':\n      // Events are not possible without cancelling IME.\n      return true;\n\n    default:\n      return false;\n  }\n}\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\n\n\nfunction getDataFromCustomEvent(nativeEvent) {\n  var detail = nativeEvent.detail;\n\n  if (typeof detail === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n\n  return null;\n}\n/**\n * Check if a composition event was triggered by Korean IME.\n * Our fallback mode does not work well with IE's Korean IME,\n * so just use native composition events when Korean IME is used.\n * Although CompositionEvent.locale property is deprecated,\n * it is available in IE, where our fallback mode is enabled.\n *\n * @param {object} nativeEvent\n * @return {boolean}\n */\n\n\nfunction isUsingKoreanIME(nativeEvent) {\n  return nativeEvent.locale === 'ko';\n} // Track the current IME composition status, if any.\n\n\nvar isComposing = false;\n/**\n * @return {?object} A SyntheticCompositionEvent.\n */\n\nfunction extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {\n  var eventType;\n  var fallbackData;\n\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(domEventName);\n  } else if (!isComposing) {\n    if (isFallbackCompositionStart(domEventName, nativeEvent)) {\n      eventType = 'onCompositionStart';\n    }\n  } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {\n    eventType = 'onCompositionEnd';\n  }\n\n  if (!eventType) {\n    return null;\n  }\n\n  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!isComposing && eventType === 'onCompositionStart') {\n      isComposing = initialize(nativeEventTarget);\n    } else if (eventType === 'onCompositionEnd') {\n      if (isComposing) {\n        fallbackData = getData();\n      }\n    }\n  }\n\n  var listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n\n  if (listeners.length > 0) {\n    var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);\n    dispatchQueue.push({\n      event: event,\n      listeners: listeners\n    });\n\n    if (fallbackData) {\n      // Inject data generated from fallback path into the synthetic event.\n      // This matches the property of native CompositionEventInterface.\n      event.data = fallbackData;\n    } else {\n      var customData = getDataFromCustomEvent(nativeEvent);\n\n      if (customData !== null) {\n        event.data = customData;\n      }\n    }\n  }\n}\n\nfunction getNativeBeforeInputChars(domEventName, nativeEvent) {\n  switch (domEventName) {\n    case 'compositionend':\n      return getDataFromCustomEvent(nativeEvent);\n\n    case 'keypress':\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      var which = nativeEvent.which;\n\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n\n    case 'textInput':\n      // Record the characters to be added to the DOM.\n      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to ignore it.\n\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n\n      return chars;\n\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n */\n\n\nfunction getFallbackBeforeInputChars(domEventName, nativeEvent) {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  // If composition event is available, we extract a string only at\n  // compositionevent, otherwise extract it at fallback events.\n  if (isComposing) {\n    if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {\n      var chars = getData();\n      reset();\n      isComposing = false;\n      return chars;\n    }\n\n    return null;\n  }\n\n  switch (domEventName) {\n    case 'paste':\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n\n    case 'keypress':\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (!isKeypressCommand(nativeEvent)) {\n        // IE fires the `keypress` event when a user types an emoji via\n        // Touch keyboard of Windows.  In such a case, the `char` property\n        // holds an emoji character like `\\uD83D\\uDE0A`.  Because its length\n        // is 2, the property `which` does not represent an emoji correctly.\n        // In such a case, we directly return the `char` property instead of\n        // using `which`.\n        if (nativeEvent.char && nativeEvent.char.length > 1) {\n          return nativeEvent.char;\n        } else if (nativeEvent.which) {\n          return String.fromCharCode(nativeEvent.which);\n        }\n      }\n\n      return null;\n\n    case 'compositionend':\n      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;\n\n    default:\n      return null;\n  }\n}\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @return {?object} A SyntheticInputEvent.\n */\n\n\nfunction extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {\n  var chars;\n\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(domEventName, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(domEventName, nativeEvent);\n  } // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n\n\n  if (!chars) {\n    return null;\n  }\n\n  var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');\n\n  if (listeners.length > 0) {\n    var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);\n    dispatchQueue.push({\n      event: event,\n      listeners: listeners\n    });\n    event.data = chars;\n  }\n}\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\n\n\nfunction extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\n  extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\n  extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\n}\n\n/**\n * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\n */\nvar supportedInputTypes = {\n  color: true,\n  date: true,\n  datetime: true,\n  'datetime-local': true,\n  email: true,\n  month: true,\n  number: true,\n  password: true,\n  range: true,\n  search: true,\n  tel: true,\n  text: true,\n  time: true,\n  url: true,\n  week: true\n};\n\nfunction isTextInputElement(elem) {\n  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n\n  if (nodeName === 'input') {\n    return !!supportedInputTypes[elem.type];\n  }\n\n  if (nodeName === 'textarea') {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Checks if an event is supported in the current execution environment.\n *\n * NOTE: This will not work correctly for non-generic events such as `change`,\n * `reset`, `load`, `error`, and `select`.\n *\n * Borrows from Modernizr.\n *\n * @param {string} eventNameSuffix Event name, e.g. \"click\".\n * @return {boolean} True if the event is supported.\n * @internal\n * @license Modernizr 3.0.0pre (Custom Build) | MIT\n */\n\nfunction isEventSupported(eventNameSuffix) {\n  if (!canUseDOM) {\n    return false;\n  }\n\n  var eventName = 'on' + eventNameSuffix;\n  var isSupported = (eventName in document);\n\n  if (!isSupported) {\n    var element = document.createElement('div');\n    element.setAttribute(eventName, 'return;');\n    isSupported = typeof element[eventName] === 'function';\n  }\n\n  return isSupported;\n}\n\nfunction registerEvents$1() {\n  registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);\n}\n\nfunction createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {\n  // Flag this event loop as needing state restore.\n  enqueueStateRestore(target);\n  var listeners = accumulateTwoPhaseListeners(inst, 'onChange');\n\n  if (listeners.length > 0) {\n    var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);\n    dispatchQueue.push({\n      event: event,\n      listeners: listeners\n    });\n  }\n}\n/**\n * For IE shims\n */\n\n\nvar activeElement = null;\nvar activeElementInst = null;\n/**\n * SECTION: handle `change` event\n */\n\nfunction shouldUseChangeEvent(elem) {\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var dispatchQueue = [];\n  createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn't, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don't work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n\n  batchedUpdates(runEventInBatch, dispatchQueue);\n}\n\nfunction runEventInBatch(dispatchQueue) {\n  processDispatchQueue(dispatchQueue, 0);\n}\n\nfunction getInstIfValueChanged(targetInst) {\n  var targetNode = getNodeFromInstance(targetInst);\n\n  if (updateValueIfChanged(targetNode)) {\n    return targetInst;\n  }\n}\n\nfunction getTargetInstForChangeEvent(domEventName, targetInst) {\n  if (domEventName === 'change') {\n    return targetInst;\n  }\n}\n/**\n * SECTION: handle `input` event\n */\n\n\nvar isInputEventSupported = false;\n\nif (canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events.\n  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);\n}\n/**\n * (For IE <=9) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\n\n\nfunction startWatchingForValueChange(target, targetInst) {\n  activeElement = target;\n  activeElementInst = targetInst;\n  activeElement.attachEvent('onpropertychange', handlePropertyChange);\n}\n/**\n * (For IE <=9) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\n\n\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  }\n\n  activeElement.detachEvent('onpropertychange', handlePropertyChange);\n  activeElement = null;\n  activeElementInst = null;\n}\n/**\n * (For IE <=9) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\n\n\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n\n  if (getInstIfValueChanged(activeElementInst)) {\n    manualDispatchChangeEvent(nativeEvent);\n  }\n}\n\nfunction handleEventsForInputEventPolyfill(domEventName, target, targetInst) {\n  if (domEventName === 'focusin') {\n    // In IE9, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(target, targetInst);\n  } else if (domEventName === 'focusout') {\n    stopWatchingForValueChange();\n  }\n} // For IE8 and IE9.\n\n\nfunction getTargetInstForInputEventPolyfill(domEventName, targetInst) {\n  if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    return getInstIfValueChanged(activeElementInst);\n  }\n}\n/**\n * SECTION: handle `click` event\n */\n\n\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  var nodeName = elem.nodeName;\n  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');\n}\n\nfunction getTargetInstForClickEvent(domEventName, targetInst) {\n  if (domEventName === 'click') {\n    return getInstIfValueChanged(targetInst);\n  }\n}\n\nfunction getTargetInstForInputOrChangeEvent(domEventName, targetInst) {\n  if (domEventName === 'input' || domEventName === 'change') {\n    return getInstIfValueChanged(targetInst);\n  }\n}\n\nfunction handleControlledInputBlur(node) {\n  var state = node._wrapperState;\n\n  if (!state || !state.controlled || node.type !== 'number') {\n    return;\n  }\n\n  {\n    // If controlled, assign the value attribute to the current value on blur\n    setDefaultValue(node, 'number', node.value);\n  }\n}\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\n\n\nfunction extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\n  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;\n  var getTargetInstFunc, handleEventFunc;\n\n  if (shouldUseChangeEvent(targetNode)) {\n    getTargetInstFunc = getTargetInstForChangeEvent;\n  } else if (isTextInputElement(targetNode)) {\n    if (isInputEventSupported) {\n      getTargetInstFunc = getTargetInstForInputOrChangeEvent;\n    } else {\n      getTargetInstFunc = getTargetInstForInputEventPolyfill;\n      handleEventFunc = handleEventsForInputEventPolyfill;\n    }\n  } else if (shouldUseClickEvent(targetNode)) {\n    getTargetInstFunc = getTargetInstForClickEvent;\n  }\n\n  if (getTargetInstFunc) {\n    var inst = getTargetInstFunc(domEventName, targetInst);\n\n    if (inst) {\n      createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);\n      return;\n    }\n  }\n\n  if (handleEventFunc) {\n    handleEventFunc(domEventName, targetNode, targetInst);\n  } // When blurring, set the value attribute for number inputs\n\n\n  if (domEventName === 'focusout') {\n    handleControlledInputBlur(targetNode);\n  }\n}\n\nfunction registerEvents$2() {\n  registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);\n  registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);\n  registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);\n  registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);\n}\n/**\n * For almost every interaction we care about, there will be both a top-level\n * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\n * we do not extract duplicate events. However, moving the mouse into the\n * browser from outside will not fire a `mouseout` event. In this case, we use\n * the `mouseover` top-level event.\n */\n\n\nfunction extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\n  var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';\n  var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';\n\n  if (isOverEvent && !isReplayingEvent(nativeEvent)) {\n    // If this is an over event with a target, we might have already dispatched\n    // the event in the out event of the other target. If this is replayed,\n    // then it's because we couldn't dispatch against this target previously\n    // so we have to do it now instead.\n    var related = nativeEvent.relatedTarget || nativeEvent.fromElement;\n\n    if (related) {\n      // If the related node is managed by React, we can assume that we have\n      // already dispatched the corresponding events during its mouseout.\n      if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {\n        return;\n      }\n    }\n  }\n\n  if (!isOutEvent && !isOverEvent) {\n    // Must not be a mouse or pointer in or out - ignoring.\n    return;\n  }\n\n  var win; // TODO: why is this nullable in the types but we read from it?\n\n  if (nativeEventTarget.window === nativeEventTarget) {\n    // `nativeEventTarget` is probably a window object.\n    win = nativeEventTarget;\n  } else {\n    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n    var doc = nativeEventTarget.ownerDocument;\n\n    if (doc) {\n      win = doc.defaultView || doc.parentWindow;\n    } else {\n      win = window;\n    }\n  }\n\n  var from;\n  var to;\n\n  if (isOutEvent) {\n    var _related = nativeEvent.relatedTarget || nativeEvent.toElement;\n\n    from = targetInst;\n    to = _related ? getClosestInstanceFromNode(_related) : null;\n\n    if (to !== null) {\n      var nearestMounted = getNearestMountedFiber(to);\n\n      if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {\n        to = null;\n      }\n    }\n  } else {\n    // Moving to a node from outside the window.\n    from = null;\n    to = targetInst;\n  }\n\n  if (from === to) {\n    // Nothing pertains to our managed components.\n    return;\n  }\n\n  var SyntheticEventCtor = SyntheticMouseEvent;\n  var leaveEventType = 'onMouseLeave';\n  var enterEventType = 'onMouseEnter';\n  var eventTypePrefix = 'mouse';\n\n  if (domEventName === 'pointerout' || domEventName === 'pointerover') {\n    SyntheticEventCtor = SyntheticPointerEvent;\n    leaveEventType = 'onPointerLeave';\n    enterEventType = 'onPointerEnter';\n    eventTypePrefix = 'pointer';\n  }\n\n  var fromNode = from == null ? win : getNodeFromInstance(from);\n  var toNode = to == null ? win : getNodeFromInstance(to);\n  var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);\n  leave.target = fromNode;\n  leave.relatedTarget = toNode;\n  var enter = null; // We should only process this nativeEvent if we are processing\n  // the first ancestor. Next time, we will ignore the event.\n\n  var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);\n\n  if (nativeTargetInst === targetInst) {\n    var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);\n    enterEvent.target = toNode;\n    enterEvent.relatedTarget = fromNode;\n    enter = enterEvent;\n  }\n\n  accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);\n}\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nvar objectIs = typeof Object.is === 'function' ? Object.is : is;\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\n\nfunction shallowEqual(objA, objB) {\n  if (objectIs(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  } // Test for A's keys different from B.\n\n\n  for (var i = 0; i < keysA.length; i++) {\n    var currentKey = keysA[i];\n\n    if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Given any node return the first leaf node without children.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {DOMElement|DOMTextNode}\n */\n\nfunction getLeafNode(node) {\n  while (node && node.firstChild) {\n    node = node.firstChild;\n  }\n\n  return node;\n}\n/**\n * Get the next sibling within a container. This will walk up the\n * DOM if a node's siblings have been exhausted.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {?DOMElement|DOMTextNode}\n */\n\n\nfunction getSiblingNode(node) {\n  while (node) {\n    if (node.nextSibling) {\n      return node.nextSibling;\n    }\n\n    node = node.parentNode;\n  }\n}\n/**\n * Get object describing the nodes which contain characters at offset.\n *\n * @param {DOMElement|DOMTextNode} root\n * @param {number} offset\n * @return {?object}\n */\n\n\nfunction getNodeForCharacterOffset(root, offset) {\n  var node = getLeafNode(root);\n  var nodeStart = 0;\n  var nodeEnd = 0;\n\n  while (node) {\n    if (node.nodeType === TEXT_NODE) {\n      nodeEnd = nodeStart + node.textContent.length;\n\n      if (nodeStart <= offset && nodeEnd >= offset) {\n        return {\n          node: node,\n          offset: offset - nodeStart\n        };\n      }\n\n      nodeStart = nodeEnd;\n    }\n\n    node = getLeafNode(getSiblingNode(node));\n  }\n}\n\n/**\n * @param {DOMElement} outerNode\n * @return {?object}\n */\n\nfunction getOffsets(outerNode) {\n  var ownerDocument = outerNode.ownerDocument;\n  var win = ownerDocument && ownerDocument.defaultView || window;\n  var selection = win.getSelection && win.getSelection();\n\n  if (!selection || selection.rangeCount === 0) {\n    return null;\n  }\n\n  var anchorNode = selection.anchorNode,\n      anchorOffset = selection.anchorOffset,\n      focusNode = selection.focusNode,\n      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be \"anonymous divs\", e.g. the\n  // up/down buttons on an <input type=\"number\">. Anonymous divs do not seem to\n  // expose properties, triggering a \"Permission denied error\" if any of its\n  // properties are accessed. The only seemingly possible way to avoid erroring\n  // is to access a property that typically works for non-anonymous divs and\n  // catch any error that may otherwise arise. See\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427\n\n  try {\n    /* eslint-disable no-unused-expressions */\n    anchorNode.nodeType;\n    focusNode.nodeType;\n    /* eslint-enable no-unused-expressions */\n  } catch (e) {\n    return null;\n  }\n\n  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);\n}\n/**\n * Returns {start, end} where `start` is the character/codepoint index of\n * (anchorNode, anchorOffset) within the textContent of `outerNode`, and\n * `end` is the index of (focusNode, focusOffset).\n *\n * Returns null if you pass in garbage input but we should probably just crash.\n *\n * Exported only for testing.\n */\n\nfunction getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {\n  var length = 0;\n  var start = -1;\n  var end = -1;\n  var indexWithinAnchor = 0;\n  var indexWithinFocus = 0;\n  var node = outerNode;\n  var parentNode = null;\n\n  outer: while (true) {\n    var next = null;\n\n    while (true) {\n      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {\n        start = length + anchorOffset;\n      }\n\n      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {\n        end = length + focusOffset;\n      }\n\n      if (node.nodeType === TEXT_NODE) {\n        length += node.nodeValue.length;\n      }\n\n      if ((next = node.firstChild) === null) {\n        break;\n      } // Moving from `node` to its first child `next`.\n\n\n      parentNode = node;\n      node = next;\n    }\n\n    while (true) {\n      if (node === outerNode) {\n        // If `outerNode` has children, this is always the second time visiting\n        // it. If it has no children, this is still the first loop, and the only\n        // valid selection is anchorNode and focusNode both equal to this node\n        // and both offsets 0, in which case we will have handled above.\n        break outer;\n      }\n\n      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {\n        start = length;\n      }\n\n      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {\n        end = length;\n      }\n\n      if ((next = node.nextSibling) !== null) {\n        break;\n      }\n\n      node = parentNode;\n      parentNode = node.parentNode;\n    } // Moving from `node` to its next sibling `next`.\n\n\n    node = next;\n  }\n\n  if (start === -1 || end === -1) {\n    // This should never happen. (Would happen if the anchor/focus nodes aren't\n    // actually inside the passed-in node.)\n    return null;\n  }\n\n  return {\n    start: start,\n    end: end\n  };\n}\n/**\n * In modern non-IE browsers, we can support both forward and backward\n * selections.\n *\n * Note: IE10+ supports the Selection object, but it does not support\n * the `extend` method, which means that even in modern IE, it's not possible\n * to programmatically create a backward selection. Thus, for all IE\n * versions, we use the old IE API to create our selections.\n *\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\n\nfunction setOffsets(node, offsets) {\n  var doc = node.ownerDocument || document;\n  var win = doc && doc.defaultView || window; // Edge fails with \"Object expected\" in some scenarios.\n  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,\n  // fails when pasting 100+ items)\n\n  if (!win.getSelection) {\n    return;\n  }\n\n  var selection = win.getSelection();\n  var length = node.textContent.length;\n  var start = Math.min(offsets.start, length);\n  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.\n  // Flip backward selections, so we can set with a single range.\n\n  if (!selection.extend && start > end) {\n    var temp = end;\n    end = start;\n    start = temp;\n  }\n\n  var startMarker = getNodeForCharacterOffset(node, start);\n  var endMarker = getNodeForCharacterOffset(node, end);\n\n  if (startMarker && endMarker) {\n    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {\n      return;\n    }\n\n    var range = doc.createRange();\n    range.setStart(startMarker.node, startMarker.offset);\n    selection.removeAllRanges();\n\n    if (start > end) {\n      selection.addRange(range);\n      selection.extend(endMarker.node, endMarker.offset);\n    } else {\n      range.setEnd(endMarker.node, endMarker.offset);\n      selection.addRange(range);\n    }\n  }\n}\n\nfunction isTextNode(node) {\n  return node && node.nodeType === TEXT_NODE;\n}\n\nfunction containsNode(outerNode, innerNode) {\n  if (!outerNode || !innerNode) {\n    return false;\n  } else if (outerNode === innerNode) {\n    return true;\n  } else if (isTextNode(outerNode)) {\n    return false;\n  } else if (isTextNode(innerNode)) {\n    return containsNode(outerNode, innerNode.parentNode);\n  } else if ('contains' in outerNode) {\n    return outerNode.contains(innerNode);\n  } else if (outerNode.compareDocumentPosition) {\n    return !!(outerNode.compareDocumentPosition(innerNode) & 16);\n  } else {\n    return false;\n  }\n}\n\nfunction isInDocument(node) {\n  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);\n}\n\nfunction isSameOriginFrame(iframe) {\n  try {\n    // Accessing the contentDocument of a HTMLIframeElement can cause the browser\n    // to throw, e.g. if it has a cross-origin src attribute.\n    // Safari will show an error in the console when the access results in \"Blocked a frame with origin\". e.g:\n    // iframe.contentDocument.defaultView;\n    // A safety way is to access one of the cross origin properties: Window or Location\n    // Which might result in \"SecurityError\" DOM Exception and it is compatible to Safari.\n    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl\n    return typeof iframe.contentWindow.location.href === 'string';\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction getActiveElementDeep() {\n  var win = window;\n  var element = getActiveElement();\n\n  while (element instanceof win.HTMLIFrameElement) {\n    if (isSameOriginFrame(element)) {\n      win = element.contentWindow;\n    } else {\n      return element;\n    }\n\n    element = getActiveElement(win.document);\n  }\n\n  return element;\n}\n/**\n * @ReactInputSelection: React input selection module. Based on Selection.js,\n * but modified to be suitable for react and has a couple of bug fixes (doesn't\n * assume buttons have range selections allowed).\n * Input selection module for React.\n */\n\n/**\n * @hasSelectionCapabilities: we get the element types that support selection\n * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`\n * and `selectionEnd` rows.\n */\n\n\nfunction hasSelectionCapabilities(elem) {\n  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');\n}\nfunction getSelectionInformation() {\n  var focusedElem = getActiveElementDeep();\n  return {\n    focusedElem: focusedElem,\n    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null\n  };\n}\n/**\n * @restoreSelection: If any selection information was potentially lost,\n * restore it. This is useful when performing operations that could remove dom\n * nodes and place them back in, resulting in focus being lost.\n */\n\nfunction restoreSelection(priorSelectionInformation) {\n  var curFocusedElem = getActiveElementDeep();\n  var priorFocusedElem = priorSelectionInformation.focusedElem;\n  var priorSelectionRange = priorSelectionInformation.selectionRange;\n\n  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {\n    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {\n      setSelection(priorFocusedElem, priorSelectionRange);\n    } // Focusing a node can change the scroll position, which is undesirable\n\n\n    var ancestors = [];\n    var ancestor = priorFocusedElem;\n\n    while (ancestor = ancestor.parentNode) {\n      if (ancestor.nodeType === ELEMENT_NODE) {\n        ancestors.push({\n          element: ancestor,\n          left: ancestor.scrollLeft,\n          top: ancestor.scrollTop\n        });\n      }\n    }\n\n    if (typeof priorFocusedElem.focus === 'function') {\n      priorFocusedElem.focus();\n    }\n\n    for (var i = 0; i < ancestors.length; i++) {\n      var info = ancestors[i];\n      info.element.scrollLeft = info.left;\n      info.element.scrollTop = info.top;\n    }\n  }\n}\n/**\n * @getSelection: Gets the selection bounds of a focused textarea, input or\n * contentEditable node.\n * -@input: Look up selection bounds of this input\n * -@return {start: selectionStart, end: selectionEnd}\n */\n\nfunction getSelection(input) {\n  var selection;\n\n  if ('selectionStart' in input) {\n    // Modern browser with input or textarea.\n    selection = {\n      start: input.selectionStart,\n      end: input.selectionEnd\n    };\n  } else {\n    // Content editable or old IE textarea.\n    selection = getOffsets(input);\n  }\n\n  return selection || {\n    start: 0,\n    end: 0\n  };\n}\n/**\n * @setSelection: Sets the selection bounds of a textarea or input and focuses\n * the input.\n * -@input     Set selection bounds of this input or textarea\n * -@offsets   Object of same form that is returned from get*\n */\n\nfunction setSelection(input, offsets) {\n  var start = offsets.start;\n  var end = offsets.end;\n\n  if (end === undefined) {\n    end = start;\n  }\n\n  if ('selectionStart' in input) {\n    input.selectionStart = start;\n    input.selectionEnd = Math.min(end, input.value.length);\n  } else {\n    setOffsets(input, offsets);\n  }\n}\n\nvar skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;\n\nfunction registerEvents$3() {\n  registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);\n}\n\nvar activeElement$1 = null;\nvar activeElementInst$1 = null;\nvar lastSelection = null;\nvar mouseDown = false;\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n */\n\nfunction getSelection$1(node) {\n  if ('selectionStart' in node && hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else {\n    var win = node.ownerDocument && node.ownerDocument.defaultView || window;\n    var selection = win.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  }\n}\n/**\n * Get document associated with the event target.\n */\n\n\nfunction getEventTargetDocument(eventTarget) {\n  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;\n}\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @param {object} nativeEventTarget\n * @return {?SyntheticEvent}\n */\n\n\nfunction constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  var doc = getEventTargetDocument(nativeEventTarget);\n\n  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {\n    return;\n  } // Only fire when selection has actually changed.\n\n\n  var currentSelection = getSelection$1(activeElement$1);\n\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n    var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');\n\n    if (listeners.length > 0) {\n      var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);\n      dispatchQueue.push({\n        event: event,\n        listeners: listeners\n      });\n      event.target = activeElement$1;\n    }\n  }\n}\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\n\n\nfunction extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\n  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;\n\n  switch (domEventName) {\n    // Track the input node that has focus.\n    case 'focusin':\n      if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {\n        activeElement$1 = targetNode;\n        activeElementInst$1 = targetInst;\n        lastSelection = null;\n      }\n\n      break;\n\n    case 'focusout':\n      activeElement$1 = null;\n      activeElementInst$1 = null;\n      lastSelection = null;\n      break;\n    // Don't fire the event while the user is dragging. This matches the\n    // semantics of the native select event.\n\n    case 'mousedown':\n      mouseDown = true;\n      break;\n\n    case 'contextmenu':\n    case 'mouseup':\n    case 'dragend':\n      mouseDown = false;\n      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);\n      break;\n    // Chrome and IE fire non-standard event when selection is changed (and\n    // sometimes when it hasn't). IE's event fires out of order with respect\n    // to key and input events on deletion, so we discard it.\n    //\n    // Firefox doesn't support selectionchange, so check selection status\n    // after each key entry. The selection changes after keydown and before\n    // keyup, but we check on keydown as well in the case of holding down a\n    // key, when multiple keydown events are fired but only one keyup is.\n    // This is also our approach for IE handling, for the reason above.\n\n    case 'selectionchange':\n      if (skipSelectionChangeEvent) {\n        break;\n      }\n\n    // falls through\n\n    case 'keydown':\n    case 'keyup':\n      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);\n  }\n}\n\n/**\n * Generate a mapping of standard vendor prefixes using the defined style property and event name.\n *\n * @param {string} styleProp\n * @param {string} eventName\n * @returns {object}\n */\n\nfunction makePrefixMap(styleProp, eventName) {\n  var prefixes = {};\n  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();\n  prefixes['Webkit' + styleProp] = 'webkit' + eventName;\n  prefixes['Moz' + styleProp] = 'moz' + eventName;\n  return prefixes;\n}\n/**\n * A list of event names to a configurable list of vendor prefixes.\n */\n\n\nvar vendorPrefixes = {\n  animationend: makePrefixMap('Animation', 'AnimationEnd'),\n  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),\n  animationstart: makePrefixMap('Animation', 'AnimationStart'),\n  transitionend: makePrefixMap('Transition', 'TransitionEnd')\n};\n/**\n * Event names that have already been detected and prefixed (if applicable).\n */\n\nvar prefixedEventNames = {};\n/**\n * Element to check for prefixes on.\n */\n\nvar style = {};\n/**\n * Bootstrap if a DOM exists.\n */\n\nif (canUseDOM) {\n  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,\n  // the un-prefixed \"animation\" and \"transition\" properties are defined on the\n  // style object but the events that fire will still be prefixed, so we need\n  // to check if the un-prefixed events are usable, and if not remove them from the map.\n\n  if (!('AnimationEvent' in window)) {\n    delete vendorPrefixes.animationend.animation;\n    delete vendorPrefixes.animationiteration.animation;\n    delete vendorPrefixes.animationstart.animation;\n  } // Same as above\n\n\n  if (!('TransitionEvent' in window)) {\n    delete vendorPrefixes.transitionend.transition;\n  }\n}\n/**\n * Attempts to determine the correct vendor prefixed event name.\n *\n * @param {string} eventName\n * @returns {string}\n */\n\n\nfunction getVendorPrefixedEventName(eventName) {\n  if (prefixedEventNames[eventName]) {\n    return prefixedEventNames[eventName];\n  } else if (!vendorPrefixes[eventName]) {\n    return eventName;\n  }\n\n  var prefixMap = vendorPrefixes[eventName];\n\n  for (var styleProp in prefixMap) {\n    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {\n      return prefixedEventNames[eventName] = prefixMap[styleProp];\n    }\n  }\n\n  return eventName;\n}\n\nvar ANIMATION_END = getVendorPrefixedEventName('animationend');\nvar ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');\nvar ANIMATION_START = getVendorPrefixedEventName('animationstart');\nvar TRANSITION_END = getVendorPrefixedEventName('transitionend');\n\nvar topLevelEventsToReactNames = new Map(); // NOTE: Capitalization is important in this list!\n//\n// E.g. it needs \"pointerDown\", not \"pointerdown\".\n// This is because we derive both React name (\"onPointerDown\")\n// and DOM name (\"pointerdown\") from the same list.\n//\n// Exceptions that don't match this convention are listed separately.\n//\n// prettier-ignore\n\nvar simpleEventPluginEvents = ['abort', 'auxClick', 'cancel', 'canPlay', 'canPlayThrough', 'click', 'close', 'contextMenu', 'copy', 'cut', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'gotPointerCapture', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'lostPointerCapture', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'pointerCancel', 'pointerDown', 'pointerMove', 'pointerOut', 'pointerOver', 'pointerUp', 'progress', 'rateChange', 'reset', 'resize', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchStart', 'volumeChange', 'scroll', 'toggle', 'touchMove', 'waiting', 'wheel'];\n\nfunction registerSimpleEvent(domEventName, reactName) {\n  topLevelEventsToReactNames.set(domEventName, reactName);\n  registerTwoPhaseEvent(reactName, [domEventName]);\n}\n\nfunction registerSimpleEvents() {\n  for (var i = 0; i < simpleEventPluginEvents.length; i++) {\n    var eventName = simpleEventPluginEvents[i];\n    var domEventName = eventName.toLowerCase();\n    var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);\n    registerSimpleEvent(domEventName, 'on' + capitalizedEvent);\n  } // Special cases where event names don't match.\n\n\n  registerSimpleEvent(ANIMATION_END, 'onAnimationEnd');\n  registerSimpleEvent(ANIMATION_ITERATION, 'onAnimationIteration');\n  registerSimpleEvent(ANIMATION_START, 'onAnimationStart');\n  registerSimpleEvent('dblclick', 'onDoubleClick');\n  registerSimpleEvent('focusin', 'onFocus');\n  registerSimpleEvent('focusout', 'onBlur');\n  registerSimpleEvent(TRANSITION_END, 'onTransitionEnd');\n}\n\nfunction extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\n  var reactName = topLevelEventsToReactNames.get(domEventName);\n\n  if (reactName === undefined) {\n    return;\n  }\n\n  var SyntheticEventCtor = SyntheticEvent;\n  var reactEventType = domEventName;\n\n  switch (domEventName) {\n    case 'keypress':\n      // Firefox creates a keypress event for function keys too. This removes\n      // the unwanted keypress events. Enter is however both printable and\n      // non-printable. One would expect Tab to be as well (but it isn't).\n      if (getEventCharCode(nativeEvent) === 0) {\n        return;\n      }\n\n    /* falls through */\n\n    case 'keydown':\n    case 'keyup':\n      SyntheticEventCtor = SyntheticKeyboardEvent;\n      break;\n\n    case 'focusin':\n      reactEventType = 'focus';\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n\n    case 'focusout':\n      reactEventType = 'blur';\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n\n    case 'beforeblur':\n    case 'afterblur':\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n\n    case 'click':\n      // Firefox creates a click event on right mouse clicks. This removes the\n      // unwanted click events.\n      if (nativeEvent.button === 2) {\n        return;\n      }\n\n    /* falls through */\n\n    case 'auxclick':\n    case 'dblclick':\n    case 'mousedown':\n    case 'mousemove':\n    case 'mouseup': // TODO: Disabled elements should not respond to mouse events\n\n    /* falls through */\n\n    case 'mouseout':\n    case 'mouseover':\n    case 'contextmenu':\n      SyntheticEventCtor = SyntheticMouseEvent;\n      break;\n\n    case 'drag':\n    case 'dragend':\n    case 'dragenter':\n    case 'dragexit':\n    case 'dragleave':\n    case 'dragover':\n    case 'dragstart':\n    case 'drop':\n      SyntheticEventCtor = SyntheticDragEvent;\n      break;\n\n    case 'touchcancel':\n    case 'touchend':\n    case 'touchmove':\n    case 'touchstart':\n      SyntheticEventCtor = SyntheticTouchEvent;\n      break;\n\n    case ANIMATION_END:\n    case ANIMATION_ITERATION:\n    case ANIMATION_START:\n      SyntheticEventCtor = SyntheticAnimationEvent;\n      break;\n\n    case TRANSITION_END:\n      SyntheticEventCtor = SyntheticTransitionEvent;\n      break;\n\n    case 'scroll':\n      SyntheticEventCtor = SyntheticUIEvent;\n      break;\n\n    case 'wheel':\n      SyntheticEventCtor = SyntheticWheelEvent;\n      break;\n\n    case 'copy':\n    case 'cut':\n    case 'paste':\n      SyntheticEventCtor = SyntheticClipboardEvent;\n      break;\n\n    case 'gotpointercapture':\n    case 'lostpointercapture':\n    case 'pointercancel':\n    case 'pointerdown':\n    case 'pointermove':\n    case 'pointerout':\n    case 'pointerover':\n    case 'pointerup':\n      SyntheticEventCtor = SyntheticPointerEvent;\n      break;\n  }\n\n  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;\n\n  {\n    // Some events don't bubble in the browser.\n    // In the past, React has always bubbled them, but this can be surprising.\n    // We're going to try aligning closer to the browser behavior by not bubbling\n    // them in React either. We'll start by not bubbling onScroll, and then expand.\n    var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from\n    // nonDelegatedEvents list in DOMPluginEventSystem.\n    // Then we can remove this special list.\n    // This is a breaking change that can wait until React 18.\n    domEventName === 'scroll';\n\n    var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);\n\n    if (_listeners.length > 0) {\n      // Intentionally create event lazily.\n      var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);\n\n      dispatchQueue.push({\n        event: _event,\n        listeners: _listeners\n      });\n    }\n  }\n}\n\n// TODO: remove top-level side effect.\nregisterSimpleEvents();\nregisterEvents$2();\nregisterEvents$1();\nregisterEvents$3();\nregisterEvents();\n\nfunction extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\n  // TODO: we should remove the concept of a \"SimpleEventPlugin\".\n  // This is the basic functionality of the event system. All\n  // the other plugins are essentially polyfills. So the plugin\n  // should probably be inlined somewhere and have its logic\n  // be core the to event system. This would potentially allow\n  // us to ship builds of React without the polyfilled plugins below.\n  extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);\n  var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the\n  // event's native \"bubble\" phase, which means that we're\n  // not in the capture phase. That's because we emulate\n  // the capture phase here still. This is a trade-off,\n  // because in an ideal world we would not emulate and use\n  // the phases properly, like we do with the SimpleEvent\n  // plugin. However, the plugins below either expect\n  // emulation (EnterLeave) or use state localized to that\n  // plugin (BeforeInput, Change, Select). The state in\n  // these modules complicates things, as you'll essentially\n  // get the case where the capture phase event might change\n  // state, only for the following bubble event to come in\n  // later and not trigger anything as the state now\n  // invalidates the heuristics of the event plugin. We\n  // could alter all these plugins to work in such ways, but\n  // that might cause other unknown side-effects that we\n  // can't foresee right now.\n\n  if (shouldProcessPolyfillPlugins) {\n    extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\n    extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\n    extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\n    extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\n  }\n} // List of events that need to be individually attached to media elements.\n\n\nvar mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'resize', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']; // We should not delegate these events to the container, but rather\n// set them on the actual target element itself. This is primarily\n// because these events do not consistently bubble in the DOM.\n\nvar nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes));\n\nfunction executeDispatch(event, listener, currentTarget) {\n  var type = event.type || 'unknown-event';\n  event.currentTarget = currentTarget;\n  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);\n  event.currentTarget = null;\n}\n\nfunction processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {\n  var previousInstance;\n\n  if (inCapturePhase) {\n    for (var i = dispatchListeners.length - 1; i >= 0; i--) {\n      var _dispatchListeners$i = dispatchListeners[i],\n          instance = _dispatchListeners$i.instance,\n          currentTarget = _dispatchListeners$i.currentTarget,\n          listener = _dispatchListeners$i.listener;\n\n      if (instance !== previousInstance && event.isPropagationStopped()) {\n        return;\n      }\n\n      executeDispatch(event, listener, currentTarget);\n      previousInstance = instance;\n    }\n  } else {\n    for (var _i = 0; _i < dispatchListeners.length; _i++) {\n      var _dispatchListeners$_i = dispatchListeners[_i],\n          _instance = _dispatchListeners$_i.instance,\n          _currentTarget = _dispatchListeners$_i.currentTarget,\n          _listener = _dispatchListeners$_i.listener;\n\n      if (_instance !== previousInstance && event.isPropagationStopped()) {\n        return;\n      }\n\n      executeDispatch(event, _listener, _currentTarget);\n      previousInstance = _instance;\n    }\n  }\n}\n\nfunction processDispatchQueue(dispatchQueue, eventSystemFlags) {\n  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;\n\n  for (var i = 0; i < dispatchQueue.length; i++) {\n    var _dispatchQueue$i = dispatchQueue[i],\n        event = _dispatchQueue$i.event,\n        listeners = _dispatchQueue$i.listeners;\n    processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.\n  } // This would be a good time to rethrow if any of the event handlers threw.\n\n\n  rethrowCaughtError();\n}\n\nfunction dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {\n  var nativeEventTarget = getEventTarget(nativeEvent);\n  var dispatchQueue = [];\n  extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);\n  processDispatchQueue(dispatchQueue, eventSystemFlags);\n}\n\nfunction listenToNonDelegatedEvent(domEventName, targetElement) {\n  {\n    if (!nonDelegatedEvents.has(domEventName)) {\n      error('Did not expect a listenToNonDelegatedEvent() call for \"%s\". ' + 'This is a bug in React. Please file an issue.', domEventName);\n    }\n  }\n\n  var isCapturePhaseListener = false;\n  var listenerSet = getEventListenerSet(targetElement);\n  var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);\n\n  if (!listenerSet.has(listenerSetKey)) {\n    addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);\n    listenerSet.add(listenerSetKey);\n  }\n}\nfunction listenToNativeEvent(domEventName, isCapturePhaseListener, target) {\n  {\n    if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {\n      error('Did not expect a listenToNativeEvent() call for \"%s\" in the bubble phase. ' + 'This is a bug in React. Please file an issue.', domEventName);\n    }\n  }\n\n  var eventSystemFlags = 0;\n\n  if (isCapturePhaseListener) {\n    eventSystemFlags |= IS_CAPTURE_PHASE;\n  }\n\n  addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);\n} // This is only used by createEventHandle when the\nvar listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);\nfunction listenToAllSupportedEvents(rootContainerElement) {\n  if (!rootContainerElement[listeningMarker]) {\n    rootContainerElement[listeningMarker] = true;\n    allNativeEvents.forEach(function (domEventName) {\n      // We handle selectionchange separately because it\n      // doesn't bubble and needs to be on the document.\n      if (domEventName !== 'selectionchange') {\n        if (!nonDelegatedEvents.has(domEventName)) {\n          listenToNativeEvent(domEventName, false, rootContainerElement);\n        }\n\n        listenToNativeEvent(domEventName, true, rootContainerElement);\n      }\n    });\n    var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;\n\n    if (ownerDocument !== null) {\n      // The selectionchange event also needs deduplication\n      // but it is attached to the document.\n      if (!ownerDocument[listeningMarker]) {\n        ownerDocument[listeningMarker] = true;\n        listenToNativeEvent('selectionchange', false, ownerDocument);\n      }\n    }\n  }\n}\n\nfunction addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {\n  var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be\n  // active and not passive.\n\n  var isPassiveListener = undefined;\n\n  if (passiveBrowserEventsSupported) {\n    // Browsers introduced an intervention, making these events\n    // passive by default on document. React doesn't bind them\n    // to document anymore, but changing this now would undo\n    // the performance wins from the change. So we emulate\n    // the existing behavior manually on the roots now.\n    // https://github.com/facebook/react/issues/19651\n    if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {\n      isPassiveListener = true;\n    }\n  }\n\n  targetContainer =  targetContainer;\n  var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we\n\n\n  if (isCapturePhaseListener) {\n    if (isPassiveListener !== undefined) {\n      unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);\n    } else {\n      unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);\n    }\n  } else {\n    if (isPassiveListener !== undefined) {\n      unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);\n    } else {\n      unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);\n    }\n  }\n}\n\nfunction isMatchingRootContainer(grandContainer, targetContainer) {\n  return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;\n}\n\nfunction dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {\n  var ancestorInst = targetInst;\n\n  if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {\n    var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we\n\n    if (targetInst !== null) {\n      // The below logic attempts to work out if we need to change\n      // the target fiber to a different ancestor. We had similar logic\n      // in the legacy event system, except the big difference between\n      // systems is that the modern event system now has an event listener\n      // attached to each React Root and React Portal Root. Together,\n      // the DOM nodes representing these roots are the \"rootContainer\".\n      // To figure out which ancestor instance we should use, we traverse\n      // up the fiber tree from the target instance and attempt to find\n      // root boundaries that match that of our current \"rootContainer\".\n      // If we find that \"rootContainer\", we find the parent fiber\n      // sub-tree for that root and make that our ancestor instance.\n      var node = targetInst;\n\n      mainLoop: while (true) {\n        if (node === null) {\n          return;\n        }\n\n        var nodeTag = node.tag;\n\n        if (nodeTag === HostRoot || nodeTag === HostPortal) {\n          var container = node.stateNode.containerInfo;\n\n          if (isMatchingRootContainer(container, targetContainerNode)) {\n            break;\n          }\n\n          if (nodeTag === HostPortal) {\n            // The target is a portal, but it's not the rootContainer we're looking for.\n            // Normally portals handle their own events all the way down to the root.\n            // So we should be able to stop now. However, we don't know if this portal\n            // was part of *our* root.\n            var grandNode = node.return;\n\n            while (grandNode !== null) {\n              var grandTag = grandNode.tag;\n\n              if (grandTag === HostRoot || grandTag === HostPortal) {\n                var grandContainer = grandNode.stateNode.containerInfo;\n\n                if (isMatchingRootContainer(grandContainer, targetContainerNode)) {\n                  // This is the rootContainer we're looking for and we found it as\n                  // a parent of the Portal. That means we can ignore it because the\n                  // Portal will bubble through to us.\n                  return;\n                }\n              }\n\n              grandNode = grandNode.return;\n            }\n          } // Now we need to find it's corresponding host fiber in the other\n          // tree. To do this we can use getClosestInstanceFromNode, but we\n          // need to validate that the fiber is a host instance, otherwise\n          // we need to traverse up through the DOM till we find the correct\n          // node that is from the other tree.\n\n\n          while (container !== null) {\n            var parentNode = getClosestInstanceFromNode(container);\n\n            if (parentNode === null) {\n              return;\n            }\n\n            var parentTag = parentNode.tag;\n\n            if (parentTag === HostComponent || parentTag === HostText) {\n              node = ancestorInst = parentNode;\n              continue mainLoop;\n            }\n\n            container = container.parentNode;\n          }\n        }\n\n        node = node.return;\n      }\n    }\n  }\n\n  batchedUpdates(function () {\n    return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);\n  });\n}\n\nfunction createDispatchListener(instance, listener, currentTarget) {\n  return {\n    instance: instance,\n    listener: listener,\n    currentTarget: currentTarget\n  };\n}\n\nfunction accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {\n  var captureName = reactName !== null ? reactName + 'Capture' : null;\n  var reactEventName = inCapturePhase ? captureName : reactName;\n  var listeners = [];\n  var instance = targetFiber;\n  var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.\n\n  while (instance !== null) {\n    var _instance2 = instance,\n        stateNode = _instance2.stateNode,\n        tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)\n\n    if (tag === HostComponent && stateNode !== null) {\n      lastHostComponent = stateNode; // createEventHandle listeners\n\n\n      if (reactEventName !== null) {\n        var listener = getListener(instance, reactEventName);\n\n        if (listener != null) {\n          listeners.push(createDispatchListener(instance, listener, lastHostComponent));\n        }\n      }\n    } // If we are only accumulating events for the target, then we don't\n    // continue to propagate through the React fiber tree to find other\n    // listeners.\n\n\n    if (accumulateTargetOnly) {\n      break;\n    } // If we are processing the onBeforeBlur event, then we need to take\n\n    instance = instance.return;\n  }\n\n  return listeners;\n} // We should only use this function for:\n// - BeforeInputEventPlugin\n// - ChangeEventPlugin\n// - SelectEventPlugin\n// This is because we only process these plugins\n// in the bubble phase, so we need to accumulate two\n// phase event listeners (via emulation).\n\nfunction accumulateTwoPhaseListeners(targetFiber, reactName) {\n  var captureName = reactName + 'Capture';\n  var listeners = [];\n  var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.\n\n  while (instance !== null) {\n    var _instance3 = instance,\n        stateNode = _instance3.stateNode,\n        tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)\n\n    if (tag === HostComponent && stateNode !== null) {\n      var currentTarget = stateNode;\n      var captureListener = getListener(instance, captureName);\n\n      if (captureListener != null) {\n        listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));\n      }\n\n      var bubbleListener = getListener(instance, reactName);\n\n      if (bubbleListener != null) {\n        listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));\n      }\n    }\n\n    instance = instance.return;\n  }\n\n  return listeners;\n}\n\nfunction getParent(inst) {\n  if (inst === null) {\n    return null;\n  }\n\n  do {\n    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.\n    // That is depending on if we want nested subtrees (layers) to bubble\n    // events to their parent. We could also go through parentNode on the\n    // host node but that wouldn't work for React Native and doesn't let us\n    // do the portal feature.\n  } while (inst && inst.tag !== HostComponent);\n\n  if (inst) {\n    return inst;\n  }\n\n  return null;\n}\n/**\n * Return the lowest common ancestor of A and B, or null if they are in\n * different trees.\n */\n\n\nfunction getLowestCommonAncestor(instA, instB) {\n  var nodeA = instA;\n  var nodeB = instB;\n  var depthA = 0;\n\n  for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {\n    depthA++;\n  }\n\n  var depthB = 0;\n\n  for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {\n    depthB++;\n  } // If A is deeper, crawl up.\n\n\n  while (depthA - depthB > 0) {\n    nodeA = getParent(nodeA);\n    depthA--;\n  } // If B is deeper, crawl up.\n\n\n  while (depthB - depthA > 0) {\n    nodeB = getParent(nodeB);\n    depthB--;\n  } // Walk in lockstep until we find a match.\n\n\n  var depth = depthA;\n\n  while (depth--) {\n    if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {\n      return nodeA;\n    }\n\n    nodeA = getParent(nodeA);\n    nodeB = getParent(nodeB);\n  }\n\n  return null;\n}\n\nfunction accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {\n  var registrationName = event._reactName;\n  var listeners = [];\n  var instance = target;\n\n  while (instance !== null) {\n    if (instance === common) {\n      break;\n    }\n\n    var _instance4 = instance,\n        alternate = _instance4.alternate,\n        stateNode = _instance4.stateNode,\n        tag = _instance4.tag;\n\n    if (alternate !== null && alternate === common) {\n      break;\n    }\n\n    if (tag === HostComponent && stateNode !== null) {\n      var currentTarget = stateNode;\n\n      if (inCapturePhase) {\n        var captureListener = getListener(instance, registrationName);\n\n        if (captureListener != null) {\n          listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));\n        }\n      } else if (!inCapturePhase) {\n        var bubbleListener = getListener(instance, registrationName);\n\n        if (bubbleListener != null) {\n          listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));\n        }\n      }\n    }\n\n    instance = instance.return;\n  }\n\n  if (listeners.length !== 0) {\n    dispatchQueue.push({\n      event: event,\n      listeners: listeners\n    });\n  }\n} // We should only use this function for:\n// - EnterLeaveEventPlugin\n// This is because we only process this plugin\n// in the bubble phase, so we need to accumulate two\n// phase event listeners.\n\n\nfunction accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {\n  var common = from && to ? getLowestCommonAncestor(from, to) : null;\n\n  if (from !== null) {\n    accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);\n  }\n\n  if (to !== null && enterEvent !== null) {\n    accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);\n  }\n}\nfunction getListenerSetKey(domEventName, capture) {\n  return domEventName + \"__\" + (capture ? 'capture' : 'bubble');\n}\n\nvar didWarnInvalidHydration = false;\nvar DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';\nvar SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';\nvar SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';\nvar AUTOFOCUS = 'autoFocus';\nvar CHILDREN = 'children';\nvar STYLE = 'style';\nvar HTML$1 = '__html';\nvar warnedUnknownTags;\nvar validatePropertiesInDevelopment;\nvar warnForPropDifference;\nvar warnForExtraAttributes;\nvar warnForInvalidEventListener;\nvar canDiffStyleForHydrationWarning;\nvar normalizeHTML;\n\n{\n  warnedUnknownTags = {\n    // There are working polyfills for <dialog>. Let people use it.\n    dialog: true,\n    // Electron ships a custom <webview> tag to display external web content in\n    // an isolated frame and process.\n    // This tag is not present in non Electron environments such as JSDom which\n    // is often used for testing purposes.\n    // @see https://electronjs.org/docs/api/webview-tag\n    webview: true\n  };\n\n  validatePropertiesInDevelopment = function (type, props) {\n    validateProperties(type, props);\n    validateProperties$1(type, props);\n    validateProperties$2(type, props, {\n      registrationNameDependencies: registrationNameDependencies,\n      possibleRegistrationNames: possibleRegistrationNames\n    });\n  }; // IE 11 parses & normalizes the style attribute as opposed to other\n  // browsers. It adds spaces and sorts the properties in some\n  // non-alphabetical order. Handling that would require sorting CSS\n  // properties in the client & server versions or applying\n  // `expectedStyle` to a temporary DOM node to read its `style` attribute\n  // normalized. Since it only affects IE, we're skipping style warnings\n  // in that browser completely in favor of doing all that work.\n  // See https://github.com/facebook/react/issues/11807\n\n\n  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;\n\n  warnForPropDifference = function (propName, serverValue, clientValue) {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n\n    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);\n    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);\n\n    if (normalizedServerValue === normalizedClientValue) {\n      return;\n    }\n\n    didWarnInvalidHydration = true;\n\n    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));\n  };\n\n  warnForExtraAttributes = function (attributeNames) {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n\n    didWarnInvalidHydration = true;\n    var names = [];\n    attributeNames.forEach(function (name) {\n      names.push(name);\n    });\n\n    error('Extra attributes from the server: %s', names);\n  };\n\n  warnForInvalidEventListener = function (registrationName, listener) {\n    if (listener === false) {\n      error('Expected `%s` listener to be a function, instead got `false`.\\n\\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);\n    } else {\n      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);\n    }\n  }; // Parse the HTML and read it back to normalize the HTML string so that it\n  // can be used for comparison.\n\n\n  normalizeHTML = function (parent, html) {\n    // We could have created a separate document here to avoid\n    // re-initializing custom elements if they exist. But this breaks\n    // how <noscript> is being handled. So we use the same document.\n    // See the discussion in https://github.com/facebook/react/pull/11157.\n    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);\n    testElement.innerHTML = html;\n    return testElement.innerHTML;\n  };\n} // HTML parsing normalizes CR and CRLF to LF.\n// It also can turn \\u0000 into \\uFFFD inside attributes.\n// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream\n// If we have a mismatch, it might be caused by that.\n// We will still patch up in this case but not fire the warning.\n\n\nvar NORMALIZE_NEWLINES_REGEX = /\\r\\n?/g;\nvar NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\\u0000|\\uFFFD/g;\n\nfunction normalizeMarkupForTextOrAttribute(markup) {\n  {\n    checkHtmlStringCoercion(markup);\n  }\n\n  var markupString = typeof markup === 'string' ? markup : '' + markup;\n  return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');\n}\n\nfunction checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {\n  var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);\n  var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);\n\n  if (normalizedServerText === normalizedClientText) {\n    return;\n  }\n\n  if (shouldWarnDev) {\n    {\n      if (!didWarnInvalidHydration) {\n        didWarnInvalidHydration = true;\n\n        error('Text content did not match. Server: \"%s\" Client: \"%s\"', normalizedServerText, normalizedClientText);\n      }\n    }\n  }\n\n  if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {\n    // In concurrent roots, we throw when there's a text mismatch and revert to\n    // client rendering, up to the nearest Suspense boundary.\n    throw new Error('Text content does not match server-rendered HTML.');\n  }\n}\n\nfunction getOwnerDocumentFromRootContainer(rootContainerElement) {\n  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;\n}\n\nfunction noop() {}\n\nfunction trapClickOnNonInteractiveElement(node) {\n  // Mobile Safari does not fire properly bubble click events on\n  // non-interactive elements, which means delegated click listeners do not\n  // fire. The workaround for this bug involves attaching an empty click\n  // listener on the target node.\n  // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html\n  // Just set it using the onclick property so that we don't have to manage any\n  // bookkeeping for it. Not sure if we need to clear it when the listener is\n  // removed.\n  // TODO: Only do this for the relevant Safaris maybe?\n  node.onclick = noop;\n}\n\nfunction setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {\n  for (var propKey in nextProps) {\n    if (!nextProps.hasOwnProperty(propKey)) {\n      continue;\n    }\n\n    var nextProp = nextProps[propKey];\n\n    if (propKey === STYLE) {\n      {\n        if (nextProp) {\n          // Freeze the next style object so that we can assume it won't be\n          // mutated. We have already warned for this in the past.\n          Object.freeze(nextProp);\n        }\n      } // Relies on `updateStylesByID` not mutating `styleUpdates`.\n\n\n      setValueForStyles(domElement, nextProp);\n    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {\n      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;\n\n      if (nextHtml != null) {\n        setInnerHTML(domElement, nextHtml);\n      }\n    } else if (propKey === CHILDREN) {\n      if (typeof nextProp === 'string') {\n        // Avoid setting initial textContent when the text is empty. In IE11 setting\n        // textContent on a <textarea> will cause the placeholder to not\n        // show within the <textarea> until it has been focused and blurred again.\n        // https://github.com/facebook/react/issues/6731#issuecomment-254874553\n        var canSetTextContent = tag !== 'textarea' || nextProp !== '';\n\n        if (canSetTextContent) {\n          setTextContent(domElement, nextProp);\n        }\n      } else if (typeof nextProp === 'number') {\n        setTextContent(domElement, '' + nextProp);\n      }\n    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {\n      if (nextProp != null) {\n        if ( typeof nextProp !== 'function') {\n          warnForInvalidEventListener(propKey, nextProp);\n        }\n\n        if (propKey === 'onScroll') {\n          listenToNonDelegatedEvent('scroll', domElement);\n        }\n      }\n    } else if (nextProp != null) {\n      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);\n    }\n  }\n}\n\nfunction updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {\n  // TODO: Handle wasCustomComponentTag\n  for (var i = 0; i < updatePayload.length; i += 2) {\n    var propKey = updatePayload[i];\n    var propValue = updatePayload[i + 1];\n\n    if (propKey === STYLE) {\n      setValueForStyles(domElement, propValue);\n    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {\n      setInnerHTML(domElement, propValue);\n    } else if (propKey === CHILDREN) {\n      setTextContent(domElement, propValue);\n    } else {\n      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);\n    }\n  }\n}\n\nfunction createElement(type, props, rootContainerElement, parentNamespace) {\n  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML\n  // tags get no namespace.\n\n  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);\n  var domElement;\n  var namespaceURI = parentNamespace;\n\n  if (namespaceURI === HTML_NAMESPACE) {\n    namespaceURI = getIntrinsicNamespace(type);\n  }\n\n  if (namespaceURI === HTML_NAMESPACE) {\n    {\n      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to\n      // allow <SVG> or <mATH>.\n\n      if (!isCustomComponentTag && type !== type.toLowerCase()) {\n        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);\n      }\n    }\n\n    if (type === 'script') {\n      // Create the script via .innerHTML so its \"parser-inserted\" flag is\n      // set to true and it does not execute\n      var div = ownerDocument.createElement('div');\n\n      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line\n      // This is guaranteed to yield a script element.\n\n      var firstChild = div.firstChild;\n      domElement = div.removeChild(firstChild);\n    } else if (typeof props.is === 'string') {\n      // $FlowIssue `createElement` should be updated for Web Components\n      domElement = ownerDocument.createElement(type, {\n        is: props.is\n      });\n    } else {\n      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.\n      // See discussion in https://github.com/facebook/react/pull/6896\n      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240\n      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`\n      // attributes on `select`s needs to be added before `option`s are inserted.\n      // This prevents:\n      // - a bug where the `select` does not scroll to the correct option because singular\n      //  `select` elements automatically pick the first item #13222\n      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239\n      // See https://github.com/facebook/react/issues/13222\n      // and https://github.com/facebook/react/issues/14239\n\n      if (type === 'select') {\n        var node = domElement;\n\n        if (props.multiple) {\n          node.multiple = true;\n        } else if (props.size) {\n          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where\n          // it is possible that no option is selected.\n          //\n          // This is only necessary when a select in \"single selection mode\".\n          node.size = props.size;\n        }\n      }\n    }\n  } else {\n    domElement = ownerDocument.createElementNS(namespaceURI, type);\n  }\n\n  {\n    if (namespaceURI === HTML_NAMESPACE) {\n      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !hasOwnProperty.call(warnedUnknownTags, type)) {\n        warnedUnknownTags[type] = true;\n\n        error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);\n      }\n    }\n  }\n\n  return domElement;\n}\nfunction createTextNode(text, rootContainerElement) {\n  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);\n}\nfunction setInitialProperties(domElement, tag, rawProps, rootContainerElement) {\n  var isCustomComponentTag = isCustomComponent(tag, rawProps);\n\n  {\n    validatePropertiesInDevelopment(tag, rawProps);\n  } // TODO: Make sure that we check isMounted before firing any of these events.\n\n\n  var props;\n\n  switch (tag) {\n    case 'dialog':\n      listenToNonDelegatedEvent('cancel', domElement);\n      listenToNonDelegatedEvent('close', domElement);\n      props = rawProps;\n      break;\n\n    case 'iframe':\n    case 'object':\n    case 'embed':\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the load event.\n      listenToNonDelegatedEvent('load', domElement);\n      props = rawProps;\n      break;\n\n    case 'video':\n    case 'audio':\n      // We listen to these events in case to ensure emulated bubble\n      // listeners still fire for all the media events.\n      for (var i = 0; i < mediaEventTypes.length; i++) {\n        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);\n      }\n\n      props = rawProps;\n      break;\n\n    case 'source':\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the error event.\n      listenToNonDelegatedEvent('error', domElement);\n      props = rawProps;\n      break;\n\n    case 'img':\n    case 'image':\n    case 'link':\n      // We listen to these events in case to ensure emulated bubble\n      // listeners still fire for error and load events.\n      listenToNonDelegatedEvent('error', domElement);\n      listenToNonDelegatedEvent('load', domElement);\n      props = rawProps;\n      break;\n\n    case 'details':\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the toggle event.\n      listenToNonDelegatedEvent('toggle', domElement);\n      props = rawProps;\n      break;\n\n    case 'input':\n      initWrapperState(domElement, rawProps);\n      props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the invalid event.\n\n      listenToNonDelegatedEvent('invalid', domElement);\n      break;\n\n    case 'option':\n      validateProps(domElement, rawProps);\n      props = rawProps;\n      break;\n\n    case 'select':\n      initWrapperState$1(domElement, rawProps);\n      props = getHostProps$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the invalid event.\n\n      listenToNonDelegatedEvent('invalid', domElement);\n      break;\n\n    case 'textarea':\n      initWrapperState$2(domElement, rawProps);\n      props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the invalid event.\n\n      listenToNonDelegatedEvent('invalid', domElement);\n      break;\n\n    default:\n      props = rawProps;\n  }\n\n  assertValidProps(tag, props);\n  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);\n\n  switch (tag) {\n    case 'input':\n      // TODO: Make sure we check if this is still unmounted or do any clean\n      // up necessary since we never stop tracking anymore.\n      track(domElement);\n      postMountWrapper(domElement, rawProps, false);\n      break;\n\n    case 'textarea':\n      // TODO: Make sure we check if this is still unmounted or do any clean\n      // up necessary since we never stop tracking anymore.\n      track(domElement);\n      postMountWrapper$3(domElement);\n      break;\n\n    case 'option':\n      postMountWrapper$1(domElement, rawProps);\n      break;\n\n    case 'select':\n      postMountWrapper$2(domElement, rawProps);\n      break;\n\n    default:\n      if (typeof props.onClick === 'function') {\n        // TODO: This cast may not be sound for SVG, MathML or custom elements.\n        trapClickOnNonInteractiveElement(domElement);\n      }\n\n      break;\n  }\n} // Calculate the diff between the two objects.\n\nfunction diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {\n  {\n    validatePropertiesInDevelopment(tag, nextRawProps);\n  }\n\n  var updatePayload = null;\n  var lastProps;\n  var nextProps;\n\n  switch (tag) {\n    case 'input':\n      lastProps = getHostProps(domElement, lastRawProps);\n      nextProps = getHostProps(domElement, nextRawProps);\n      updatePayload = [];\n      break;\n\n    case 'select':\n      lastProps = getHostProps$1(domElement, lastRawProps);\n      nextProps = getHostProps$1(domElement, nextRawProps);\n      updatePayload = [];\n      break;\n\n    case 'textarea':\n      lastProps = getHostProps$2(domElement, lastRawProps);\n      nextProps = getHostProps$2(domElement, nextRawProps);\n      updatePayload = [];\n      break;\n\n    default:\n      lastProps = lastRawProps;\n      nextProps = nextRawProps;\n\n      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {\n        // TODO: This cast may not be sound for SVG, MathML or custom elements.\n        trapClickOnNonInteractiveElement(domElement);\n      }\n\n      break;\n  }\n\n  assertValidProps(tag, nextProps);\n  var propKey;\n  var styleName;\n  var styleUpdates = null;\n\n  for (propKey in lastProps) {\n    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {\n      continue;\n    }\n\n    if (propKey === STYLE) {\n      var lastStyle = lastProps[propKey];\n\n      for (styleName in lastStyle) {\n        if (lastStyle.hasOwnProperty(styleName)) {\n          if (!styleUpdates) {\n            styleUpdates = {};\n          }\n\n          styleUpdates[styleName] = '';\n        }\n      }\n    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {\n      // This is a special case. If any listener updates we need to ensure\n      // that the \"current\" fiber pointer gets updated so we need a commit\n      // to update this element.\n      if (!updatePayload) {\n        updatePayload = [];\n      }\n    } else {\n      // For all other deleted properties we add it to the queue. We use\n      // the allowed property list in the commit phase instead.\n      (updatePayload = updatePayload || []).push(propKey, null);\n    }\n  }\n\n  for (propKey in nextProps) {\n    var nextProp = nextProps[propKey];\n    var lastProp = lastProps != null ? lastProps[propKey] : undefined;\n\n    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {\n      continue;\n    }\n\n    if (propKey === STYLE) {\n      {\n        if (nextProp) {\n          // Freeze the next style object so that we can assume it won't be\n          // mutated. We have already warned for this in the past.\n          Object.freeze(nextProp);\n        }\n      }\n\n      if (lastProp) {\n        // Unset styles on `lastProp` but not on `nextProp`.\n        for (styleName in lastProp) {\n          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {\n            if (!styleUpdates) {\n              styleUpdates = {};\n            }\n\n            styleUpdates[styleName] = '';\n          }\n        } // Update styles that changed since `lastProp`.\n\n\n        for (styleName in nextProp) {\n          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {\n            if (!styleUpdates) {\n              styleUpdates = {};\n            }\n\n            styleUpdates[styleName] = nextProp[styleName];\n          }\n        }\n      } else {\n        // Relies on `updateStylesByID` not mutating `styleUpdates`.\n        if (!styleUpdates) {\n          if (!updatePayload) {\n            updatePayload = [];\n          }\n\n          updatePayload.push(propKey, styleUpdates);\n        }\n\n        styleUpdates = nextProp;\n      }\n    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {\n      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;\n      var lastHtml = lastProp ? lastProp[HTML$1] : undefined;\n\n      if (nextHtml != null) {\n        if (lastHtml !== nextHtml) {\n          (updatePayload = updatePayload || []).push(propKey, nextHtml);\n        }\n      }\n    } else if (propKey === CHILDREN) {\n      if (typeof nextProp === 'string' || typeof nextProp === 'number') {\n        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);\n      }\n    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {\n      if (nextProp != null) {\n        // We eagerly listen to this even though we haven't committed yet.\n        if ( typeof nextProp !== 'function') {\n          warnForInvalidEventListener(propKey, nextProp);\n        }\n\n        if (propKey === 'onScroll') {\n          listenToNonDelegatedEvent('scroll', domElement);\n        }\n      }\n\n      if (!updatePayload && lastProp !== nextProp) {\n        // This is a special case. If any listener updates we need to ensure\n        // that the \"current\" props pointer gets updated so we need a commit\n        // to update this element.\n        updatePayload = [];\n      }\n    } else {\n      // For any other property we always add it to the queue and then we\n      // filter it out using the allowed property list during the commit.\n      (updatePayload = updatePayload || []).push(propKey, nextProp);\n    }\n  }\n\n  if (styleUpdates) {\n    {\n      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);\n    }\n\n    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);\n  }\n\n  return updatePayload;\n} // Apply the diff.\n\nfunction updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {\n  // Update checked *before* name.\n  // In the middle of an update, it is possible to have multiple checked.\n  // When a checked radio tries to change name, browser makes another radio's checked false.\n  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {\n    updateChecked(domElement, nextRawProps);\n  }\n\n  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);\n  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.\n\n  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props\n  // changed.\n\n  switch (tag) {\n    case 'input':\n      // Update the wrapper around inputs *after* updating props. This has to\n      // happen after `updateDOMProperties`. Otherwise HTML5 input validations\n      // raise warnings and prevent the new value from being assigned.\n      updateWrapper(domElement, nextRawProps);\n      break;\n\n    case 'textarea':\n      updateWrapper$1(domElement, nextRawProps);\n      break;\n\n    case 'select':\n      // <select> value update needs to occur after <option> children\n      // reconciliation\n      postUpdateWrapper(domElement, nextRawProps);\n      break;\n  }\n}\n\nfunction getPossibleStandardName(propName) {\n  {\n    var lowerCasedName = propName.toLowerCase();\n\n    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {\n      return null;\n    }\n\n    return possibleStandardNames[lowerCasedName] || null;\n  }\n}\n\nfunction diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {\n  var isCustomComponentTag;\n  var extraAttributeNames;\n\n  {\n    isCustomComponentTag = isCustomComponent(tag, rawProps);\n    validatePropertiesInDevelopment(tag, rawProps);\n  } // TODO: Make sure that we check isMounted before firing any of these events.\n\n\n  switch (tag) {\n    case 'dialog':\n      listenToNonDelegatedEvent('cancel', domElement);\n      listenToNonDelegatedEvent('close', domElement);\n      break;\n\n    case 'iframe':\n    case 'object':\n    case 'embed':\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the load event.\n      listenToNonDelegatedEvent('load', domElement);\n      break;\n\n    case 'video':\n    case 'audio':\n      // We listen to these events in case to ensure emulated bubble\n      // listeners still fire for all the media events.\n      for (var i = 0; i < mediaEventTypes.length; i++) {\n        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);\n      }\n\n      break;\n\n    case 'source':\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the error event.\n      listenToNonDelegatedEvent('error', domElement);\n      break;\n\n    case 'img':\n    case 'image':\n    case 'link':\n      // We listen to these events in case to ensure emulated bubble\n      // listeners still fire for error and load events.\n      listenToNonDelegatedEvent('error', domElement);\n      listenToNonDelegatedEvent('load', domElement);\n      break;\n\n    case 'details':\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the toggle event.\n      listenToNonDelegatedEvent('toggle', domElement);\n      break;\n\n    case 'input':\n      initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the invalid event.\n\n      listenToNonDelegatedEvent('invalid', domElement);\n      break;\n\n    case 'option':\n      validateProps(domElement, rawProps);\n      break;\n\n    case 'select':\n      initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the invalid event.\n\n      listenToNonDelegatedEvent('invalid', domElement);\n      break;\n\n    case 'textarea':\n      initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the invalid event.\n\n      listenToNonDelegatedEvent('invalid', domElement);\n      break;\n  }\n\n  assertValidProps(tag, rawProps);\n\n  {\n    extraAttributeNames = new Set();\n    var attributes = domElement.attributes;\n\n    for (var _i = 0; _i < attributes.length; _i++) {\n      var name = attributes[_i].name.toLowerCase();\n\n      switch (name) {\n        // Controlled attributes are not validated\n        // TODO: Only ignore them on controlled tags.\n        case 'value':\n          break;\n\n        case 'checked':\n          break;\n\n        case 'selected':\n          break;\n\n        default:\n          // Intentionally use the original name.\n          // See discussion in https://github.com/facebook/react/pull/10676.\n          extraAttributeNames.add(attributes[_i].name);\n      }\n    }\n  }\n\n  var updatePayload = null;\n\n  for (var propKey in rawProps) {\n    if (!rawProps.hasOwnProperty(propKey)) {\n      continue;\n    }\n\n    var nextProp = rawProps[propKey];\n\n    if (propKey === CHILDREN) {\n      // For text content children we compare against textContent. This\n      // might match additional HTML that is hidden when we read it using\n      // textContent. E.g. \"foo\" will match \"f<span>oo</span>\" but that still\n      // satisfies our requirement. Our requirement is not to produce perfect\n      // HTML and attributes. Ideally we should preserve structure but it's\n      // ok not to if the visible content is still enough to indicate what\n      // even listeners these nodes might be wired up to.\n      // TODO: Warn if there is more than a single textNode as a child.\n      // TODO: Should we use domElement.firstChild.nodeValue to compare?\n      if (typeof nextProp === 'string') {\n        if (domElement.textContent !== nextProp) {\n          if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {\n            checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);\n          }\n\n          updatePayload = [CHILDREN, nextProp];\n        }\n      } else if (typeof nextProp === 'number') {\n        if (domElement.textContent !== '' + nextProp) {\n          if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {\n            checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);\n          }\n\n          updatePayload = [CHILDREN, '' + nextProp];\n        }\n      }\n    } else if (registrationNameDependencies.hasOwnProperty(propKey)) {\n      if (nextProp != null) {\n        if ( typeof nextProp !== 'function') {\n          warnForInvalidEventListener(propKey, nextProp);\n        }\n\n        if (propKey === 'onScroll') {\n          listenToNonDelegatedEvent('scroll', domElement);\n        }\n      }\n    } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)\n    typeof isCustomComponentTag === 'boolean') {\n      // Validate that the properties correspond to their expected values.\n      var serverValue = void 0;\n      var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);\n\n      if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated\n      // TODO: Only ignore them on controlled tags.\n      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {\n        var serverHTML = domElement.innerHTML;\n        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;\n\n        if (nextHtml != null) {\n          var expectedHTML = normalizeHTML(domElement, nextHtml);\n\n          if (expectedHTML !== serverHTML) {\n            warnForPropDifference(propKey, serverHTML, expectedHTML);\n          }\n        }\n      } else if (propKey === STYLE) {\n        // $FlowFixMe - Should be inferred as not undefined.\n        extraAttributeNames.delete(propKey);\n\n        if (canDiffStyleForHydrationWarning) {\n          var expectedStyle = createDangerousStringForStyles(nextProp);\n          serverValue = domElement.getAttribute('style');\n\n          if (expectedStyle !== serverValue) {\n            warnForPropDifference(propKey, serverValue, expectedStyle);\n          }\n        }\n      } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {\n        // $FlowFixMe - Should be inferred as not undefined.\n        extraAttributeNames.delete(propKey.toLowerCase());\n        serverValue = getValueForAttribute(domElement, propKey, nextProp);\n\n        if (nextProp !== serverValue) {\n          warnForPropDifference(propKey, serverValue, nextProp);\n        }\n      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {\n        var isMismatchDueToBadCasing = false;\n\n        if (propertyInfo !== null) {\n          // $FlowFixMe - Should be inferred as not undefined.\n          extraAttributeNames.delete(propertyInfo.attributeName);\n          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);\n        } else {\n          var ownNamespace = parentNamespace;\n\n          if (ownNamespace === HTML_NAMESPACE) {\n            ownNamespace = getIntrinsicNamespace(tag);\n          }\n\n          if (ownNamespace === HTML_NAMESPACE) {\n            // $FlowFixMe - Should be inferred as not undefined.\n            extraAttributeNames.delete(propKey.toLowerCase());\n          } else {\n            var standardName = getPossibleStandardName(propKey);\n\n            if (standardName !== null && standardName !== propKey) {\n              // If an SVG prop is supplied with bad casing, it will\n              // be successfully parsed from HTML, but will produce a mismatch\n              // (and would be incorrectly rendered on the client).\n              // However, we already warn about bad casing elsewhere.\n              // So we'll skip the misleading extra mismatch warning in this case.\n              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.\n\n              extraAttributeNames.delete(standardName);\n            } // $FlowFixMe - Should be inferred as not undefined.\n\n\n            extraAttributeNames.delete(propKey);\n          }\n\n          serverValue = getValueForAttribute(domElement, propKey, nextProp);\n        }\n\n        var dontWarnCustomElement = enableCustomElementPropertySupport  ;\n\n        if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {\n          warnForPropDifference(propKey, serverValue, nextProp);\n        }\n      }\n    }\n  }\n\n  {\n    if (shouldWarnDev) {\n      if ( // $FlowFixMe - Should be inferred as not undefined.\n      extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {\n        // $FlowFixMe - Should be inferred as not undefined.\n        warnForExtraAttributes(extraAttributeNames);\n      }\n    }\n  }\n\n  switch (tag) {\n    case 'input':\n      // TODO: Make sure we check if this is still unmounted or do any clean\n      // up necessary since we never stop tracking anymore.\n      track(domElement);\n      postMountWrapper(domElement, rawProps, true);\n      break;\n\n    case 'textarea':\n      // TODO: Make sure we check if this is still unmounted or do any clean\n      // up necessary since we never stop tracking anymore.\n      track(domElement);\n      postMountWrapper$3(domElement);\n      break;\n\n    case 'select':\n    case 'option':\n      // For input and textarea we current always set the value property at\n      // post mount to force it to diverge from attributes. However, for\n      // option and select we don't quite do the same thing and select\n      // is not resilient to the DOM state changing so we don't do that here.\n      // TODO: Consider not doing this for input and textarea.\n      break;\n\n    default:\n      if (typeof rawProps.onClick === 'function') {\n        // TODO: This cast may not be sound for SVG, MathML or custom elements.\n        trapClickOnNonInteractiveElement(domElement);\n      }\n\n      break;\n  }\n\n  return updatePayload;\n}\nfunction diffHydratedText(textNode, text, isConcurrentMode) {\n  var isDifferent = textNode.nodeValue !== text;\n  return isDifferent;\n}\nfunction warnForDeletedHydratableElement(parentNode, child) {\n  {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n\n    didWarnInvalidHydration = true;\n\n    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());\n  }\n}\nfunction warnForDeletedHydratableText(parentNode, child) {\n  {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n\n    didWarnInvalidHydration = true;\n\n    error('Did not expect server HTML to contain the text node \"%s\" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());\n  }\n}\nfunction warnForInsertedHydratedElement(parentNode, tag, props) {\n  {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n\n    didWarnInvalidHydration = true;\n\n    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());\n  }\n}\nfunction warnForInsertedHydratedText(parentNode, text) {\n  {\n    if (text === '') {\n      // We expect to insert empty text nodes since they're not represented in\n      // the HTML.\n      // TODO: Remove this special case if we can just avoid inserting empty\n      // text nodes.\n      return;\n    }\n\n    if (didWarnInvalidHydration) {\n      return;\n    }\n\n    didWarnInvalidHydration = true;\n\n    error('Expected server HTML to contain a matching text node for \"%s\" in <%s>.', text, parentNode.nodeName.toLowerCase());\n  }\n}\nfunction restoreControlledState$3(domElement, tag, props) {\n  switch (tag) {\n    case 'input':\n      restoreControlledState(domElement, props);\n      return;\n\n    case 'textarea':\n      restoreControlledState$2(domElement, props);\n      return;\n\n    case 'select':\n      restoreControlledState$1(domElement, props);\n      return;\n  }\n}\n\nvar validateDOMNesting = function () {};\n\nvar updatedAncestorInfo = function () {};\n\n{\n  // This validation code was written based on the HTML5 parsing spec:\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope\n  //\n  // Note: this does not catch all invalid nesting, nor does it try to (as it's\n  // not clear what practical benefit doing so provides); instead, we warn only\n  // for cases where the parser will give a parse tree differing from what React\n  // intended. For example, <b><div></div></b> is invalid but we don't warn\n  // because it still parses correctly; we do warn for other cases like nested\n  // <p> tags where the beginning of the second element implicitly closes the\n  // first, causing a confusing mess.\n  // https://html.spec.whatwg.org/multipage/syntax.html#special\n  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope\n\n  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point\n  // TODO: Distinguish by namespace here -- for <title>, including it here\n  // errs on the side of fewer warnings\n  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope\n\n  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags\n\n  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];\n  var emptyAncestorInfo = {\n    current: null,\n    formTag: null,\n    aTagInScope: null,\n    buttonTagInScope: null,\n    nobrTagInScope: null,\n    pTagInButtonScope: null,\n    listItemTagAutoclosing: null,\n    dlItemTagAutoclosing: null\n  };\n\n  updatedAncestorInfo = function (oldInfo, tag) {\n    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);\n\n    var info = {\n      tag: tag\n    };\n\n    if (inScopeTags.indexOf(tag) !== -1) {\n      ancestorInfo.aTagInScope = null;\n      ancestorInfo.buttonTagInScope = null;\n      ancestorInfo.nobrTagInScope = null;\n    }\n\n    if (buttonScopeTags.indexOf(tag) !== -1) {\n      ancestorInfo.pTagInButtonScope = null;\n    } // See rules for 'li', 'dd', 'dt' start tags in\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody\n\n\n    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {\n      ancestorInfo.listItemTagAutoclosing = null;\n      ancestorInfo.dlItemTagAutoclosing = null;\n    }\n\n    ancestorInfo.current = info;\n\n    if (tag === 'form') {\n      ancestorInfo.formTag = info;\n    }\n\n    if (tag === 'a') {\n      ancestorInfo.aTagInScope = info;\n    }\n\n    if (tag === 'button') {\n      ancestorInfo.buttonTagInScope = info;\n    }\n\n    if (tag === 'nobr') {\n      ancestorInfo.nobrTagInScope = info;\n    }\n\n    if (tag === 'p') {\n      ancestorInfo.pTagInButtonScope = info;\n    }\n\n    if (tag === 'li') {\n      ancestorInfo.listItemTagAutoclosing = info;\n    }\n\n    if (tag === 'dd' || tag === 'dt') {\n      ancestorInfo.dlItemTagAutoclosing = info;\n    }\n\n    return ancestorInfo;\n  };\n  /**\n   * Returns whether\n   */\n\n\n  var isTagValidWithParent = function (tag, parentTag) {\n    // First, let's check if we're in an unusual parsing mode...\n    switch (parentTag) {\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect\n      case 'select':\n        return tag === 'option' || tag === 'optgroup' || tag === '#text';\n\n      case 'optgroup':\n        return tag === 'option' || tag === '#text';\n      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>\n      // but\n\n      case 'option':\n        return tag === '#text';\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption\n      // No special behavior since these rules fall back to \"in body\" mode for\n      // all except special table nodes which cause bad parsing behavior anyway.\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr\n\n      case 'tr':\n        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody\n\n      case 'tbody':\n      case 'thead':\n      case 'tfoot':\n        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup\n\n      case 'colgroup':\n        return tag === 'col' || tag === 'template';\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable\n\n      case 'table':\n        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead\n\n      case 'head':\n        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';\n      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element\n\n      case 'html':\n        return tag === 'head' || tag === 'body' || tag === 'frameset';\n\n      case 'frameset':\n        return tag === 'frame';\n\n      case '#document':\n        return tag === 'html';\n    } // Probably in the \"in body\" parsing mode, so we outlaw only tag combos\n    // where the parsing rules cause implicit opens or closes to be added.\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody\n\n\n    switch (tag) {\n      case 'h1':\n      case 'h2':\n      case 'h3':\n      case 'h4':\n      case 'h5':\n      case 'h6':\n        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';\n\n      case 'rp':\n      case 'rt':\n        return impliedEndTags.indexOf(parentTag) === -1;\n\n      case 'body':\n      case 'caption':\n      case 'col':\n      case 'colgroup':\n      case 'frameset':\n      case 'frame':\n      case 'head':\n      case 'html':\n      case 'tbody':\n      case 'td':\n      case 'tfoot':\n      case 'th':\n      case 'thead':\n      case 'tr':\n        // These tags are only valid with a few parents that have special child\n        // parsing rules -- if we're down here, then none of those matched and\n        // so we allow it only if we don't know what the parent is, as all other\n        // cases are invalid.\n        return parentTag == null;\n    }\n\n    return true;\n  };\n  /**\n   * Returns whether\n   */\n\n\n  var findInvalidAncestorForTag = function (tag, ancestorInfo) {\n    switch (tag) {\n      case 'address':\n      case 'article':\n      case 'aside':\n      case 'blockquote':\n      case 'center':\n      case 'details':\n      case 'dialog':\n      case 'dir':\n      case 'div':\n      case 'dl':\n      case 'fieldset':\n      case 'figcaption':\n      case 'figure':\n      case 'footer':\n      case 'header':\n      case 'hgroup':\n      case 'main':\n      case 'menu':\n      case 'nav':\n      case 'ol':\n      case 'p':\n      case 'section':\n      case 'summary':\n      case 'ul':\n      case 'pre':\n      case 'listing':\n      case 'table':\n      case 'hr':\n      case 'xmp':\n      case 'h1':\n      case 'h2':\n      case 'h3':\n      case 'h4':\n      case 'h5':\n      case 'h6':\n        return ancestorInfo.pTagInButtonScope;\n\n      case 'form':\n        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;\n\n      case 'li':\n        return ancestorInfo.listItemTagAutoclosing;\n\n      case 'dd':\n      case 'dt':\n        return ancestorInfo.dlItemTagAutoclosing;\n\n      case 'button':\n        return ancestorInfo.buttonTagInScope;\n\n      case 'a':\n        // Spec says something about storing a list of markers, but it sounds\n        // equivalent to this check.\n        return ancestorInfo.aTagInScope;\n\n      case 'nobr':\n        return ancestorInfo.nobrTagInScope;\n    }\n\n    return null;\n  };\n\n  var didWarn$1 = {};\n\n  validateDOMNesting = function (childTag, childText, ancestorInfo) {\n    ancestorInfo = ancestorInfo || emptyAncestorInfo;\n    var parentInfo = ancestorInfo.current;\n    var parentTag = parentInfo && parentInfo.tag;\n\n    if (childText != null) {\n      if (childTag != null) {\n        error('validateDOMNesting: when childText is passed, childTag should be null');\n      }\n\n      childTag = '#text';\n    }\n\n    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;\n    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);\n    var invalidParentOrAncestor = invalidParent || invalidAncestor;\n\n    if (!invalidParentOrAncestor) {\n      return;\n    }\n\n    var ancestorTag = invalidParentOrAncestor.tag;\n    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;\n\n    if (didWarn$1[warnKey]) {\n      return;\n    }\n\n    didWarn$1[warnKey] = true;\n    var tagDisplayName = childTag;\n    var whitespaceInfo = '';\n\n    if (childTag === '#text') {\n      if (/\\S/.test(childText)) {\n        tagDisplayName = 'Text nodes';\n      } else {\n        tagDisplayName = 'Whitespace text nodes';\n        whitespaceInfo = \" Make sure you don't have any extra whitespace between tags on \" + 'each line of your source code.';\n      }\n    } else {\n      tagDisplayName = '<' + childTag + '>';\n    }\n\n    if (invalidParent) {\n      var info = '';\n\n      if (ancestorTag === 'table' && childTag === 'tr') {\n        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';\n      }\n\n      error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);\n    } else {\n      error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);\n    }\n  };\n}\n\nvar SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';\nvar SUSPENSE_START_DATA = '$';\nvar SUSPENSE_END_DATA = '/$';\nvar SUSPENSE_PENDING_START_DATA = '$?';\nvar SUSPENSE_FALLBACK_START_DATA = '$!';\nvar STYLE$1 = 'style';\nvar eventsEnabled = null;\nvar selectionInformation = null;\nfunction getRootHostContext(rootContainerInstance) {\n  var type;\n  var namespace;\n  var nodeType = rootContainerInstance.nodeType;\n\n  switch (nodeType) {\n    case DOCUMENT_NODE:\n    case DOCUMENT_FRAGMENT_NODE:\n      {\n        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';\n        var root = rootContainerInstance.documentElement;\n        namespace = root ? root.namespaceURI : getChildNamespace(null, '');\n        break;\n      }\n\n    default:\n      {\n        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;\n        var ownNamespace = container.namespaceURI || null;\n        type = container.tagName;\n        namespace = getChildNamespace(ownNamespace, type);\n        break;\n      }\n  }\n\n  {\n    var validatedTag = type.toLowerCase();\n    var ancestorInfo = updatedAncestorInfo(null, validatedTag);\n    return {\n      namespace: namespace,\n      ancestorInfo: ancestorInfo\n    };\n  }\n}\nfunction getChildHostContext(parentHostContext, type, rootContainerInstance) {\n  {\n    var parentHostContextDev = parentHostContext;\n    var namespace = getChildNamespace(parentHostContextDev.namespace, type);\n    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);\n    return {\n      namespace: namespace,\n      ancestorInfo: ancestorInfo\n    };\n  }\n}\nfunction getPublicInstance(instance) {\n  return instance;\n}\nfunction prepareForCommit(containerInfo) {\n  eventsEnabled = isEnabled();\n  selectionInformation = getSelectionInformation();\n  var activeInstance = null;\n\n  setEnabled(false);\n  return activeInstance;\n}\nfunction resetAfterCommit(containerInfo) {\n  restoreSelection(selectionInformation);\n  setEnabled(eventsEnabled);\n  eventsEnabled = null;\n  selectionInformation = null;\n}\nfunction createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {\n  var parentNamespace;\n\n  {\n    // TODO: take namespace into account when validating.\n    var hostContextDev = hostContext;\n    validateDOMNesting(type, null, hostContextDev.ancestorInfo);\n\n    if (typeof props.children === 'string' || typeof props.children === 'number') {\n      var string = '' + props.children;\n      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);\n      validateDOMNesting(null, string, ownAncestorInfo);\n    }\n\n    parentNamespace = hostContextDev.namespace;\n  }\n\n  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);\n  precacheFiberNode(internalInstanceHandle, domElement);\n  updateFiberProps(domElement, props);\n  return domElement;\n}\nfunction appendInitialChild(parentInstance, child) {\n  parentInstance.appendChild(child);\n}\nfunction finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {\n  setInitialProperties(domElement, type, props, rootContainerInstance);\n\n  switch (type) {\n    case 'button':\n    case 'input':\n    case 'select':\n    case 'textarea':\n      return !!props.autoFocus;\n\n    case 'img':\n      return true;\n\n    default:\n      return false;\n  }\n}\nfunction prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {\n  {\n    var hostContextDev = hostContext;\n\n    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {\n      var string = '' + newProps.children;\n      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);\n      validateDOMNesting(null, string, ownAncestorInfo);\n    }\n  }\n\n  return diffProperties(domElement, type, oldProps, newProps);\n}\nfunction shouldSetTextContent(type, props) {\n  return type === 'textarea' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;\n}\nfunction createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {\n  {\n    var hostContextDev = hostContext;\n    validateDOMNesting(null, text, hostContextDev.ancestorInfo);\n  }\n\n  var textNode = createTextNode(text, rootContainerInstance);\n  precacheFiberNode(internalInstanceHandle, textNode);\n  return textNode;\n}\nfunction getCurrentEventPriority() {\n  var currentEvent = window.event;\n\n  if (currentEvent === undefined) {\n    return DefaultEventPriority;\n  }\n\n  return getEventPriority(currentEvent.type);\n}\n// if a component just imports ReactDOM (e.g. for findDOMNode).\n// Some environments might not have setTimeout or clearTimeout.\n\nvar scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;\nvar cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;\nvar noTimeout = -1;\nvar localPromise = typeof Promise === 'function' ? Promise : undefined; // -------------------\nvar scheduleMicrotask = typeof queueMicrotask === 'function' ? queueMicrotask : typeof localPromise !== 'undefined' ? function (callback) {\n  return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);\n} : scheduleTimeout; // TODO: Determine the best fallback here.\n\nfunction handleErrorInNextTick(error) {\n  setTimeout(function () {\n    throw error;\n  });\n} // -------------------\nfunction commitMount(domElement, type, newProps, internalInstanceHandle) {\n  // Despite the naming that might imply otherwise, this method only\n  // fires if there is an `Update` effect scheduled during mounting.\n  // This happens if `finalizeInitialChildren` returns `true` (which it\n  // does to implement the `autoFocus` attribute on the client). But\n  // there are also other cases when this might happen (such as patching\n  // up text content during hydration mismatch). So we'll check this again.\n  switch (type) {\n    case 'button':\n    case 'input':\n    case 'select':\n    case 'textarea':\n      if (newProps.autoFocus) {\n        domElement.focus();\n      }\n\n      return;\n\n    case 'img':\n      {\n        if (newProps.src) {\n          domElement.src = newProps.src;\n        }\n\n        return;\n      }\n  }\n}\nfunction commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {\n  // Apply the diff to the DOM node.\n  updateProperties(domElement, updatePayload, type, oldProps, newProps); // Update the props handle so that we know which props are the ones with\n  // with current event handlers.\n\n  updateFiberProps(domElement, newProps);\n}\nfunction resetTextContent(domElement) {\n  setTextContent(domElement, '');\n}\nfunction commitTextUpdate(textInstance, oldText, newText) {\n  textInstance.nodeValue = newText;\n}\nfunction appendChild(parentInstance, child) {\n  parentInstance.appendChild(child);\n}\nfunction appendChildToContainer(container, child) {\n  var parentNode;\n\n  if (container.nodeType === COMMENT_NODE) {\n    parentNode = container.parentNode;\n    parentNode.insertBefore(child, container);\n  } else {\n    parentNode = container;\n    parentNode.appendChild(child);\n  } // This container might be used for a portal.\n  // If something inside a portal is clicked, that click should bubble\n  // through the React tree. However, on Mobile Safari the click would\n  // never bubble through the *DOM* tree unless an ancestor with onclick\n  // event exists. So we wouldn't see it and dispatch it.\n  // This is why we ensure that non React root containers have inline onclick\n  // defined.\n  // https://github.com/facebook/react/issues/11918\n\n\n  var reactRootContainer = container._reactRootContainer;\n\n  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {\n    // TODO: This cast may not be sound for SVG, MathML or custom elements.\n    trapClickOnNonInteractiveElement(parentNode);\n  }\n}\nfunction insertBefore(parentInstance, child, beforeChild) {\n  parentInstance.insertBefore(child, beforeChild);\n}\nfunction insertInContainerBefore(container, child, beforeChild) {\n  if (container.nodeType === COMMENT_NODE) {\n    container.parentNode.insertBefore(child, beforeChild);\n  } else {\n    container.insertBefore(child, beforeChild);\n  }\n}\n\nfunction removeChild(parentInstance, child) {\n  parentInstance.removeChild(child);\n}\nfunction removeChildFromContainer(container, child) {\n  if (container.nodeType === COMMENT_NODE) {\n    container.parentNode.removeChild(child);\n  } else {\n    container.removeChild(child);\n  }\n}\nfunction clearSuspenseBoundary(parentInstance, suspenseInstance) {\n  var node = suspenseInstance; // Delete all nodes within this suspense boundary.\n  // There might be nested nodes so we need to keep track of how\n  // deep we are and only break out when we're back on top.\n\n  var depth = 0;\n\n  do {\n    var nextNode = node.nextSibling;\n    parentInstance.removeChild(node);\n\n    if (nextNode && nextNode.nodeType === COMMENT_NODE) {\n      var data = nextNode.data;\n\n      if (data === SUSPENSE_END_DATA) {\n        if (depth === 0) {\n          parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.\n\n          retryIfBlockedOn(suspenseInstance);\n          return;\n        } else {\n          depth--;\n        }\n      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {\n        depth++;\n      }\n    }\n\n    node = nextNode;\n  } while (node); // TODO: Warn, we didn't find the end comment boundary.\n  // Retry if any event replaying was blocked on this.\n\n\n  retryIfBlockedOn(suspenseInstance);\n}\nfunction clearSuspenseBoundaryFromContainer(container, suspenseInstance) {\n  if (container.nodeType === COMMENT_NODE) {\n    clearSuspenseBoundary(container.parentNode, suspenseInstance);\n  } else if (container.nodeType === ELEMENT_NODE) {\n    clearSuspenseBoundary(container, suspenseInstance);\n  } // Retry if any event replaying was blocked on this.\n\n\n  retryIfBlockedOn(container);\n}\nfunction hideInstance(instance) {\n  // TODO: Does this work for all element types? What about MathML? Should we\n  // pass host context to this method?\n  instance = instance;\n  var style = instance.style;\n\n  if (typeof style.setProperty === 'function') {\n    style.setProperty('display', 'none', 'important');\n  } else {\n    style.display = 'none';\n  }\n}\nfunction hideTextInstance(textInstance) {\n  textInstance.nodeValue = '';\n}\nfunction unhideInstance(instance, props) {\n  instance = instance;\n  var styleProp = props[STYLE$1];\n  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;\n  instance.style.display = dangerousStyleValue('display', display);\n}\nfunction unhideTextInstance(textInstance, text) {\n  textInstance.nodeValue = text;\n}\nfunction clearContainer(container) {\n  if (container.nodeType === ELEMENT_NODE) {\n    container.textContent = '';\n  } else if (container.nodeType === DOCUMENT_NODE) {\n    if (container.documentElement) {\n      container.removeChild(container.documentElement);\n    }\n  }\n} // -------------------\nfunction canHydrateInstance(instance, type, props) {\n  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {\n    return null;\n  } // This has now been refined to an element node.\n\n\n  return instance;\n}\nfunction canHydrateTextInstance(instance, text) {\n  if (text === '' || instance.nodeType !== TEXT_NODE) {\n    // Empty strings are not parsed by HTML so there won't be a correct match here.\n    return null;\n  } // This has now been refined to a text node.\n\n\n  return instance;\n}\nfunction canHydrateSuspenseInstance(instance) {\n  if (instance.nodeType !== COMMENT_NODE) {\n    // Empty strings are not parsed by HTML so there won't be a correct match here.\n    return null;\n  } // This has now been refined to a suspense node.\n\n\n  return instance;\n}\nfunction isSuspenseInstancePending(instance) {\n  return instance.data === SUSPENSE_PENDING_START_DATA;\n}\nfunction isSuspenseInstanceFallback(instance) {\n  return instance.data === SUSPENSE_FALLBACK_START_DATA;\n}\nfunction getSuspenseInstanceFallbackErrorDetails(instance) {\n  var dataset = instance.nextSibling && instance.nextSibling.dataset;\n  var digest, message, stack;\n\n  if (dataset) {\n    digest = dataset.dgst;\n\n    {\n      message = dataset.msg;\n      stack = dataset.stck;\n    }\n  }\n\n  {\n    return {\n      message: message,\n      digest: digest,\n      stack: stack\n    };\n  } // let value = {message: undefined, hash: undefined};\n  // const nextSibling = instance.nextSibling;\n  // if (nextSibling) {\n  //   const dataset = ((nextSibling: any): HTMLTemplateElement).dataset;\n  //   value.message = dataset.msg;\n  //   value.hash = dataset.hash;\n  //   if (true) {\n  //     value.stack = dataset.stack;\n  //   }\n  // }\n  // return value;\n\n}\nfunction registerSuspenseInstanceRetry(instance, callback) {\n  instance._reactRetry = callback;\n}\n\nfunction getNextHydratable(node) {\n  // Skip non-hydratable nodes.\n  for (; node != null; node = node.nextSibling) {\n    var nodeType = node.nodeType;\n\n    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {\n      break;\n    }\n\n    if (nodeType === COMMENT_NODE) {\n      var nodeData = node.data;\n\n      if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {\n        break;\n      }\n\n      if (nodeData === SUSPENSE_END_DATA) {\n        return null;\n      }\n    }\n  }\n\n  return node;\n}\n\nfunction getNextHydratableSibling(instance) {\n  return getNextHydratable(instance.nextSibling);\n}\nfunction getFirstHydratableChild(parentInstance) {\n  return getNextHydratable(parentInstance.firstChild);\n}\nfunction getFirstHydratableChildWithinContainer(parentContainer) {\n  return getNextHydratable(parentContainer.firstChild);\n}\nfunction getFirstHydratableChildWithinSuspenseInstance(parentInstance) {\n  return getNextHydratable(parentInstance.nextSibling);\n}\nfunction hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {\n  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events\n  // get attached.\n\n  updateFiberProps(instance, props);\n  var parentNamespace;\n\n  {\n    var hostContextDev = hostContext;\n    parentNamespace = hostContextDev.namespace;\n  } // TODO: Temporary hack to check if we're in a concurrent root. We can delete\n  // when the legacy root API is removed.\n\n\n  var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;\n  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);\n}\nfunction hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {\n  precacheFiberNode(internalInstanceHandle, textInstance); // TODO: Temporary hack to check if we're in a concurrent root. We can delete\n  // when the legacy root API is removed.\n\n  var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;\n  return diffHydratedText(textInstance, text);\n}\nfunction hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {\n  precacheFiberNode(internalInstanceHandle, suspenseInstance);\n}\nfunction getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {\n  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.\n  // There might be nested nodes so we need to keep track of how\n  // deep we are and only break out when we're back on top.\n\n  var depth = 0;\n\n  while (node) {\n    if (node.nodeType === COMMENT_NODE) {\n      var data = node.data;\n\n      if (data === SUSPENSE_END_DATA) {\n        if (depth === 0) {\n          return getNextHydratableSibling(node);\n        } else {\n          depth--;\n        }\n      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {\n        depth++;\n      }\n    }\n\n    node = node.nextSibling;\n  } // TODO: Warn, we didn't find the end comment boundary.\n\n\n  return null;\n} // Returns the SuspenseInstance if this node is a direct child of a\n// SuspenseInstance. I.e. if its previous sibling is a Comment with\n// SUSPENSE_x_START_DATA. Otherwise, null.\n\nfunction getParentSuspenseInstance(targetInstance) {\n  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.\n  // There might be nested nodes so we need to keep track of how\n  // deep we are and only break out when we're back on top.\n\n  var depth = 0;\n\n  while (node) {\n    if (node.nodeType === COMMENT_NODE) {\n      var data = node.data;\n\n      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {\n        if (depth === 0) {\n          return node;\n        } else {\n          depth--;\n        }\n      } else if (data === SUSPENSE_END_DATA) {\n        depth++;\n      }\n    }\n\n    node = node.previousSibling;\n  }\n\n  return null;\n}\nfunction commitHydratedContainer(container) {\n  // Retry if any event replaying was blocked on this.\n  retryIfBlockedOn(container);\n}\nfunction commitHydratedSuspenseInstance(suspenseInstance) {\n  // Retry if any event replaying was blocked on this.\n  retryIfBlockedOn(suspenseInstance);\n}\nfunction shouldDeleteUnhydratedTailInstances(parentType) {\n  return parentType !== 'head' && parentType !== 'body';\n}\nfunction didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {\n  var shouldWarnDev = true;\n  checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);\n}\nfunction didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {\n  if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {\n    var shouldWarnDev = true;\n    checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);\n  }\n}\nfunction didNotHydrateInstanceWithinContainer(parentContainer, instance) {\n  {\n    if (instance.nodeType === ELEMENT_NODE) {\n      warnForDeletedHydratableElement(parentContainer, instance);\n    } else if (instance.nodeType === COMMENT_NODE) ; else {\n      warnForDeletedHydratableText(parentContainer, instance);\n    }\n  }\n}\nfunction didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {\n  {\n    // $FlowFixMe: Only Element or Document can be parent nodes.\n    var parentNode = parentInstance.parentNode;\n\n    if (parentNode !== null) {\n      if (instance.nodeType === ELEMENT_NODE) {\n        warnForDeletedHydratableElement(parentNode, instance);\n      } else if (instance.nodeType === COMMENT_NODE) ; else {\n        warnForDeletedHydratableText(parentNode, instance);\n      }\n    }\n  }\n}\nfunction didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {\n  {\n    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {\n      if (instance.nodeType === ELEMENT_NODE) {\n        warnForDeletedHydratableElement(parentInstance, instance);\n      } else if (instance.nodeType === COMMENT_NODE) ; else {\n        warnForDeletedHydratableText(parentInstance, instance);\n      }\n    }\n  }\n}\nfunction didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {\n  {\n    warnForInsertedHydratedElement(parentContainer, type);\n  }\n}\nfunction didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {\n  {\n    warnForInsertedHydratedText(parentContainer, text);\n  }\n}\nfunction didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {\n  {\n    // $FlowFixMe: Only Element or Document can be parent nodes.\n    var parentNode = parentInstance.parentNode;\n    if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);\n  }\n}\nfunction didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {\n  {\n    // $FlowFixMe: Only Element or Document can be parent nodes.\n    var parentNode = parentInstance.parentNode;\n    if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);\n  }\n}\nfunction didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {\n  {\n    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {\n      warnForInsertedHydratedElement(parentInstance, type);\n    }\n  }\n}\nfunction didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {\n  {\n    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {\n      warnForInsertedHydratedText(parentInstance, text);\n    }\n  }\n}\nfunction errorHydratingContainer(parentContainer) {\n  {\n    // TODO: This gets logged by onRecoverableError, too, so we should be\n    // able to remove it.\n    error('An error occurred during hydration. The server HTML was replaced with client content in <%s>.', parentContainer.nodeName.toLowerCase());\n  }\n}\nfunction preparePortalMount(portalInstance) {\n  listenToAllSupportedEvents(portalInstance);\n}\n\nvar randomKey = Math.random().toString(36).slice(2);\nvar internalInstanceKey = '__reactFiber$' + randomKey;\nvar internalPropsKey = '__reactProps$' + randomKey;\nvar internalContainerInstanceKey = '__reactContainer$' + randomKey;\nvar internalEventHandlersKey = '__reactEvents$' + randomKey;\nvar internalEventHandlerListenersKey = '__reactListeners$' + randomKey;\nvar internalEventHandlesSetKey = '__reactHandles$' + randomKey;\nfunction detachDeletedInstance(node) {\n  // TODO: This function is only called on host components. I don't think all of\n  // these fields are relevant.\n  delete node[internalInstanceKey];\n  delete node[internalPropsKey];\n  delete node[internalEventHandlersKey];\n  delete node[internalEventHandlerListenersKey];\n  delete node[internalEventHandlesSetKey];\n}\nfunction precacheFiberNode(hostInst, node) {\n  node[internalInstanceKey] = hostInst;\n}\nfunction markContainerAsRoot(hostRoot, node) {\n  node[internalContainerInstanceKey] = hostRoot;\n}\nfunction unmarkContainerAsRoot(node) {\n  node[internalContainerInstanceKey] = null;\n}\nfunction isContainerMarkedAsRoot(node) {\n  return !!node[internalContainerInstanceKey];\n} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.\n// If the target node is part of a hydrated or not yet rendered subtree, then\n// this may also return a SuspenseComponent or HostRoot to indicate that.\n// Conceptually the HostRoot fiber is a child of the Container node. So if you\n// pass the Container node as the targetNode, you will not actually get the\n// HostRoot back. To get to the HostRoot, you need to pass a child of it.\n// The same thing applies to Suspense boundaries.\n\nfunction getClosestInstanceFromNode(targetNode) {\n  var targetInst = targetNode[internalInstanceKey];\n\n  if (targetInst) {\n    // Don't return HostRoot or SuspenseComponent here.\n    return targetInst;\n  } // If the direct event target isn't a React owned DOM node, we need to look\n  // to see if one of its parents is a React owned DOM node.\n\n\n  var parentNode = targetNode.parentNode;\n\n  while (parentNode) {\n    // We'll check if this is a container root that could include\n    // React nodes in the future. We need to check this first because\n    // if we're a child of a dehydrated container, we need to first\n    // find that inner container before moving on to finding the parent\n    // instance. Note that we don't check this field on  the targetNode\n    // itself because the fibers are conceptually between the container\n    // node and the first child. It isn't surrounding the container node.\n    // If it's not a container, we check if it's an instance.\n    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];\n\n    if (targetInst) {\n      // Since this wasn't the direct target of the event, we might have\n      // stepped past dehydrated DOM nodes to get here. However they could\n      // also have been non-React nodes. We need to answer which one.\n      // If we the instance doesn't have any children, then there can't be\n      // a nested suspense boundary within it. So we can use this as a fast\n      // bailout. Most of the time, when people add non-React children to\n      // the tree, it is using a ref to a child-less DOM node.\n      // Normally we'd only need to check one of the fibers because if it\n      // has ever gone from having children to deleting them or vice versa\n      // it would have deleted the dehydrated boundary nested inside already.\n      // However, since the HostRoot starts out with an alternate it might\n      // have one on the alternate so we need to check in case this was a\n      // root.\n      var alternate = targetInst.alternate;\n\n      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {\n        // Next we need to figure out if the node that skipped past is\n        // nested within a dehydrated boundary and if so, which one.\n        var suspenseInstance = getParentSuspenseInstance(targetNode);\n\n        while (suspenseInstance !== null) {\n          // We found a suspense instance. That means that we haven't\n          // hydrated it yet. Even though we leave the comments in the\n          // DOM after hydrating, and there are boundaries in the DOM\n          // that could already be hydrated, we wouldn't have found them\n          // through this pass since if the target is hydrated it would\n          // have had an internalInstanceKey on it.\n          // Let's get the fiber associated with the SuspenseComponent\n          // as the deepest instance.\n          var targetSuspenseInst = suspenseInstance[internalInstanceKey];\n\n          if (targetSuspenseInst) {\n            return targetSuspenseInst;\n          } // If we don't find a Fiber on the comment, it might be because\n          // we haven't gotten to hydrate it yet. There might still be a\n          // parent boundary that hasn't above this one so we need to find\n          // the outer most that is known.\n\n\n          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent\n          // host component also hasn't hydrated yet. We can return it\n          // below since it will bail out on the isMounted check later.\n        }\n      }\n\n      return targetInst;\n    }\n\n    targetNode = parentNode;\n    parentNode = targetNode.parentNode;\n  }\n\n  return null;\n}\n/**\n * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent\n * instance, or null if the node was not rendered by this React.\n */\n\nfunction getInstanceFromNode(node) {\n  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];\n\n  if (inst) {\n    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {\n      return inst;\n    } else {\n      return null;\n    }\n  }\n\n  return null;\n}\n/**\n * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding\n * DOM node.\n */\n\nfunction getNodeFromInstance(inst) {\n  if (inst.tag === HostComponent || inst.tag === HostText) {\n    // In Fiber this, is just the state node right now. We assume it will be\n    // a host component or host text.\n    return inst.stateNode;\n  } // Without this first invariant, passing a non-DOM-component triggers the next\n  // invariant for a missing parent, which is super confusing.\n\n\n  throw new Error('getNodeFromInstance: Invalid argument.');\n}\nfunction getFiberCurrentPropsFromNode(node) {\n  return node[internalPropsKey] || null;\n}\nfunction updateFiberProps(node, props) {\n  node[internalPropsKey] = props;\n}\nfunction getEventListenerSet(node) {\n  var elementListenerSet = node[internalEventHandlersKey];\n\n  if (elementListenerSet === undefined) {\n    elementListenerSet = node[internalEventHandlersKey] = new Set();\n  }\n\n  return elementListenerSet;\n}\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar valueStack = [];\nvar fiberStack;\n\n{\n  fiberStack = [];\n}\n\nvar index = -1;\n\nfunction createCursor(defaultValue) {\n  return {\n    current: defaultValue\n  };\n}\n\nfunction pop(cursor, fiber) {\n  if (index < 0) {\n    {\n      error('Unexpected pop.');\n    }\n\n    return;\n  }\n\n  {\n    if (fiber !== fiberStack[index]) {\n      error('Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n  valueStack[index] = null;\n\n  {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push(cursor, value, fiber) {\n  index++;\n  valueStack[index] = cursor.current;\n\n  {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nvar warnedAboutMissingGetChildContext;\n\n{\n  warnedAboutMissingGetChildContext = {};\n}\n\nvar emptyContextObject = {};\n\n{\n  Object.freeze(emptyContextObject);\n} // A cursor to the current merged context object on the stack.\n\n\nvar contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.\n\nvar didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\n\nvar previousContext = emptyContextObject;\n\nfunction getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {\n  {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(workInProgress, unmaskedContext, maskedContext) {\n  {\n    var instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(workInProgress, unmaskedContext) {\n  {\n    var type = workInProgress.type;\n    var contextTypes = type.contextTypes;\n\n    if (!contextTypes) {\n      return emptyContextObject;\n    } // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n\n\n    var instance = workInProgress.stateNode;\n\n    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    var context = {};\n\n    for (var key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    {\n      var name = getComponentNameFromFiber(workInProgress) || 'Unknown';\n      checkPropTypes(contextTypes, context, 'context', name);\n    } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n\n\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged() {\n  {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type) {\n  {\n    var childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber) {\n  {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction popTopLevelContextObject(fiber) {\n  {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction pushTopLevelContextObject(fiber, context, didChange) {\n  {\n    if (contextStackCursor.current !== emptyContextObject) {\n      throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n}\n\nfunction processChildContext(fiber, type, parentContext) {\n  {\n    var instance = fiber.stateNode;\n    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n\n    if (typeof instance.getChildContext !== 'function') {\n      {\n        var componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n\n          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);\n        }\n      }\n\n      return parentContext;\n    }\n\n    var childContext = instance.getChildContext();\n\n    for (var contextKey in childContext) {\n      if (!(contextKey in childContextTypes)) {\n        throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + \".getChildContext(): key \\\"\" + contextKey + \"\\\" is not defined in childContextTypes.\");\n      }\n    }\n\n    {\n      var name = getComponentNameFromFiber(fiber) || 'Unknown';\n      checkPropTypes(childContextTypes, childContext, 'child context', name);\n    }\n\n    return assign({}, parentContext, childContext);\n  }\n}\n\nfunction pushContextProvider(workInProgress) {\n  {\n    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n\n    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(workInProgress, type, didChange) {\n  {\n    var instance = workInProgress.stateNode;\n\n    if (!instance) {\n      throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      var mergedContext = processChildContext(workInProgress, type, previousContext);\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.\n\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber) {\n  {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n      throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    var node = fiber;\n\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n\n        case ClassComponent:\n          {\n            var Component = node.type;\n\n            if (isContextProvider(Component)) {\n              return node.stateNode.__reactInternalMemoizedMergedChildContext;\n            }\n\n            break;\n          }\n      }\n\n      node = node.return;\n    } while (node !== null);\n\n    throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n}\n\nvar LegacyRoot = 0;\nvar ConcurrentRoot = 1;\n\nvar syncQueue = null;\nvar includesLegacySyncCallbacks = false;\nvar isFlushingSyncQueue = false;\nfunction scheduleSyncCallback(callback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n}\nfunction scheduleLegacySyncCallback(callback) {\n  includesLegacySyncCallbacks = true;\n  scheduleSyncCallback(callback);\n}\nfunction flushSyncCallbacksOnlyInLegacyMode() {\n  // Only flushes the queue if there's a legacy sync callback scheduled.\n  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n  // it might make more sense for the queue to be a list of roots instead of a\n  // list of generic callbacks. Then we can have two: one for legacy roots, one\n  // for concurrent roots. And this method would only flush the legacy ones.\n  if (includesLegacySyncCallbacks) {\n    flushSyncCallbacks();\n  }\n}\nfunction flushSyncCallbacks() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrance.\n    isFlushingSyncQueue = true;\n    var i = 0;\n    var previousUpdatePriority = getCurrentUpdatePriority();\n\n    try {\n      var isSync = true;\n      var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this\n      // queue is in the render or commit phases.\n\n      setCurrentUpdatePriority(DiscreteEventPriority);\n\n      for (; i < queue.length; i++) {\n        var callback = queue[i];\n\n        do {\n          callback = callback(isSync);\n        } while (callback !== null);\n      }\n\n      syncQueue = null;\n      includesLegacySyncCallbacks = false;\n    } catch (error) {\n      // If something throws, leave the remaining callbacks on the queue.\n      if (syncQueue !== null) {\n        syncQueue = syncQueue.slice(i + 1);\n      } // Resume flushing in the next tick\n\n\n      scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n      throw error;\n    } finally {\n      setCurrentUpdatePriority(previousUpdatePriority);\n      isFlushingSyncQueue = false;\n    }\n  }\n\n  return null;\n}\n\n// TODO: Use the unified fiber stack module instead of this local one?\n// Intentionally not using it yet to derisk the initial implementation, because\n// the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n// rather the ids be wrong than crash the whole reconciler.\nvar forkStack = [];\nvar forkStackIndex = 0;\nvar treeForkProvider = null;\nvar treeForkCount = 0;\nvar idStack = [];\nvar idStackIndex = 0;\nvar treeContextProvider = null;\nvar treeContextId = 1;\nvar treeContextOverflow = '';\nfunction isForkedChild(workInProgress) {\n  warnIfNotHydrating();\n  return (workInProgress.flags & Forked) !== NoFlags;\n}\nfunction getForksAtLevel(workInProgress) {\n  warnIfNotHydrating();\n  return treeForkCount;\n}\nfunction getTreeId() {\n  var overflow = treeContextOverflow;\n  var idWithLeadingBit = treeContextId;\n  var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n  return id.toString(32) + overflow;\n}\nfunction pushTreeFork(workInProgress, totalChildren) {\n  // This is called right after we reconcile an array (or iterator) of child\n  // fibers, because that's the only place where we know how many children in\n  // the whole set without doing extra work later, or storing addtional\n  // information on the fiber.\n  //\n  // That's why this function is separate from pushTreeId — it's called during\n  // the render phase of the fork parent, not the child, which is where we push\n  // the other context values.\n  //\n  // In the Fizz implementation this is much simpler because the child is\n  // rendered in the same callstack as the parent.\n  //\n  // It might be better to just add a `forks` field to the Fiber type. It would\n  // make this module simpler.\n  warnIfNotHydrating();\n  forkStack[forkStackIndex++] = treeForkCount;\n  forkStack[forkStackIndex++] = treeForkProvider;\n  treeForkProvider = workInProgress;\n  treeForkCount = totalChildren;\n}\nfunction pushTreeId(workInProgress, totalChildren, index) {\n  warnIfNotHydrating();\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n  treeContextProvider = workInProgress;\n  var baseIdWithLeadingBit = treeContextId;\n  var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n  // of the id; we use it to account for leading 0s.\n\n  var baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n  var baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n  var slot = index + 1;\n  var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into\n  // consideration the leading 1 we use to mark the end of the sequence.\n\n  if (length > 30) {\n    // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n    // This branch assumes the length of the base id is greater than 5; it won't\n    // work for smaller ids, because you need 5 bits per character.\n    //\n    // We encode the id in multiple steps: first the base id, then the\n    // remaining digits.\n    //\n    // Each 5 bit sequence corresponds to a single base 32 character. So for\n    // example, if the current id is 23 bits long, we can convert 20 of those\n    // bits into a string of 4 characters, with 3 bits left over.\n    //\n    // First calculate how many bits in the base id represent a complete\n    // sequence of characters.\n    var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.\n\n    var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.\n\n    var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.\n\n    var restOfBaseId = baseId >> numberOfOverflowBits;\n    var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because\n    // we made more room, this time it won't overflow.\n\n    var restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n    var restOfNewBits = slot << restOfBaseLength;\n    var id = restOfNewBits | restOfBaseId;\n    var overflow = newOverflow + baseOverflow;\n    treeContextId = 1 << restOfLength | id;\n    treeContextOverflow = overflow;\n  } else {\n    // Normal path\n    var newBits = slot << baseLength;\n\n    var _id = newBits | baseId;\n\n    var _overflow = baseOverflow;\n    treeContextId = 1 << length | _id;\n    treeContextOverflow = _overflow;\n  }\n}\nfunction pushMaterializedTreeId(workInProgress) {\n  warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear\n  // in its children.\n\n  var returnFiber = workInProgress.return;\n\n  if (returnFiber !== null) {\n    var numberOfForks = 1;\n    var slotIndex = 0;\n    pushTreeFork(workInProgress, numberOfForks);\n    pushTreeId(workInProgress, numberOfForks, slotIndex);\n  }\n}\n\nfunction getBitLength(number) {\n  return 32 - clz32(number);\n}\n\nfunction getLeadingBit(id) {\n  return 1 << getBitLength(id) - 1;\n}\n\nfunction popTreeContext(workInProgress) {\n  // Restore the previous values.\n  // This is a bit more complicated than other context-like modules in Fiber\n  // because the same Fiber may appear on the stack multiple times and for\n  // different reasons. We have to keep popping until the work-in-progress is\n  // no longer at the top of the stack.\n  while (workInProgress === treeForkProvider) {\n    treeForkProvider = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n    treeForkCount = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n  }\n\n  while (workInProgress === treeContextProvider) {\n    treeContextProvider = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextOverflow = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextId = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n  }\n}\nfunction getSuspendedTreeContext() {\n  warnIfNotHydrating();\n\n  if (treeContextProvider !== null) {\n    return {\n      id: treeContextId,\n      overflow: treeContextOverflow\n    };\n  } else {\n    return null;\n  }\n}\nfunction restoreSuspendedTreeContext(workInProgress, suspendedContext) {\n  warnIfNotHydrating();\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n  treeContextId = suspendedContext.id;\n  treeContextOverflow = suspendedContext.overflow;\n  treeContextProvider = workInProgress;\n}\n\nfunction warnIfNotHydrating() {\n  {\n    if (!getIsHydrating()) {\n      error('Expected to be hydrating. This is a bug in React. Please file ' + 'an issue.');\n    }\n  }\n}\n\n// This may have been an insertion or a hydration.\n\nvar hydrationParentFiber = null;\nvar nextHydratableInstance = null;\nvar isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches\n// due to earlier mismatches or a suspended fiber.\n\nvar didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary\n\nvar hydrationErrors = null;\n\nfunction warnIfHydrating() {\n  {\n    if (isHydrating) {\n      error('We should not be hydrating here. This is a bug in React. Please file a bug.');\n    }\n  }\n}\n\nfunction markDidThrowWhileHydratingDEV() {\n  {\n    didSuspendOrErrorDEV = true;\n  }\n}\nfunction didSuspendOrErrorWhileHydratingDEV() {\n  {\n    return didSuspendOrErrorDEV;\n  }\n}\n\nfunction enterHydrationState(fiber) {\n\n  var parentInstance = fiber.stateNode.containerInfo;\n  nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspendOrErrorDEV = false;\n  return true;\n}\n\nfunction reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {\n\n  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspendOrErrorDEV = false;\n\n  if (treeContext !== null) {\n    restoreSuspendedTreeContext(fiber, treeContext);\n  }\n\n  return true;\n}\n\nfunction warnUnhydratedInstance(returnFiber, instance) {\n  {\n    switch (returnFiber.tag) {\n      case HostRoot:\n        {\n          didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);\n          break;\n        }\n\n      case HostComponent:\n        {\n          var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, // TODO: Delete this argument when we remove the legacy root API.\n          isConcurrentMode);\n          break;\n        }\n\n      case SuspenseComponent:\n        {\n          var suspenseState = returnFiber.memoizedState;\n          if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);\n          break;\n        }\n    }\n  }\n}\n\nfunction deleteHydratableInstance(returnFiber, instance) {\n  warnUnhydratedInstance(returnFiber, instance);\n  var childToDelete = createFiberFromHostInstanceForDeletion();\n  childToDelete.stateNode = instance;\n  childToDelete.return = returnFiber;\n  var deletions = returnFiber.deletions;\n\n  if (deletions === null) {\n    returnFiber.deletions = [childToDelete];\n    returnFiber.flags |= ChildDeletion;\n  } else {\n    deletions.push(childToDelete);\n  }\n}\n\nfunction warnNonhydratedInstance(returnFiber, fiber) {\n  {\n    if (didSuspendOrErrorDEV) {\n      // Inside a boundary that already suspended. We're currently rendering the\n      // siblings of a suspended node. The mismatch may be due to the missing\n      // data, so it's probably a false positive.\n      return;\n    }\n\n    switch (returnFiber.tag) {\n      case HostRoot:\n        {\n          var parentContainer = returnFiber.stateNode.containerInfo;\n\n          switch (fiber.tag) {\n            case HostComponent:\n              var type = fiber.type;\n              var props = fiber.pendingProps;\n              didNotFindHydratableInstanceWithinContainer(parentContainer, type);\n              break;\n\n            case HostText:\n              var text = fiber.pendingProps;\n              didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);\n              break;\n          }\n\n          break;\n        }\n\n      case HostComponent:\n        {\n          var parentType = returnFiber.type;\n          var parentProps = returnFiber.memoizedProps;\n          var parentInstance = returnFiber.stateNode;\n\n          switch (fiber.tag) {\n            case HostComponent:\n              {\n                var _type = fiber.type;\n                var _props = fiber.pendingProps;\n                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, // TODO: Delete this argument when we remove the legacy root API.\n                isConcurrentMode);\n                break;\n              }\n\n            case HostText:\n              {\n                var _text = fiber.pendingProps;\n\n                var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n\n                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, // TODO: Delete this argument when we remove the legacy root API.\n                _isConcurrentMode);\n                break;\n              }\n          }\n\n          break;\n        }\n\n      case SuspenseComponent:\n        {\n          var suspenseState = returnFiber.memoizedState;\n          var _parentInstance = suspenseState.dehydrated;\n          if (_parentInstance !== null) switch (fiber.tag) {\n            case HostComponent:\n              var _type2 = fiber.type;\n              var _props2 = fiber.pendingProps;\n              didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);\n              break;\n\n            case HostText:\n              var _text2 = fiber.pendingProps;\n              didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);\n              break;\n          }\n          break;\n        }\n\n      default:\n        return;\n    }\n  }\n}\n\nfunction insertNonHydratedInstance(returnFiber, fiber) {\n  fiber.flags = fiber.flags & ~Hydrating | Placement;\n  warnNonhydratedInstance(returnFiber, fiber);\n}\n\nfunction tryHydrate(fiber, nextInstance) {\n  switch (fiber.tag) {\n    case HostComponent:\n      {\n        var type = fiber.type;\n        var props = fiber.pendingProps;\n        var instance = canHydrateInstance(nextInstance, type);\n\n        if (instance !== null) {\n          fiber.stateNode = instance;\n          hydrationParentFiber = fiber;\n          nextHydratableInstance = getFirstHydratableChild(instance);\n          return true;\n        }\n\n        return false;\n      }\n\n    case HostText:\n      {\n        var text = fiber.pendingProps;\n        var textInstance = canHydrateTextInstance(nextInstance, text);\n\n        if (textInstance !== null) {\n          fiber.stateNode = textInstance;\n          hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.\n\n          nextHydratableInstance = null;\n          return true;\n        }\n\n        return false;\n      }\n\n    case SuspenseComponent:\n      {\n        var suspenseInstance = canHydrateSuspenseInstance(nextInstance);\n\n        if (suspenseInstance !== null) {\n          var suspenseState = {\n            dehydrated: suspenseInstance,\n            treeContext: getSuspendedTreeContext(),\n            retryLane: OffscreenLane\n          };\n          fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.\n          // This simplifies the code for getHostSibling and deleting nodes,\n          // since it doesn't have to consider all Suspense boundaries and\n          // check if they're dehydrated ones or not.\n\n          var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);\n          dehydratedFragment.return = fiber;\n          fiber.child = dehydratedFragment;\n          hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into\n          // it during the first pass. Instead, we'll reenter it later.\n\n          nextHydratableInstance = null;\n          return true;\n        }\n\n        return false;\n      }\n\n    default:\n      return false;\n  }\n}\n\nfunction shouldClientRenderOnMismatch(fiber) {\n  return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;\n}\n\nfunction throwOnHydrationMismatch(fiber) {\n  throw new Error('Hydration failed because the initial UI does not match what was ' + 'rendered on the server.');\n}\n\nfunction tryToClaimNextHydratableInstance(fiber) {\n  if (!isHydrating) {\n    return;\n  }\n\n  var nextInstance = nextHydratableInstance;\n\n  if (!nextInstance) {\n    if (shouldClientRenderOnMismatch(fiber)) {\n      warnNonhydratedInstance(hydrationParentFiber, fiber);\n      throwOnHydrationMismatch();\n    } // Nothing to hydrate. Make it an insertion.\n\n\n    insertNonHydratedInstance(hydrationParentFiber, fiber);\n    isHydrating = false;\n    hydrationParentFiber = fiber;\n    return;\n  }\n\n  var firstAttemptedInstance = nextInstance;\n\n  if (!tryHydrate(fiber, nextInstance)) {\n    if (shouldClientRenderOnMismatch(fiber)) {\n      warnNonhydratedInstance(hydrationParentFiber, fiber);\n      throwOnHydrationMismatch();\n    } // If we can't hydrate this instance let's try the next one.\n    // We use this as a heuristic. It's based on intuition and not data so it\n    // might be flawed or unnecessary.\n\n\n    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n    var prevHydrationParentFiber = hydrationParentFiber;\n\n    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n      // Nothing to hydrate. Make it an insertion.\n      insertNonHydratedInstance(hydrationParentFiber, fiber);\n      isHydrating = false;\n      hydrationParentFiber = fiber;\n      return;\n    } // We matched the next one, we'll now assume that the first one was\n    // superfluous and we'll delete it. Since we can't eagerly delete it\n    // we'll have to schedule a deletion. To do that, this node needs a dummy\n    // fiber associated with it.\n\n\n    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);\n  }\n}\n\nfunction prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {\n\n  var instance = fiber.stateNode;\n  var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.\n\n  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n  // is a new ref we mark this as an update.\n\n  if (updatePayload !== null) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction prepareToHydrateHostTextInstance(fiber) {\n\n  var textInstance = fiber.stateNode;\n  var textContent = fiber.memoizedProps;\n  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);\n\n  if (shouldUpdate) {\n    // We assume that prepareToHydrateHostTextInstance is called in a context where the\n    // hydration parent is the parent host component of this host text.\n    var returnFiber = hydrationParentFiber;\n\n    if (returnFiber !== null) {\n      switch (returnFiber.tag) {\n        case HostRoot:\n          {\n            var parentContainer = returnFiber.stateNode.containerInfo;\n            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n            didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.\n            isConcurrentMode);\n            break;\n          }\n\n        case HostComponent:\n          {\n            var parentType = returnFiber.type;\n            var parentProps = returnFiber.memoizedProps;\n            var parentInstance = returnFiber.stateNode;\n\n            var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;\n\n            didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.\n            _isConcurrentMode2);\n            break;\n          }\n      }\n    }\n  }\n\n  return shouldUpdate;\n}\n\nfunction prepareToHydrateHostSuspenseInstance(fiber) {\n\n  var suspenseState = fiber.memoizedState;\n  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  hydrateSuspenseInstance(suspenseInstance, fiber);\n}\n\nfunction skipPastDehydratedSuspenseInstance(fiber) {\n\n  var suspenseState = fiber.memoizedState;\n  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n}\n\nfunction popToNextHostParent(fiber) {\n  var parent = fiber.return;\n\n  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {\n    parent = parent.return;\n  }\n\n  hydrationParentFiber = parent;\n}\n\nfunction popHydrationState(fiber) {\n\n  if (fiber !== hydrationParentFiber) {\n    // We're deeper than the current hydration context, inside an inserted\n    // tree.\n    return false;\n  }\n\n  if (!isHydrating) {\n    // If we're not currently hydrating but we're in a hydration context, then\n    // we were an insertion and now need to pop up reenter hydration of our\n    // siblings.\n    popToNextHostParent(fiber);\n    isHydrating = true;\n    return false;\n  } // If we have any remaining hydratable nodes, we need to delete them now.\n  // We only do this deeper than head and body since they tend to have random\n  // other nodes in them. We also ignore components with pure text content in\n  // side of them. We also don't delete anything inside the root container.\n\n\n  if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {\n    var nextInstance = nextHydratableInstance;\n\n    if (nextInstance) {\n      if (shouldClientRenderOnMismatch(fiber)) {\n        warnIfUnhydratedTailNodes(fiber);\n        throwOnHydrationMismatch();\n      } else {\n        while (nextInstance) {\n          deleteHydratableInstance(fiber, nextInstance);\n          nextInstance = getNextHydratableSibling(nextInstance);\n        }\n      }\n    }\n  }\n\n  popToNextHostParent(fiber);\n\n  if (fiber.tag === SuspenseComponent) {\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n  } else {\n    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;\n  }\n\n  return true;\n}\n\nfunction hasUnhydratedTailNodes() {\n  return isHydrating && nextHydratableInstance !== null;\n}\n\nfunction warnIfUnhydratedTailNodes(fiber) {\n  var nextInstance = nextHydratableInstance;\n\n  while (nextInstance) {\n    warnUnhydratedInstance(fiber, nextInstance);\n    nextInstance = getNextHydratableSibling(nextInstance);\n  }\n}\n\nfunction resetHydrationState() {\n\n  hydrationParentFiber = null;\n  nextHydratableInstance = null;\n  isHydrating = false;\n  didSuspendOrErrorDEV = false;\n}\n\nfunction upgradeHydrationErrorsToRecoverable() {\n  if (hydrationErrors !== null) {\n    // Successfully completed a forced client render. The errors that occurred\n    // during the hydration attempt are now recovered. We will log them in\n    // commit phase, once the entire tree has finished.\n    queueRecoverableErrors(hydrationErrors);\n    hydrationErrors = null;\n  }\n}\n\nfunction getIsHydrating() {\n  return isHydrating;\n}\n\nfunction queueHydrationError(error) {\n  if (hydrationErrors === null) {\n    hydrationErrors = [error];\n  } else {\n    hydrationErrors.push(error);\n  }\n}\n\nvar ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;\nvar NoTransition = null;\nfunction requestCurrentTransition() {\n  return ReactCurrentBatchConfig$1.transition;\n}\n\nvar ReactStrictModeWarnings = {\n  recordUnsafeLifecycleWarnings: function (fiber, instance) {},\n  flushPendingUnsafeLifecycleWarnings: function () {},\n  recordLegacyContextWarning: function (fiber, instance) {},\n  flushLegacyContextWarning: function () {},\n  discardPendingWarnings: function () {}\n};\n\n{\n  var findStrictRoot = function (fiber) {\n    var maybeStrictRoot = null;\n    var node = fiber;\n\n    while (node !== null) {\n      if (node.mode & StrictLegacyMode) {\n        maybeStrictRoot = node;\n      }\n\n      node = node.return;\n    }\n\n    return maybeStrictRoot;\n  };\n\n  var setToSortedString = function (set) {\n    var array = [];\n    set.forEach(function (value) {\n      array.push(value);\n    });\n    return array.sort().join(', ');\n  };\n\n  var pendingComponentWillMountWarnings = [];\n  var pendingUNSAFE_ComponentWillMountWarnings = [];\n  var pendingComponentWillReceivePropsWarnings = [];\n  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n  var pendingComponentWillUpdateWarnings = [];\n  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.\n\n  var didWarnAboutUnsafeLifecycles = new Set();\n\n  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {\n    // Dedupe strategy: Warn once per component.\n    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n      return;\n    }\n\n    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.\n    instance.componentWillMount.__suppressDeprecationWarning !== true) {\n      pendingComponentWillMountWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {\n      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n    }\n\n    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n      pendingComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n      pendingComponentWillUpdateWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {\n      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {\n    // We do an initial pass to gather component names\n    var componentWillMountUniqueNames = new Set();\n\n    if (pendingComponentWillMountWarnings.length > 0) {\n      pendingComponentWillMountWarnings.forEach(function (fiber) {\n        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillMountWarnings = [];\n    }\n\n    var UNSAFE_componentWillMountUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {\n        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillMountWarnings = [];\n    }\n\n    var componentWillReceivePropsUniqueNames = new Set();\n\n    if (pendingComponentWillReceivePropsWarnings.length > 0) {\n      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\n        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillReceivePropsWarnings = [];\n    }\n\n    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {\n        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    }\n\n    var componentWillUpdateUniqueNames = new Set();\n\n    if (pendingComponentWillUpdateWarnings.length > 0) {\n      pendingComponentWillUpdateWarnings.forEach(function (fiber) {\n        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillUpdateWarnings = [];\n    }\n\n    var UNSAFE_componentWillUpdateUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {\n        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    } // Finally, we flush all the warnings\n    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n\n\n    if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);\n\n      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '\\nPlease update the following components: %s', sortedNames);\n    }\n\n    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);\n\n      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, \" + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '\\nPlease update the following components: %s', _sortedNames);\n    }\n\n    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);\n\n      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '\\nPlease update the following components: %s', _sortedNames2);\n    }\n\n    if (componentWillMountUniqueNames.size > 0) {\n      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);\n\n      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames3);\n    }\n\n    if (componentWillReceivePropsUniqueNames.size > 0) {\n      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);\n\n      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, refactor your \" + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames4);\n    }\n\n    if (componentWillUpdateUniqueNames.size > 0) {\n      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);\n\n      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames5);\n    }\n  };\n\n  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.\n\n  var didWarnAboutLegacyContext = new Set();\n\n  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {\n    var strictRoot = findStrictRoot(fiber);\n\n    if (strictRoot === null) {\n      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\n      return;\n    } // Dedup strategy: Warn once per component.\n\n\n    if (didWarnAboutLegacyContext.has(fiber.type)) {\n      return;\n    }\n\n    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {\n      if (warningsForRoot === undefined) {\n        warningsForRoot = [];\n        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n      }\n\n      warningsForRoot.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushLegacyContextWarning = function () {\n    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {\n      if (fiberArray.length === 0) {\n        return;\n      }\n\n      var firstFiber = fiberArray[0];\n      var uniqueNames = new Set();\n      fiberArray.forEach(function (fiber) {\n        uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutLegacyContext.add(fiber.type);\n      });\n      var sortedNames = setToSortedString(uniqueNames);\n\n      try {\n        setCurrentFiber(firstFiber);\n\n        error('Legacy context API has been detected within a strict-mode tree.' + '\\n\\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);\n      } finally {\n        resetCurrentFiber();\n      }\n    });\n  };\n\n  ReactStrictModeWarnings.discardPendingWarnings = function () {\n    pendingComponentWillMountWarnings = [];\n    pendingUNSAFE_ComponentWillMountWarnings = [];\n    pendingComponentWillReceivePropsWarnings = [];\n    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    pendingComponentWillUpdateWarnings = [];\n    pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    pendingLegacyContextWarning = new Map();\n  };\n}\n\nvar didWarnAboutMaps;\nvar didWarnAboutGenerators;\nvar didWarnAboutStringRefs;\nvar ownerHasKeyUseWarning;\nvar ownerHasFunctionTypeWarning;\n\nvar warnForMissingKey = function (child, returnFiber) {};\n\n{\n  didWarnAboutMaps = false;\n  didWarnAboutGenerators = false;\n  didWarnAboutStringRefs = {};\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n\n  ownerHasKeyUseWarning = {};\n  ownerHasFunctionTypeWarning = {};\n\n  warnForMissingKey = function (child, returnFiber) {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n\n    if (typeof child._store !== 'object') {\n      throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    child._store.validated = true;\n    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasKeyUseWarning[componentName]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[componentName] = true;\n\n    error('Each child in a list should have a unique ' + '\"key\" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');\n  };\n}\n\nfunction isReactClass(type) {\n  return type.prototype && type.prototype.isReactComponent;\n}\n\nfunction coerceRef(returnFiber, current, element) {\n  var mixedRef = element.ref;\n\n  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {\n    {\n      // TODO: Clean this up once we turn on the string ref warning for\n      // everyone, because the strict mode case will no longer be relevant\n      if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs\n      // because these cannot be automatically converted to an arrow function\n      // using a codemod. Therefore, we don't have to warn about string refs again.\n      !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with \"Function components cannot have string refs\"\n      !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with \"Function components cannot be given refs\"\n      !(typeof element.type === 'function' && !isReactClass(element.type)) && // Will already throw with \"Element ref was specified as a string (someStringRef) but no owner was set\"\n      element._owner) {\n        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n        if (!didWarnAboutStringRefs[componentName]) {\n          {\n            error('Component \"%s\" contains the string ref \"%s\". Support for string refs ' + 'will be removed in a future major release. We recommend using ' + 'useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);\n          }\n\n          didWarnAboutStringRefs[componentName] = true;\n        }\n      }\n    }\n\n    if (element._owner) {\n      var owner = element._owner;\n      var inst;\n\n      if (owner) {\n        var ownerFiber = owner;\n\n        if (ownerFiber.tag !== ClassComponent) {\n          throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');\n        }\n\n        inst = ownerFiber.stateNode;\n      }\n\n      if (!inst) {\n        throw new Error(\"Missing owner for string ref \" + mixedRef + \". This error is likely caused by a \" + 'bug in React. Please file an issue.');\n      } // Assigning this to a const so Flow knows it won't change in the closure\n\n\n      var resolvedInst = inst;\n\n      {\n        checkPropStringCoercion(mixedRef, 'ref');\n      }\n\n      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref\n\n      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {\n        return current.ref;\n      }\n\n      var ref = function (value) {\n        var refs = resolvedInst.refs;\n\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      if (typeof mixedRef !== 'string') {\n        throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');\n      }\n\n      if (!element._owner) {\n        throw new Error(\"Element ref was specified as a string (\" + mixedRef + \") but no owner was set. This could happen for one of\" + ' the following reasons:\\n' + '1. You may be adding a ref to a function component\\n' + \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" + '3. You have multiple copies of React loaded\\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');\n      }\n    }\n  }\n\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber, newChild) {\n  var childString = Object.prototype.toString.call(newChild);\n  throw new Error(\"Objects are not valid as a React child (found: \" + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n}\n\nfunction warnOnFunctionType(returnFiber) {\n  {\n    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasFunctionTypeWarning[componentName]) {\n      return;\n    }\n\n    ownerHasFunctionTypeWarning[componentName] = true;\n\n    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');\n  }\n}\n\nfunction resolveLazy(lazyType) {\n  var payload = lazyType._payload;\n  var init = lazyType._init;\n  return init(payload);\n} // This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\n\n\nfunction ChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber, childToDelete) {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n\n    var deletions = returnFiber.deletions;\n\n    if (deletions === null) {\n      returnFiber.deletions = [childToDelete];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(childToDelete);\n    }\n  }\n\n  function deleteRemainingChildren(returnFiber, currentFirstChild) {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    } // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n\n\n    var childToDelete = currentFirstChild;\n\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n\n    return null;\n  }\n\n  function mapRemainingChildren(returnFiber, currentFirstChild) {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    var existingChildren = new Map();\n    var existingChild = currentFirstChild;\n\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n\n      existingChild = existingChild.sibling;\n    }\n\n    return existingChildren;\n  }\n\n  function useFiber(fiber, pendingProps) {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    var clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(newFiber, lastPlacedIndex, newIndex) {\n    newFiber.index = newIndex;\n\n    if (!shouldTrackSideEffects) {\n      // During hydration, the useId algorithm needs to know which fibers are\n      // part of a list of children (arrays, iterators).\n      newFiber.flags |= Forked;\n      return lastPlacedIndex;\n    }\n\n    var current = newFiber.alternate;\n\n    if (current !== null) {\n      var oldIndex = current.index;\n\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags |= Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags |= Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber) {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags |= Placement;\n    }\n\n    return newFiber;\n  }\n\n  function updateTextNode(returnFiber, current, textContent, lanes) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(returnFiber, current, element, lanes) {\n    var elementType = element.type;\n\n    if (elementType === REACT_FRAGMENT_TYPE) {\n      return updateFragment(returnFiber, current, element.props.children, lanes, element.key);\n    }\n\n    if (current !== null) {\n      if (current.elementType === elementType || ( // Keep this check inline so it only runs on the false path:\n       isCompatibleFamilyForHotReloading(current, element) ) || // Lazy types should reconcile their resolved type.\n      // We need to do this after the Hot Reloading check above,\n      // because hot reloading has different semantics than prod because\n      // it doesn't resuspend. So we can't let the call below suspend.\n      typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {\n        // Move based on index\n        var existing = useFiber(current, element.props);\n        existing.ref = coerceRef(returnFiber, current, element);\n        existing.return = returnFiber;\n\n        {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n\n        return existing;\n      }\n    } // Insert\n\n\n    var created = createFiberFromElement(element, returnFiber.mode, lanes);\n    created.ref = coerceRef(returnFiber, current, element);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function updatePortal(returnFiber, current, portal, lanes) {\n    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\n      // Insert\n      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(returnFiber, current, fragment, lanes, key) {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(returnFiber, newChild, lanes) {\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);\n\n            _created.ref = coerceRef(returnFiber, null, newChild);\n            _created.return = returnFiber;\n            return _created;\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);\n\n            _created2.return = returnFiber;\n            return _created2;\n          }\n\n        case REACT_LAZY_TYPE:\n          {\n            var payload = newChild._payload;\n            var init = newChild._init;\n            return createChild(returnFiber, init(payload), lanes);\n          }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);\n\n        _created3.return = returnFiber;\n        return _created3;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(returnFiber, oldFiber, newChild, lanes) {\n    // Update the fiber if the keys match, otherwise return null.\n    var key = oldFiber !== null ? oldFiber.key : null;\n\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            if (newChild.key === key) {\n              return updateElement(returnFiber, oldFiber, newChild, lanes);\n            } else {\n              return null;\n            }\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            if (newChild.key === key) {\n              return updatePortal(returnFiber, oldFiber, newChild, lanes);\n            } else {\n              return null;\n            }\n          }\n\n        case REACT_LAZY_TYPE:\n          {\n            var payload = newChild._payload;\n            var init = newChild._init;\n            return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n          }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      var matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n            return updateElement(returnFiber, _matchedFiber, newChild, lanes);\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);\n          }\n\n        case REACT_LAZY_TYPE:\n          var payload = newChild._payload;\n          var init = newChild._init;\n          return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        var _matchedFiber3 = existingChildren.get(newIdx) || null;\n\n        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n\n\n  function warnOnInvalidKey(child, knownKeys, returnFiber) {\n    {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(child, returnFiber);\n          var key = child.key;\n\n          if (typeof key !== 'string') {\n            break;\n          }\n\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n\n          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);\n\n          break;\n\n        case REACT_LAZY_TYPE:\n          var payload = child._payload;\n          var init = child._init;\n          warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n          break;\n      }\n    }\n\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {\n    // This algorithm can't optimize by searching from both ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n    {\n      // First, validate keys.\n      var knownKeys = null;\n\n      for (var i = 0; i < newChildren.length; i++) {\n        var child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n      }\n    }\n\n    var resultingFirstChild = null;\n    var previousNewFiber = null;\n    var oldFiber = currentFirstChild;\n    var lastPlacedIndex = 0;\n    var newIdx = 0;\n    var nextOldFiber = null;\n\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n\n      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);\n\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n\n        break;\n      }\n\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n\n      if (getIsHydrating()) {\n        var numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n\n        if (_newFiber === null) {\n          continue;\n        }\n\n        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = _newFiber;\n        } else {\n          previousNewFiber.sibling = _newFiber;\n        }\n\n        previousNewFiber = _newFiber;\n      }\n\n      if (getIsHydrating()) {\n        var _numberOfForks = newIdx;\n        pushTreeFork(returnFiber, _numberOfForks);\n      }\n\n      return resultingFirstChild;\n    } // Add all children to a key map for quick lookups.\n\n\n    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n    for (; newIdx < newChildren.length; newIdx++) {\n      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);\n\n      if (_newFiber2 !== null) {\n        if (shouldTrackSideEffects) {\n          if (_newFiber2.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n          }\n        }\n\n        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          resultingFirstChild = _newFiber2;\n        } else {\n          previousNewFiber.sibling = _newFiber2;\n        }\n\n        previousNewFiber = _newFiber2;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(function (child) {\n        return deleteChild(returnFiber, child);\n      });\n    }\n\n    if (getIsHydrating()) {\n      var _numberOfForks2 = newIdx;\n      pushTreeFork(returnFiber, _numberOfForks2);\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n    var iteratorFn = getIteratorFn(newChildrenIterable);\n\n    if (typeof iteratorFn !== 'function') {\n      throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');\n    }\n\n    {\n      // We don't support rendering Generators because it's a mutation.\n      // See https://github.com/facebook/react/issues/12995\n      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag\n      newChildrenIterable[Symbol.toStringTag] === 'Generator') {\n        if (!didWarnAboutGenerators) {\n          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');\n        }\n\n        didWarnAboutGenerators = true;\n      } // Warn about using Maps as children\n\n\n      if (newChildrenIterable.entries === iteratorFn) {\n        if (!didWarnAboutMaps) {\n          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n        }\n\n        didWarnAboutMaps = true;\n      } // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n\n\n      var _newChildren = iteratorFn.call(newChildrenIterable);\n\n      if (_newChildren) {\n        var knownKeys = null;\n\n        var _step = _newChildren.next();\n\n        for (; !_step.done; _step = _newChildren.next()) {\n          var child = _step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n        }\n      }\n    }\n\n    var newChildren = iteratorFn.call(newChildrenIterable);\n\n    if (newChildren == null) {\n      throw new Error('An iterable object provided no iterator.');\n    }\n\n    var resultingFirstChild = null;\n    var previousNewFiber = null;\n    var oldFiber = currentFirstChild;\n    var lastPlacedIndex = 0;\n    var newIdx = 0;\n    var nextOldFiber = null;\n    var step = newChildren.next();\n\n    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n\n      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n\n        break;\n      }\n\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n\n      if (getIsHydrating()) {\n        var numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        var _newFiber3 = createChild(returnFiber, step.value, lanes);\n\n        if (_newFiber3 === null) {\n          continue;\n        }\n\n        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = _newFiber3;\n        } else {\n          previousNewFiber.sibling = _newFiber3;\n        }\n\n        previousNewFiber = _newFiber3;\n      }\n\n      if (getIsHydrating()) {\n        var _numberOfForks3 = newIdx;\n        pushTreeFork(returnFiber, _numberOfForks3);\n      }\n\n      return resultingFirstChild;\n    } // Add all children to a key map for quick lookups.\n\n\n    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);\n\n      if (_newFiber4 !== null) {\n        if (shouldTrackSideEffects) {\n          if (_newFiber4.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);\n          }\n        }\n\n        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          resultingFirstChild = _newFiber4;\n        } else {\n          previousNewFiber.sibling = _newFiber4;\n        }\n\n        previousNewFiber = _newFiber4;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(function (child) {\n        return deleteChild(returnFiber, child);\n      });\n    }\n\n    if (getIsHydrating()) {\n      var _numberOfForks4 = newIdx;\n      pushTreeFork(returnFiber, _numberOfForks4);\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      var existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    } // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n\n\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {\n    var key = element.key;\n    var child = currentFirstChild;\n\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        var elementType = element.type;\n\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          if (child.tag === Fragment) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            var existing = useFiber(child, element.props.children);\n            existing.return = returnFiber;\n\n            {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n\n            return existing;\n          }\n        } else {\n          if (child.elementType === elementType || ( // Keep this check inline so it only runs on the false path:\n           isCompatibleFamilyForHotReloading(child, element) ) || // Lazy types should reconcile their resolved type.\n          // We need to do this after the Hot Reloading check above,\n          // because hot reloading has different semantics than prod because\n          // it doesn't resuspend. So we can't let the call below suspend.\n          typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n\n            var _existing = useFiber(child, element.props);\n\n            _existing.ref = coerceRef(returnFiber, child, element);\n            _existing.return = returnFiber;\n\n            {\n              _existing._debugSource = element._source;\n              _existing._debugOwner = element._owner;\n            }\n\n            return _existing;\n          }\n        } // Didn't match.\n\n\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);\n      created.return = returnFiber;\n      return created;\n    } else {\n      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);\n\n      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);\n      _created4.return = returnFiber;\n      return _created4;\n    }\n  }\n\n  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {\n    var key = portal.key;\n    var child = currentFirstChild;\n\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          var existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n\n      child = child.sibling;\n    }\n\n    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  } // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n\n\n  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\n\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    } // Handle object types\n\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));\n\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));\n\n        case REACT_LAZY_TYPE:\n          var payload = newChild._payload;\n          var init = newChild._init; // TODO: This function is supposed to be non-recursive.\n\n          return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);\n      }\n\n      if (isArray(newChild)) {\n        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);\n      }\n\n      if (getIteratorFn(newChild)) {\n        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    } // Remaining cases are all treated as empty.\n\n\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nvar reconcileChildFibers = ChildReconciler(true);\nvar mountChildFibers = ChildReconciler(false);\nfunction cloneChildFibers(current, workInProgress) {\n  if (current !== null && workInProgress.child !== current.child) {\n    throw new Error('Resuming work not yet implemented.');\n  }\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  var currentChild = workInProgress.child;\n  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n  newChild.return = workInProgress;\n\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);\n    newChild.return = workInProgress;\n  }\n\n  newChild.sibling = null;\n} // Reset a workInProgress child set to prepare it for a second pass.\n\nfunction resetChildFibers(workInProgress, lanes) {\n  var child = workInProgress.child;\n\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n\nvar valueCursor = createCursor(null);\nvar rendererSigil;\n\n{\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nvar currentlyRenderingFiber = null;\nvar lastContextDependency = null;\nvar lastFullyObservedContext = null;\nvar isDisallowedContextReadInDEV = false;\nfunction resetContextDependencies() {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n\n  {\n    isDisallowedContextReadInDEV = false;\n  }\n}\nfunction enterDisallowedContextReadInDEV() {\n  {\n    isDisallowedContextReadInDEV = true;\n  }\n}\nfunction exitDisallowedContextReadInDEV() {\n  {\n    isDisallowedContextReadInDEV = false;\n  }\n}\nfunction pushProvider(providerFiber, context, nextValue) {\n  {\n    push(valueCursor, context._currentValue, providerFiber);\n    context._currentValue = nextValue;\n\n    {\n      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer = rendererSigil;\n    }\n  }\n}\nfunction popProvider(context, providerFiber) {\n  var currentValue = valueCursor.current;\n  pop(valueCursor, providerFiber);\n\n  {\n    {\n      context._currentValue = currentValue;\n    }\n  }\n}\nfunction scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  var node = parent;\n\n  while (node !== null) {\n    var alternate = node.alternate;\n\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    }\n\n    if (node === propagationRoot) {\n      break;\n    }\n\n    node = node.return;\n  }\n\n  {\n    if (node !== propagationRoot) {\n      error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n  }\n}\nfunction propagateContextChange(workInProgress, context, renderLanes) {\n  {\n    propagateContextChange_eager(workInProgress, context, renderLanes);\n  }\n}\n\nfunction propagateContextChange_eager(workInProgress, context, renderLanes) {\n\n  var fiber = workInProgress.child;\n\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n\n  while (fiber !== null) {\n    var nextFiber = void 0; // Visit this fiber.\n\n    var list = fiber.dependencies;\n\n    if (list !== null) {\n      nextFiber = fiber.child;\n      var dependency = list.firstContext;\n\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (dependency.context === context) {\n          // Match! Schedule an update on this fiber.\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            var lane = pickArbitraryLane(renderLanes);\n            var update = createUpdate(NoTimestamp, lane);\n            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n            // Inlined `enqueueUpdate` to remove interleaved update check\n\n            var updateQueue = fiber.updateQueue;\n\n            if (updateQueue === null) ; else {\n              var sharedQueue = updateQueue.shared;\n              var pending = sharedQueue.pending;\n\n              if (pending === null) {\n                // This is the first update. Create a circular list.\n                update.next = update;\n              } else {\n                update.next = pending.next;\n                pending.next = update;\n              }\n\n              sharedQueue.pending = update;\n            }\n          }\n\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          var alternate = fiber.alternate;\n\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n\n          scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.\n\n          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\n          // dependency list.\n\n          break;\n        }\n\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      var parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      var _alternate = parentSuspense.alternate;\n\n      if (_alternate !== null) {\n        _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);\n      } // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n\n\n      scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n\n        var sibling = nextFiber.sibling;\n\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        } // No more siblings. Traverse up.\n\n\n        nextFiber = nextFiber.return;\n      }\n    }\n\n    fiber = nextFiber;\n  }\n}\nfunction prepareToReadContext(workInProgress, renderLanes) {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n  var dependencies = workInProgress.dependencies;\n\n  if (dependencies !== null) {\n    {\n      var firstContext = dependencies.firstContext;\n\n      if (firstContext !== null) {\n        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n          // Context list has a pending update. Mark that this fiber performed work.\n          markWorkInProgressReceivedUpdate();\n        } // Reset the work-in-progress list\n\n\n        dependencies.firstContext = null;\n      }\n    }\n  }\n}\nfunction readContext(context) {\n  {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n    }\n  }\n\n  var value =  context._currentValue ;\n\n  if (lastFullyObservedContext === context) ; else {\n    var contextItem = {\n      context: context,\n      memoizedValue: value,\n      next: null\n    };\n\n    if (lastContextDependency === null) {\n      if (currentlyRenderingFiber === null) {\n        throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n      } // This is the first dependency for this component. Create a new list.\n\n\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem\n      };\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n\n  return value;\n}\n\n// render. When this render exits, either because it finishes or because it is\n// interrupted, the interleaved updates will be transferred onto the main part\n// of the queue.\n\nvar concurrentQueues = null;\nfunction pushConcurrentUpdateQueue(queue) {\n  if (concurrentQueues === null) {\n    concurrentQueues = [queue];\n  } else {\n    concurrentQueues.push(queue);\n  }\n}\nfunction finishQueueingConcurrentUpdates() {\n  // Transfer the interleaved updates onto the main queue. Each queue has a\n  // `pending` field and an `interleaved` field. When they are not null, they\n  // point to the last node in a circular linked list. We need to append the\n  // interleaved list to the end of the pending list by joining them into a\n  // single, circular list.\n  if (concurrentQueues !== null) {\n    for (var i = 0; i < concurrentQueues.length; i++) {\n      var queue = concurrentQueues[i];\n      var lastInterleavedUpdate = queue.interleaved;\n\n      if (lastInterleavedUpdate !== null) {\n        queue.interleaved = null;\n        var firstInterleavedUpdate = lastInterleavedUpdate.next;\n        var lastPendingUpdate = queue.pending;\n\n        if (lastPendingUpdate !== null) {\n          var firstPendingUpdate = lastPendingUpdate.next;\n          lastPendingUpdate.next = firstInterleavedUpdate;\n          lastInterleavedUpdate.next = firstPendingUpdate;\n        }\n\n        queue.pending = lastInterleavedUpdate;\n      }\n    }\n\n    concurrentQueues = null;\n  }\n}\nfunction enqueueConcurrentHookUpdate(fiber, queue, update, lane) {\n  var interleaved = queue.interleaved;\n\n  if (interleaved === null) {\n    // This is the first update. Create a circular list.\n    update.next = update; // At the end of the current render, this queue's interleaved updates will\n    // be transferred to the pending queue.\n\n    pushConcurrentUpdateQueue(queue);\n  } else {\n    update.next = interleaved.next;\n    interleaved.next = update;\n  }\n\n  queue.interleaved = update;\n  return markUpdateLaneFromFiberToRoot(fiber, lane);\n}\nfunction enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {\n  var interleaved = queue.interleaved;\n\n  if (interleaved === null) {\n    // This is the first update. Create a circular list.\n    update.next = update; // At the end of the current render, this queue's interleaved updates will\n    // be transferred to the pending queue.\n\n    pushConcurrentUpdateQueue(queue);\n  } else {\n    update.next = interleaved.next;\n    interleaved.next = update;\n  }\n\n  queue.interleaved = update;\n}\nfunction enqueueConcurrentClassUpdate(fiber, queue, update, lane) {\n  var interleaved = queue.interleaved;\n\n  if (interleaved === null) {\n    // This is the first update. Create a circular list.\n    update.next = update; // At the end of the current render, this queue's interleaved updates will\n    // be transferred to the pending queue.\n\n    pushConcurrentUpdateQueue(queue);\n  } else {\n    update.next = interleaved.next;\n    interleaved.next = update;\n  }\n\n  queue.interleaved = update;\n  return markUpdateLaneFromFiberToRoot(fiber, lane);\n}\nfunction enqueueConcurrentRenderForLane(fiber, lane) {\n  return markUpdateLaneFromFiberToRoot(fiber, lane);\n} // Calling this function outside this module should only be done for backwards\n// compatibility and should always be accompanied by a warning.\n\nvar unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;\n\nfunction markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  var alternate = sourceFiber.alternate;\n\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n\n  {\n    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n    }\n  } // Walk the parent path to the root and update the child lanes.\n\n\n  var node = sourceFiber;\n  var parent = sourceFiber.return;\n\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    } else {\n      {\n        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n\n    node = parent;\n    parent = parent.return;\n  }\n\n  if (node.tag === HostRoot) {\n    var root = node.stateNode;\n    return root;\n  } else {\n    return null;\n  }\n}\n\nvar UpdateState = 0;\nvar ReplaceState = 1;\nvar ForceUpdate = 2;\nvar CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\n\nvar hasForceUpdate = false;\nvar didWarnUpdateInsideUpdate;\nvar currentlyProcessingQueue;\n\n{\n  didWarnUpdateInsideUpdate = false;\n  currentlyProcessingQueue = null;\n}\n\nfunction initializeUpdateQueue(fiber) {\n  var queue = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n      interleaved: null,\n      lanes: NoLanes\n    },\n    effects: null\n  };\n  fiber.updateQueue = queue;\n}\nfunction cloneUpdateQueue(current, workInProgress) {\n  // Clone the update queue from current. Unless it's already a clone.\n  var queue = workInProgress.updateQueue;\n  var currentQueue = current.updateQueue;\n\n  if (queue === currentQueue) {\n    var clone = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      effects: currentQueue.effects\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\nfunction createUpdate(eventTime, lane) {\n  var update = {\n    eventTime: eventTime,\n    lane: lane,\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n    next: null\n  };\n  return update;\n}\nfunction enqueueUpdate(fiber, update, lane) {\n  var updateQueue = fiber.updateQueue;\n\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return null;\n  }\n\n  var sharedQueue = updateQueue.shared;\n\n  {\n    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {\n      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');\n\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n\n  if (isUnsafeClassRenderPhaseUpdate()) {\n    // This is an unsafe render phase update. Add directly to the update\n    // queue so we can process it immediately during the current render.\n    var pending = sharedQueue.pending;\n\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n\n    sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering\n    // this fiber. This is for backwards compatibility in the case where you\n    // update a different component during render phase than the one that is\n    // currently renderings (a pattern that is accompanied by a warning).\n\n    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n  } else {\n    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\n  }\n}\nfunction entangleTransitions(root, fiber, lane) {\n  var updateQueue = fiber.updateQueue;\n\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  var sharedQueue = updateQueue.shared;\n\n  if (isTransitionLane(lane)) {\n    var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must\n    // have finished. We can remove them from the shared queue, which represents\n    // a superset of the actually pending lanes. In some cases we may entangle\n    // more than we need to, but that's OK. In fact it's worse if we *don't*\n    // entangle when we should.\n\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n    var newQueueLanes = mergeLanes(queueLanes, lane);\n    sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n\n    markRootEntangled(root, newQueueLanes);\n  }\n}\nfunction enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.\n\n  var current = workInProgress.alternate;\n\n  if (current !== null) {\n    var currentQueue = current.updateQueue;\n\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      var newFirst = null;\n      var newLast = null;\n      var firstBaseUpdate = queue.firstBaseUpdate;\n\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        var update = firstBaseUpdate;\n\n        do {\n          var clone = {\n            eventTime: update.eventTime,\n            lane: update.lane,\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n            next: null\n          };\n\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          }\n\n          update = update.next;\n        } while (update !== null); // Append the captured update the end of the cloned list.\n\n\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        effects: currentQueue.effects\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  } // Append the update to the end of the list.\n\n\n  var lastBaseUpdate = queue.lastBaseUpdate;\n\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {\n  switch (update.tag) {\n    case ReplaceState:\n      {\n        var payload = update.payload;\n\n        if (typeof payload === 'function') {\n          // Updater function\n          {\n            enterDisallowedContextReadInDEV();\n          }\n\n          var nextState = payload.call(instance, prevState, nextProps);\n\n          {\n            if ( workInProgress.mode & StrictLegacyMode) {\n              setIsStrictModeForDevtools(true);\n\n              try {\n                payload.call(instance, prevState, nextProps);\n              } finally {\n                setIsStrictModeForDevtools(false);\n              }\n            }\n\n            exitDisallowedContextReadInDEV();\n          }\n\n          return nextState;\n        } // State object\n\n\n        return payload;\n      }\n\n    case CaptureUpdate:\n      {\n        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;\n      }\n    // Intentional fallthrough\n\n    case UpdateState:\n      {\n        var _payload = update.payload;\n        var partialState;\n\n        if (typeof _payload === 'function') {\n          // Updater function\n          {\n            enterDisallowedContextReadInDEV();\n          }\n\n          partialState = _payload.call(instance, prevState, nextProps);\n\n          {\n            if ( workInProgress.mode & StrictLegacyMode) {\n              setIsStrictModeForDevtools(true);\n\n              try {\n                _payload.call(instance, prevState, nextProps);\n              } finally {\n                setIsStrictModeForDevtools(false);\n              }\n            }\n\n            exitDisallowedContextReadInDEV();\n          }\n        } else {\n          // Partial state object\n          partialState = _payload;\n        }\n\n        if (partialState === null || partialState === undefined) {\n          // Null and undefined are treated as no-ops.\n          return prevState;\n        } // Merge the partial state and the previous state.\n\n\n        return assign({}, prevState, partialState);\n      }\n\n    case ForceUpdate:\n      {\n        hasForceUpdate = true;\n        return prevState;\n      }\n  }\n\n  return prevState;\n}\n\nfunction processUpdateQueue(workInProgress, props, instance, renderLanes) {\n  // This is always non-null on a ClassComponent or HostRoot\n  var queue = workInProgress.updateQueue;\n  hasForceUpdate = false;\n\n  {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  var firstBaseUpdate = queue.firstBaseUpdate;\n  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.\n\n  var pendingQueue = queue.shared.pending;\n\n  if (pendingQueue !== null) {\n    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n\n    var lastPendingUpdate = pendingQueue;\n    var firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null; // Append pending updates to base queue\n\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n\n    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n\n    var current = workInProgress.alternate;\n\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      var currentQueue = current.updateQueue;\n      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  } // These values may change as we process the queue.\n\n\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n\n    var newLanes = NoLanes;\n    var newBaseState = null;\n    var newFirstBaseUpdate = null;\n    var newLastBaseUpdate = null;\n    var update = firstBaseUpdate;\n\n    do {\n      var updateLane = update.lane;\n      var updateEventTime = update.eventTime;\n\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        var clone = {\n          eventTime: updateEventTime,\n          lane: updateLane,\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n          next: null\n        };\n\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        } // Update the remaining priority in the queue.\n\n\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n        if (newLastBaseUpdate !== null) {\n          var _clone = {\n            eventTime: updateEventTime,\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n            next: null\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = _clone;\n        } // Process this update.\n\n\n        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);\n        var callback = update.callback;\n\n        if (callback !== null && // If the update was already committed, we should not queue its\n        // callback again.\n        update.lane !== NoLane) {\n          workInProgress.flags |= Callback;\n          var effects = queue.effects;\n\n          if (effects === null) {\n            queue.effects = [update];\n          } else {\n            effects.push(update);\n          }\n        }\n      }\n\n      update = update.next;\n\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n\n          var _firstPendingUpdate = _lastPendingUpdate.next;\n          _lastPendingUpdate.next = null;\n          update = _firstPendingUpdate;\n          queue.lastBaseUpdate = _lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = newBaseState;\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to\n    // process them during this render, but we do need to track which lanes\n    // are remaining.\n\n    var lastInterleaved = queue.shared.interleaved;\n\n    if (lastInterleaved !== null) {\n      var interleaved = lastInterleaved;\n\n      do {\n        newLanes = mergeLanes(newLanes, interleaved.lane);\n        interleaved = interleaved.next;\n      } while (interleaved !== lastInterleaved);\n    } else if (firstBaseUpdate === null) {\n      // `queue.lanes` is used for entangling transitions. We can set it back to\n      // zero once the queue is empty.\n      queue.shared.lanes = NoLanes;\n    } // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n\n\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n\n  {\n    currentlyProcessingQueue = null;\n  }\n}\n\nfunction callCallback(callback, context) {\n  if (typeof callback !== 'function') {\n    throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + (\"received: \" + callback));\n  }\n\n  callback.call(context);\n}\n\nfunction resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\nfunction checkHasForceUpdateAfterProcessing() {\n  return hasForceUpdate;\n}\nfunction commitUpdateQueue(finishedWork, finishedQueue, instance) {\n  // Commit the effects\n  var effects = finishedQueue.effects;\n  finishedQueue.effects = null;\n\n  if (effects !== null) {\n    for (var i = 0; i < effects.length; i++) {\n      var effect = effects[i];\n      var callback = effect.callback;\n\n      if (callback !== null) {\n        effect.callback = null;\n        callCallback(callback, instance);\n      }\n    }\n  }\n}\n\nvar NO_CONTEXT = {};\nvar contextStackCursor$1 = createCursor(NO_CONTEXT);\nvar contextFiberStackCursor = createCursor(NO_CONTEXT);\nvar rootInstanceStackCursor = createCursor(NO_CONTEXT);\n\nfunction requiredContext(c) {\n  if (c === NO_CONTEXT) {\n    throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n  }\n\n  return c;\n}\n\nfunction getRootHostContainer() {\n  var rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nfunction pushHostContainer(fiber, nextRootInstance) {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n\n  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n\n  push(contextStackCursor$1, NO_CONTEXT, fiber);\n  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.\n\n  pop(contextStackCursor$1, fiber);\n  push(contextStackCursor$1, nextRootContext, fiber);\n}\n\nfunction popHostContainer(fiber) {\n  pop(contextStackCursor$1, fiber);\n  pop(contextFiberStackCursor, fiber);\n  pop(rootInstanceStackCursor, fiber);\n}\n\nfunction getHostContext() {\n  var context = requiredContext(contextStackCursor$1.current);\n  return context;\n}\n\nfunction pushHostContext(fiber) {\n  var rootInstance = requiredContext(rootInstanceStackCursor.current);\n  var context = requiredContext(contextStackCursor$1.current);\n  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.\n\n  if (context === nextContext) {\n    return;\n  } // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n\n\n  push(contextFiberStackCursor, fiber, fiber);\n  push(contextStackCursor$1, nextContext, fiber);\n}\n\nfunction popHostContext(fiber) {\n  // Do not pop unless this Fiber provided the current context.\n  // pushHostContext() only pushes Fibers that provide unique contexts.\n  if (contextFiberStackCursor.current !== fiber) {\n    return;\n  }\n\n  pop(contextStackCursor$1, fiber);\n  pop(contextFiberStackCursor, fiber);\n}\n\nvar DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\n\nvar SubtreeSuspenseContextMask = 1; // Subtree Flags:\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\n\nvar InvisibleParentSuspenseContext = 1; // Shallow Flags:\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\n\nvar ForceSuspenseFallback = 2;\nvar suspenseStackCursor = createCursor(DefaultSuspenseContext);\nfunction hasSuspenseContext(parentContext, flag) {\n  return (parentContext & flag) !== 0;\n}\nfunction setDefaultShallowSuspenseContext(parentContext) {\n  return parentContext & SubtreeSuspenseContextMask;\n}\nfunction setShallowSuspenseContext(parentContext, shallowContext) {\n  return parentContext & SubtreeSuspenseContextMask | shallowContext;\n}\nfunction addSubtreeSuspenseContext(parentContext, subtreeContext) {\n  return parentContext | subtreeContext;\n}\nfunction pushSuspenseContext(fiber, newContext) {\n  push(suspenseStackCursor, newContext, fiber);\n}\nfunction popSuspenseContext(fiber) {\n  pop(suspenseStackCursor, fiber);\n}\n\nfunction shouldCaptureSuspense(workInProgress, hasInvisibleParent) {\n  // If it was the primary children that just suspended, capture and render the\n  // fallback. Otherwise, don't capture and bubble to the next boundary.\n  var nextState = workInProgress.memoizedState;\n\n  if (nextState !== null) {\n    if (nextState.dehydrated !== null) {\n      // A dehydrated boundary always captures.\n      return true;\n    }\n\n    return false;\n  }\n\n  var props = workInProgress.memoizedProps; // Regular boundaries always capture.\n\n  {\n    return true;\n  } // If it's a boundary we should avoid, then we prefer to bubble up to the\n}\nfunction findFirstSuspended(row) {\n  var node = row;\n\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      var state = node.memoizedState;\n\n      if (state !== null) {\n        var dehydrated = state.dehydrated;\n\n        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {\n          return node;\n        }\n      }\n    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't\n    // keep track of whether it suspended or not.\n    node.memoizedProps.revealOrder !== undefined) {\n      var didSuspend = (node.flags & DidCapture) !== NoFlags;\n\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === row) {\n      return null;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n\n  return null;\n}\n\nvar NoFlags$1 =\n/*   */\n0; // Represents whether effect should fire.\n\nvar HasEffect =\n/* */\n1; // Represents the phase in which the effect (not the clean-up) fires.\n\nvar Insertion =\n/*  */\n2;\nvar Layout =\n/*    */\n4;\nvar Passive$1 =\n/*   */\n8;\n\n// and should be reset before starting a new render.\n// This tracks which mutable sources need to be reset after a render.\n\nvar workInProgressSources = [];\nfunction resetWorkInProgressVersions() {\n  for (var i = 0; i < workInProgressSources.length; i++) {\n    var mutableSource = workInProgressSources[i];\n\n    {\n      mutableSource._workInProgressVersionPrimary = null;\n    }\n  }\n\n  workInProgressSources.length = 0;\n}\n// This ensures that the version used for server rendering matches the one\n// that is eventually read during hydration.\n// If they don't match there's a potential tear and a full deopt render is required.\n\nfunction registerMutableSourceForHydration(root, mutableSource) {\n  var getVersion = mutableSource._getVersion;\n  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.\n  // Retaining it forever may interfere with GC.\n\n  if (root.mutableSourceEagerHydrationData == null) {\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\n  } else {\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n  }\n}\n\nvar ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,\n    ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;\nvar didWarnAboutMismatchedHooksForComponent;\nvar didWarnUncachedGetSnapshot;\n\n{\n  didWarnAboutMismatchedHooksForComponent = new Set();\n}\n\n// These are set right before calling the component.\nvar renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\n\nvar currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\n\nvar currentHook = null;\nvar workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\n\nvar didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\n\nvar didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.\n\nvar localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during\n// hydration). This counter is global, so client ids are not stable across\n// render attempts.\n\nvar globalClientIdCounter = 0;\nvar RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook\n\nvar currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\n\nvar hookTypesDev = null;\nvar hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\n\nvar ignorePreviousDependencies = false;\n\nfunction mountHookTypesDev() {\n  {\n    var hookName = currentHookNameInDev;\n\n    if (hookTypesDev === null) {\n      hookTypesDev = [hookName];\n    } else {\n      hookTypesDev.push(hookName);\n    }\n  }\n}\n\nfunction updateHookTypesDev() {\n  {\n    var hookName = currentHookNameInDev;\n\n    if (hookTypesDev !== null) {\n      hookTypesUpdateIndexDev++;\n\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n        warnOnHookMismatchInDev(hookName);\n      }\n    }\n  }\n}\n\nfunction checkDepsAreArrayDev(deps) {\n  {\n    if (deps !== undefined && deps !== null && !isArray(deps)) {\n      // Verify deps, but only on mount to avoid extra checks.\n      // It's unlikely their type would change as usually you define them inline.\n      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);\n    }\n  }\n}\n\nfunction warnOnHookMismatchInDev(currentHookName) {\n  {\n    var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n      if (hookTypesDev !== null) {\n        var table = '';\n        var secondColumnStart = 30;\n\n        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {\n          var oldHookName = hookTypesDev[i];\n          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;\n          var row = i + 1 + \". \" + oldHookName; // Extra space so second column lines up\n          // lol @ IE not supporting String#repeat\n\n          while (row.length < secondColumnStart) {\n            row += ' ';\n          }\n\n          row += newHookName + '\\n';\n          table += row;\n        }\n\n        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' + '   Previous render            Next render\\n' + '   ------------------------------------------------------\\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n', componentName, table);\n      }\n    }\n  }\n}\n\nfunction throwInvalidHookError() {\n  throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n}\n\nfunction areHookInputsEqual(nextDeps, prevDeps) {\n  {\n    if (ignorePreviousDependencies) {\n      // Only true when this component is being hot reloaded.\n      return false;\n    }\n  }\n\n  if (prevDeps === null) {\n    {\n      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);\n    }\n\n    return false;\n  }\n\n  {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\\n\\n' + 'Previous: %s\\n' + 'Incoming: %s', currentHookNameInDev, \"[\" + prevDeps.join(', ') + \"]\", \"[\" + nextDeps.join(', ') + \"]\");\n    }\n  }\n\n  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (objectIs(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber$1 = workInProgress;\n\n  {\n    hookTypesDev = current !== null ? current._debugHookTypes : null;\n    hookTypesUpdateIndexDev = -1; // Used for hot reloading:\n\n    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\n  }\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes; // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n  // didScheduleRenderPhaseUpdate = false;\n  // localIdCounter = 0;\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n\n  {\n    if (current !== null && current.memoizedState !== null) {\n      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;\n    } else if (hookTypesDev !== null) {\n      // This dispatcher handles an edge case where a component is updating,\n      // but no stateful hooks have been used.\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n      // This dispatcher does that.\n      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;\n    } else {\n      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n    }\n  }\n\n  var children = Component(props, secondArg); // Check if there was a render phase update\n\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering in a loop for as long as render phase updates continue to\n    // be scheduled. Use a counter to prevent infinite loops.\n    var numberOfReRenders = 0;\n\n    do {\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      localIdCounter = 0;\n\n      if (numberOfReRenders >= RE_RENDER_LIMIT) {\n        throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');\n      }\n\n      numberOfReRenders += 1;\n\n      {\n        // Even when hot reloading, allow dependencies to stabilize\n        // after first render to prevent infinite render phase updates.\n        ignorePreviousDependencies = false;\n      } // Start over from the beginning of the list\n\n\n      currentHook = null;\n      workInProgressHook = null;\n      workInProgress.updateQueue = null;\n\n      {\n        // Also validate hook order for cascading updates.\n        hookTypesUpdateIndexDev = -1;\n      }\n\n      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;\n      children = Component(props, secondArg);\n    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  } // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n\n\n  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n\n  {\n    workInProgress._debugHookTypes = hookTypesDev;\n  } // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n\n\n  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;\n  renderLanes = NoLanes;\n  currentlyRenderingFiber$1 = null;\n  currentHook = null;\n  workInProgressHook = null;\n\n  {\n    currentHookNameInDev = null;\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last\n    // render. If this fires, it suggests that we incorrectly reset the static\n    // flags in some other part of the codebase. This has happened before, for\n    // example, in the SuspenseList implementation.\n\n    if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird\n    // and creates false positives. To make this work in legacy mode, we'd\n    // need to mark fibers that commit in an incomplete state, somehow. For\n    // now I'll disable the warning that most of the bugs that would trigger\n    // it are either exclusive to concurrent mode or exist in both.\n    (current.mode & ConcurrentMode) !== NoMode) {\n      error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');\n    }\n  }\n\n  didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook\n  // localIdCounter = 0;\n\n  if (didRenderTooFewHooks) {\n    throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');\n  }\n\n  return children;\n}\nfunction checkDidRenderIdHook() {\n  // This should be called immediately after every renderWithHooks call.\n  // Conceptually, it's part of the return value of renderWithHooks; it's only a\n  // separate function to avoid using an array tuple.\n  var didRenderIdHook = localIdCounter !== 0;\n  localIdCounter = 0;\n  return didRenderIdHook;\n}\nfunction bailoutHooks(current, workInProgress, lanes) {\n  workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the\n  // complete phase (bubbleProperties).\n\n  if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n    workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);\n  } else {\n    workInProgress.flags &= ~(Passive | Update);\n  }\n\n  current.lanes = removeLanes(current.lanes, lanes);\n}\nfunction resetHooksAfterThrow() {\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    var hook = currentlyRenderingFiber$1.memoizedState;\n\n    while (hook !== null) {\n      var queue = hook.queue;\n\n      if (queue !== null) {\n        queue.pending = null;\n      }\n\n      hook = hook.next;\n    }\n\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber$1 = null;\n  currentHook = null;\n  workInProgressHook = null;\n\n  {\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n    currentHookNameInDev = null;\n    isUpdatingOpaqueValueInRenderPhase = false;\n  }\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n  localIdCounter = 0;\n}\n\nfunction mountWorkInProgressHook() {\n  var hook = {\n    memoizedState: null,\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n    next: null\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook() {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  var nextCurrentHook;\n\n  if (currentHook === null) {\n    var current = currentlyRenderingFiber$1.alternate;\n\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  var nextWorkInProgressHook;\n\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n    if (nextCurrentHook === null) {\n      throw new Error('Rendered more hooks than during the previous render.');\n    }\n\n    currentHook = nextCurrentHook;\n    var newHook = {\n      memoizedState: currentHook.memoizedState,\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n      next: null\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n\n  return workInProgressHook;\n}\n\nfunction createFunctionComponentUpdateQueue() {\n  return {\n    lastEffect: null,\n    stores: null\n  };\n}\n\nfunction basicStateReducer(state, action) {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer(reducer, initialArg, init) {\n  var hook = mountWorkInProgressHook();\n  var initialState;\n\n  if (init !== undefined) {\n    initialState = init(initialArg);\n  } else {\n    initialState = initialArg;\n  }\n\n  hook.memoizedState = hook.baseState = initialState;\n  var queue = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: initialState\n  };\n  hook.queue = queue;\n  var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer(reducer, initialArg, init) {\n  var hook = updateWorkInProgressHook();\n  var queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n  }\n\n  queue.lastRenderedReducer = reducer;\n  var current = currentHook; // The last rebase update that is NOT part of the base state.\n\n  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.\n\n  var pendingQueue = queue.pending;\n\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      var baseFirst = baseQueue.next;\n      var pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n\n    {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');\n      }\n    }\n\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    var first = baseQueue.next;\n    var newState = current.baseState;\n    var newBaseState = null;\n    var newBaseQueueFirst = null;\n    var newBaseQueueLast = null;\n    var update = first;\n\n    do {\n      var updateLane = update.lane;\n\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        var clone = {\n          lane: updateLane,\n          action: update.action,\n          hasEagerState: update.hasEagerState,\n          eagerState: update.eagerState,\n          next: null\n        };\n\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        } // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n\n\n        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n        if (newBaseQueueLast !== null) {\n          var _clone = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            hasEagerState: update.hasEagerState,\n            eagerState: update.eagerState,\n            next: null\n          };\n          newBaseQueueLast = newBaseQueueLast.next = _clone;\n        } // Process this update.\n\n\n        if (update.hasEagerState) {\n          // If this update is a state update (not a reducer) and was processed eagerly,\n          // we can use the eagerly computed state\n          newState = update.eagerState;\n        } else {\n          var action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = newBaseQueueFirst;\n    } // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n\n\n    if (!objectIs(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n    queue.lastRenderedState = newState;\n  } // Interleaved updates are stored on a separate queue. We aren't going to\n  // process them during this render, but we do need to track which lanes\n  // are remaining.\n\n\n  var lastInterleaved = queue.interleaved;\n\n  if (lastInterleaved !== null) {\n    var interleaved = lastInterleaved;\n\n    do {\n      var interleavedLane = interleaved.lane;\n      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);\n      markSkippedUpdateLanes(interleavedLane);\n      interleaved = interleaved.next;\n    } while (interleaved !== lastInterleaved);\n  } else if (baseQueue === null) {\n    // `queue.lanes` is used for entangling transitions. We can set it back to\n    // zero once the queue is empty.\n    queue.lanes = NoLanes;\n  }\n\n  var dispatch = queue.dispatch;\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer(reducer, initialArg, init) {\n  var hook = updateWorkInProgressHook();\n  var queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n  }\n\n  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n\n  var dispatch = queue.dispatch;\n  var lastRenderPhaseUpdate = queue.pending;\n  var newState = hook.memoizedState;\n\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    var update = firstRenderPhaseUpdate;\n\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      var action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n\n\n    if (!objectIs(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n\n  return [newState, dispatch];\n}\n\nfunction mountMutableSource(source, getSnapshot, subscribe) {\n  {\n    return undefined;\n  }\n}\n\nfunction updateMutableSource(source, getSnapshot, subscribe) {\n  {\n    return undefined;\n  }\n}\n\nfunction mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  var fiber = currentlyRenderingFiber$1;\n  var hook = mountWorkInProgressHook();\n  var nextSnapshot;\n  var isHydrating = getIsHydrating();\n\n  if (isHydrating) {\n    if (getServerSnapshot === undefined) {\n      throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');\n    }\n\n    nextSnapshot = getServerSnapshot();\n\n    {\n      if (!didWarnUncachedGetSnapshot) {\n        if (nextSnapshot !== getServerSnapshot()) {\n          error('The result of getServerSnapshot should be cached to avoid an infinite loop');\n\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    }\n  } else {\n    nextSnapshot = getSnapshot();\n\n    {\n      if (!didWarnUncachedGetSnapshot) {\n        var cachedSnapshot = getSnapshot();\n\n        if (!objectIs(nextSnapshot, cachedSnapshot)) {\n          error('The result of getSnapshot should be cached to avoid an infinite loop');\n\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    } // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n    //\n    // We won't do this if we're hydrating server-rendered content, because if\n    // the content is stale, it's already visible anyway. Instead we'll patch\n    // it up in a passive effect.\n\n\n    var root = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  } // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n\n\n  hook.memoizedState = nextSnapshot;\n  var inst = {\n    value: nextSnapshot,\n    getSnapshot: getSnapshot\n  };\n  hook.queue = inst; // Schedule an effect to subscribe to the store.\n\n  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update\n  // this whenever subscribe, getSnapshot, or value changes. Because there's no\n  // clean-up function, and we track the deps correctly, we can call pushEffect\n  // directly, without storing any additional state. For the same reason, we\n  // don't need to set a static flag, either.\n  // TODO: We can move this to the passive phase once we add a pre-commit\n  // consistency check. See the next comment.\n\n  fiber.flags |= Passive;\n  pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);\n  return nextSnapshot;\n}\n\nfunction updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  var fiber = currentlyRenderingFiber$1;\n  var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n\n  var nextSnapshot = getSnapshot();\n\n  {\n    if (!didWarnUncachedGetSnapshot) {\n      var cachedSnapshot = getSnapshot();\n\n      if (!objectIs(nextSnapshot, cachedSnapshot)) {\n        error('The result of getSnapshot should be cached to avoid an infinite loop');\n\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n\n  var prevSnapshot = hook.memoizedState;\n  var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);\n\n  if (snapshotChanged) {\n    hook.memoizedState = nextSnapshot;\n    markWorkInProgressReceivedUpdate();\n  }\n\n  var inst = hook.queue;\n  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the\n  // commit phase if there was an interleaved mutation. In concurrent mode\n  // this can happen all the time, but even in synchronous mode, an earlier\n  // effect may have mutated the store.\n\n  if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by\n  // checking whether we scheduled a subscription effect above.\n  workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {\n    fiber.flags |= Passive;\n    pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n\n    var root = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  }\n\n  return nextSnapshot;\n}\n\nfunction pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n  fiber.flags |= StoreConsistency;\n  var check = {\n    getSnapshot: getSnapshot,\n    value: renderedSnapshot\n  };\n  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n    componentUpdateQueue.stores = [check];\n  } else {\n    var stores = componentUpdateQueue.stores;\n\n    if (stores === null) {\n      componentUpdateQueue.stores = [check];\n    } else {\n      stores.push(check);\n    }\n  }\n}\n\nfunction updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n  // These are updated in the passive phase\n  inst.value = nextSnapshot;\n  inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could\n  // have been in an event that fired before the passive effects, or it could\n  // have been in a layout effect. In that case, we would have used the old\n  // snapsho and getSnapshot values to bail out. We need to check one more time.\n\n  if (checkIfSnapshotChanged(inst)) {\n    // Force a re-render.\n    forceStoreRerender(fiber);\n  }\n}\n\nfunction subscribeToStore(fiber, inst, subscribe) {\n  var handleStoreChange = function () {\n    // The store changed. Check if the snapshot changed since the last time we\n    // read from the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceStoreRerender(fiber);\n    }\n  }; // Subscribe to the store and return a clean-up function.\n\n\n  return subscribe(handleStoreChange);\n}\n\nfunction checkIfSnapshotChanged(inst) {\n  var latestGetSnapshot = inst.getSnapshot;\n  var prevValue = inst.value;\n\n  try {\n    var nextValue = latestGetSnapshot();\n    return !objectIs(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\nfunction forceStoreRerender(fiber) {\n  var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n  }\n}\n\nfunction mountState(initialState) {\n  var hook = mountWorkInProgressHook();\n\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n\n  hook.memoizedState = hook.baseState = initialState;\n  var queue = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: initialState\n  };\n  hook.queue = queue;\n  var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState(initialState) {\n  return updateReducer(basicStateReducer);\n}\n\nfunction rerenderState(initialState) {\n  return rerenderReducer(basicStateReducer);\n}\n\nfunction pushEffect(tag, create, destroy, deps) {\n  var effect = {\n    tag: tag,\n    create: create,\n    destroy: destroy,\n    deps: deps,\n    // Circular\n    next: null\n  };\n  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    var lastEffect = componentUpdateQueue.lastEffect;\n\n    if (lastEffect === null) {\n      componentUpdateQueue.lastEffect = effect.next = effect;\n    } else {\n      var firstEffect = lastEffect.next;\n      lastEffect.next = effect;\n      effect.next = firstEffect;\n      componentUpdateQueue.lastEffect = effect;\n    }\n  }\n\n  return effect;\n}\n\nfunction mountRef(initialValue) {\n  var hook = mountWorkInProgressHook();\n\n  {\n    var _ref2 = {\n      current: initialValue\n    };\n    hook.memoizedState = _ref2;\n    return _ref2;\n  }\n}\n\nfunction updateRef(initialValue) {\n  var hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n  var hook = mountWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber$1.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);\n}\n\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n  var hook = updateWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var destroy = undefined;\n\n  if (currentHook !== null) {\n    var prevEffect = currentHook.memoizedState;\n    destroy = prevEffect.destroy;\n\n    if (nextDeps !== null) {\n      var prevDeps = prevEffect.deps;\n\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber$1.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);\n}\n\nfunction mountEffect(create, deps) {\n  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n    return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);\n  } else {\n    return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);\n  }\n}\n\nfunction updateEffect(create, deps) {\n  return updateEffectImpl(Passive, Passive$1, create, deps);\n}\n\nfunction mountInsertionEffect(create, deps) {\n  return mountEffectImpl(Update, Insertion, create, deps);\n}\n\nfunction updateInsertionEffect(create, deps) {\n  return updateEffectImpl(Update, Insertion, create, deps);\n}\n\nfunction mountLayoutEffect(create, deps) {\n  var fiberFlags = Update;\n\n  {\n    fiberFlags |= LayoutStatic;\n  }\n\n  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n    fiberFlags |= MountLayoutDev;\n  }\n\n  return mountEffectImpl(fiberFlags, Layout, create, deps);\n}\n\nfunction updateLayoutEffect(create, deps) {\n  return updateEffectImpl(Update, Layout, create, deps);\n}\n\nfunction imperativeHandleEffect(create, ref) {\n  if (typeof ref === 'function') {\n    var refCallback = ref;\n\n    var _inst = create();\n\n    refCallback(_inst);\n    return function () {\n      refCallback(null);\n    };\n  } else if (ref !== null && ref !== undefined) {\n    var refObject = ref;\n\n    {\n      if (!refObject.hasOwnProperty('current')) {\n        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');\n      }\n    }\n\n    var _inst2 = create();\n\n    refObject.current = _inst2;\n    return function () {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle(ref, create, deps) {\n  {\n    if (typeof create !== 'function') {\n      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n    }\n  } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n\n  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n  var fiberFlags = Update;\n\n  {\n    fiberFlags |= LayoutStatic;\n  }\n\n  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n    fiberFlags |= MountLayoutDev;\n  }\n\n  return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n}\n\nfunction updateImperativeHandle(ref, create, deps) {\n  {\n    if (typeof create !== 'function') {\n      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n    }\n  } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n\n  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n}\n\nfunction mountDebugValue(value, formatterFn) {// This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nvar updateDebugValue = mountDebugValue;\n\nfunction mountCallback(callback, deps) {\n  var hook = mountWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback(callback, deps) {\n  var hook = updateWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var prevState = hook.memoizedState;\n\n  if (prevState !== null) {\n    if (nextDeps !== null) {\n      var prevDeps = prevState[1];\n\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo(nextCreate, deps) {\n  var hook = mountWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo(nextCreate, deps) {\n  var hook = updateWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var prevState = hook.memoizedState;\n\n  if (prevState !== null) {\n    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n    if (nextDeps !== null) {\n      var prevDeps = prevState[1];\n\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n\n  var nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue(value) {\n  var hook = mountWorkInProgressHook();\n  hook.memoizedState = value;\n  return value;\n}\n\nfunction updateDeferredValue(value) {\n  var hook = updateWorkInProgressHook();\n  var resolvedCurrentHook = currentHook;\n  var prevValue = resolvedCurrentHook.memoizedState;\n  return updateDeferredValueImpl(hook, prevValue, value);\n}\n\nfunction rerenderDeferredValue(value) {\n  var hook = updateWorkInProgressHook();\n\n  if (currentHook === null) {\n    // This is a rerender during a mount.\n    hook.memoizedState = value;\n    return value;\n  } else {\n    // This is a rerender during an update.\n    var prevValue = currentHook.memoizedState;\n    return updateDeferredValueImpl(hook, prevValue, value);\n  }\n}\n\nfunction updateDeferredValueImpl(hook, prevValue, value) {\n  var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\n\n  if (shouldDeferValue) {\n    // This is an urgent update. If the value has changed, keep using the\n    // previous value and spawn a deferred render to update it later.\n    if (!objectIs(value, prevValue)) {\n      // Schedule a deferred render\n      var deferredLane = claimNextTransitionLane();\n      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);\n      markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent\n      // from the latest value. The name \"baseState\" doesn't really match how we\n      // use it because we're reusing a state hook field instead of creating a\n      // new one.\n\n      hook.baseState = true;\n    } // Reuse the previous value\n\n\n    return prevValue;\n  } else {\n    // This is not an urgent update, so we can use the latest value regardless\n    // of what it is. No need to defer it.\n    // However, if we're currently inside a spawned render, then we need to mark\n    // this as an update to prevent the fiber from bailing out.\n    //\n    // `baseState` is true when the current value is different from the rendered\n    // value. The name doesn't really match how we use it because we're reusing\n    // a state hook field instead of creating a new one.\n    if (hook.baseState) {\n      // Flip this back to false.\n      hook.baseState = false;\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = value;\n    return value;\n  }\n}\n\nfunction startTransition(setPending, callback, options) {\n  var previousPriority = getCurrentUpdatePriority();\n  setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));\n  setPending(true);\n  var prevTransition = ReactCurrentBatchConfig$2.transition;\n  ReactCurrentBatchConfig$2.transition = {};\n  var currentTransition = ReactCurrentBatchConfig$2.transition;\n\n  {\n    ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();\n  }\n\n  try {\n    setPending(false);\n    callback();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n\n    {\n      if (prevTransition === null && currentTransition._updatedFibers) {\n        var updatedFibersCount = currentTransition._updatedFibers.size;\n\n        if (updatedFibersCount > 10) {\n          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n        }\n\n        currentTransition._updatedFibers.clear();\n      }\n    }\n  }\n}\n\nfunction mountTransition() {\n  var _mountState = mountState(false),\n      isPending = _mountState[0],\n      setPending = _mountState[1]; // The `start` method never changes.\n\n\n  var start = startTransition.bind(null, setPending);\n  var hook = mountWorkInProgressHook();\n  hook.memoizedState = start;\n  return [isPending, start];\n}\n\nfunction updateTransition() {\n  var _updateState = updateState(),\n      isPending = _updateState[0];\n\n  var hook = updateWorkInProgressHook();\n  var start = hook.memoizedState;\n  return [isPending, start];\n}\n\nfunction rerenderTransition() {\n  var _rerenderState = rerenderState(),\n      isPending = _rerenderState[0];\n\n  var hook = updateWorkInProgressHook();\n  var start = hook.memoizedState;\n  return [isPending, start];\n}\n\nvar isUpdatingOpaqueValueInRenderPhase = false;\nfunction getIsUpdatingOpaqueValueInRenderPhaseInDEV() {\n  {\n    return isUpdatingOpaqueValueInRenderPhase;\n  }\n}\n\nfunction mountId() {\n  var hook = mountWorkInProgressHook();\n  var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we\n  // should do this in Fiber, too? Deferring this decision for now because\n  // there's no other place to store the prefix except for an internal field on\n  // the public createRoot object, which the fiber tree does not currently have\n  // a reference to.\n\n  var identifierPrefix = root.identifierPrefix;\n  var id;\n\n  if (getIsHydrating()) {\n    var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.\n\n    id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end\n    // that represents the position of this useId hook among all the useId\n    // hooks for this fiber.\n\n    var localId = localIdCounter++;\n\n    if (localId > 0) {\n      id += 'H' + localId.toString(32);\n    }\n\n    id += ':';\n  } else {\n    // Use a lowercase r prefix for client-generated ids.\n    var globalClientId = globalClientIdCounter++;\n    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\n  }\n\n  hook.memoizedState = id;\n  return id;\n}\n\nfunction updateId() {\n  var hook = updateWorkInProgressHook();\n  var id = hook.memoizedState;\n  return id;\n}\n\nfunction dispatchReducerAction(fiber, queue, action) {\n  {\n    if (typeof arguments[3] === 'function') {\n      error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n    }\n  }\n\n  var lane = requestUpdateLane(fiber);\n  var update = {\n    lane: lane,\n    action: action,\n    hasEagerState: false,\n    eagerState: null,\n    next: null\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n\n    if (root !== null) {\n      var eventTime = requestEventTime();\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane);\n}\n\nfunction dispatchSetState(fiber, queue, action) {\n  {\n    if (typeof arguments[3] === 'function') {\n      error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n    }\n  }\n\n  var lane = requestUpdateLane(fiber);\n  var update = {\n    lane: lane,\n    action: action,\n    hasEagerState: false,\n    eagerState: null,\n    next: null\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    var alternate = fiber.alternate;\n\n    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      var lastRenderedReducer = queue.lastRenderedReducer;\n\n      if (lastRenderedReducer !== null) {\n        var prevDispatcher;\n\n        {\n          prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n\n        try {\n          var currentState = queue.lastRenderedState;\n          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n\n          update.hasEagerState = true;\n          update.eagerState = eagerState;\n\n          if (objectIs(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            // TODO: Do we still need to entangle transitions in this case?\n            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);\n            return;\n          }\n        } catch (error) {// Suppress the error. It will throw again in the render phase.\n        } finally {\n          {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        }\n      }\n    }\n\n    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n\n    if (root !== null) {\n      var eventTime = requestEventTime();\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane);\n}\n\nfunction isRenderPhaseUpdate(fiber) {\n  var alternate = fiber.alternate;\n  return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;\n}\n\nfunction enqueueRenderPhaseUpdate(queue, update) {\n  // This is a render phase update. Stash it in a lazily-created map of\n  // queue -> linked list of updates. After this render pass, we'll restart\n  // and apply the stashed updates on top of the work-in-progress hook.\n  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n  var pending = queue.pending;\n\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n\n  queue.pending = update;\n} // TODO: Move to ReactFiberConcurrentUpdates?\n\n\nfunction entangleTransitionUpdate(root, queue, lane) {\n  if (isTransitionLane(lane)) {\n    var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they\n    // must have finished. We can remove them from the shared queue, which\n    // represents a superset of the actually pending lanes. In some cases we\n    // may entangle more than we need to, but that's OK. In fact it's worse if\n    // we *don't* entangle when we should.\n\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n    var newQueueLanes = mergeLanes(queueLanes, lane);\n    queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nfunction markUpdateInDevTools(fiber, lane, action) {\n\n  {\n    markStateUpdateScheduled(fiber, lane);\n  }\n}\n\nvar ContextOnlyDispatcher = {\n  readContext: readContext,\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useInsertionEffect: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useMutableSource: throwInvalidHookError,\n  useSyncExternalStore: throwInvalidHookError,\n  useId: throwInvalidHookError,\n  unstable_isNewReconciler: enableNewReconciler\n};\n\nvar HooksDispatcherOnMountInDEV = null;\nvar HooksDispatcherOnMountWithHookTypesInDEV = null;\nvar HooksDispatcherOnUpdateInDEV = null;\nvar HooksDispatcherOnRerenderInDEV = null;\nvar InvalidNestedHooksDispatcherOnMountInDEV = null;\nvar InvalidNestedHooksDispatcherOnUpdateInDEV = null;\nvar InvalidNestedHooksDispatcherOnRerenderInDEV = null;\n\n{\n  var warnInvalidContextAccess = function () {\n    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n  };\n\n  var warnInvalidHookAccess = function () {\n    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');\n  };\n\n  HooksDispatcherOnMountInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      mountHookTypesDev();\n      return mountDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      mountHookTypesDev();\n      return mountMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      mountHookTypesDev();\n      return mountId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  HooksDispatcherOnMountWithHookTypesInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return mountDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return mountMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return mountId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  HooksDispatcherOnUpdateInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  HooksDispatcherOnRerenderInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  InvalidNestedHooksDispatcherOnMountInDEV = {\n    readContext: function (context) {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n    readContext: function (context) {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n    readContext: function (context) {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n}\n\nvar now$1 = Scheduler.unstable_now;\nvar commitTime = 0;\nvar layoutEffectStartTime = -1;\nvar profilerStartTime = -1;\nvar passiveEffectStartTime = -1;\n/**\n * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n *\n * The overall sequence is:\n *   1. render\n *   2. commit (and call `onRender`, `onCommit`)\n *   3. check for nested updates\n *   4. flush passive effects (and call `onPostCommit`)\n *\n * Nested updates are identified in step 3 above,\n * but step 4 still applies to the work that was just committed.\n * We use two flags to track nested updates then:\n * one tracks whether the upcoming update is a nested update,\n * and the other tracks whether the current update was a nested update.\n * The first value gets synced to the second at the start of the render phase.\n */\n\nvar currentUpdateIsNested = false;\nvar nestedUpdateScheduled = false;\n\nfunction isCurrentUpdateNested() {\n  return currentUpdateIsNested;\n}\n\nfunction markNestedUpdateScheduled() {\n  {\n    nestedUpdateScheduled = true;\n  }\n}\n\nfunction resetNestedUpdateFlag() {\n  {\n    currentUpdateIsNested = false;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction syncNestedUpdateFlag() {\n  {\n    currentUpdateIsNested = nestedUpdateScheduled;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction getCommitTime() {\n  return commitTime;\n}\n\nfunction recordCommitTime() {\n\n  commitTime = now$1();\n}\n\nfunction startProfilerTimer(fiber) {\n\n  profilerStartTime = now$1();\n\n  if (fiber.actualStartTime < 0) {\n    fiber.actualStartTime = now$1();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber) {\n\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n\n  if (profilerStartTime >= 0) {\n    var elapsedTime = now$1() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n\n    profilerStartTime = -1;\n  }\n}\n\nfunction recordLayoutEffectDuration(fiber) {\n\n  if (layoutEffectStartTime >= 0) {\n    var elapsedTime = now$1() - layoutEffectStartTime;\n    layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n\n    var parentFiber = fiber.return;\n\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          var root = parentFiber.stateNode;\n          root.effectDuration += elapsedTime;\n          return;\n\n        case Profiler:\n          var parentStateNode = parentFiber.stateNode;\n          parentStateNode.effectDuration += elapsedTime;\n          return;\n      }\n\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction recordPassiveEffectDuration(fiber) {\n\n  if (passiveEffectStartTime >= 0) {\n    var elapsedTime = now$1() - passiveEffectStartTime;\n    passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n\n    var parentFiber = fiber.return;\n\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          var root = parentFiber.stateNode;\n\n          if (root !== null) {\n            root.passiveEffectDuration += elapsedTime;\n          }\n\n          return;\n\n        case Profiler:\n          var parentStateNode = parentFiber.stateNode;\n\n          if (parentStateNode !== null) {\n            // Detached fibers have their state node cleared out.\n            // In this case, the return pointer is also cleared out,\n            // so we won't be able to report the time spent in this Profiler's subtree.\n            parentStateNode.passiveEffectDuration += elapsedTime;\n          }\n\n          return;\n      }\n\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction startLayoutEffectTimer() {\n\n  layoutEffectStartTime = now$1();\n}\n\nfunction startPassiveEffectTimer() {\n\n  passiveEffectStartTime = now$1();\n}\n\nfunction transferActualDuration(fiber) {\n  // Transfer time spent rendering these children so we don't lose it\n  // after we rerender. This is used as a helper in special cases\n  // where we should count the work of multiple passes.\n  var child = fiber.child;\n\n  while (child) {\n    fiber.actualDuration += child.actualDuration;\n    child = child.sibling;\n  }\n}\n\nfunction resolveDefaultProps(Component, baseProps) {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    var props = assign({}, baseProps);\n    var defaultProps = Component.defaultProps;\n\n    for (var propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n\n    return props;\n  }\n\n  return baseProps;\n}\n\nvar fakeInternalInstance = {};\nvar didWarnAboutStateAssignmentForComponent;\nvar didWarnAboutUninitializedState;\nvar didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nvar didWarnAboutLegacyLifecyclesAndDerivedState;\nvar didWarnAboutUndefinedDerivedState;\nvar warnOnUndefinedDerivedState;\nvar warnOnInvalidCallback;\nvar didWarnAboutDirectlyAssigningPropsToState;\nvar didWarnAboutContextTypeAndContextTypes;\nvar didWarnAboutInvalidateContextType;\nvar didWarnAboutLegacyContext$1;\n\n{\n  didWarnAboutStateAssignmentForComponent = new Set();\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n  didWarnAboutLegacyContext$1 = new Set();\n  var didWarnOnInvalidCallback = new Set();\n\n  warnOnInvalidCallback = function (callback, callerName) {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    }\n\n    var key = callerName + '_' + callback;\n\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n\n      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);\n    }\n  };\n\n  warnOnUndefinedDerivedState = function (type, partialState) {\n    if (partialState === undefined) {\n      var componentName = getComponentNameFromType(type) || 'Component';\n\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n\n        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);\n      }\n    }\n  }; // This is so gross but it's at least non-critical and can be removed if\n  // it causes problems. This is meant to give a nicer error message for\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n  // exception.\n\n\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n    enumerable: false,\n    value: function () {\n      throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');\n    }\n  });\n  Object.freeze(fakeInternalInstance);\n}\n\nfunction applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {\n  var prevState = workInProgress.memoizedState;\n  var partialState = getDerivedStateFromProps(nextProps, prevState);\n\n  {\n    if ( workInProgress.mode & StrictLegacyMode) {\n      setIsStrictModeForDevtools(true);\n\n      try {\n        // Invoke the function an extra time to help detect side-effects.\n        partialState = getDerivedStateFromProps(nextProps, prevState);\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n\n    warnOnUndefinedDerivedState(ctor, partialState);\n  } // Merge the partial state and the previous state.\n\n\n  var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the\n  // base state.\n\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    var updateQueue = workInProgress.updateQueue;\n    updateQueue.baseState = memoizedState;\n  }\n}\n\nvar classComponentUpdater = {\n  isMounted: isMounted,\n  enqueueSetState: function (inst, payload, callback) {\n    var fiber = get(inst);\n    var eventTime = requestEventTime();\n    var lane = requestUpdateLane(fiber);\n    var update = createUpdate(eventTime, lane);\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n\n      update.callback = callback;\n    }\n\n    var root = enqueueUpdate(fiber, update, lane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueReplaceState: function (inst, payload, callback) {\n    var fiber = get(inst);\n    var eventTime = requestEventTime();\n    var lane = requestUpdateLane(fiber);\n    var update = createUpdate(eventTime, lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n\n      update.callback = callback;\n    }\n\n    var root = enqueueUpdate(fiber, update, lane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueForceUpdate: function (inst, callback) {\n    var fiber = get(inst);\n    var eventTime = requestEventTime();\n    var lane = requestUpdateLane(fiber);\n    var update = createUpdate(eventTime, lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n      {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n\n      update.callback = callback;\n    }\n\n    var root = enqueueUpdate(fiber, update, lane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    {\n      markForceUpdateScheduled(fiber, lane);\n    }\n  }\n};\n\nfunction checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\n  var instance = workInProgress.stateNode;\n\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n\n    {\n      if ( workInProgress.mode & StrictLegacyMode) {\n        setIsStrictModeForDevtools(true);\n\n        try {\n          // Invoke the function an extra time to help detect side-effects.\n          shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n\n      if (shouldUpdate === undefined) {\n        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');\n      }\n    }\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n  }\n\n  return true;\n}\n\nfunction checkClassInstance(workInProgress, ctor, newProps) {\n  var instance = workInProgress.stateNode;\n\n  {\n    var name = getComponentNameFromType(ctor) || 'Component';\n    var renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);\n      } else {\n        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);\n      }\n    }\n\n    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);\n    }\n\n    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);\n    }\n\n    if (instance.propTypes) {\n      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);\n    }\n\n    if (instance.contextType) {\n      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);\n    }\n\n    {\n      if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip\n      // this one.\n      (workInProgress.mode & StrictLegacyMode) === NoMode) {\n        didWarnAboutLegacyContext$1.add(ctor);\n\n        error('%s uses the legacy childContextTypes API which is no longer ' + 'supported and will be removed in the next major release. Use ' + 'React.createContext() instead\\n\\n.' + 'Learn more about this warning here: https://reactjs.org/link/legacy-context', name);\n      }\n\n      if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip\n      // this one.\n      (workInProgress.mode & StrictLegacyMode) === NoMode) {\n        didWarnAboutLegacyContext$1.add(ctor);\n\n        error('%s uses the legacy contextTypes API which is no longer supported ' + 'and will be removed in the next major release. Use ' + 'React.createContext() with static contextType instead.\\n\\n' + 'Learn more about this warning here: https://reactjs.org/link/legacy-context', name);\n      }\n\n      if (instance.contextTypes) {\n        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);\n      }\n\n      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n\n        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);\n    }\n\n    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {\n      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');\n    }\n\n    if (typeof instance.componentDidUnmount === 'function') {\n      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);\n    }\n\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);\n    }\n\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);\n    }\n\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);\n    }\n\n    var hasMutatedProps = instance.props !== newProps;\n\n    if (instance.props !== undefined && hasMutatedProps) {\n      error('%s(...): When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", name, name);\n    }\n\n    if (instance.defaultProps) {\n      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n\n      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n    }\n\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n    }\n\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);\n    }\n\n    var _state = instance.state;\n\n    if (_state && (typeof _state !== 'object' || isArray(_state))) {\n      error('%s.state: must be set to an object or null', name);\n    }\n\n    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {\n      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);\n    }\n  }\n}\n\nfunction adoptClassInstance(workInProgress, instance) {\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates\n\n  set(instance, workInProgress);\n\n  {\n    instance._reactInternalInstance = fakeInternalInstance;\n  }\n}\n\nfunction constructClassInstance(workInProgress, ctor, props) {\n  var isLegacyContextConsumer = false;\n  var unmaskedContext = emptyContextObject;\n  var context = emptyContextObject;\n  var contextType = ctor.contextType;\n\n  {\n    if ('contextType' in ctor) {\n      var isValid = // Allow null for conditional declaration\n      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n        var addendum = '';\n\n        if (contextType === undefined) {\n          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Provider instead?';\n        } else if (contextType._context !== undefined) {\n          // <Context.Consumer>\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';\n        }\n\n        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext(contextType);\n  } else {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    var contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;\n  }\n\n  var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.\n\n  {\n    if ( workInProgress.mode & StrictLegacyMode) {\n      setIsStrictModeForDevtools(true);\n\n      try {\n        instance = new ctor(props, context); // eslint-disable-line no-new\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n  }\n\n  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;\n  adoptClassInstance(workInProgress, instance);\n\n  {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n      var componentName = getComponentNameFromType(ctor) || 'Component';\n\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n\n        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);\n      }\n    } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n\n\n    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {\n      var foundWillMountName = null;\n      var foundWillReceivePropsName = null;\n      var foundWillUpdateName = null;\n\n      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n\n      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n\n      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n\n      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n        var _componentName = getComponentNameFromType(ctor) || 'Component';\n\n        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n\n          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' + 'The above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : '', foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : '', foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : '');\n        }\n      }\n    }\n  } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n\n\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress, instance) {\n  var oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    {\n      error('%s.componentWillMount(): Assigning directly to this.state is ' + \"deprecated (except inside a component's \" + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');\n    }\n\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {\n  var oldState = instance.state;\n\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n    {\n      var componentName = getComponentNameFromFiber(workInProgress) || 'Component';\n\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n        didWarnAboutStateAssignmentForComponent.add(componentName);\n\n        error('%s.componentWillReceiveProps(): Assigning directly to ' + \"this.state is deprecated (except inside a component's \" + 'constructor). Use setState instead.', componentName);\n      }\n    }\n\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n} // Invokes the mount life-cycles on a previously never rendered instance.\n\n\nfunction mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n  {\n    checkClassInstance(workInProgress, ctor, newProps);\n  }\n\n  var instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = {};\n  initializeUpdateQueue(workInProgress);\n  var contextType = ctor.contextType;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else {\n    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  {\n    if (instance.state === newProps) {\n      var componentName = getComponentNameFromType(ctor) || 'Component';\n\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n\n        error('%s: It is not recommended to assign props directly to state ' + \"because updates to props won't be reflected in state. \" + 'In most cases, it is better to use props directly.', componentName);\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);\n    }\n\n    {\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);\n    }\n  }\n\n  instance.state = workInProgress.memoizedState;\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    instance.state = workInProgress.memoizedState;\n  } // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n\n  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's\n    // process them now.\n\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    var fiberFlags = Update;\n\n    {\n      fiberFlags |= LayoutStatic;\n    }\n\n    if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n      fiberFlags |= MountLayoutDev;\n    }\n\n    workInProgress.flags |= fiberFlags;\n  }\n}\n\nfunction resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n  var instance = workInProgress.stateNode;\n  var oldProps = workInProgress.memoizedProps;\n  instance.props = oldProps;\n  var oldContext = instance.context;\n  var contextType = ctor.contextType;\n  var nextContext = emptyContextObject;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else {\n    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n    if (oldProps !== newProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n  var oldState = workInProgress.memoizedState;\n  var newState = instance.state = oldState;\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      var fiberFlags = Update;\n\n      {\n        fiberFlags |= LayoutStatic;\n      }\n\n      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        fiberFlags |= MountLayoutDev;\n      }\n\n      workInProgress.flags |= fiberFlags;\n    }\n\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    newState = workInProgress.memoizedState;\n  }\n\n  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n\n    if (typeof instance.componentDidMount === 'function') {\n      var _fiberFlags = Update;\n\n      {\n        _fiberFlags |= LayoutStatic;\n      }\n\n      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        _fiberFlags |= MountLayoutDev;\n      }\n\n      workInProgress.flags |= _fiberFlags;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      var _fiberFlags2 = Update;\n\n      {\n        _fiberFlags2 |= LayoutStatic;\n      }\n\n      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        _fiberFlags2 |= MountLayoutDev;\n      }\n\n      workInProgress.flags |= _fiberFlags2;\n    } // If shouldComponentUpdate returned false, we should still update the\n    // memoized state to indicate that this work can be reused.\n\n\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  } // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n\n\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n  return shouldUpdate;\n} // Invokes the update life-cycles and returns false if it shouldn't rerender.\n\n\nfunction updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {\n  var instance = workInProgress.stateNode;\n  cloneUpdateQueue(current, workInProgress);\n  var unresolvedOldProps = workInProgress.memoizedProps;\n  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n  instance.props = oldProps;\n  var unresolvedNewProps = workInProgress.pendingProps;\n  var oldContext = instance.context;\n  var contextType = ctor.contextType;\n  var nextContext = emptyContextObject;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else {\n    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n  var oldState = workInProgress.memoizedState;\n  var newState = instance.state = oldState;\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !(enableLazyContextPropagation   )) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Update;\n      }\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    newState = workInProgress.memoizedState;\n  }\n\n  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,\n  // both before and after `shouldComponentUpdate` has been called. Not ideal,\n  // but I'm loath to refactor this function. This only happens for memoized\n  // components so it's not that common.\n  enableLazyContextPropagation   ;\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Update;\n      }\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Snapshot;\n      }\n    } // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n\n\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  } // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n\n\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n  return shouldUpdate;\n}\n\nfunction createCapturedValueAtFiber(value, source) {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  return {\n    value: value,\n    source: source,\n    stack: getStackByFiberInDevAndProd(source),\n    digest: null\n  };\n}\nfunction createCapturedValue(value, digest, stack) {\n  return {\n    value: value,\n    source: null,\n    stack: stack != null ? stack : null,\n    digest: digest != null ? digest : null\n  };\n}\n\n// This module is forked in different environments.\n// By default, return `true` to log errors to the console.\n// Forks can return `false` if this isn't desirable.\nfunction showErrorDialog(boundary, errorInfo) {\n  return true;\n}\n\nfunction logCapturedError(boundary, errorInfo) {\n  try {\n    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n\n    if (logError === false) {\n      return;\n    }\n\n    var error = errorInfo.value;\n\n    if (true) {\n      var source = errorInfo.source;\n      var stack = errorInfo.stack;\n      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        } // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n\n\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      var componentName = source ? getComponentNameFromFiber(source) : null;\n      var componentNameMessage = componentName ? \"The above error occurred in the <\" + componentName + \"> component:\" : 'The above error occurred in one of your React components:';\n      var errorBoundaryMessage;\n\n      if (boundary.tag === HostRoot) {\n        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      } else {\n        var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';\n        errorBoundaryMessage = \"React will try to recreate this component tree from scratch \" + (\"using the error boundary you provided, \" + errorBoundaryName + \".\");\n      }\n\n      var combinedMessage = componentNameMessage + \"\\n\" + componentStack + \"\\n\\n\" + (\"\" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {}\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(function () {\n      throw e;\n    });\n  }\n}\n\nvar PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;\n\nfunction createRootErrorUpdate(fiber, errorInfo, lane) {\n  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.\n\n  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n\n  update.payload = {\n    element: null\n  };\n  var error = errorInfo.value;\n\n  update.callback = function () {\n    onUncaughtError(error);\n    logCapturedError(fiber, errorInfo);\n  };\n\n  return update;\n}\n\nfunction createClassErrorUpdate(fiber, errorInfo, lane) {\n  var update = createUpdate(NoTimestamp, lane);\n  update.tag = CaptureUpdate;\n  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n\n  if (typeof getDerivedStateFromError === 'function') {\n    var error$1 = errorInfo.value;\n\n    update.payload = function () {\n      return getDerivedStateFromError(error$1);\n    };\n\n    update.callback = function () {\n      {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n\n      logCapturedError(fiber, errorInfo);\n    };\n  }\n\n  var inst = fiber.stateNode;\n\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    update.callback = function callback() {\n      {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n\n      logCapturedError(fiber, errorInfo);\n\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this);\n      }\n\n      var error$1 = errorInfo.value;\n      var stack = errorInfo.stack;\n      this.componentDidCatch(error$1, {\n        componentStack: stack !== null ? stack : ''\n      });\n\n      {\n        if (typeof getDerivedStateFromError !== 'function') {\n          // If componentDidCatch is the only error boundary method defined,\n          // then it needs to call setState to recover from errors.\n          // If no state update is scheduled then the boundary will swallow the error.\n          if (!includesSomeLane(fiber.lanes, SyncLane)) {\n            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');\n          }\n        }\n      }\n    };\n  }\n\n  return update;\n}\n\nfunction attachPingListener(root, wakeable, lanes) {\n  // Attach a ping listener\n  //\n  // The data might resolve before we have a chance to commit the fallback. Or,\n  // in the case of a refresh, we'll never commit a fallback. So we need to\n  // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n  // try rendering the tree again.\n  //\n  // Only attach a listener if one does not already exist for the lanes\n  // we're currently rendering (which acts like a \"thread ID\" here).\n  //\n  // We only need to do this in concurrent mode. Legacy Suspense always\n  // commits fallbacks synchronously, so there are no pings.\n  var pingCache = root.pingCache;\n  var threadIDs;\n\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap$1();\n    threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n\n  if (!threadIDs.has(lanes)) {\n    // Memoize using the thread ID to prevent redundant listeners.\n    threadIDs.add(lanes);\n    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n\n    {\n      if (isDevToolsPresent) {\n        // If we have pending work still, restore the original updaters\n        restorePendingUpdaters(root, lanes);\n      }\n    }\n\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction attachRetryListener(suspenseBoundary, root, wakeable, lanes) {\n  // Retry listener\n  //\n  // If the fallback does commit, we need to attach a different type of\n  // listener. This one schedules an update on the Suspense boundary to turn\n  // the fallback state off.\n  //\n  // Stash the wakeable on the boundary fiber so we can access it in the\n  // commit phase.\n  //\n  // When the wakeable resolves, we'll attempt to render the boundary\n  // again (\"retry\").\n  var wakeables = suspenseBoundary.updateQueue;\n\n  if (wakeables === null) {\n    var updateQueue = new Set();\n    updateQueue.add(wakeable);\n    suspenseBoundary.updateQueue = updateQueue;\n  } else {\n    wakeables.add(wakeable);\n  }\n}\n\nfunction resetSuspendedComponent(sourceFiber, rootRenderLanes) {\n  // A legacy mode Suspense quirk, only relevant to hook components.\n\n\n  var tag = sourceFiber.tag;\n\n  if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {\n    var currentSource = sourceFiber.alternate;\n\n    if (currentSource) {\n      sourceFiber.updateQueue = currentSource.updateQueue;\n      sourceFiber.memoizedState = currentSource.memoizedState;\n      sourceFiber.lanes = currentSource.lanes;\n    } else {\n      sourceFiber.updateQueue = null;\n      sourceFiber.memoizedState = null;\n    }\n  }\n}\n\nfunction getNearestSuspenseBoundaryToCapture(returnFiber) {\n  var node = returnFiber;\n\n  do {\n    if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {\n      return node;\n    } // This boundary already captured during this render. Continue to the next\n    // boundary.\n\n\n    node = node.return;\n  } while (node !== null);\n\n  return null;\n}\n\nfunction markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {\n  // This marks a Suspense boundary so that when we're unwinding the stack,\n  // it captures the suspended \"exception\" and does a second (fallback) pass.\n  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n    // Legacy Mode Suspense\n    //\n    // If the boundary is in legacy mode, we should *not*\n    // suspend the commit. Pretend as if the suspended component rendered\n    // null and keep rendering. When the Suspense boundary completes,\n    // we'll do a second pass to render the fallback.\n    if (suspenseBoundary === returnFiber) {\n      // Special case where we suspended while reconciling the children of\n      // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n      // when a React.lazy component is a direct child of a\n      // Suspense boundary.\n      //\n      // Suspense boundaries are implemented as multiple fibers, but they\n      // are a single conceptual unit. The legacy mode behavior where we\n      // pretend the suspended fiber committed as `null` won't work,\n      // because in this case the \"suspended\" fiber is the inner\n      // Offscreen wrapper.\n      //\n      // Because the contents of the boundary haven't started rendering\n      // yet (i.e. nothing in the tree has partially rendered) we can\n      // switch to the regular, concurrent mode behavior: mark the\n      // boundary with ShouldCapture and enter the unwind phase.\n      suspenseBoundary.flags |= ShouldCapture;\n    } else {\n      suspenseBoundary.flags |= DidCapture;\n      sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.\n      // But we shouldn't call any lifecycle methods or callbacks. Remove\n      // all lifecycle effect tags.\n\n      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n      if (sourceFiber.tag === ClassComponent) {\n        var currentSourceFiber = sourceFiber.alternate;\n\n        if (currentSourceFiber === null) {\n          // This is a new mount. Change the tag so it's not mistaken for a\n          // completed class component. For example, we should not call\n          // componentWillUnmount if it is deleted.\n          sourceFiber.tag = IncompleteClassComponent;\n        } else {\n          // When we try rendering again, we should not reuse the current fiber,\n          // since it's known to be in an inconsistent state. Use a force update to\n          // prevent a bail out.\n          var update = createUpdate(NoTimestamp, SyncLane);\n          update.tag = ForceUpdate;\n          enqueueUpdate(sourceFiber, update, SyncLane);\n        }\n      } // The source fiber did not complete. Mark it with Sync priority to\n      // indicate that it still has pending work.\n\n\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n    }\n\n    return suspenseBoundary;\n  } // Confirmed that the boundary is in a concurrent mode tree. Continue\n  // with the normal suspend path.\n  //\n  // After this we'll use a set of heuristics to determine whether this\n  // render pass will run to completion or restart or \"suspend\" the commit.\n  // The actual logic for this is spread out in different places.\n  //\n  // This first principle is that if we're going to suspend when we complete\n  // a root, then we should also restart if we get an update or ping that\n  // might unsuspend it, and vice versa. The only reason to suspend is\n  // because you think you might want to restart before committing. However,\n  // it doesn't make sense to restart only while in the period we're suspended.\n  //\n  // Restarting too aggressively is also not good because it starves out any\n  // intermediate loading state. So we use heuristics to determine when.\n  // Suspense Heuristics\n  //\n  // If nothing threw a Promise or all the same fallbacks are already showing,\n  // then don't suspend/restart.\n  //\n  // If this is an initial render of a new tree of Suspense boundaries and\n  // those trigger a fallback, then don't suspend/restart. We want to ensure\n  // that we can show the initial loading state as quickly as possible.\n  //\n  // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n  // a fallback, then we should always suspend/restart. Transitions apply\n  // to this case. If none is defined, JND is used instead.\n  //\n  // If we're already showing a fallback and it gets \"retried\", allowing us to show\n  // another level, but there's still an inner boundary that would show a fallback,\n  // then we suspend/restart for 500ms since the last time we showed a fallback\n  // anywhere in the tree. This effectively throttles progressive loading into a\n  // consistent train of commits. This also gives us an opportunity to restart to\n  // get to the completed state slightly earlier.\n  //\n  // If there's ambiguity due to batching it's resolved in preference of:\n  // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n  //\n  // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n  // ensure that new initial loading states can commit as soon as possible.\n\n\n  suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in\n  // the begin phase to prevent an early bailout.\n\n  suspenseBoundary.lanes = rootRenderLanes;\n  return suspenseBoundary;\n}\n\nfunction throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete;\n\n  {\n    if (isDevToolsPresent) {\n      // If we have pending work still, restore the original updaters\n      restorePendingUpdaters(root, rootRenderLanes);\n    }\n  }\n\n  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {\n    // This is a wakeable. The component suspended.\n    var wakeable = value;\n    resetSuspendedComponent(sourceFiber);\n\n    {\n      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n        markDidThrowWhileHydratingDEV();\n      }\n    }\n\n\n    var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\n\n    if (suspenseBoundary !== null) {\n      suspenseBoundary.flags &= ~ForceClientRender;\n      markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always\n      // commits fallbacks synchronously, so there are no pings.\n\n      if (suspenseBoundary.mode & ConcurrentMode) {\n        attachPingListener(root, wakeable, rootRenderLanes);\n      }\n\n      attachRetryListener(suspenseBoundary, root, wakeable);\n      return;\n    } else {\n      // No boundary was found. Unless this is a sync update, this is OK.\n      // We can suspend and wait for more data to arrive.\n      if (!includesSyncLane(rootRenderLanes)) {\n        // This is not a sync update. Suspend. Since we're not activating a\n        // Suspense boundary, this will unwind all the way to the root without\n        // performing a second pass to render a fallback. (This is arguably how\n        // refresh transitions should work, too, since we're not going to commit\n        // the fallbacks anyway.)\n        //\n        // This case also applies to initial hydration.\n        attachPingListener(root, wakeable, rootRenderLanes);\n        renderDidSuspendDelayIfPossible();\n        return;\n      } // This is a sync/discrete update. We treat this case like an error\n      // because discrete renders are expected to produce a complete tree\n      // synchronously to maintain consistency with external state.\n\n\n      var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.\n      // The error will be caught by the nearest suspense boundary.\n\n      value = uncaughtSuspenseError;\n    }\n  } else {\n    // This is a regular error, not a Suspense wakeable.\n    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n      markDidThrowWhileHydratingDEV();\n\n      var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by\n      // discarding the dehydrated content and switching to a client render.\n      // Instead of surfacing the error, find the nearest Suspense boundary\n      // and render it again without hydration.\n\n\n      if (_suspenseBoundary !== null) {\n        if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {\n          // Set a flag to indicate that we should try rendering the normal\n          // children again, not the fallback.\n          _suspenseBoundary.flags |= ForceClientRender;\n        }\n\n        markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should\n        // still log it so it can be fixed.\n\n        queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));\n        return;\n      }\n    }\n  }\n\n  value = createCapturedValueAtFiber(value, sourceFiber);\n  renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n\n  var workInProgress = returnFiber;\n\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot:\n        {\n          var _errorInfo = value;\n          workInProgress.flags |= ShouldCapture;\n          var lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n          var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);\n          enqueueCapturedUpdate(workInProgress, update);\n          return;\n        }\n\n      case ClassComponent:\n        // Capture and retry\n        var errorInfo = value;\n        var ctor = workInProgress.type;\n        var instance = workInProgress.stateNode;\n\n        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {\n          workInProgress.flags |= ShouldCapture;\n\n          var _lane = pickArbitraryLane(rootRenderLanes);\n\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state\n\n          var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);\n\n          enqueueCapturedUpdate(workInProgress, _update);\n          return;\n        }\n\n        break;\n    }\n\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n}\n\nfunction getSuspendedCache() {\n  {\n    return null;\n  } // This function is called when a Suspense boundary suspends. It returns the\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar didReceiveUpdate = false;\nvar didWarnAboutBadClass;\nvar didWarnAboutModulePatternComponent;\nvar didWarnAboutContextTypeOnFunctionComponent;\nvar didWarnAboutGetDerivedStateOnFunctionComponent;\nvar didWarnAboutFunctionRefs;\nvar didWarnAboutReassigningProps;\nvar didWarnAboutRevealOrder;\nvar didWarnAboutTailOptions;\nvar didWarnAboutDefaultPropsOnFunctionComponent;\n\n{\n  didWarnAboutBadClass = {};\n  didWarnAboutModulePatternComponent = {};\n  didWarnAboutContextTypeOnFunctionComponent = {};\n  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n  didWarnAboutFunctionRefs = {};\n  didWarnAboutReassigningProps = false;\n  didWarnAboutRevealOrder = {};\n  didWarnAboutTailOptions = {};\n  didWarnAboutDefaultPropsOnFunctionComponent = {};\n}\n\nfunction reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n\n  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n}\n\nfunction updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n  {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var innerPropTypes = Component.propTypes;\n\n      if (innerPropTypes) {\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(Component));\n      }\n    }\n  }\n\n  var render = Component.render;\n  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent\n\n  var nextChildren;\n  var hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n\n  {\n    markComponentRenderStarted(workInProgress);\n  }\n\n  {\n    ReactCurrentOwner$1.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n    hasId = checkDidRenderIdHook();\n\n    if ( workInProgress.mode & StrictLegacyMode) {\n      setIsStrictModeForDevtools(true);\n\n      try {\n        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n        hasId = checkDidRenderIdHook();\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n\n    setIsRendering(false);\n  }\n\n  {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  if (current === null) {\n    var type = Component.type;\n\n    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.\n    Component.defaultProps === undefined) {\n      var resolvedType = type;\n\n      {\n        resolvedType = resolveFunctionForHotReloading(type);\n      } // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n\n\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n\n      {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n\n      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);\n    }\n\n    {\n      var innerPropTypes = type.propTypes;\n\n      if (innerPropTypes) {\n        // Inner memo component props aren't currently validated in createElement.\n        // We could move it there, but we'd still need this for lazy code path.\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(type));\n      }\n\n      if ( Component.defaultProps !== undefined) {\n        var componentName = getComponentNameFromType(type) || 'Unknown';\n\n        if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n          error('%s: Support for defaultProps will be removed from memo components ' + 'in a future major release. Use JavaScript default parameters instead.', componentName);\n\n          didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n        }\n      }\n    }\n\n    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n\n  {\n    var _type = Component.type;\n    var _innerPropTypes = _type.propTypes;\n\n    if (_innerPropTypes) {\n      // Inner memo component props aren't currently validated in createElement.\n      // We could move it there, but we'd still need this for lazy code path.\n      checkPropTypes(_innerPropTypes, nextProps, // Resolved props\n      'prop', getComponentNameFromType(_type));\n    }\n  }\n\n  var currentChild = current.child; // This is always exactly one child\n\n  var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n  if (!hasScheduledUpdateOrContext) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    var prevProps = currentChild.memoizedProps; // Default to shallow comparison\n\n    var compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  var newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n  {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var outerMemoType = workInProgress.elementType;\n\n      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n        // We warn when you define propTypes on lazy()\n        // so let's just skip over it to find memo() outer wrapper.\n        // Inner props for memo are validated later.\n        var lazyComponent = outerMemoType;\n        var payload = lazyComponent._payload;\n        var init = lazyComponent._init;\n\n        try {\n          outerMemoType = init(payload);\n        } catch (x) {\n          outerMemoType = null;\n        } // Inner propTypes will be validated in the function component path.\n\n\n        var outerPropTypes = outerMemoType && outerMemoType.propTypes;\n\n        if (outerPropTypes) {\n          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n          'prop', getComponentNameFromType(outerMemoType));\n        }\n      }\n    }\n  }\n\n  if (current !== null) {\n    var prevProps = current.memoizedProps;\n\n    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.\n     workInProgress.type === current.type )) {\n      didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we\n      // would during a normal fiber bailout.\n      //\n      // We don't have strong guarantees that the props object is referentially\n      // equal during updates where we can't bail out anyway — like if the props\n      // are shallowly equal, but there's a local state or context update in the\n      // same batch.\n      //\n      // However, as a principle, we should aim to make the behavior consistent\n      // across different ways of memoizing a component. For example, React.memo\n      // has a different internal Fiber layout if you pass a normal function\n      // component (SimpleMemoComponent) versus if you pass a different type\n      // like forwardRef (MemoComponent). But this is an implementation detail.\n      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't\n      // affect whether the props object is reused during a bailout.\n\n      workInProgress.pendingProps = nextProps = prevProps;\n\n      if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumulated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n\n  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);\n}\n\nfunction updateOffscreenComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps;\n  var nextChildren = nextProps.children;\n  var prevState = current !== null ? current.memoizedState : null;\n\n  if (nextProps.mode === 'hidden' || enableLegacyHidden ) {\n    // Rendering a hidden tree.\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      // TODO: Consider how Offscreen should work with transitions in the future\n      var nextState = {\n        baseLanes: NoLanes,\n        cachePool: null,\n        transitions: null\n      };\n      workInProgress.memoizedState = nextState;\n\n      pushRenderLanes(workInProgress, renderLanes);\n    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {\n      var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out\n      // and resume this tree later.\n\n      var nextBaseLanes;\n\n      if (prevState !== null) {\n        var prevBaseLanes = prevState.baseLanes;\n        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n      } else {\n        nextBaseLanes = renderLanes;\n      } // Schedule this fiber to re-render at offscreen priority. Then bailout.\n\n\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);\n      var _nextState = {\n        baseLanes: nextBaseLanes,\n        cachePool: spawnedCachePool,\n        transitions: null\n      };\n      workInProgress.memoizedState = _nextState;\n      workInProgress.updateQueue = null;\n      // to avoid a push/pop misalignment.\n\n\n      pushRenderLanes(workInProgress, nextBaseLanes);\n\n      return null;\n    } else {\n      // This is the second render. The surrounding visible content has already\n      // committed. Now we resume rendering the hidden tree.\n      // Rendering at offscreen, so we can clear the base lanes.\n      var _nextState2 = {\n        baseLanes: NoLanes,\n        cachePool: null,\n        transitions: null\n      };\n      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.\n\n      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;\n\n      pushRenderLanes(workInProgress, subtreeRenderLanes);\n    }\n  } else {\n    // Rendering a visible tree.\n    var _subtreeRenderLanes;\n\n    if (prevState !== null) {\n      // We're going from hidden -> visible.\n      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n      _subtreeRenderLanes = renderLanes;\n    }\n\n    pushRenderLanes(workInProgress, _subtreeRenderLanes);\n  }\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n} // Note: These happen to have identical begin phases, for now. We shouldn't hold\n\nfunction updateFragment(current, workInProgress, renderLanes) {\n  var nextChildren = workInProgress.pendingProps;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(current, workInProgress, renderLanes) {\n  var nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(current, workInProgress, renderLanes) {\n  {\n    workInProgress.flags |= Update;\n\n    {\n      // Reset effect durations for the next eventual effect phase.\n      // These are reset during render to allow the DevTools commit hook a chance to read them,\n      var stateNode = workInProgress.stateNode;\n      stateNode.effectDuration = 0;\n      stateNode.passiveEffectDuration = 0;\n    }\n  }\n\n  var nextProps = workInProgress.pendingProps;\n  var nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef(current, workInProgress) {\n  var ref = workInProgress.ref;\n\n  if (current === null && ref !== null || current !== null && current.ref !== ref) {\n    // Schedule a Ref effect\n    workInProgress.flags |= Ref;\n\n    {\n      workInProgress.flags |= RefStatic;\n    }\n  }\n}\n\nfunction updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var innerPropTypes = Component.propTypes;\n\n      if (innerPropTypes) {\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(Component));\n      }\n    }\n  }\n\n  var context;\n\n  {\n    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  var nextChildren;\n  var hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n\n  {\n    markComponentRenderStarted(workInProgress);\n  }\n\n  {\n    ReactCurrentOwner$1.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n    hasId = checkDidRenderIdHook();\n\n    if ( workInProgress.mode & StrictLegacyMode) {\n      setIsStrictModeForDevtools(true);\n\n      try {\n        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n        hasId = checkDidRenderIdHook();\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n\n    setIsRendering(false);\n  }\n\n  {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  {\n    // This is used by DevTools to force a boundary to error.\n    switch (shouldError(workInProgress)) {\n      case false:\n        {\n          var _instance = workInProgress.stateNode;\n          var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.\n          // Is there a better way to do this?\n\n          var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);\n          var state = tempInstance.state;\n\n          _instance.updater.enqueueSetState(_instance, state, null);\n\n          break;\n        }\n\n      case true:\n        {\n          workInProgress.flags |= DidCapture;\n          workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes\n\n          var error$1 = new Error('Simulated error coming from DevTools');\n          var lane = pickArbitraryLane(renderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state\n\n          var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);\n          enqueueCapturedUpdate(workInProgress, update);\n          break;\n        }\n    }\n\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var innerPropTypes = Component.propTypes;\n\n      if (innerPropTypes) {\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(Component));\n      }\n    }\n  } // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n\n\n  var hasContext;\n\n  if (isContextProvider(Component)) {\n    hasContext = true;\n    pushContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  var instance = workInProgress.stateNode;\n  var shouldUpdate;\n\n  if (instance === null) {\n    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.\n\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);\n  } else {\n    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);\n  }\n\n  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);\n\n  {\n    var inst = workInProgress.stateNode;\n\n    if (shouldUpdate && inst.props !== nextProps) {\n      if (!didWarnAboutReassigningProps) {\n        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');\n      }\n\n      didWarnAboutReassigningProps = true;\n    }\n  }\n\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef(current, workInProgress);\n  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  var instance = workInProgress.stateNode; // Rerender\n\n  ReactCurrentOwner$1.current = workInProgress;\n  var nextChildren;\n\n  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n\n    {\n      stopProfilerTimerIfRunning();\n    }\n  } else {\n    {\n      markComponentRenderStarted(workInProgress);\n    }\n\n    {\n      setIsRendering(true);\n      nextChildren = instance.render();\n\n      if ( workInProgress.mode & StrictLegacyMode) {\n        setIsStrictModeForDevtools(true);\n\n        try {\n          instance.render();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n\n      setIsRendering(false);\n    }\n\n    {\n      markComponentRenderStopped();\n    }\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  } // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n\n\n  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.\n\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress) {\n  var root = workInProgress.stateNode;\n\n  if (root.pendingContext) {\n    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n\n  if (current === null) {\n    throw new Error('Should have a current fiber. This is a bug in React.');\n  }\n\n  var nextProps = workInProgress.pendingProps;\n  var prevState = workInProgress.memoizedState;\n  var prevChildren = prevState.element;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n  var nextState = workInProgress.memoizedState;\n  var root = workInProgress.stateNode;\n  // being called \"element\".\n\n\n  var nextChildren = nextState.element;\n\n  if ( prevState.isDehydrated) {\n    // This is a hydration root whose shell has not yet hydrated. We should\n    // attempt to hydrate.\n    // Flip isDehydrated to false to indicate that when this render\n    // finishes, the root will no longer be dehydrated.\n    var overrideState = {\n      element: nextChildren,\n      isDehydrated: false,\n      cache: nextState.cache,\n      pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,\n      transitions: nextState.transitions\n    };\n    var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't\n    // have reducer functions so it doesn't need rebasing.\n\n    updateQueue.baseState = overrideState;\n    workInProgress.memoizedState = overrideState;\n\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during a previous attempt to hydrate the shell, so we\n      // forced a client render.\n      var recoverableError = createCapturedValueAtFiber(new Error('There was an error while hydrating. Because the error happened outside ' + 'of a Suspense boundary, the entire root will switch to ' + 'client rendering.'), workInProgress);\n      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);\n    } else if (nextChildren !== prevChildren) {\n      var _recoverableError = createCapturedValueAtFiber(new Error('This root received an early update, before anything was able ' + 'hydrate. Switched the entire root to client rendering.'), workInProgress);\n\n      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);\n    } else {\n      // The outermost shell has not hydrated yet. Start hydrating.\n      enterHydrationState(workInProgress);\n\n      var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n      workInProgress.child = child;\n      var node = child;\n\n      while (node) {\n        // Mark each child as hydrating. This is a fast path to know whether this\n        // tree is part of a hydrating tree. This is used to determine if a child\n        // node has fully mounted yet, and for scheduling event replaying.\n        // Conceptually this is similar to Placement in that a new subtree is\n        // inserted into the React tree here. It just happens to not need DOM\n        // mutations because it already exists.\n        node.flags = node.flags & ~Placement | Hydrating;\n        node = node.sibling;\n      }\n    }\n  } else {\n    // Root is not dehydrated. Either this is a client-only root, or it\n    // already hydrated.\n    resetHydrationState();\n\n    if (nextChildren === prevChildren) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  return workInProgress.child;\n}\n\nfunction mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {\n  // Revert to client rendering.\n  resetHydrationState();\n  queueHydrationError(recoverableError);\n  workInProgress.flags |= ForceClientRender;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostComponent(current, workInProgress, renderLanes) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  var type = workInProgress.type;\n  var nextProps = workInProgress.pendingProps;\n  var prevProps = current !== null ? current.memoizedProps : null;\n  var nextChildren = nextProps.children;\n  var isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  markRef(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostText(current, workInProgress) {\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  } // Nothing to do here. This is terminal. We'll do the completion step\n  // immediately after.\n\n\n  return null;\n}\n\nfunction mountLazyComponent(_current, workInProgress, elementType, renderLanes) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n  var props = workInProgress.pendingProps;\n  var lazyComponent = elementType;\n  var payload = lazyComponent._payload;\n  var init = lazyComponent._init;\n  var Component = init(payload); // Store the unwrapped component in the type.\n\n  workInProgress.type = Component;\n  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);\n  var resolvedProps = resolveDefaultProps(Component, props);\n  var child;\n\n  switch (resolvedTag) {\n    case FunctionComponent:\n      {\n        {\n          validateFunctionComponentInDev(workInProgress, Component);\n          workInProgress.type = Component = resolveFunctionForHotReloading(Component);\n        }\n\n        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case ClassComponent:\n      {\n        {\n          workInProgress.type = Component = resolveClassForHotReloading(Component);\n        }\n\n        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case ForwardRef:\n      {\n        {\n          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);\n        }\n\n        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case MemoComponent:\n      {\n        {\n          if (workInProgress.type !== workInProgress.elementType) {\n            var outerPropTypes = Component.propTypes;\n\n            if (outerPropTypes) {\n              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only\n              'prop', getComponentNameFromType(Component));\n            }\n          }\n        }\n\n        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n        renderLanes);\n        return child;\n      }\n  }\n\n  var hint = '';\n\n  {\n    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {\n      hint = ' Did you wrap a component in React.lazy() more than once?';\n    }\n  } // This message intentionally doesn't mention ForwardRef or MemoComponent\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n\n\n  throw new Error(\"Element type is invalid. Received a promise that resolves to: \" + Component + \". \" + (\"Lazy element type must resolve to a class or function.\" + hint));\n}\n\nfunction mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.\n\n  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n\n  var hasContext;\n\n  if (isContextProvider(Component)) {\n    hasContext = true;\n    pushContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n}\n\nfunction mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n  var props = workInProgress.pendingProps;\n  var context;\n\n  {\n    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  var value;\n  var hasId;\n\n  {\n    markComponentRenderStarted(workInProgress);\n  }\n\n  {\n    if (Component.prototype && typeof Component.prototype.render === 'function') {\n      var componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\n\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n    }\n\n    setIsRendering(true);\n    ReactCurrentOwner$1.current = workInProgress;\n    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n    hasId = checkDidRenderIdHook();\n    setIsRendering(false);\n  }\n\n  {\n    markComponentRenderStopped();\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n\n  {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n      var _componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutModulePatternComponent[_componentName]) {\n        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);\n\n        didWarnAboutModulePatternComponent[_componentName] = true;\n      }\n    }\n  }\n\n  if ( // Run these checks in production only if the flag is off.\n  // Eventually we'll delete this branch altogether.\n   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n    {\n      var _componentName2 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutModulePatternComponent[_componentName2]) {\n        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);\n\n        didWarnAboutModulePatternComponent[_componentName2] = true;\n      }\n    } // Proceed under the assumption that this is a class instance\n\n\n    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.\n\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n\n    var hasContext = false;\n\n    if (isContextProvider(Component)) {\n      hasContext = true;\n      pushContextProvider(workInProgress);\n    } else {\n      hasContext = false;\n    }\n\n    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;\n    initializeUpdateQueue(workInProgress);\n    adoptClassInstance(workInProgress, value);\n    mountClassInstance(workInProgress, Component, props, renderLanes);\n    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n  } else {\n    // Proceed under the assumption that this is a function component\n    workInProgress.tag = FunctionComponent;\n\n    {\n\n      if ( workInProgress.mode & StrictLegacyMode) {\n        setIsStrictModeForDevtools(true);\n\n        try {\n          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n          hasId = checkDidRenderIdHook();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n    }\n\n    if (getIsHydrating() && hasId) {\n      pushMaterializedTreeId(workInProgress);\n    }\n\n    reconcileChildren(null, workInProgress, value, renderLanes);\n\n    {\n      validateFunctionComponentInDev(workInProgress, Component);\n    }\n\n    return workInProgress.child;\n  }\n}\n\nfunction validateFunctionComponentInDev(workInProgress, Component) {\n  {\n    if (Component) {\n      if (Component.childContextTypes) {\n        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');\n      }\n    }\n\n    if (workInProgress.ref !== null) {\n      var info = '';\n      var ownerName = getCurrentFiberOwnerNameInDevOrNull();\n\n      if (ownerName) {\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n      }\n\n      var warningKey = ownerName || '';\n      var debugSource = workInProgress._debugSource;\n\n      if (debugSource) {\n        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n      }\n\n      if (!didWarnAboutFunctionRefs[warningKey]) {\n        didWarnAboutFunctionRefs[warningKey] = true;\n\n        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);\n      }\n    }\n\n    if ( Component.defaultProps !== undefined) {\n      var componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n        error('%s: Support for defaultProps will be removed from function components ' + 'in a future major release. Use JavaScript default parameters instead.', componentName);\n\n        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      var _componentName3 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\n        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);\n\n        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\n      }\n    }\n\n    if (typeof Component.contextType === 'object' && Component.contextType !== null) {\n      var _componentName4 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\n        error('%s: Function components do not support contextType.', _componentName4);\n\n        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\n      }\n    }\n  }\n}\n\nvar SUSPENDED_MARKER = {\n  dehydrated: null,\n  treeContext: null,\n  retryLane: NoLane\n};\n\nfunction mountSuspenseOffscreenState(renderLanes) {\n  return {\n    baseLanes: renderLanes,\n    cachePool: getSuspendedCache(),\n    transitions: null\n  };\n}\n\nfunction updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\n  var cachePool = null;\n\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n    cachePool: cachePool,\n    transitions: prevOffscreenState.transitions\n  };\n} // TODO: Probably should inline this back\n\n\nfunction shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  if (current !== null) {\n    var suspenseState = current.memoizedState;\n\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  } // Not currently showing content. Consult the Suspense context.\n\n\n  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n}\n\nfunction getRemainingWorkInPrimaryTree(current, renderLanes) {\n  // TODO: Should not remove render lanes that were pinged during this render\n  return removeLanes(current.childLanes, renderLanes);\n}\n\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.\n\n  {\n    if (shouldSuspend(workInProgress)) {\n      workInProgress.flags |= DidCapture;\n    }\n  }\n\n  var suspenseContext = suspenseStackCursor.current;\n  var showFallback = false;\n  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  } else {\n    // Attempting the main content\n    if (current === null || current.memoizedState !== null) {\n      // This is a new mount or this boundary is already showing a fallback state.\n      // Mark this subtree context as having at least one invisible parent that could\n      // handle the fallback state.\n      // Avoided boundaries are not considered since they cannot handle preferred fallback states.\n      {\n        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);\n      }\n    }\n  }\n\n  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconciliation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n\n  if (current === null) {\n    // Initial mount\n    // Special path for hydration\n    // If we're currently hydrating, try to hydrate this boundary.\n    tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.\n\n    var suspenseState = workInProgress.memoizedState;\n\n    if (suspenseState !== null) {\n      var dehydrated = suspenseState.dehydrated;\n\n      if (dehydrated !== null) {\n        return mountDehydratedSuspenseComponent(workInProgress, dehydrated);\n      }\n    }\n\n    var nextPrimaryChildren = nextProps.children;\n    var nextFallbackChildren = nextProps.fallback;\n\n    if (showFallback) {\n      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n      var primaryChildFragment = workInProgress.child;\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n\n      return fallbackFragment;\n    } else {\n      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);\n    }\n  } else {\n    // This is an update.\n    // Special path for hydration\n    var prevState = current.memoizedState;\n\n    if (prevState !== null) {\n      var _dehydrated = prevState.dehydrated;\n\n      if (_dehydrated !== null) {\n        return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);\n      }\n    }\n\n    if (showFallback) {\n      var _nextFallbackChildren = nextProps.fallback;\n      var _nextPrimaryChildren = nextProps.children;\n      var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);\n      var _primaryChildFragment2 = workInProgress.child;\n      var prevOffscreenState = current.child.memoizedState;\n      _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n\n      _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    } else {\n      var _nextPrimaryChildren2 = nextProps.children;\n\n      var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);\n\n      workInProgress.memoizedState = null;\n      return _primaryChildFragment3;\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {\n  var mode = workInProgress.mode;\n  var primaryChildProps = {\n    mode: 'visible',\n    children: primaryChildren\n  };\n  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n  var mode = workInProgress.mode;\n  var progressedPrimaryFragment = workInProgress.child;\n  var primaryChildProps = {\n    mode: 'hidden',\n    children: primaryChildren\n  };\n  var primaryChildFragment;\n  var fallbackChildFragment;\n\n  if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if ( workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = 0;\n      primaryChildFragment.treeBaseDuration = 0;\n    }\n\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n  } else {\n    primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {\n  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n  // this wrapper function to constrain it.\n  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n}\n\nfunction updateWorkInProgressOffscreenFiber(current, offscreenProps) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {\n  var currentPrimaryChildFragment = current.child;\n  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n  var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {\n    mode: 'visible',\n    children: primaryChildren\n  });\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    var deletions = workInProgress.deletions;\n\n    if (deletions === null) {\n      workInProgress.deletions = [currentFallbackChildFragment];\n      workInProgress.flags |= ChildDeletion;\n    } else {\n      deletions.push(currentFallbackChildFragment);\n    }\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n  var mode = workInProgress.mode;\n  var currentPrimaryChildFragment = current.child;\n  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n  var primaryChildProps = {\n    mode: 'hidden',\n    children: primaryChildren\n  };\n  var primaryChildFragment;\n\n  if ( // In legacy mode, we commit the primary tree as if it successfully\n  // completed, even though it's in an inconsistent state.\n  (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was\n  // already cloned. In legacy mode, the only case where this isn't true is\n  // when DevTools forces us to display a fallback; we skip the first render\n  // pass entirely and go straight to rendering the fallback. (In Concurrent\n  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n  // only codepath.)\n  workInProgress.child !== currentPrimaryChildFragment) {\n    var progressedPrimaryFragment = workInProgress.child;\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if ( workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;\n      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;\n    } // The fallback fiber was added as a deletion during the first pass.\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it.\n\n\n    workInProgress.deletions = null;\n  } else {\n    primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.\n    // (We don't do this in legacy mode, because in legacy mode we don't re-use\n    // the current tree; see previous branch.)\n\n    primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;\n  }\n\n  var fallbackChildFragment;\n\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);\n  } else {\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {\n  // Falling back to client rendering. Because this has performance\n  // implications, it's considered a recoverable error, even though the user\n  // likely won't observe anything wrong with the UI.\n  //\n  // The error is passed in as an argument to enforce that every caller provide\n  // a custom message, or explicitly opt out (currently the only path that opts\n  // out is legacy mode; every concurrent path provides an error).\n  if (recoverableError !== null) {\n    queueHydrationError(recoverableError);\n  } // This will add the old fiber to the deletion list\n\n\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.\n\n  var nextProps = workInProgress.pendingProps;\n  var primaryChildren = nextProps.children;\n  var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already\n  // mounted but this is a new fiber.\n\n  primaryChildFragment.flags |= Placement;\n  workInProgress.memoizedState = null;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n  var fiberMode = workInProgress.mode;\n  var primaryChildProps = {\n    mode: 'visible',\n    children: primaryChildren\n  };\n  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);\n  var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense\n  // boundary) already mounted but this is a new fiber.\n\n  fallbackChildFragment.flags |= Placement;\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n    // We will have dropped the effect list which contains the\n    // deletion. We need to reconcile to delete the current child.\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n  }\n\n  return fallbackChildFragment;\n}\n\nfunction mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {\n  // During the first pass, we'll bail out and not drill into the children.\n  // Instead, we'll leave the content in place and try to hydrate it later.\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    {\n      error('Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOMClient.hydrateRoot(container, <App />)' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');\n    }\n\n    workInProgress.lanes = laneToLanes(SyncLane);\n  } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This is a client-only boundary. Since we won't get any content from the server\n    // for this, we need to schedule that at a higher priority based on when it would\n    // have timed out. In theory we could render it in this pass but it would have the\n    // wrong priority associated with it and will prevent hydration of parent path.\n    // Instead, we'll leave work left on it to render it in a separate commit.\n    // TODO This time should be the time at which the server rendered response that is\n    // a parent to this boundary was displayed. However, since we currently don't have\n    // a protocol to transfer that time, we'll just estimate it by using the current\n    // time. This will mean that Suspense timeouts are slightly shifted to later than\n    // they should be.\n    // Schedule a normal pri update to render this content.\n    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n  } else {\n    // We'll continue hydrating the rest at offscreen priority since we'll already\n    // be showing the right content coming from the server, it is no rush.\n    workInProgress.lanes = laneToLanes(OffscreenLane);\n  }\n\n  return null;\n}\n\nfunction updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {\n  if (!didSuspend) {\n    // This is the first render pass. Attempt to hydrate.\n    // We should never be hydrating at this point because it is the first pass,\n    // but after we've already committed once.\n    warnIfHydrating();\n\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // TODO: When we delete legacy mode, we should make this error argument\n      // required — every concurrent mode path that causes hydration to\n      // de-opt to client rendering should have an error message.\n      null);\n    }\n\n    if (isSuspenseInstanceFallback(suspenseInstance)) {\n      // This boundary is in a permanent fallback state. In this case, we'll never\n      // get an update and we'll never be able to hydrate the final content. Let's just try the\n      // client side render instead.\n      var digest, message, stack;\n\n      {\n        var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);\n\n        digest = _getSuspenseInstanceF.digest;\n        message = _getSuspenseInstanceF.message;\n        stack = _getSuspenseInstanceF.stack;\n      }\n\n      var error;\n\n      if (message) {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        error = new Error(message);\n      } else {\n        error = new Error('The server could not finish this Suspense boundary, likely ' + 'due to an error during server rendering. Switched to ' + 'client rendering.');\n      }\n\n      var capturedValue = createCapturedValue(error, digest, stack);\n      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);\n    }\n    // any context has changed, we need to treat is as if the input might have changed.\n\n\n    var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n\n    if (didReceiveUpdate || hasContextChanged) {\n      // This boundary has changed since the first render. This means that we are now unable to\n      // hydrate it. We might still be able to hydrate it using a higher priority lane.\n      var root = getWorkInProgressRoot();\n\n      if (root !== null) {\n        var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);\n\n        if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {\n          // Intentionally mutating since this render will get interrupted. This\n          // is one of the very rare times where we mutate the current tree\n          // during the render phase.\n          suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render\n\n          var eventTime = NoTimestamp;\n          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n          scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);\n        }\n      } // If we have scheduled higher pri work above, this will probably just abort the render\n      // since we now have higher priority work, but in case it doesn't, we need to prepare to\n      // render something, if we time out. Even if that requires us to delete everything and\n      // skip hydration.\n      // Delay having to do this as long as the suspense timeout allows us.\n\n\n      renderDidSuspendDelayIfPossible();\n\n      var _capturedValue = createCapturedValue(new Error('This Suspense boundary received an update before it finished ' + 'hydrating. This caused the boundary to switch to client rendering. ' + 'The usual way to fix this is to wrap the original update ' + 'in startTransition.'));\n\n      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);\n    } else if (isSuspenseInstancePending(suspenseInstance)) {\n      // This component is still pending more data from the server, so we can't hydrate its\n      // content. We treat it as if this component suspended itself. It might seem as if\n      // we could just try to render it client-side instead. However, this will perform a\n      // lot of unnecessary work and is unlikely to complete since it often will suspend\n      // on missing data anyway. Additionally, the server might be able to render more\n      // than we can on the client yet. In that case we'd end up with more fallback states\n      // on the client than if we just leave it alone. If the server times out or errors\n      // these should update this boundary to the permanent Fallback state instead.\n      // Mark it as having captured (i.e. suspended).\n      workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.\n\n      workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.\n\n      var retry = retryDehydratedSuspenseBoundary.bind(null, current);\n      registerSuspenseInstanceRetry(suspenseInstance, retry);\n      return null;\n    } else {\n      // This is the first attempt.\n      reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);\n      var primaryChildren = nextProps.children;\n      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this\n      // tree is part of a hydrating tree. This is used to determine if a child\n      // node has fully mounted yet, and for scheduling event replaying.\n      // Conceptually this is similar to Placement in that a new subtree is\n      // inserted into the React tree here. It just happens to not need DOM\n      // mutations because it already exists.\n\n      primaryChildFragment.flags |= Hydrating;\n      return primaryChildFragment;\n    }\n  } else {\n    // This is the second render pass. We already attempted to hydrated, but\n    // something either suspended or errored.\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during hydration. Try again without hydrating.\n      workInProgress.flags &= ~ForceClientRender;\n\n      var _capturedValue2 = createCapturedValue(new Error('There was an error while hydrating this Suspense boundary. ' + 'Switched to client rendering.'));\n\n      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);\n    } else if (workInProgress.memoizedState !== null) {\n      // Something suspended and we should still be in dehydrated mode.\n      // Leave the existing child in place.\n      workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there\n      // but the normal suspense pass doesn't.\n\n      workInProgress.flags |= DidCapture;\n      return null;\n    } else {\n      // Suspended but we should no longer be in dehydrated mode.\n      // Therefore we now have to render the fallback.\n      var nextPrimaryChildren = nextProps.children;\n      var nextFallbackChildren = nextProps.fallback;\n      var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n      var _primaryChildFragment4 = workInProgress.child;\n      _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    }\n  }\n}\n\nfunction scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  var alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n\n  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n}\n\nfunction propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  var node = firstChild;\n\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      var state = node.memoizedState;\n\n      if (state !== null) {\n        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === workInProgress) {\n      return;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild) {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  var row = firstChild;\n  var lastContentRow = null;\n\n  while (row !== null) {\n    var currentRow = row.alternate; // New rows can't be content rows.\n\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n\n    row = row.sibling;\n  }\n\n  return lastContentRow;\n}\n\nfunction validateRevealOrder(revealOrder) {\n  {\n    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {\n      didWarnAboutRevealOrder[revealOrder] = true;\n\n      if (typeof revealOrder === 'string') {\n        switch (revealOrder.toLowerCase()) {\n          case 'together':\n          case 'forwards':\n          case 'backwards':\n            {\n              error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase \"%s\" instead.', revealOrder, revealOrder.toLowerCase());\n\n              break;\n            }\n\n          case 'forward':\n          case 'backward':\n            {\n              error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use \"%ss\" instead.', revealOrder, revealOrder.toLowerCase());\n\n              break;\n            }\n\n          default:\n            error('\"%s\" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n\n            break;\n        }\n      } else {\n        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n      }\n    }\n  }\n}\n\nfunction validateTailOptions(tailMode, revealOrder) {\n  {\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n        didWarnAboutTailOptions[tailMode] = true;\n\n        error('\"%s\" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean \"collapsed\" or \"hidden\"?', tailMode);\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n        didWarnAboutTailOptions[tailMode] = true;\n\n        error('<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' + '\"forwards\" or \"backwards\". ' + 'Did you mean to specify revealOrder=\"forwards\"?', tailMode);\n      }\n    }\n  }\n}\n\nfunction validateSuspenseListNestedChild(childSlot, index) {\n  {\n    var isAnArray = isArray(childSlot);\n    var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n\n    if (isAnArray || isIterable) {\n      var type = isAnArray ? 'array' : 'iterable';\n\n      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);\n\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction validateSuspenseListChildren(children, revealOrder) {\n  {\n    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {\n      if (isArray(children)) {\n        for (var i = 0; i < children.length; i++) {\n          if (!validateSuspenseListNestedChild(children[i], i)) {\n            return;\n          }\n        }\n      } else {\n        var iteratorFn = getIteratorFn(children);\n\n        if (typeof iteratorFn === 'function') {\n          var childrenIterator = iteratorFn.call(children);\n\n          if (childrenIterator) {\n            var step = childrenIterator.next();\n            var _i = 0;\n\n            for (; !step.done; step = childrenIterator.next()) {\n              if (!validateSuspenseListNestedChild(step.value, _i)) {\n                return;\n              }\n\n              _i++;\n            }\n          }\n        } else {\n          error('A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);\n        }\n      }\n    }\n  }\n}\n\nfunction initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {\n  var renderState = workInProgress.memoizedState;\n\n  if (renderState === null) {\n    workInProgress.memoizedState = {\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode\n    };\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n  }\n} // This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\n\n\nfunction updateSuspenseListComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps;\n  var revealOrder = nextProps.revealOrder;\n  var tailMode = nextProps.tail;\n  var newChildren = nextProps.children;\n  validateRevealOrder(revealOrder);\n  validateTailOptions(tailMode, revealOrder);\n  validateSuspenseListChildren(newChildren, revealOrder);\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  var suspenseContext = suspenseStackCursor.current;\n  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n    workInProgress.flags |= DidCapture;\n  } else {\n    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;\n\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);\n    }\n\n    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  }\n\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards':\n        {\n          var lastContentRow = findLastContentRow(workInProgress.child);\n          var tail;\n\n          if (lastContentRow === null) {\n            // The whole list is part of the tail.\n            // TODO: We could fast path by just rendering the tail now.\n            tail = workInProgress.child;\n            workInProgress.child = null;\n          } else {\n            // Disconnect the tail rows after the content row.\n            // We're going to render them separately later.\n            tail = lastContentRow.sibling;\n            lastContentRow.sibling = null;\n          }\n\n          initSuspenseListRenderState(workInProgress, false, // isBackwards\n          tail, lastContentRow, tailMode);\n          break;\n        }\n\n      case 'backwards':\n        {\n          // We're going to find the first row that has existing content.\n          // At the same time we're going to reverse the list of everything\n          // we pass in the meantime. That's going to be our tail in reverse\n          // order.\n          var _tail = null;\n          var row = workInProgress.child;\n          workInProgress.child = null;\n\n          while (row !== null) {\n            var currentRow = row.alternate; // New rows can't be content rows.\n\n            if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n              // This is the beginning of the main content.\n              workInProgress.child = row;\n              break;\n            }\n\n            var nextRow = row.sibling;\n            row.sibling = _tail;\n            _tail = row;\n            row = nextRow;\n          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n\n\n          initSuspenseListRenderState(workInProgress, true, // isBackwards\n          _tail, null, // last\n          tailMode);\n          break;\n        }\n\n      case 'together':\n        {\n          initSuspenseListRenderState(workInProgress, false, // isBackwards\n          null, // tail\n          null, // last\n          undefined);\n          break;\n        }\n\n      default:\n        {\n          // The default reveal order is the same as not having\n          // a boundary.\n          workInProgress.memoizedState = null;\n        }\n    }\n  }\n\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(current, workInProgress, renderLanes) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  var nextChildren = workInProgress.pendingProps;\n\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  return workInProgress.child;\n}\n\nvar hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\nfunction updateContextProvider(current, workInProgress, renderLanes) {\n  var providerType = workInProgress.type;\n  var context = providerType._context;\n  var newProps = workInProgress.pendingProps;\n  var oldProps = workInProgress.memoizedProps;\n  var newValue = newProps.value;\n\n  {\n    if (!('value' in newProps)) {\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n\n        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');\n      }\n    }\n\n    var providerPropTypes = workInProgress.type.propTypes;\n\n    if (providerPropTypes) {\n      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n    }\n  }\n\n  pushProvider(workInProgress, context, newValue);\n\n  {\n    if (oldProps !== null) {\n      var oldValue = oldProps.value;\n\n      if (objectIs(oldValue, newValue)) {\n        // No change. Bailout early if children are the same.\n        if (oldProps.children === newProps.children && !hasContextChanged()) {\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n      } else {\n        // The context value changed. Search for matching consumers and schedule\n        // them to update.\n        propagateContextChange(workInProgress, context, renderLanes);\n      }\n    }\n  }\n\n  var newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nvar hasWarnedAboutUsingContextAsConsumer = false;\n\nfunction updateContextConsumer(current, workInProgress, renderLanes) {\n  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In\n  // DEV mode, we create a separate object for Context.Consumer that acts\n  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n  // so we use the old behaviour (Context.Consumer references Context) to\n  // reduce size and overhead. The separate object references context via\n  // a property called \"_context\", which also gives us the ability to check\n  // in DEV mode if this property exists or not and warn if it does not.\n\n  {\n    if (context._context === undefined) {\n      // This may be because it's a Context (rather than a Consumer).\n      // Or it may be because it's older React where they're the same thing.\n      // We only want to warn if we're sure it's a new React.\n      if (context !== context.Consumer) {\n        if (!hasWarnedAboutUsingContextAsConsumer) {\n          hasWarnedAboutUsingContextAsConsumer = true;\n\n          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n        }\n      }\n    } else {\n      context = context._context;\n    }\n  }\n\n  var newProps = workInProgress.pendingProps;\n  var render = newProps.children;\n\n  {\n    if (typeof render !== 'function') {\n      error('A context consumer was rendered with multiple children, or a child ' + \"that isn't a function. A context consumer expects a single child \" + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');\n    }\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  var newValue = readContext(context);\n\n  {\n    markComponentRenderStarted(workInProgress);\n  }\n\n  var newChildren;\n\n  {\n    ReactCurrentOwner$1.current = workInProgress;\n    setIsRendering(true);\n    newChildren = render(newValue);\n    setIsRendering(false);\n  }\n\n  {\n    markComponentRenderStopped();\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nfunction resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    if (current !== null) {\n      // A lazy component only mounts if it suspended inside a non-\n      // concurrent tree, in an inconsistent state. We want to treat it like\n      // a new mount, even though an empty version of it already committed.\n      // Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n      workInProgress.flags |= Placement;\n    }\n  }\n}\n\nfunction bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  {\n    // Don't update \"base\" render times for bailouts.\n    stopProfilerTimerIfRunning();\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.\n\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n    {\n      return null;\n    }\n  } // This fiber doesn't have work, but its subtree does. Clone the child\n  // fibers and continue.\n\n\n  cloneChildFibers(current, workInProgress);\n  return workInProgress.child;\n}\n\nfunction remountFiber(current, oldWorkInProgress, newWorkInProgress) {\n  {\n    var returnFiber = oldWorkInProgress.return;\n\n    if (returnFiber === null) {\n      // eslint-disable-next-line react-internal/prod-error-codes\n      throw new Error('Cannot swap the root fiber.');\n    } // Disconnect from the old current.\n    // It will get deleted.\n\n\n    current.alternate = null;\n    oldWorkInProgress.alternate = null; // Connect to the new tree.\n\n    newWorkInProgress.index = oldWorkInProgress.index;\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n    newWorkInProgress.return = oldWorkInProgress.return;\n    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.\n\n    if (oldWorkInProgress === returnFiber.child) {\n      returnFiber.child = newWorkInProgress;\n    } else {\n      var prevSibling = returnFiber.child;\n\n      if (prevSibling === null) {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        throw new Error('Expected parent to have a child.');\n      }\n\n      while (prevSibling.sibling !== oldWorkInProgress) {\n        prevSibling = prevSibling.sibling;\n\n        if (prevSibling === null) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error('Expected to find the previous sibling.');\n        }\n      }\n\n      prevSibling.sibling = newWorkInProgress;\n    } // Delete the old fiber and place the new one.\n    // Since the old fiber is disconnected, we have to schedule it manually.\n\n\n    var deletions = returnFiber.deletions;\n\n    if (deletions === null) {\n      returnFiber.deletions = [current];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(current);\n    }\n\n    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.\n\n    return newWorkInProgress;\n  }\n}\n\nfunction checkScheduledUpdateOrContext(current, renderLanes) {\n  // Before performing an early bailout, we must check if there are pending\n  // updates or context.\n  var updateLanes = current.lanes;\n\n  if (includesSomeLane(updateLanes, renderLanes)) {\n    return true;\n  } // No pending update, but because context is propagated lazily, we need\n\n  return false;\n}\n\nfunction attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {\n  // This fiber does not have any pending work. Bailout without entering\n  // the begin phase. There's still some bookkeeping we that needs to be done\n  // in this optimized path, mostly pushing stuff onto the stack.\n  switch (workInProgress.tag) {\n    case HostRoot:\n      pushHostRootContext(workInProgress);\n      var root = workInProgress.stateNode;\n\n      resetHydrationState();\n      break;\n\n    case HostComponent:\n      pushHostContext(workInProgress);\n      break;\n\n    case ClassComponent:\n      {\n        var Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          pushContextProvider(workInProgress);\n        }\n\n        break;\n      }\n\n    case HostPortal:\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      break;\n\n    case ContextProvider:\n      {\n        var newValue = workInProgress.memoizedProps.value;\n        var context = workInProgress.type._context;\n        pushProvider(workInProgress, context, newValue);\n        break;\n      }\n\n    case Profiler:\n      {\n        // Profiler should only call onRender when one of its descendants actually rendered.\n        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n        if (hasChildWork) {\n          workInProgress.flags |= Update;\n        }\n\n        {\n          // Reset effect durations for the next eventual effect phase.\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\n          var stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n\n      break;\n\n    case SuspenseComponent:\n      {\n        var state = workInProgress.memoizedState;\n\n        if (state !== null) {\n          if (state.dehydrated !== null) {\n            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has\n            // been unsuspended it has committed as a resolved Suspense component.\n            // If it needs to be retried, it should have work scheduled on it.\n\n            workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we\n            // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n\n            return null;\n          } // If this boundary is currently timed out, we need to decide\n          // whether to retry the primary children, or to skip over it and\n          // go straight to the fallback. Check the priority of the primary\n          // child fragment.\n\n\n          var primaryChildFragment = workInProgress.child;\n          var primaryChildLanes = primaryChildFragment.childLanes;\n\n          if (includesSomeLane(renderLanes, primaryChildLanes)) {\n            // The primary children have pending work. Use the normal path\n            // to attempt to render the primary children again.\n            return updateSuspenseComponent(current, workInProgress, renderLanes);\n          } else {\n            // The primary child fragment does not have pending work marked\n            // on it\n            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient\n            // priority. Bailout.\n\n            var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\n            if (child !== null) {\n              // The fallback children have pending work. Skip over the\n              // primary children and work on the fallback.\n              return child.sibling;\n            } else {\n              // Note: We can return `null` here because we already checked\n              // whether there were nested context consumers, via the call to\n              // `bailoutOnAlreadyFinishedWork` above.\n              return null;\n            }\n          }\n        } else {\n          pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));\n        }\n\n        break;\n      }\n\n    case SuspenseListComponent:\n      {\n        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n        if (didSuspendBefore) {\n          if (_hasChildWork) {\n            // If something was in fallback state last time, and we have all the\n            // same children then we're still in progressive loading state.\n            // Something might get unblocked by state updates or retries in the\n            // tree which will affect the tail. So we need to use the normal\n            // path to compute the correct tail.\n            return updateSuspenseListComponent(current, workInProgress, renderLanes);\n          } // If none of the children had any work, that means that none of\n          // them got retried so they'll still be blocked in the same way\n          // as before. We can fast bail out.\n\n\n          workInProgress.flags |= DidCapture;\n        } // If nothing suspended before and we're rendering the same children,\n        // then the tail doesn't matter. Anything new that suspends will work\n        // in the \"together\" mode, so we can continue from the state we had.\n\n\n        var renderState = workInProgress.memoizedState;\n\n        if (renderState !== null) {\n          // Reset to the \"together\" mode in case we've started a different\n          // update in the past but didn't complete it.\n          renderState.rendering = null;\n          renderState.tail = null;\n          renderState.lastEffect = null;\n        }\n\n        pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n        if (_hasChildWork) {\n          break;\n        } else {\n          // If none of the children had any work, that means that none of\n          // them got retried so they'll still be blocked in the same way\n          // as before. We can fast bail out.\n          return null;\n        }\n      }\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      {\n        // Need to check if the tree still needs to be deferred. This is\n        // almost identical to the logic used in the normal update path,\n        // so we'll just enter that. The only difference is we'll bail out\n        // at the next level instead of this one, because the child props\n        // have not changed. Which is fine.\n        // TODO: Probably should refactor `beginWork` to split the bailout\n        // path from the normal path. I'm tempted to do a labeled break here\n        // but I won't :)\n        workInProgress.lanes = NoLanes;\n        return updateOffscreenComponent(current, workInProgress, renderLanes);\n      }\n  }\n\n  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n}\n\nfunction beginWork(current, workInProgress, renderLanes) {\n  {\n    if (workInProgress._debugNeedsRemount && current !== null) {\n      // This will restart the begin phase with a new fiber.\n      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));\n    }\n  }\n\n  if (current !== null) {\n    var oldProps = current.memoizedProps;\n    var newProps = workInProgress.pendingProps;\n\n    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:\n     workInProgress.type !== current.type )) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else {\n      // Neither props nor legacy context changes. Check if there's a pending\n      // update or context change.\n      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n      if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there\n      // may not be work scheduled on `current`, so we check for this flag.\n      (workInProgress.flags & DidCapture) === NoFlags) {\n        // No pending updates or context. Bail out now.\n        didReceiveUpdate = false;\n        return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);\n      }\n\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n\n    if (getIsHydrating() && isForkedChild(workInProgress)) {\n      // Check if this child belongs to a list of muliple children in\n      // its parent.\n      //\n      // In a true multi-threaded implementation, we would render children on\n      // parallel threads. This would represent the beginning of a new render\n      // thread for this subtree.\n      //\n      // We only use this for id generation during hydration, which is why the\n      // logic is located in this special branch.\n      var slotIndex = workInProgress.index;\n      var numberOfForks = getForksAtLevel();\n      pushTreeId(workInProgress, numberOfForks, slotIndex);\n    }\n  } // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n\n\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n      {\n        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\n      }\n\n    case LazyComponent:\n      {\n        var elementType = workInProgress.elementType;\n        return mountLazyComponent(current, workInProgress, elementType, renderLanes);\n      }\n\n    case FunctionComponent:\n      {\n        var Component = workInProgress.type;\n        var unresolvedProps = workInProgress.pendingProps;\n        var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n        return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);\n      }\n\n    case ClassComponent:\n      {\n        var _Component = workInProgress.type;\n        var _unresolvedProps = workInProgress.pendingProps;\n\n        var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);\n\n        return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);\n      }\n\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n\n    case HostComponent:\n      return updateHostComponent(current, workInProgress, renderLanes);\n\n    case HostText:\n      return updateHostText(current, workInProgress);\n\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n\n    case ForwardRef:\n      {\n        var type = workInProgress.type;\n        var _unresolvedProps2 = workInProgress.pendingProps;\n\n        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);\n\n        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);\n      }\n\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n\n    case MemoComponent:\n      {\n        var _type2 = workInProgress.type;\n        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.\n\n        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);\n\n        {\n          if (workInProgress.type !== workInProgress.elementType) {\n            var outerPropTypes = _type2.propTypes;\n\n            if (outerPropTypes) {\n              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only\n              'prop', getComponentNameFromType(_type2));\n            }\n          }\n        }\n\n        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);\n        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);\n      }\n\n    case SimpleMemoComponent:\n      {\n        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);\n      }\n\n    case IncompleteClassComponent:\n      {\n        var _Component2 = workInProgress.type;\n        var _unresolvedProps4 = workInProgress.pendingProps;\n\n        var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);\n\n        return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);\n      }\n\n    case SuspenseListComponent:\n      {\n        return updateSuspenseListComponent(current, workInProgress, renderLanes);\n      }\n\n    case ScopeComponent:\n      {\n\n        break;\n      }\n\n    case OffscreenComponent:\n      {\n        return updateOffscreenComponent(current, workInProgress, renderLanes);\n      }\n  }\n\n  throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n}\n\nfunction markUpdate(workInProgress) {\n  // Tag the fiber with an update effect. This turns a Placement into\n  // a PlacementAndUpdate.\n  workInProgress.flags |= Update;\n}\n\nfunction markRef$1(workInProgress) {\n  workInProgress.flags |= Ref;\n\n  {\n    workInProgress.flags |= RefStatic;\n  }\n}\n\nvar appendAllChildren;\nvar updateHostContainer;\nvar updateHostComponent$1;\nvar updateHostText$1;\n\n{\n  // Mutation mode\n  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    var node = workInProgress.child;\n\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (node.tag === HostPortal) ; else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === workInProgress) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function (current, workInProgress) {// Noop\n  };\n\n  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    var oldProps = current.memoizedProps;\n\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    } // If we get updated because one of our children updated, we don't\n    // have newProps so we'll have to reuse them.\n    // TODO: Split the update API as separate for the props vs. children.\n    // Even better would be if children weren't special cased at all tho.\n\n\n    var instance = workInProgress.stateNode;\n    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host\n    // component is hitting the resume path. Figure out why. Possibly\n    // related to `hidden`.\n\n    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.\n\n    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update. All the work is done in commitWork.\n\n    if (updatePayload) {\n      markUpdate(workInProgress);\n    }\n  };\n\n  updateHostText$1 = function (current, workInProgress, oldText, newText) {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  };\n}\n\nfunction cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n  if (getIsHydrating()) {\n    // If we're hydrating, we should consume as many items as we can\n    // so we don't leave any behind.\n    return;\n  }\n\n  switch (renderState.tailMode) {\n    case 'hidden':\n      {\n        // Any insertions at the end of the tail list after this point\n        // should be invisible. If there are already mounted boundaries\n        // anything before them are not considered for collapsing.\n        // Therefore we need to go through the whole tail to find if\n        // there are any.\n        var tailNode = renderState.tail;\n        var lastTailNode = null;\n\n        while (tailNode !== null) {\n          if (tailNode.alternate !== null) {\n            lastTailNode = tailNode;\n          }\n\n          tailNode = tailNode.sibling;\n        } // Next we're simply going to delete all insertions after the\n        // last rendered item.\n\n\n        if (lastTailNode === null) {\n          // All remaining items in the tail are insertions.\n          renderState.tail = null;\n        } else {\n          // Detach the insertion after the last node that was already\n          // inserted.\n          lastTailNode.sibling = null;\n        }\n\n        break;\n      }\n\n    case 'collapsed':\n      {\n        // Any insertions at the end of the tail list after this point\n        // should be invisible. If there are already mounted boundaries\n        // anything before them are not considered for collapsing.\n        // Therefore we need to go through the whole tail to find if\n        // there are any.\n        var _tailNode = renderState.tail;\n        var _lastTailNode = null;\n\n        while (_tailNode !== null) {\n          if (_tailNode.alternate !== null) {\n            _lastTailNode = _tailNode;\n          }\n\n          _tailNode = _tailNode.sibling;\n        } // Next we're simply going to delete all insertions after the\n        // last rendered item.\n\n\n        if (_lastTailNode === null) {\n          // All remaining items in the tail are insertions.\n          if (!hasRenderedATailFallback && renderState.tail !== null) {\n            // We suspended during the head. We want to show at least one\n            // row at the tail. So we'll keep on and cut off the rest.\n            renderState.tail.sibling = null;\n          } else {\n            renderState.tail = null;\n          }\n        } else {\n          // Detach the insertion after the last node that was already\n          // inserted.\n          _lastTailNode.sibling = null;\n        }\n\n        break;\n      }\n  }\n}\n\nfunction bubbleProperties(completedWork) {\n  var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;\n  var newChildLanes = NoLanes;\n  var subtreeFlags = NoFlags;\n\n  if (!didBailout) {\n    // Bubble up the earliest expiration time.\n    if ( (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      var actualDuration = completedWork.actualDuration;\n      var treeBaseDuration = completedWork.selfBaseDuration;\n      var child = completedWork.child;\n\n      while (child !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will\n        // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n        // When work is done, it should bubble to the parent's actualDuration. If\n        // the fiber has not been cloned though, (meaning no work was done), then\n        // this value will reflect the amount of time spent working on a previous\n        // render. In that case it should not bubble. We determine whether it was\n        // cloned by comparing the child pointer.\n\n        actualDuration += child.actualDuration;\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.actualDuration = actualDuration;\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      var _child = completedWork.child;\n\n      while (_child !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));\n        subtreeFlags |= _child.subtreeFlags;\n        subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n\n        _child.return = completedWork;\n        _child = _child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  } else {\n    // Bubble up the earliest expiration time.\n    if ( (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      var _treeBaseDuration = completedWork.selfBaseDuration;\n      var _child2 = completedWork.child;\n\n      while (_child2 !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n\n        subtreeFlags |= _child2.subtreeFlags & StaticMask;\n        subtreeFlags |= _child2.flags & StaticMask;\n        _treeBaseDuration += _child2.treeBaseDuration;\n        _child2 = _child2.sibling;\n      }\n\n      completedWork.treeBaseDuration = _treeBaseDuration;\n    } else {\n      var _child3 = completedWork.child;\n\n      while (_child3 !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n\n        subtreeFlags |= _child3.subtreeFlags & StaticMask;\n        subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n\n        _child3.return = completedWork;\n        _child3 = _child3.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  }\n\n  completedWork.childLanes = newChildLanes;\n  return didBailout;\n}\n\nfunction completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {\n  if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {\n    warnIfUnhydratedTailNodes(workInProgress);\n    resetHydrationState();\n    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;\n    return false;\n  }\n\n  var wasHydrated = popHydrationState(workInProgress);\n\n  if (nextState !== null && nextState.dehydrated !== null) {\n    // We might be inside a hydration state the first time we're picking up this\n    // Suspense boundary, and also after we've reentered it for further hydration.\n    if (current === null) {\n      if (!wasHydrated) {\n        throw new Error('A dehydrated suspense component was completed without a hydrated node. ' + 'This is probably a bug in React.');\n      }\n\n      prepareToHydrateHostSuspenseInstance(workInProgress);\n      bubbleProperties(workInProgress);\n\n      {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          var isTimedOutSuspense = nextState !== null;\n\n          if (isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            var primaryChildFragment = workInProgress.child;\n\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n            }\n          }\n        }\n      }\n\n      return false;\n    } else {\n      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\n      // state since we're now exiting out of it. popHydrationState doesn't do that for us.\n      resetHydrationState();\n\n      if ((workInProgress.flags & DidCapture) === NoFlags) {\n        // This boundary did not suspend so it's now hydrated and unsuspended.\n        workInProgress.memoizedState = null;\n      } // If nothing suspended, we need to schedule an effect to mark this boundary\n      // as having hydrated so events know that they're free to be invoked.\n      // It's also a signal to replay events and the suspense callback.\n      // If something suspended, schedule an effect to attach retry listeners.\n      // So we might as well always mark this.\n\n\n      workInProgress.flags |= Update;\n      bubbleProperties(workInProgress);\n\n      {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          var _isTimedOutSuspense = nextState !== null;\n\n          if (_isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            var _primaryChildFragment = workInProgress.child;\n\n            if (_primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;\n            }\n          }\n        }\n      }\n\n      return false;\n    }\n  } else {\n    // Successfully completed this tree. If this was a forced client render,\n    // there may have been recoverable errors during first hydration\n    // attempt. If so, add them to a queue so we can log them in the\n    // commit phase.\n    upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path\n\n    return true;\n  }\n}\n\nfunction completeWork(current, workInProgress, renderLanes) {\n  var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n\n  popTreeContext(workInProgress);\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      bubbleProperties(workInProgress);\n      return null;\n\n    case ClassComponent:\n      {\n        var Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          popContext(workInProgress);\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case HostRoot:\n      {\n        var fiberRoot = workInProgress.stateNode;\n        popHostContainer(workInProgress);\n        popTopLevelContextObject(workInProgress);\n        resetWorkInProgressVersions();\n\n        if (fiberRoot.pendingContext) {\n          fiberRoot.context = fiberRoot.pendingContext;\n          fiberRoot.pendingContext = null;\n        }\n\n        if (current === null || current.child === null) {\n          // If we hydrated, pop so that we can delete any remaining children\n          // that weren't hydrated.\n          var wasHydrated = popHydrationState(workInProgress);\n\n          if (wasHydrated) {\n            // If we hydrated, then we'll need to schedule an update for\n            // the commit side-effects on the root.\n            markUpdate(workInProgress);\n          } else {\n            if (current !== null) {\n              var prevState = current.memoizedState;\n\n              if ( // Check if this is a client root\n              !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)\n              (workInProgress.flags & ForceClientRender) !== NoFlags) {\n                // Schedule an effect to clear this container at the start of the\n                // next commit. This handles the case of React rendering into a\n                // container with previous children. It's also safe to do for\n                // updates too, because current.child would only be null if the\n                // previous render was null (so the container would already\n                // be empty).\n                workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been\n                // recoverable errors during first hydration attempt. If so, add\n                // them to a queue so we can log them in the commit phase.\n\n                upgradeHydrationErrorsToRecoverable();\n              }\n            }\n          }\n        }\n\n        updateHostContainer(current, workInProgress);\n        bubbleProperties(workInProgress);\n\n        return null;\n      }\n\n    case HostComponent:\n      {\n        popHostContext(workInProgress);\n        var rootContainerInstance = getRootHostContainer();\n        var type = workInProgress.type;\n\n        if (current !== null && workInProgress.stateNode != null) {\n          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);\n\n          if (current.ref !== workInProgress.ref) {\n            markRef$1(workInProgress);\n          }\n        } else {\n          if (!newProps) {\n            if (workInProgress.stateNode === null) {\n              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n            } // This can happen when we abort work.\n\n\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context\n          // \"stack\" as the parent. Then append children as we go in beginWork\n          // or completeWork depending on whether we want to add them top->down or\n          // bottom->up. Top->down is faster in IE11.\n\n          var _wasHydrated = popHydrationState(workInProgress);\n\n          if (_wasHydrated) {\n            // TODO: Move this and createInstance step into the beginPhase\n            // to consolidate.\n            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {\n              // If changes to the hydrated node need to be applied at the\n              // commit-phase we mark this as such.\n              markUpdate(workInProgress);\n            }\n          } else {\n            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);\n            appendAllChildren(instance, workInProgress, false, false);\n            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.\n            // (eg DOM renderer supports auto-focus for certain elements).\n            // Make sure such renderers get scheduled for later work.\n\n            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {\n              markUpdate(workInProgress);\n            }\n          }\n\n          if (workInProgress.ref !== null) {\n            // If there is a ref on a host node we need to schedule a callback\n            markRef$1(workInProgress);\n          }\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case HostText:\n      {\n        var newText = newProps;\n\n        if (current && workInProgress.stateNode != null) {\n          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need\n          // to schedule a side-effect to do the updates.\n\n          updateHostText$1(current, workInProgress, oldText, newText);\n        } else {\n          if (typeof newText !== 'string') {\n            if (workInProgress.stateNode === null) {\n              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n            } // This can happen when we abort work.\n\n          }\n\n          var _rootContainerInstance = getRootHostContainer();\n\n          var _currentHostContext = getHostContext();\n\n          var _wasHydrated2 = popHydrationState(workInProgress);\n\n          if (_wasHydrated2) {\n            if (prepareToHydrateHostTextInstance(workInProgress)) {\n              markUpdate(workInProgress);\n            }\n          } else {\n            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);\n          }\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case SuspenseComponent:\n      {\n        popSuspenseContext(workInProgress);\n        var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this\n        // to its own fiber type so that we can add other kinds of hydration\n        // boundaries that aren't associated with a Suspense tree. In anticipation\n        // of such a refactor, all the hydration logic is contained in\n        // this branch.\n\n        if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {\n          var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);\n\n          if (!fallthroughToNormalSuspensePath) {\n            if (workInProgress.flags & ShouldCapture) {\n              // Special case. There were remaining unhydrated nodes. We treat\n              // this as a mismatch. Revert to client rendering.\n              return workInProgress;\n            } else {\n              // Did not finish hydrating, either because this is the initial\n              // render or because something suspended.\n              return null;\n            }\n          } // Continue with the normal Suspense path.\n\n        }\n\n        if ((workInProgress.flags & DidCapture) !== NoFlags) {\n          // Something suspended. Re-render with the fallback children.\n          workInProgress.lanes = renderLanes; // Do not reset the effect list.\n\n          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          } // Don't bubble properties in this case.\n\n\n          return workInProgress;\n        }\n\n        var nextDidTimeout = nextState !== null;\n        var prevDidTimeout = current !== null && current.memoizedState !== null;\n        // a passive effect, which is when we process the transitions\n\n\n        if (nextDidTimeout !== prevDidTimeout) {\n          // an effect to toggle the subtree's visibility. When we switch from\n          // fallback -> primary, the inner Offscreen fiber schedules this effect\n          // as part of its normal complete phase. But when we switch from\n          // primary -> fallback, the inner Offscreen fiber does not have a complete\n          // phase. So we need to schedule its effect here.\n          //\n          // We also use this flag to connect/disconnect the effects, but the same\n          // logic applies: when re-connecting, the Offscreen fiber's complete\n          // phase will handle scheduling the effect. It's only when the fallback\n          // is active that we have to do anything special.\n\n\n          if (nextDidTimeout) {\n            var _offscreenFiber2 = workInProgress.child;\n            _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything\n            // in the concurrent tree already suspended during this render.\n            // This is a known bug.\n\n            if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n              // TODO: Move this back to throwException because this is too late\n              // if this is a large tree which is common for initial loads. We\n              // don't know if we should restart a render or not until we get\n              // this marker, and this is too late.\n              // If this render already had a ping or lower pri updates,\n              // and this is the first time we know we're going to suspend we\n              // should be able to immediately restart from within throwException.\n              var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);\n\n              if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {\n                // If this was in an invisible tree or a new render, then showing\n                // this boundary is ok.\n                renderDidSuspend();\n              } else {\n                // Otherwise, we're going to have to hide content so we should\n                // suspend for longer if possible.\n                renderDidSuspendDelayIfPossible();\n              }\n            }\n          }\n        }\n\n        var wakeables = workInProgress.updateQueue;\n\n        if (wakeables !== null) {\n          // Schedule an effect to attach a retry listener to the promise.\n          // TODO: Move to passive phase\n          workInProgress.flags |= Update;\n        }\n\n        bubbleProperties(workInProgress);\n\n        {\n          if ((workInProgress.mode & ProfileMode) !== NoMode) {\n            if (nextDidTimeout) {\n              // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n              var primaryChildFragment = workInProgress.child;\n\n              if (primaryChildFragment !== null) {\n                // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n              }\n            }\n          }\n        }\n\n        return null;\n      }\n\n    case HostPortal:\n      popHostContainer(workInProgress);\n      updateHostContainer(current, workInProgress);\n\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n\n      bubbleProperties(workInProgress);\n      return null;\n\n    case ContextProvider:\n      // Pop provider fiber\n      var context = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      bubbleProperties(workInProgress);\n      return null;\n\n    case IncompleteClassComponent:\n      {\n        // Same as class component case. I put it down here so that the tags are\n        // sequential to ensure this switch is compiled to a jump table.\n        var _Component = workInProgress.type;\n\n        if (isContextProvider(_Component)) {\n          popContext(workInProgress);\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case SuspenseListComponent:\n      {\n        popSuspenseContext(workInProgress);\n        var renderState = workInProgress.memoizedState;\n\n        if (renderState === null) {\n          // We're running in the default, \"independent\" mode.\n          // We don't do anything in this mode.\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n        var renderedTail = renderState.rendering;\n\n        if (renderedTail === null) {\n          // We just rendered the head.\n          if (!didSuspendAlready) {\n            // This is the first pass. We need to figure out if anything is still\n            // suspended in the rendered set.\n            // If new content unsuspended, but there's still some content that\n            // didn't. Then we need to do a second pass that forces everything\n            // to keep showing their fallbacks.\n            // We might be suspended if something in this render pass suspended, or\n            // something in the previous committed pass suspended. Otherwise,\n            // there's no chance so we can skip the expensive call to\n            // findFirstSuspended.\n            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);\n\n            if (!cannotBeSuspended) {\n              var row = workInProgress.child;\n\n              while (row !== null) {\n                var suspended = findFirstSuspended(row);\n\n                if (suspended !== null) {\n                  didSuspendAlready = true;\n                  workInProgress.flags |= DidCapture;\n                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as\n                  // part of the second pass. In that case nothing will subscribe to\n                  // its thenables. Instead, we'll transfer its thenables to the\n                  // SuspenseList so that it can retry if they resolve.\n                  // There might be multiple of these in the list but since we're\n                  // going to wait for all of them anyway, it doesn't really matter\n                  // which ones gets to ping. In theory we could get clever and keep\n                  // track of how many dependencies remain but it gets tricky because\n                  // in the meantime, we can add/remove/change items and dependencies.\n                  // We might bail out of the loop before finding any but that\n                  // doesn't matter since that means that the other boundaries that\n                  // we did find already has their listeners attached.\n\n                  var newThenables = suspended.updateQueue;\n\n                  if (newThenables !== null) {\n                    workInProgress.updateQueue = newThenables;\n                    workInProgress.flags |= Update;\n                  } // Rerender the whole list, but this time, we'll force fallbacks\n                  // to stay in place.\n                  // Reset the effect flags before doing the second pass since that's now invalid.\n                  // Reset the child fibers to their original state.\n\n\n                  workInProgress.subtreeFlags = NoFlags;\n                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately\n                  // rerender the children.\n\n                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.\n\n                  return workInProgress.child;\n                }\n\n                row = row.sibling;\n              }\n            }\n\n            if (renderState.tail !== null && now() > getRenderTargetTime()) {\n              // We have already passed our CPU deadline but we still have rows\n              // left in the tail. We'll just give up further attempts to render\n              // the main content and only render fallbacks.\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true;\n              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n              // to get it started back up to attempt the next item. While in terms\n              // of priority this work has the same priority as this current render,\n              // it's not part of the same transition once the transition has\n              // committed. If it's sync, we still want to yield so that it can be\n              // painted. Conceptually, this is really the same as pinging.\n              // We can use any RetryLane even if it's the one currently rendering\n              // since we're leaving it behind on this node.\n\n              workInProgress.lanes = SomeRetryLane;\n            }\n          } else {\n            cutOffTailIfNeeded(renderState, false);\n          } // Next we're going to render the tail.\n\n        } else {\n          // Append the rendered row to the child list.\n          if (!didSuspendAlready) {\n            var _suspended = findFirstSuspended(renderedTail);\n\n            if (_suspended !== null) {\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't\n              // get lost if this row ends up dropped during a second pass.\n\n              var _newThenables = _suspended.updateQueue;\n\n              if (_newThenables !== null) {\n                workInProgress.updateQueue = _newThenables;\n                workInProgress.flags |= Update;\n              }\n\n              cutOffTailIfNeeded(renderState, true); // This might have been modified.\n\n              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.\n              ) {\n                  // We're done.\n                  bubbleProperties(workInProgress);\n                  return null;\n                }\n            } else if ( // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {\n              // We have now passed our CPU deadline and we'll just give up further\n              // attempts to render the main content and only render fallbacks.\n              // The assumption is that this is usually faster.\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true;\n              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n              // to get it started back up to attempt the next item. While in terms\n              // of priority this work has the same priority as this current render,\n              // it's not part of the same transition once the transition has\n              // committed. If it's sync, we still want to yield so that it can be\n              // painted. Conceptually, this is really the same as pinging.\n              // We can use any RetryLane even if it's the one currently rendering\n              // since we're leaving it behind on this node.\n\n              workInProgress.lanes = SomeRetryLane;\n            }\n          }\n\n          if (renderState.isBackwards) {\n            // The effect list of the backwards tail will have been added\n            // to the end. This breaks the guarantee that life-cycles fire in\n            // sibling order but that isn't a strong guarantee promised by React.\n            // Especially since these might also just pop in during future commits.\n            // Append to the beginning of the list.\n            renderedTail.sibling = workInProgress.child;\n            workInProgress.child = renderedTail;\n          } else {\n            var previousSibling = renderState.last;\n\n            if (previousSibling !== null) {\n              previousSibling.sibling = renderedTail;\n            } else {\n              workInProgress.child = renderedTail;\n            }\n\n            renderState.last = renderedTail;\n          }\n        }\n\n        if (renderState.tail !== null) {\n          // We still have tail rows to render.\n          // Pop a row.\n          var next = renderState.tail;\n          renderState.rendering = next;\n          renderState.tail = next.sibling;\n          renderState.renderingStartTime = now();\n          next.sibling = null; // Restore the context.\n          // TODO: We can probably just avoid popping it instead and only\n          // setting it the first time we go from not suspended to suspended.\n\n          var suspenseContext = suspenseStackCursor.current;\n\n          if (didSuspendAlready) {\n            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n          } else {\n            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n          }\n\n          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.\n          // Don't bubble properties in this case.\n\n          return next;\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case ScopeComponent:\n      {\n\n        break;\n      }\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      {\n        popRenderLanes(workInProgress);\n        var _nextState = workInProgress.memoizedState;\n        var nextIsHidden = _nextState !== null;\n\n        if (current !== null) {\n          var _prevState = current.memoizedState;\n          var prevIsHidden = _prevState !== null;\n\n          if (prevIsHidden !== nextIsHidden && ( // LegacyHidden doesn't do any hiding — it only pre-renders.\n          !enableLegacyHidden )) {\n            workInProgress.flags |= Visibility;\n          }\n        }\n\n        if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n          bubbleProperties(workInProgress);\n        } else {\n          // Don't bubble properties for hidden children unless we're rendering\n          // at offscreen priority.\n          if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {\n            bubbleProperties(workInProgress);\n\n            {\n              // Check if there was an insertion or update in the hidden subtree.\n              // If so, we need to hide those nodes in the commit phase, so\n              // schedule a visibility effect.\n              if ( workInProgress.subtreeFlags & (Placement | Update)) {\n                workInProgress.flags |= Visibility;\n              }\n            }\n          }\n        }\n        return null;\n      }\n\n    case CacheComponent:\n      {\n\n        return null;\n      }\n\n    case TracingMarkerComponent:\n      {\n\n        return null;\n      }\n  }\n\n  throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n}\n\nfunction unwindWork(current, workInProgress, renderLanes) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(workInProgress);\n\n  switch (workInProgress.tag) {\n    case ClassComponent:\n      {\n        var Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          popContext(workInProgress);\n        }\n\n        var flags = workInProgress.flags;\n\n        if (flags & ShouldCapture) {\n          workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n\n          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          }\n\n          return workInProgress;\n        }\n\n        return null;\n      }\n\n    case HostRoot:\n      {\n        var root = workInProgress.stateNode;\n        popHostContainer(workInProgress);\n        popTopLevelContextObject(workInProgress);\n        resetWorkInProgressVersions();\n        var _flags = workInProgress.flags;\n\n        if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {\n          // There was an error during render that wasn't captured by a suspense\n          // boundary. Do a second pass on the root to unmount the children.\n          workInProgress.flags = _flags & ~ShouldCapture | DidCapture;\n          return workInProgress;\n        } // We unwound to the root without completing it. Exit.\n\n\n        return null;\n      }\n\n    case HostComponent:\n      {\n        // TODO: popHydrationState\n        popHostContext(workInProgress);\n        return null;\n      }\n\n    case SuspenseComponent:\n      {\n        popSuspenseContext(workInProgress);\n        var suspenseState = workInProgress.memoizedState;\n\n        if (suspenseState !== null && suspenseState.dehydrated !== null) {\n          if (workInProgress.alternate === null) {\n            throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');\n          }\n\n          resetHydrationState();\n        }\n\n        var _flags2 = workInProgress.flags;\n\n        if (_flags2 & ShouldCapture) {\n          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          }\n\n          return workInProgress;\n        }\n\n        return null;\n      }\n\n    case SuspenseListComponent:\n      {\n        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been\n        // caught by a nested boundary. If not, it should bubble through.\n\n        return null;\n      }\n\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n\n    case ContextProvider:\n      var context = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      return null;\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(workInProgress);\n      return null;\n\n    case CacheComponent:\n\n      return null;\n\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(current, interruptedWork, renderLanes) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(interruptedWork);\n\n  switch (interruptedWork.tag) {\n    case ClassComponent:\n      {\n        var childContextTypes = interruptedWork.type.childContextTypes;\n\n        if (childContextTypes !== null && childContextTypes !== undefined) {\n          popContext(interruptedWork);\n        }\n\n        break;\n      }\n\n    case HostRoot:\n      {\n        var root = interruptedWork.stateNode;\n        popHostContainer(interruptedWork);\n        popTopLevelContextObject(interruptedWork);\n        resetWorkInProgressVersions();\n        break;\n      }\n\n    case HostComponent:\n      {\n        popHostContext(interruptedWork);\n        break;\n      }\n\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n\n    case SuspenseComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n\n    case SuspenseListComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n\n    case ContextProvider:\n      var context = interruptedWork.type._context;\n      popProvider(context, interruptedWork);\n      break;\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(interruptedWork);\n      break;\n  }\n}\n\nvar didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n\n{\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n} // Used during the commit phase to track the state of the Offscreen component stack.\n// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n// Only used when enableSuspenseLayoutEffectSemantics is enabled.\n\n\nvar offscreenSubtreeIsHidden = false;\nvar offscreenSubtreeWasHidden = false;\nvar PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\nvar nextEffect = null; // Used for Profiling builds to track updaters.\n\nvar inProgressLanes = null;\nvar inProgressRoot = null;\nfunction reportUncaughtErrorInDEV(error) {\n  // Wrapping each small part of the commit phase into a guarded\n  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n  // But we rely on it to surface errors to DEV tools like overlays\n  // (https://github.com/facebook/react/issues/21712).\n  // As a compromise, rethrow only caught errors in a guard.\n  {\n    invokeGuardedCallback(null, function () {\n      throw error;\n    });\n    clearCaughtError();\n  }\n}\n\nvar callComponentWillUnmountWithTimer = function (current, instance) {\n  instance.props = current.memoizedProps;\n  instance.state = current.memoizedState;\n\n  if ( current.mode & ProfileMode) {\n    try {\n      startLayoutEffectTimer();\n      instance.componentWillUnmount();\n    } finally {\n      recordLayoutEffectDuration(current);\n    }\n  } else {\n    instance.componentWillUnmount();\n  }\n}; // Capture errors so they don't interrupt mounting.\n\n\nfunction safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {\n  try {\n    commitHookEffectListMount(Layout, current);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n} // Capture errors so they don't interrupt unmounting.\n\n\nfunction safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {\n  try {\n    callComponentWillUnmountWithTimer(current, instance);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n} // Capture errors so they don't interrupt mounting.\n\n\nfunction safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {\n  try {\n    instance.componentDidMount();\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n} // Capture errors so they don't interrupt mounting.\n\n\nfunction safelyAttachRef(current, nearestMountedAncestor) {\n  try {\n    commitAttachRef(current);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nfunction safelyDetachRef(current, nearestMountedAncestor) {\n  var ref = current.ref;\n\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n      var retVal;\n\n      try {\n        if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {\n          try {\n            startLayoutEffectTimer();\n            retVal = ref(null);\n          } finally {\n            recordLayoutEffectDuration(current);\n          }\n        } else {\n          retVal = ref(null);\n        }\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n\n      {\n        if (typeof retVal === 'function') {\n          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));\n        }\n      }\n    } else {\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(current, nearestMountedAncestor, destroy) {\n  try {\n    destroy();\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nvar focusedInstanceHandle = null;\nvar shouldFireAfterActiveInstanceBlur = false;\nfunction commitBeforeMutationEffects(root, firstChild) {\n  focusedInstanceHandle = prepareForCommit(root.containerInfo);\n  nextEffect = firstChild;\n  commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber\n\n  var shouldFire = shouldFireAfterActiveInstanceBlur;\n  shouldFireAfterActiveInstanceBlur = false;\n  focusedInstanceHandle = null;\n  return shouldFire;\n}\n\nfunction commitBeforeMutationEffects_begin() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.\n\n    var child = fiber.child;\n\n    if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitBeforeMutationEffects_complete();\n    }\n  }\n}\n\nfunction commitBeforeMutationEffects_complete() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    setCurrentFiber(fiber);\n\n    try {\n      commitBeforeMutationEffectsOnFiber(fiber);\n    } catch (error) {\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n\n    resetCurrentFiber();\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitBeforeMutationEffectsOnFiber(finishedWork) {\n  var current = finishedWork.alternate;\n  var flags = finishedWork.flags;\n\n  if ((flags & Snapshot) !== NoFlags) {\n    setCurrentFiber(finishedWork);\n\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          break;\n        }\n\n      case ClassComponent:\n        {\n          if (current !== null) {\n            var prevProps = current.memoizedProps;\n            var prevState = current.memoizedState;\n            var instance = finishedWork.stateNode; // We could update instance props and state here,\n            // but instead we rely on them being set during last render.\n            // TODO: revisit this when we implement resuming.\n\n            {\n              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                if (instance.props !== finishedWork.memoizedProps) {\n                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n\n                if (instance.state !== finishedWork.memoizedState) {\n                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n              }\n            }\n\n            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);\n\n            {\n              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n\n              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n                didWarnSet.add(finishedWork.type);\n\n                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));\n              }\n            }\n\n            instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n          }\n\n          break;\n        }\n\n      case HostRoot:\n        {\n          {\n            var root = finishedWork.stateNode;\n            clearContainer(root.containerInfo);\n          }\n\n          break;\n        }\n\n      case HostComponent:\n      case HostText:\n      case HostPortal:\n      case IncompleteClassComponent:\n        // Nothing to do for these component types\n        break;\n\n      default:\n        {\n          throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n        }\n    }\n\n    resetCurrentFiber();\n  }\n}\n\nfunction commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {\n  var updateQueue = finishedWork.updateQueue;\n  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n  if (lastEffect !== null) {\n    var firstEffect = lastEffect.next;\n    var effect = firstEffect;\n\n    do {\n      if ((effect.tag & flags) === flags) {\n        // Unmount\n        var destroy = effect.destroy;\n        effect.destroy = undefined;\n\n        if (destroy !== undefined) {\n          {\n            if ((flags & Passive$1) !== NoFlags$1) {\n              markComponentPassiveEffectUnmountStarted(finishedWork);\n            } else if ((flags & Layout) !== NoFlags$1) {\n              markComponentLayoutEffectUnmountStarted(finishedWork);\n            }\n          }\n\n          {\n            if ((flags & Insertion) !== NoFlags$1) {\n              setIsRunningInsertionEffect(true);\n            }\n          }\n\n          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n\n          {\n            if ((flags & Insertion) !== NoFlags$1) {\n              setIsRunningInsertionEffect(false);\n            }\n          }\n\n          {\n            if ((flags & Passive$1) !== NoFlags$1) {\n              markComponentPassiveEffectUnmountStopped();\n            } else if ((flags & Layout) !== NoFlags$1) {\n              markComponentLayoutEffectUnmountStopped();\n            }\n          }\n        }\n      }\n\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookEffectListMount(flags, finishedWork) {\n  var updateQueue = finishedWork.updateQueue;\n  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n  if (lastEffect !== null) {\n    var firstEffect = lastEffect.next;\n    var effect = firstEffect;\n\n    do {\n      if ((effect.tag & flags) === flags) {\n        {\n          if ((flags & Passive$1) !== NoFlags$1) {\n            markComponentPassiveEffectMountStarted(finishedWork);\n          } else if ((flags & Layout) !== NoFlags$1) {\n            markComponentLayoutEffectMountStarted(finishedWork);\n          }\n        } // Mount\n\n\n        var create = effect.create;\n\n        {\n          if ((flags & Insertion) !== NoFlags$1) {\n            setIsRunningInsertionEffect(true);\n          }\n        }\n\n        effect.destroy = create();\n\n        {\n          if ((flags & Insertion) !== NoFlags$1) {\n            setIsRunningInsertionEffect(false);\n          }\n        }\n\n        {\n          if ((flags & Passive$1) !== NoFlags$1) {\n            markComponentPassiveEffectMountStopped();\n          } else if ((flags & Layout) !== NoFlags$1) {\n            markComponentLayoutEffectMountStopped();\n          }\n        }\n\n        {\n          var destroy = effect.destroy;\n\n          if (destroy !== undefined && typeof destroy !== 'function') {\n            var hookName = void 0;\n\n            if ((effect.tag & Layout) !== NoFlags) {\n              hookName = 'useLayoutEffect';\n            } else if ((effect.tag & Insertion) !== NoFlags) {\n              hookName = 'useInsertionEffect';\n            } else {\n              hookName = 'useEffect';\n            }\n\n            var addendum = void 0;\n\n            if (destroy === null) {\n              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';\n            } else if (typeof destroy.then === 'function') {\n              addendum = '\\n\\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + hookName + '(() => {\\n' + '  async function fetchData() {\\n' + '    // You can await here\\n' + '    const response = await MyAPI.getData(someId);\\n' + '    // ...\\n' + '  }\\n' + '  fetchData();\\n' + \"}, [someId]); // Or [] if effect doesn't need props or state\\n\\n\" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n            } else {\n              addendum = ' You returned: ' + destroy;\n            }\n\n            error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);\n          }\n        }\n      }\n\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitPassiveEffectDurations(finishedRoot, finishedWork) {\n  {\n    // Only Profilers with work in their subtree will have an Update effect scheduled.\n    if ((finishedWork.flags & Update) !== NoFlags) {\n      switch (finishedWork.tag) {\n        case Profiler:\n          {\n            var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;\n            var _finishedWork$memoize = finishedWork.memoizedProps,\n                id = _finishedWork$memoize.id,\n                onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.\n            // It does not get reset until the start of the next commit phase.\n\n            var commitTime = getCommitTime();\n            var phase = finishedWork.alternate === null ? 'mount' : 'update';\n\n            {\n              if (isCurrentUpdateNested()) {\n                phase = 'nested-update';\n              }\n            }\n\n            if (typeof onPostCommit === 'function') {\n              onPostCommit(id, phase, passiveEffectDuration, commitTime);\n            } // Bubble times to the next nearest ancestor Profiler.\n            // After we process that Profiler, we'll bubble further up.\n\n\n            var parentFiber = finishedWork.return;\n\n            outer: while (parentFiber !== null) {\n              switch (parentFiber.tag) {\n                case HostRoot:\n                  var root = parentFiber.stateNode;\n                  root.passiveEffectDuration += passiveEffectDuration;\n                  break outer;\n\n                case Profiler:\n                  var parentStateNode = parentFiber.stateNode;\n                  parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                  break outer;\n              }\n\n              parentFiber = parentFiber.return;\n            }\n\n            break;\n          }\n      }\n    }\n  }\n}\n\nfunction commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {\n  if ((finishedWork.flags & LayoutMask) !== NoFlags) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          if ( !offscreenSubtreeWasHidden) {\n            // At this point layout effects have already been destroyed (during mutation phase).\n            // This is done to prevent sibling component effects from interfering with each other,\n            // e.g. a destroy function in one component should never override a ref set\n            // by a create function in another component during the same commit.\n            if ( finishedWork.mode & ProfileMode) {\n              try {\n                startLayoutEffectTimer();\n                commitHookEffectListMount(Layout | HasEffect, finishedWork);\n              } finally {\n                recordLayoutEffectDuration(finishedWork);\n              }\n            } else {\n              commitHookEffectListMount(Layout | HasEffect, finishedWork);\n            }\n          }\n\n          break;\n        }\n\n      case ClassComponent:\n        {\n          var instance = finishedWork.stateNode;\n\n          if (finishedWork.flags & Update) {\n            if (!offscreenSubtreeWasHidden) {\n              if (current === null) {\n                // We could update instance props and state here,\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n                {\n                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                    if (instance.props !== finishedWork.memoizedProps) {\n                      error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n\n                    if (instance.state !== finishedWork.memoizedState) {\n                      error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n                  }\n                }\n\n                if ( finishedWork.mode & ProfileMode) {\n                  try {\n                    startLayoutEffectTimer();\n                    instance.componentDidMount();\n                  } finally {\n                    recordLayoutEffectDuration(finishedWork);\n                  }\n                } else {\n                  instance.componentDidMount();\n                }\n              } else {\n                var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n                var prevState = current.memoizedState; // We could update instance props and state here,\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n\n                {\n                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                    if (instance.props !== finishedWork.memoizedProps) {\n                      error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n\n                    if (instance.state !== finishedWork.memoizedState) {\n                      error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n                  }\n                }\n\n                if ( finishedWork.mode & ProfileMode) {\n                  try {\n                    startLayoutEffectTimer();\n                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                  } finally {\n                    recordLayoutEffectDuration(finishedWork);\n                  }\n                } else {\n                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                }\n              }\n            }\n          } // TODO: I think this is now always non-null by the time it reaches the\n          // commit phase. Consider removing the type check.\n\n\n          var updateQueue = finishedWork.updateQueue;\n\n          if (updateQueue !== null) {\n            {\n              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                if (instance.props !== finishedWork.memoizedProps) {\n                  error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n\n                if (instance.state !== finishedWork.memoizedState) {\n                  error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n              }\n            } // We could update instance props and state here,\n            // but instead we rely on them being set during last render.\n            // TODO: revisit this when we implement resuming.\n\n\n            commitUpdateQueue(finishedWork, updateQueue, instance);\n          }\n\n          break;\n        }\n\n      case HostRoot:\n        {\n          // TODO: I think this is now always non-null by the time it reaches the\n          // commit phase. Consider removing the type check.\n          var _updateQueue = finishedWork.updateQueue;\n\n          if (_updateQueue !== null) {\n            var _instance = null;\n\n            if (finishedWork.child !== null) {\n              switch (finishedWork.child.tag) {\n                case HostComponent:\n                  _instance = getPublicInstance(finishedWork.child.stateNode);\n                  break;\n\n                case ClassComponent:\n                  _instance = finishedWork.child.stateNode;\n                  break;\n              }\n            }\n\n            commitUpdateQueue(finishedWork, _updateQueue, _instance);\n          }\n\n          break;\n        }\n\n      case HostComponent:\n        {\n          var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted\n          // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n          // These effects should only be committed when components are first mounted,\n          // aka when there is no current/alternate.\n\n          if (current === null && finishedWork.flags & Update) {\n            var type = finishedWork.type;\n            var props = finishedWork.memoizedProps;\n            commitMount(_instance2, type, props);\n          }\n\n          break;\n        }\n\n      case HostText:\n        {\n          // We have no life-cycles associated with text.\n          break;\n        }\n\n      case HostPortal:\n        {\n          // We have no life-cycles associated with portals.\n          break;\n        }\n\n      case Profiler:\n        {\n          {\n            var _finishedWork$memoize2 = finishedWork.memoizedProps,\n                onCommit = _finishedWork$memoize2.onCommit,\n                onRender = _finishedWork$memoize2.onRender;\n            var effectDuration = finishedWork.stateNode.effectDuration;\n            var commitTime = getCommitTime();\n            var phase = current === null ? 'mount' : 'update';\n\n            {\n              if (isCurrentUpdateNested()) {\n                phase = 'nested-update';\n              }\n            }\n\n            if (typeof onRender === 'function') {\n              onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);\n            }\n\n            {\n              if (typeof onCommit === 'function') {\n                onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);\n              } // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n              // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n              // because the effect is also where times bubble to parent Profilers.\n\n\n              enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.\n              // Do not reset these values until the next render so DevTools has a chance to read them first.\n\n              var parentFiber = finishedWork.return;\n\n              outer: while (parentFiber !== null) {\n                switch (parentFiber.tag) {\n                  case HostRoot:\n                    var root = parentFiber.stateNode;\n                    root.effectDuration += effectDuration;\n                    break outer;\n\n                  case Profiler:\n                    var parentStateNode = parentFiber.stateNode;\n                    parentStateNode.effectDuration += effectDuration;\n                    break outer;\n                }\n\n                parentFiber = parentFiber.return;\n              }\n            }\n          }\n\n          break;\n        }\n\n      case SuspenseComponent:\n        {\n          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n          break;\n        }\n\n      case SuspenseListComponent:\n      case IncompleteClassComponent:\n      case ScopeComponent:\n      case OffscreenComponent:\n      case LegacyHiddenComponent:\n      case TracingMarkerComponent:\n        {\n          break;\n        }\n\n      default:\n        throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n    }\n  }\n\n  if ( !offscreenSubtreeWasHidden) {\n    {\n      if (finishedWork.flags & Ref) {\n        commitAttachRef(finishedWork);\n      }\n    }\n  }\n}\n\nfunction reappearLayoutEffectsOnFiber(node) {\n  // Turn on layout effects in a tree that previously disappeared.\n  // TODO (Offscreen) Check: flags & LayoutStatic\n  switch (node.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        if ( node.mode & ProfileMode) {\n          try {\n            startLayoutEffectTimer();\n            safelyCallCommitHookLayoutEffectListMount(node, node.return);\n          } finally {\n            recordLayoutEffectDuration(node);\n          }\n        } else {\n          safelyCallCommitHookLayoutEffectListMount(node, node.return);\n        }\n\n        break;\n      }\n\n    case ClassComponent:\n      {\n        var instance = node.stateNode;\n\n        if (typeof instance.componentDidMount === 'function') {\n          safelyCallComponentDidMount(node, node.return, instance);\n        }\n\n        safelyAttachRef(node, node.return);\n        break;\n      }\n\n    case HostComponent:\n      {\n        safelyAttachRef(node, node.return);\n        break;\n      }\n  }\n}\n\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n  // Only hide or unhide the top-most host nodes.\n  var hostSubtreeRoot = null;\n\n  {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    var node = finishedWork;\n\n    while (true) {\n      if (node.tag === HostComponent) {\n        if (hostSubtreeRoot === null) {\n          hostSubtreeRoot = node;\n\n          try {\n            var instance = node.stateNode;\n\n            if (isHidden) {\n              hideInstance(instance);\n            } else {\n              unhideInstance(node.stateNode, node.memoizedProps);\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else if (node.tag === HostText) {\n        if (hostSubtreeRoot === null) {\n          try {\n            var _instance3 = node.stateNode;\n\n            if (isHidden) {\n              hideTextInstance(_instance3);\n            } else {\n              unhideTextInstance(_instance3, node.memoizedProps);\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === finishedWork) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n\n        if (hostSubtreeRoot === node) {\n          hostSubtreeRoot = null;\n        }\n\n        node = node.return;\n      }\n\n      if (hostSubtreeRoot === node) {\n        hostSubtreeRoot = null;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork) {\n  var ref = finishedWork.ref;\n\n  if (ref !== null) {\n    var instance = finishedWork.stateNode;\n    var instanceToUse;\n\n    switch (finishedWork.tag) {\n      case HostComponent:\n        instanceToUse = getPublicInstance(instance);\n        break;\n\n      default:\n        instanceToUse = instance;\n    } // Moved outside to ensure DCE works with this flag\n\n    if (typeof ref === 'function') {\n      var retVal;\n\n      if ( finishedWork.mode & ProfileMode) {\n        try {\n          startLayoutEffectTimer();\n          retVal = ref(instanceToUse);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        retVal = ref(instanceToUse);\n      }\n\n      {\n        if (typeof retVal === 'function') {\n          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));\n        }\n      }\n    } else {\n      {\n        if (!ref.hasOwnProperty('current')) {\n          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));\n        }\n      }\n\n      ref.current = instanceToUse;\n    }\n  }\n}\n\nfunction detachFiberMutation(fiber) {\n  // Cut off the return pointer to disconnect it from the tree.\n  // This enables us to detect and warn against state updates on an unmounted component.\n  // It also prevents events from bubbling from within disconnected components.\n  //\n  // Ideally, we should also clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child.\n  // This child itself will be GC:ed when the parent updates the next time.\n  //\n  // Note that we can't clear child or sibling pointers yet.\n  // They're needed for passive effects and for findDOMNode.\n  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n  //\n  // Don't reset the alternate yet, either. We need that so we can detach the\n  // alternate's fields in the passive phase. Clearing the return pointer is\n  // sufficient for findDOMNode semantics.\n  var alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    alternate.return = null;\n  }\n\n  fiber.return = null;\n}\n\nfunction detachFiberAfterEffects(fiber) {\n  var alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    fiber.alternate = null;\n    detachFiberAfterEffects(alternate);\n  } // Note: Defensively using negation instead of < in case\n  // `deletedTreeCleanUpLevel` is undefined.\n\n\n  {\n    // Clear cyclical Fiber fields. This level alone is designed to roughly\n    // approximate the planned Fiber refactor. In that world, `setState` will be\n    // bound to a special \"instance\" object instead of a Fiber. The Instance\n    // object will not have any of these fields. It will only be connected to\n    // the fiber tree via a single link at the root. So if this level alone is\n    // sufficient to fix memory issues, that bodes well for our plans.\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host\n    // tree, which has its own pointers to children, parents, and siblings.\n    // The other host nodes also point back to fibers, so we should detach that\n    // one, too.\n\n    if (fiber.tag === HostComponent) {\n      var hostInstance = fiber.stateNode;\n\n      if (hostInstance !== null) {\n        detachDeletedInstance(hostInstance);\n      }\n    }\n\n    fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We\n    // already disconnect the `return` pointer at the root of the deleted\n    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n    // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n    // `alternate`. But we'll clear it in the next level anyway, just in case.\n\n    {\n      fiber._debugOwner = null;\n    }\n\n    {\n      // Theoretically, nothing in here should be necessary, because we already\n      // disconnected the fiber from the tree. So even if something leaks this\n      // particular fiber, it won't leak anything else\n      //\n      // The purpose of this branch is to be super aggressive so we can measure\n      // if there's any difference in memory impact. If there is, that could\n      // indicate a React leak we don't know about.\n      fiber.return = null;\n      fiber.dependencies = null;\n      fiber.memoizedProps = null;\n      fiber.memoizedState = null;\n      fiber.pendingProps = null;\n      fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n\n      fiber.updateQueue = null;\n    }\n  }\n}\n\nfunction getHostParentFiber(fiber) {\n  var parent = fiber.return;\n\n  while (parent !== null) {\n    if (isHostParent(parent)) {\n      return parent;\n    }\n\n    parent = parent.return;\n  }\n\n  throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n}\n\nfunction isHostParent(fiber) {\n  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;\n}\n\nfunction getHostSibling(fiber) {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  var node = fiber;\n\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n\n    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      } // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n\n\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    } // Check if this host node is stable or about to be placed.\n\n\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork) {\n\n\n  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.\n\n  switch (parentFiber.tag) {\n    case HostComponent:\n      {\n        var parent = parentFiber.stateNode;\n\n        if (parentFiber.flags & ContentReset) {\n          // Reset the text content of the parent before doing any insertions\n          resetTextContent(parent); // Clear ContentReset from the effect tag\n\n          parentFiber.flags &= ~ContentReset;\n        }\n\n        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its\n        // children to find all the terminal nodes.\n\n        insertOrAppendPlacementNode(finishedWork, before, parent);\n        break;\n      }\n\n    case HostRoot:\n    case HostPortal:\n      {\n        var _parent = parentFiber.stateNode.containerInfo;\n\n        var _before = getHostSibling(finishedWork);\n\n        insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);\n        break;\n      }\n    // eslint-disable-next-line-no-fallthrough\n\n    default:\n      throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\n  var tag = node.tag;\n  var isHost = tag === HostComponent || tag === HostText;\n\n  if (isHost) {\n    var stateNode = node.stateNode;\n\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n  } else if (tag === HostPortal) ; else {\n    var child = node.child;\n\n    if (child !== null) {\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n      var sibling = child.sibling;\n\n      while (sibling !== null) {\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(node, before, parent) {\n  var tag = node.tag;\n  var isHost = tag === HostComponent || tag === HostText;\n\n  if (isHost) {\n    var stateNode = node.stateNode;\n\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n  } else if (tag === HostPortal) ; else {\n    var child = node.child;\n\n    if (child !== null) {\n      insertOrAppendPlacementNode(child, before, parent);\n      var sibling = child.sibling;\n\n      while (sibling !== null) {\n        insertOrAppendPlacementNode(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n} // These are tracked on the stack as we recursively traverse a\n// deleted subtree.\n// TODO: Update these during the whole mutation phase, not just during\n// a deletion.\n\n\nvar hostParent = null;\nvar hostParentIsContainer = false;\n\nfunction commitDeletionEffects(root, returnFiber, deletedFiber) {\n  {\n    // We only have the top Fiber that was deleted but we need to recurse down its\n    // children to find all the terminal nodes.\n    // Recursively delete all host nodes from the parent, detach refs, clean\n    // up mounted layout effects, and call componentWillUnmount.\n    // We only need to remove the topmost host child in each branch. But then we\n    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We\n    // could split this into two separate traversals functions, where the second\n    // one doesn't include any removeChild logic. This is maybe the same\n    // function as \"disappearLayoutEffects\" (or whatever that turns into after\n    // the layout phase is refactored to use recursion).\n    // Before starting, find the nearest host parent on the stack so we know\n    // which instance/container to remove the children from.\n    // TODO: Instead of searching up the fiber return path on every deletion, we\n    // can track the nearest host component on the JS stack as we traverse the\n    // tree during the commit phase. This would make insertions faster, too.\n    var parent = returnFiber;\n\n    findParent: while (parent !== null) {\n      switch (parent.tag) {\n        case HostComponent:\n          {\n            hostParent = parent.stateNode;\n            hostParentIsContainer = false;\n            break findParent;\n          }\n\n        case HostRoot:\n          {\n            hostParent = parent.stateNode.containerInfo;\n            hostParentIsContainer = true;\n            break findParent;\n          }\n\n        case HostPortal:\n          {\n            hostParent = parent.stateNode.containerInfo;\n            hostParentIsContainer = true;\n            break findParent;\n          }\n      }\n\n      parent = parent.return;\n    }\n\n    if (hostParent === null) {\n      throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n    }\n\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n    hostParent = null;\n    hostParentIsContainer = false;\n  }\n\n  detachFiberMutation(deletedFiber);\n}\n\nfunction recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {\n  // TODO: Use a static flag to skip trees that don't have unmount effects\n  var child = parent.child;\n\n  while (child !== null) {\n    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);\n    child = child.sibling;\n  }\n}\n\nfunction commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {\n  onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse\n  // into their subtree. There are simpler cases in the inner switch\n  // that don't modify the stack.\n\n  switch (deletedFiber.tag) {\n    case HostComponent:\n      {\n        if (!offscreenSubtreeWasHidden) {\n          safelyDetachRef(deletedFiber, nearestMountedAncestor);\n        } // Intentional fallthrough to next branch\n\n      }\n    // eslint-disable-next-line-no-fallthrough\n\n    case HostText:\n      {\n        // We only need to remove the nearest host child. Set the host parent\n        // to `null` on the stack to indicate that nested children don't\n        // need to be removed.\n        {\n          var prevHostParent = hostParent;\n          var prevHostParentIsContainer = hostParentIsContainer;\n          hostParent = null;\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n          hostParent = prevHostParent;\n          hostParentIsContainer = prevHostParentIsContainer;\n\n          if (hostParent !== null) {\n            // Now that all the child effects have unmounted, we can remove the\n            // node from the tree.\n            if (hostParentIsContainer) {\n              removeChildFromContainer(hostParent, deletedFiber.stateNode);\n            } else {\n              removeChild(hostParent, deletedFiber.stateNode);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case DehydratedFragment:\n      {\n        // Delete the dehydrated suspense boundary and all of its content.\n\n\n        {\n          if (hostParent !== null) {\n            if (hostParentIsContainer) {\n              clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);\n            } else {\n              clearSuspenseBoundary(hostParent, deletedFiber.stateNode);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case HostPortal:\n      {\n        {\n          // When we go into a portal, it becomes the parent to remove from.\n          var _prevHostParent = hostParent;\n          var _prevHostParentIsContainer = hostParentIsContainer;\n          hostParent = deletedFiber.stateNode.containerInfo;\n          hostParentIsContainer = true;\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n          hostParent = _prevHostParent;\n          hostParentIsContainer = _prevHostParentIsContainer;\n        }\n\n        return;\n      }\n\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      {\n        if (!offscreenSubtreeWasHidden) {\n          var updateQueue = deletedFiber.updateQueue;\n\n          if (updateQueue !== null) {\n            var lastEffect = updateQueue.lastEffect;\n\n            if (lastEffect !== null) {\n              var firstEffect = lastEffect.next;\n              var effect = firstEffect;\n\n              do {\n                var _effect = effect,\n                    destroy = _effect.destroy,\n                    tag = _effect.tag;\n\n                if (destroy !== undefined) {\n                  if ((tag & Insertion) !== NoFlags$1) {\n                    safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                  } else if ((tag & Layout) !== NoFlags$1) {\n                    {\n                      markComponentLayoutEffectUnmountStarted(deletedFiber);\n                    }\n\n                    if ( deletedFiber.mode & ProfileMode) {\n                      startLayoutEffectTimer();\n                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                      recordLayoutEffectDuration(deletedFiber);\n                    } else {\n                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                    }\n\n                    {\n                      markComponentLayoutEffectUnmountStopped();\n                    }\n                  }\n                }\n\n                effect = effect.next;\n              } while (effect !== firstEffect);\n            }\n          }\n        }\n\n        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        return;\n      }\n\n    case ClassComponent:\n      {\n        if (!offscreenSubtreeWasHidden) {\n          safelyDetachRef(deletedFiber, nearestMountedAncestor);\n          var instance = deletedFiber.stateNode;\n\n          if (typeof instance.componentWillUnmount === 'function') {\n            safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);\n          }\n        }\n\n        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        return;\n      }\n\n    case ScopeComponent:\n      {\n\n        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        return;\n      }\n\n    case OffscreenComponent:\n      {\n        if ( // TODO: Remove this dead flag\n         deletedFiber.mode & ConcurrentMode) {\n          // If this offscreen component is hidden, we already unmounted it. Before\n          // deleting the children, track that it's already unmounted so that we\n          // don't attempt to unmount the effects again.\n          // TODO: If the tree is hidden, in most cases we should be able to skip\n          // over the nested children entirely. An exception is we haven't yet found\n          // the topmost host node to delete, which we already track on the stack.\n          // But the other case is portals, which need to be detached no matter how\n          // deeply they are nested. We should use a subtree flag to track whether a\n          // subtree includes a nested portal.\n          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        } else {\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        }\n\n        break;\n      }\n\n    default:\n      {\n        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        return;\n      }\n  }\n}\n\nfunction commitSuspenseCallback(finishedWork) {\n  // TODO: Move this to passive phase\n  var newState = finishedWork.memoizedState;\n}\n\nfunction commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {\n\n  var newState = finishedWork.memoizedState;\n\n  if (newState === null) {\n    var current = finishedWork.alternate;\n\n    if (current !== null) {\n      var prevState = current.memoizedState;\n\n      if (prevState !== null) {\n        var suspenseInstance = prevState.dehydrated;\n\n        if (suspenseInstance !== null) {\n          commitHydratedSuspenseInstance(suspenseInstance);\n        }\n      }\n    }\n  }\n}\n\nfunction attachSuspenseRetryListeners(finishedWork) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  var wakeables = finishedWork.updateQueue;\n\n  if (wakeables !== null) {\n    finishedWork.updateQueue = null;\n    var retryCache = finishedWork.stateNode;\n\n    if (retryCache === null) {\n      retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n    }\n\n    wakeables.forEach(function (wakeable) {\n      // Memoize using the boundary fiber to prevent redundant listeners.\n      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n\n      if (!retryCache.has(wakeable)) {\n        retryCache.add(wakeable);\n\n        {\n          if (isDevToolsPresent) {\n            if (inProgressLanes !== null && inProgressRoot !== null) {\n              // If we have pending work still, associate the original updaters with it.\n              restorePendingUpdaters(inProgressRoot, inProgressLanes);\n            } else {\n              throw Error('Expected finished root and lanes to be set. This is a bug in React.');\n            }\n          }\n        }\n\n        wakeable.then(retry, retry);\n      }\n    });\n  }\n} // This function detects when a Suspense boundary goes from visible to hidden.\nfunction commitMutationEffects(root, finishedWork, committedLanes) {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n  setCurrentFiber(finishedWork);\n  commitMutationEffectsOnFiber(finishedWork, root);\n  setCurrentFiber(finishedWork);\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction recursivelyTraverseMutationEffects(root, parentFiber, lanes) {\n  // Deletions effects can be scheduled on any fiber type. They need to happen\n  // before the children effects hae fired.\n  var deletions = parentFiber.deletions;\n\n  if (deletions !== null) {\n    for (var i = 0; i < deletions.length; i++) {\n      var childToDelete = deletions[i];\n\n      try {\n        commitDeletionEffects(root, parentFiber, childToDelete);\n      } catch (error) {\n        captureCommitPhaseError(childToDelete, parentFiber, error);\n      }\n    }\n  }\n\n  var prevDebugFiber = getCurrentFiber();\n\n  if (parentFiber.subtreeFlags & MutationMask) {\n    var child = parentFiber.child;\n\n    while (child !== null) {\n      setCurrentFiber(child);\n      commitMutationEffectsOnFiber(child, root);\n      child = child.sibling;\n    }\n  }\n\n  setCurrentFiber(prevDebugFiber);\n}\n\nfunction commitMutationEffectsOnFiber(finishedWork, root, lanes) {\n  var current = finishedWork.alternate;\n  var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,\n  // because the fiber tag is more specific. An exception is any flag related\n  // to reconcilation, because those can be set on all fiber types.\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Update) {\n          try {\n            commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\n            commitHookEffectListMount(Insertion | HasEffect, finishedWork);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          } // Layout effects are destroyed during the mutation phase so that all\n          // destroy functions for all fibers are called before any create functions.\n          // This prevents sibling component effects from interfering with each other,\n          // e.g. a destroy function in one component should never override a ref set\n          // by a create function in another component during the same commit.\n\n\n          if ( finishedWork.mode & ProfileMode) {\n            try {\n              startLayoutEffectTimer();\n              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n\n            recordLayoutEffectDuration(finishedWork);\n          } else {\n            try {\n              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case ClassComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Ref) {\n          if (current !== null) {\n            safelyDetachRef(current, current.return);\n          }\n        }\n\n        return;\n      }\n\n    case HostComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Ref) {\n          if (current !== null) {\n            safelyDetachRef(current, current.return);\n          }\n        }\n\n        {\n          // TODO: ContentReset gets cleared by the children during the commit\n          // phase. This is a refactor hazard because it means we must read\n          // flags the flags after `commitReconciliationEffects` has already run;\n          // the order matters. We should refactor so that ContentReset does not\n          // rely on mutating the flag during commit. Like by setting a flag\n          // during the render phase instead.\n          if (finishedWork.flags & ContentReset) {\n            var instance = finishedWork.stateNode;\n\n            try {\n              resetTextContent(instance);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n\n          if (flags & Update) {\n            var _instance4 = finishedWork.stateNode;\n\n            if (_instance4 != null) {\n              // Commit the work prepared earlier.\n              var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n              // as the newProps. The updatePayload will contain the real change in\n              // this case.\n\n              var oldProps = current !== null ? current.memoizedProps : newProps;\n              var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.\n\n              var updatePayload = finishedWork.updateQueue;\n              finishedWork.updateQueue = null;\n\n              if (updatePayload !== null) {\n                try {\n                  commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            }\n          }\n        }\n\n        return;\n      }\n\n    case HostText:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Update) {\n          {\n            if (finishedWork.stateNode === null) {\n              throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n            }\n\n            var textInstance = finishedWork.stateNode;\n            var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n            // as the newProps. The updatePayload will contain the real change in\n            // this case.\n\n            var oldText = current !== null ? current.memoizedProps : newText;\n\n            try {\n              commitTextUpdate(textInstance, oldText, newText);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case HostRoot:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Update) {\n          {\n            if (current !== null) {\n              var prevRootState = current.memoizedState;\n\n              if (prevRootState.isDehydrated) {\n                try {\n                  commitHydratedContainer(root.containerInfo);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            }\n          }\n        }\n\n        return;\n      }\n\n    case HostPortal:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        return;\n      }\n\n    case SuspenseComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n        var offscreenFiber = finishedWork.child;\n\n        if (offscreenFiber.flags & Visibility) {\n          var offscreenInstance = offscreenFiber.stateNode;\n          var newState = offscreenFiber.memoizedState;\n          var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can\n          // read it during an event\n\n          offscreenInstance.isHidden = isHidden;\n\n          if (isHidden) {\n            var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;\n\n            if (!wasHidden) {\n              // TODO: Move to passive phase\n              markCommitTimeOfFallback();\n            }\n          }\n        }\n\n        if (flags & Update) {\n          try {\n            commitSuspenseCallback(finishedWork);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n\n          attachSuspenseRetryListeners(finishedWork);\n        }\n\n        return;\n      }\n\n    case OffscreenComponent:\n      {\n        var _wasHidden = current !== null && current.memoizedState !== null;\n\n        if ( // TODO: Remove this dead flag\n         finishedWork.mode & ConcurrentMode) {\n          // Before committing the children, track on the stack whether this\n          // offscreen subtree was already hidden, so that we don't unmount the\n          // effects again.\n          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        } else {\n          recursivelyTraverseMutationEffects(root, finishedWork);\n        }\n\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Visibility) {\n          var _offscreenInstance = finishedWork.stateNode;\n          var _newState = finishedWork.memoizedState;\n\n          var _isHidden = _newState !== null;\n\n          var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can\n          // read it during an event\n\n          _offscreenInstance.isHidden = _isHidden;\n\n          {\n            if (_isHidden) {\n              if (!_wasHidden) {\n                if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\n                  nextEffect = offscreenBoundary;\n                  var offscreenChild = offscreenBoundary.child;\n\n                  while (offscreenChild !== null) {\n                    nextEffect = offscreenChild;\n                    disappearLayoutEffects_begin(offscreenChild);\n                    offscreenChild = offscreenChild.sibling;\n                  }\n                }\n              }\n            }\n          }\n\n          {\n            // TODO: This needs to run whenever there's an insertion or update\n            // inside a hidden Offscreen tree.\n            hideOrUnhideAllChildren(offscreenBoundary, _isHidden);\n          }\n        }\n\n        return;\n      }\n\n    case SuspenseListComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Update) {\n          attachSuspenseRetryListeners(finishedWork);\n        }\n\n        return;\n      }\n\n    case ScopeComponent:\n      {\n\n        return;\n      }\n\n    default:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n        return;\n      }\n  }\n}\n\nfunction commitReconciliationEffects(finishedWork) {\n  // Placement effects (insertions, reorders) can be scheduled on any fiber\n  // type. They needs to happen after the children effects have fired, but\n  // before the effects on this fiber have fired.\n  var flags = finishedWork.flags;\n\n  if (flags & Placement) {\n    try {\n      commitPlacement(finishedWork);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    } // Clear the \"placement\" from effect tag so that we know that this is\n    // inserted, before any life-cycles like componentDidMount gets called.\n    // TODO: findDOMNode doesn't rely on this any more but isMounted does\n    // and isMounted is deprecated anyway so we should be able to kill this.\n\n\n    finishedWork.flags &= ~Placement;\n  }\n\n  if (flags & Hydrating) {\n    finishedWork.flags &= ~Hydrating;\n  }\n}\n\nfunction commitLayoutEffects(finishedWork, root, committedLanes) {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n  nextEffect = finishedWork;\n  commitLayoutEffects_begin(finishedWork, root, committedLanes);\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {\n  // Suspense layout effects semantics don't change for legacy roots.\n  var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;\n\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var firstChild = fiber.child;\n\n    if ( fiber.tag === OffscreenComponent && isModernRoot) {\n      // Keep track of the current Offscreen stack's state.\n      var isHidden = fiber.memoizedState !== null;\n      var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n\n      if (newOffscreenSubtreeIsHidden) {\n        // The Offscreen tree is hidden. Skip over its layout effects.\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n        continue;\n      } else {\n        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask\n        var current = fiber.alternate;\n        var wasHidden = current !== null && current.memoizedState !== null;\n        var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;\n        var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n        var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.\n\n        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n\n        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n          // This is the root of a reappearing boundary. Turn its layout effects\n          // back on.\n          nextEffect = fiber;\n          reappearLayoutEffects_begin(fiber);\n        }\n\n        var child = firstChild;\n\n        while (child !== null) {\n          nextEffect = child;\n          commitLayoutEffects_begin(child, // New root; bubble back up to here and stop.\n          root, committedLanes);\n          child = child.sibling;\n        } // Restore Offscreen state and resume in our-progress traversal.\n\n\n        nextEffect = fiber;\n        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n        continue;\n      }\n    }\n\n    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n    }\n  }\n}\n\nfunction commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n\n    if ((fiber.flags & LayoutMask) !== NoFlags) {\n      var current = fiber.alternate;\n      setCurrentFiber(fiber);\n\n      try {\n        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);\n      } catch (error) {\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n\n      resetCurrentFiber();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction disappearLayoutEffects_begin(subtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent:\n        {\n          if ( fiber.mode & ProfileMode) {\n            try {\n              startLayoutEffectTimer();\n              commitHookEffectListUnmount(Layout, fiber, fiber.return);\n            } finally {\n              recordLayoutEffectDuration(fiber);\n            }\n          } else {\n            commitHookEffectListUnmount(Layout, fiber, fiber.return);\n          }\n\n          break;\n        }\n\n      case ClassComponent:\n        {\n          // TODO (Offscreen) Check: flags & RefStatic\n          safelyDetachRef(fiber, fiber.return);\n          var instance = fiber.stateNode;\n\n          if (typeof instance.componentWillUnmount === 'function') {\n            safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n          }\n\n          break;\n        }\n\n      case HostComponent:\n        {\n          safelyDetachRef(fiber, fiber.return);\n          break;\n        }\n\n      case OffscreenComponent:\n        {\n          // Check if this is a\n          var isHidden = fiber.memoizedState !== null;\n\n          if (isHidden) {\n            // Nested Offscreen tree is already hidden. Don't disappear\n            // its effects.\n            disappearLayoutEffects_complete(subtreeRoot);\n            continue;\n          }\n\n          break;\n        }\n    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n\n\n    if (firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      disappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction disappearLayoutEffects_complete(subtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction reappearLayoutEffects_begin(subtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var firstChild = fiber.child;\n\n    if (fiber.tag === OffscreenComponent) {\n      var isHidden = fiber.memoizedState !== null;\n\n      if (isHidden) {\n        // Nested Offscreen tree is still hidden. Don't re-appear its effects.\n        reappearLayoutEffects_complete(subtreeRoot);\n        continue;\n      }\n    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n\n\n    if (firstChild !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      reappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction reappearLayoutEffects_complete(subtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic\n\n    setCurrentFiber(fiber);\n\n    try {\n      reappearLayoutEffectsOnFiber(fiber);\n    } catch (error) {\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n\n    resetCurrentFiber();\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {\n  nextEffect = finishedWork;\n  commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);\n}\n\nfunction commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var firstChild = fiber.child;\n\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);\n    }\n  }\n}\n\nfunction commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentFiber(fiber);\n\n      try {\n        commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);\n      } catch (error) {\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n\n      resetCurrentFiber();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        if ( finishedWork.mode & ProfileMode) {\n          startPassiveEffectTimer();\n\n          try {\n            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n          } finally {\n            recordPassiveEffectDuration(finishedWork);\n          }\n        } else {\n          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n        }\n\n        break;\n      }\n  }\n}\n\nfunction commitPassiveUnmountEffects(firstChild) {\n  nextEffect = firstChild;\n  commitPassiveUnmountEffects_begin();\n}\n\nfunction commitPassiveUnmountEffects_begin() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var child = fiber.child;\n\n    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {\n      var deletions = fiber.deletions;\n\n      if (deletions !== null) {\n        for (var i = 0; i < deletions.length; i++) {\n          var fiberToDelete = deletions[i];\n          nextEffect = fiberToDelete;\n          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);\n        }\n\n        {\n          // A fiber was deleted from this parent fiber, but it's still part of\n          // the previous (alternate) parent fiber's list of children. Because\n          // children are a linked list, an earlier sibling that's still alive\n          // will be connected to the deleted fiber via its `alternate`:\n          //\n          //   live fiber\n          //   --alternate--> previous live fiber\n          //   --sibling--> deleted fiber\n          //\n          // We can't disconnect `alternate` on nodes that haven't been deleted\n          // yet, but we can disconnect the `sibling` and `child` pointers.\n          var previousFiber = fiber.alternate;\n\n          if (previousFiber !== null) {\n            var detachedChild = previousFiber.child;\n\n            if (detachedChild !== null) {\n              previousFiber.child = null;\n\n              do {\n                var detachedSibling = detachedChild.sibling;\n                detachedChild.sibling = null;\n                detachedChild = detachedSibling;\n              } while (detachedChild !== null);\n            }\n          }\n        }\n\n        nextEffect = fiber;\n      }\n    }\n\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffects_complete();\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffects_complete() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentFiber(fiber);\n      commitPassiveUnmountOnFiber(fiber);\n      resetCurrentFiber();\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveUnmountOnFiber(finishedWork) {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        if ( finishedWork.mode & ProfileMode) {\n          startPassiveEffectTimer();\n          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n          recordPassiveEffectDuration(finishedWork);\n        } else {\n          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n        }\n\n        break;\n      }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect; // Deletion effects fire in parent -> child order\n    // TODO: Check if fiber has a PassiveStatic flag\n\n    setCurrentFiber(fiber);\n    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n    resetCurrentFiber();\n    var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n\n    if (child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var sibling = fiber.sibling;\n    var returnFiber = fiber.return;\n\n    {\n      // Recursively traverse the entire deleted tree and clean up fiber fields.\n      // This is more aggressive than ideal, and the long term goal is to only\n      // have to detach the deleted tree at the root.\n      detachFiberAfterEffects(fiber);\n\n      if (fiber === deletedSubtreeRoot) {\n        nextEffect = null;\n        return;\n      }\n    }\n\n    if (sibling !== null) {\n      sibling.return = returnFiber;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = returnFiber;\n  }\n}\n\nfunction commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        if ( current.mode & ProfileMode) {\n          startPassiveEffectTimer();\n          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n          recordPassiveEffectDuration(current);\n        } else {\n          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n        }\n\n        break;\n      }\n  }\n} // TODO: Reuse reappearLayoutEffects traversal here?\n\n\nfunction invokeLayoutEffectMountInDEV(fiber) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          try {\n            commitHookEffectListMount(Layout | HasEffect, fiber);\n          } catch (error) {\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          break;\n        }\n\n      case ClassComponent:\n        {\n          var instance = fiber.stateNode;\n\n          try {\n            instance.componentDidMount();\n          } catch (error) {\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          break;\n        }\n    }\n  }\n}\n\nfunction invokePassiveEffectMountInDEV(fiber) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          try {\n            commitHookEffectListMount(Passive$1 | HasEffect, fiber);\n          } catch (error) {\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          break;\n        }\n    }\n  }\n}\n\nfunction invokeLayoutEffectUnmountInDEV(fiber) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          try {\n            commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);\n          } catch (error) {\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          break;\n        }\n\n      case ClassComponent:\n        {\n          var instance = fiber.stateNode;\n\n          if (typeof instance.componentWillUnmount === 'function') {\n            safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n          }\n\n          break;\n        }\n    }\n  }\n}\n\nfunction invokePassiveEffectUnmountInDEV(fiber) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          try {\n            commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);\n          } catch (error) {\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n        }\n    }\n  }\n}\n\nvar COMPONENT_TYPE = 0;\nvar HAS_PSEUDO_CLASS_TYPE = 1;\nvar ROLE_TYPE = 2;\nvar TEST_NAME_TYPE = 3;\nvar TEXT_TYPE = 4;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  var symbolFor = Symbol.for;\n  COMPONENT_TYPE = symbolFor('selector.component');\n  HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n  ROLE_TYPE = symbolFor('selector.role');\n  TEST_NAME_TYPE = symbolFor('selector.test_id');\n  TEXT_TYPE = symbolFor('selector.text');\n}\nvar commitHooks = [];\nfunction onCommitRoot$1() {\n  {\n    commitHooks.forEach(function (commitHook) {\n      return commitHook();\n    });\n  }\n}\n\nvar ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;\nfunction isLegacyActEnvironment(fiber) {\n  {\n    // Legacy mode. We preserve the behavior of React 17's act. It assumes an\n    // act environment whenever `jest` is defined, but you can still turn off\n    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\n    // to false.\n    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest\n\n    var jestIsDefined = typeof jest !== 'undefined';\n    return  jestIsDefined && isReactActEnvironmentGlobal !== false;\n  }\n}\nfunction isConcurrentActEnvironment() {\n  {\n    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;\n\n    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {\n      // TODO: Include link to relevant documentation page.\n      error('The current testing environment is not configured to support ' + 'act(...)');\n    }\n\n    return isReactActEnvironmentGlobal;\n  }\n}\n\nvar ceil = Math.ceil;\nvar ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,\n    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,\n    ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig,\n    ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;\nvar NoContext =\n/*             */\n0;\nvar BatchedContext =\n/*               */\n1;\nvar RenderContext =\n/*                */\n2;\nvar CommitContext =\n/*                */\n4;\nvar RootInProgress = 0;\nvar RootFatalErrored = 1;\nvar RootErrored = 2;\nvar RootSuspended = 3;\nvar RootSuspendedWithDelay = 4;\nvar RootCompleted = 5;\nvar RootDidNotComplete = 6; // Describes where we are in the React execution stack\n\nvar executionContext = NoContext; // The root we're working on\n\nvar workInProgressRoot = null; // The fiber we're working on\n\nvar workInProgress = null; // The lanes we're rendering\n\nvar workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree\n// This is a superset of the lanes we started working on at the root. The only\n// case where it's different from `workInProgressRootRenderLanes` is when we\n// enter a subtree that is hidden and needs to be unhidden: Suspense and\n// Offscreen component.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with subtreeRenderLanes.\n\nvar subtreeRenderLanes = NoLanes;\nvar subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.\n\nvar workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown\n\nvar workInProgressRootFatalError = null; // \"Included\" lanes refer to lanes that were worked on during this render. It's\n// slightly different than `renderLanes` because `renderLanes` can change as you\n// enter and exit an Offscreen tree. This value is the combination of all render\n// lanes for the entire render phase.\n\nvar workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\n\nvar workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.\n\nvar workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).\n\nvar workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.\n\nvar workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.\n// We will log them once the tree commits.\n\nvar workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train\n// model where we don't commit new loading states in too quick succession.\n\nvar globalMostRecentFallbackTime = 0;\nvar FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\n\nvar workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\n\nvar RENDER_TIMEOUT_MS = 500;\nvar workInProgressTransitions = null;\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n}\n\nfunction getRenderTargetTime() {\n  return workInProgressRootRenderTargetTime;\n}\nvar hasUncaughtError = false;\nvar firstUncaughtError = null;\nvar legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;\nvar rootDoesHavePassiveEffects = false;\nvar rootWithPendingPassiveEffects = null;\nvar pendingPassiveEffectsLanes = NoLanes;\nvar pendingPassiveProfilerEffects = [];\nvar pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates\n\nvar NESTED_UPDATE_LIMIT = 50;\nvar nestedUpdateCount = 0;\nvar rootWithNestedUpdates = null;\nvar isFlushingPassiveEffects = false;\nvar didScheduleUpdateDuringPassiveEffects = false;\nvar NESTED_PASSIVE_UPDATE_LIMIT = 50;\nvar nestedPassiveUpdateCount = 0;\nvar rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their\n// event times as simultaneous, even if the actual clock time has advanced\n// between the first and second call.\n\nvar currentEventTime = NoTimestamp;\nvar currentEventTransitionLane = NoLanes;\nvar isRunningInsertionEffect = false;\nfunction getWorkInProgressRoot() {\n  return workInProgressRoot;\n}\nfunction requestEventTime() {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    // We're inside React, so it's fine to read the actual time.\n    return now();\n  } // We're not inside React, so we may be in the middle of a browser event.\n\n\n  if (currentEventTime !== NoTimestamp) {\n    // Use the same start time for all updates until we enter React again.\n    return currentEventTime;\n  } // This is the first update since React yielded. Compute a new start time.\n\n\n  currentEventTime = now();\n  return currentEventTime;\n}\nfunction requestUpdateLane(fiber) {\n  // Special cases\n  var mode = fiber.mode;\n\n  if ((mode & ConcurrentMode) === NoMode) {\n    return SyncLane;\n  } else if ( (executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (lanes) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n\n  var isTransition = requestCurrentTransition() !== NoTransition;\n\n  if (isTransition) {\n    if ( ReactCurrentBatchConfig$3.transition !== null) {\n      var transition = ReactCurrentBatchConfig$3.transition;\n\n      if (!transition._updatedFibers) {\n        transition._updatedFibers = new Set();\n      }\n\n      transition._updatedFibers.add(fiber);\n    } // The algorithm for assigning an update to a lane should be stable for all\n    // updates at the same priority within the same event. To do this, the\n    // inputs to the algorithm must be the same.\n    //\n    // The trick we use is to cache the first of each of these inputs within an\n    // event. Then reset the cached values once we can be sure the event is\n    // over. Our heuristic for that is whenever we enter a concurrent work loop.\n\n\n    if (currentEventTransitionLane === NoLane) {\n      // All transitions within the same event are assigned the same lane.\n      currentEventTransitionLane = claimNextTransitionLane();\n    }\n\n    return currentEventTransitionLane;\n  } // Updates originating inside certain React methods, like flushSync, have\n  // their priority set by tracking it with a context variable.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n\n\n  var updateLane = getCurrentUpdatePriority();\n\n  if (updateLane !== NoLane) {\n    return updateLane;\n  } // This update originated outside React. Ask the host environment for an\n  // appropriate priority, based on the type of event.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n\n\n  var eventLane = getCurrentEventPriority();\n  return eventLane;\n}\n\nfunction requestRetryLane(fiber) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n  // Special cases\n  var mode = fiber.mode;\n\n  if ((mode & ConcurrentMode) === NoMode) {\n    return SyncLane;\n  }\n\n  return claimNextRetryLane();\n}\n\nfunction scheduleUpdateOnFiber(root, fiber, lane, eventTime) {\n  checkForNestedUpdates();\n\n  {\n    if (isRunningInsertionEffect) {\n      error('useInsertionEffect must not schedule updates.');\n    }\n  }\n\n  {\n    if (isFlushingPassiveEffects) {\n      didScheduleUpdateDuringPassiveEffects = true;\n    }\n  } // Mark that the root has a pending update.\n\n\n  markRootUpdated(root, lane, eventTime);\n\n  if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {\n    // This update was dispatched during the render phase. This is a mistake\n    // if the update originates from user space (with the exception of local\n    // hook updates, which are handled differently and don't reach this\n    // function), but there are some internal React features that use this as\n    // an implementation detail, like selective hydration.\n    warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase\n  } else {\n    // This is a normal update, scheduled from outside the render phase. For\n    // example, during an input event.\n    {\n      if (isDevToolsPresent) {\n        addFiberToLanesMap(root, fiber, lane);\n      }\n    }\n\n    warnIfUpdatesNotWrappedWithActDEV(fiber);\n\n    if (root === workInProgressRoot) {\n      // Received an update to a tree that's in the middle of rendering. Mark\n      // that there was an interleaved update work on this root. Unless the\n      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n      // phase update. In that case, we don't treat render phase updates as if\n      // they were interleaved, for backwards compat reasons.\n      if ( (executionContext & RenderContext) === NoContext) {\n        workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);\n      }\n\n      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n        // The root already suspended with a delay, which means this render\n        // definitely won't finish. Since we have a new update, let's mark it as\n        // suspended now, right before marking the incoming update. This has the\n        // effect of interrupting the current render and switching to the update.\n        // TODO: Make sure this doesn't override pings that happen while we've\n        // already started rendering.\n        markRootSuspended$1(root, workInProgressRootRenderLanes);\n      }\n    }\n\n    ensureRootIsScheduled(root, eventTime);\n\n    if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n    !( ReactCurrentActQueue$1.isBatchingLegacy)) {\n      // Flush the synchronous work now, unless we're already working or inside\n      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n      // scheduleCallbackForFiber to preserve the ability to schedule a callback\n      // without immediately flushing it. We only do this for user-initiated\n      // updates, to preserve historical behavior of legacy mode.\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\nfunction scheduleInitialHydrationOnRoot(root, lane, eventTime) {\n  // This is a special fork of scheduleUpdateOnFiber that is only used to\n  // schedule the initial hydration of a root that has just been created. Most\n  // of the stuff in scheduleUpdateOnFiber can be skipped.\n  //\n  // The main reason for this separate path, though, is to distinguish the\n  // initial children from subsequent updates. In fully client-rendered roots\n  // (createRoot instead of hydrateRoot), all top-level renders are modeled as\n  // updates, but hydration roots are special because the initial render must\n  // match what was rendered on the server.\n  var current = root.current;\n  current.lanes = lane;\n  markRootUpdated(root, lane, eventTime);\n  ensureRootIsScheduled(root, eventTime);\n}\nfunction isUnsafeClassRenderPhaseUpdate(fiber) {\n  // Check if this is a render phase update. Only called by class components,\n  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.\n  return (// TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We\n    // decided not to enable it.\n     (executionContext & RenderContext) !== NoContext\n  );\n} // Use this function to schedule a task for a root. There's only one task per\n// root; if a task was already scheduled, we'll check to make sure the priority\n// of the existing task is the same as the priority of the next level that the\n// root has work on. This function is called on every update, and right before\n// exiting a task.\n\nfunction ensureRootIsScheduled(root, currentTime) {\n  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n\n  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.\n\n  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n  if (nextLanes === NoLanes) {\n    // Special case: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback$1(existingCallbackNode);\n    }\n\n    root.callbackNode = null;\n    root.callbackPriority = NoLane;\n    return;\n  } // We use the highest priority lane to represent the priority of the callback.\n\n\n  var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.\n\n  var existingCallbackPriority = root.callbackPriority;\n\n  if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a\n  // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n  // on the `act` queue.\n  !( ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {\n    {\n      // If we're going to re-use an existing task, it needs to exist.\n      // Assume that discrete update microtasks are non-cancellable and null.\n      // TODO: Temporary until we confirm this warning is not fired.\n      if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {\n        error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');\n      }\n    } // The priority hasn't changed. We can reuse the existing task. Exit.\n\n\n    return;\n  }\n\n  if (existingCallbackNode != null) {\n    // Cancel the existing callback. We'll schedule a new one below.\n    cancelCallback$1(existingCallbackNode);\n  } // Schedule a new callback.\n\n\n  var newCallbackNode;\n\n  if (newCallbackPriority === SyncLane) {\n    // Special case: Sync React callbacks are scheduled on a special\n    // internal queue\n    if (root.tag === LegacyRoot) {\n      if ( ReactCurrentActQueue$1.isBatchingLegacy !== null) {\n        ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;\n      }\n\n      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n    } else {\n      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n    }\n\n    {\n      // Flush the queue in a microtask.\n      if ( ReactCurrentActQueue$1.current !== null) {\n        // Inside `act`, use our internal `act` queue so that these get flushed\n        // at the end of the current scope even when using the sync version\n        // of `act`.\n        ReactCurrentActQueue$1.current.push(flushSyncCallbacks);\n      } else {\n        scheduleMicrotask(function () {\n          // In Safari, appending an iframe forces microtasks to run.\n          // https://github.com/facebook/react/issues/22459\n          // We don't support running callbacks in the middle of render\n          // or commit so we need to check against that.\n          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n            // Note that this would still prematurely flush the callbacks\n            // if this happens outside render or commit phase (e.g. in an event).\n            flushSyncCallbacks();\n          }\n        });\n      }\n    }\n\n    newCallbackNode = null;\n  } else {\n    var schedulerPriorityLevel;\n\n    switch (lanesToEventPriority(nextLanes)) {\n      case DiscreteEventPriority:\n        schedulerPriorityLevel = ImmediatePriority;\n        break;\n\n      case ContinuousEventPriority:\n        schedulerPriorityLevel = UserBlockingPriority;\n        break;\n\n      case DefaultEventPriority:\n        schedulerPriorityLevel = NormalPriority;\n        break;\n\n      case IdleEventPriority:\n        schedulerPriorityLevel = IdlePriority;\n        break;\n\n      default:\n        schedulerPriorityLevel = NormalPriority;\n        break;\n    }\n\n    newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));\n  }\n\n  root.callbackPriority = newCallbackPriority;\n  root.callbackNode = newCallbackNode;\n} // This is the entry point for every concurrent task, i.e. anything that\n// goes through Scheduler.\n\n\nfunction performConcurrentWorkOnRoot(root, didTimeout) {\n  {\n    resetNestedUpdateFlag();\n  } // Since we know we're in a React event, we can clear the current\n  // event time. The next update will compute a new event time.\n\n\n  currentEventTime = NoTimestamp;\n  currentEventTransitionLane = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  } // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n\n\n  var originalCallbackNode = root.callbackNode;\n  var didFlushPassiveEffects = flushPassiveEffects();\n\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    }\n  } // Determine the next lanes to work on, using the fields stored\n  // on the root.\n\n\n  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n  if (lanes === NoLanes) {\n    // Defensive coding. This is never expected to happen.\n    return null;\n  } // We disable time-slicing in some cases: if the work has been CPU-bound\n  // for too long (\"expired\" work, to prevent starvation), or we're in\n  // sync-updates-by-default mode.\n  // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n  // bug we're still investigating. Once the bug in Scheduler is fixed,\n  // we can remove this, since we track expiration ourselves.\n\n\n  var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && ( !didTimeout);\n  var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);\n\n  if (exitStatus !== RootInProgress) {\n    if (exitStatus === RootErrored) {\n      // If something threw an error, try rendering one more time. We'll\n      // render synchronously to block concurrent data mutations, and we'll\n      // includes all pending updates are included. If it still fails after\n      // the second attempt, we'll give up and commit the resulting tree.\n      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n      if (errorRetryLanes !== NoLanes) {\n        lanes = errorRetryLanes;\n        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n      }\n    }\n\n    if (exitStatus === RootFatalErrored) {\n      var fatalError = workInProgressRootFatalError;\n      prepareFreshStack(root, NoLanes);\n      markRootSuspended$1(root, lanes);\n      ensureRootIsScheduled(root, now());\n      throw fatalError;\n    }\n\n    if (exitStatus === RootDidNotComplete) {\n      // The render unwound without completing the tree. This happens in special\n      // cases where need to exit the current render without producing a\n      // consistent tree or committing.\n      //\n      // This should only happen during a concurrent render, not a discrete or\n      // synchronous update. We should have already checked for this when we\n      // unwound the stack.\n      markRootSuspended$1(root, lanes);\n    } else {\n      // The render completed.\n      // Check if this render may have yielded to a concurrent event, and if so,\n      // confirm that any newly rendered stores are consistent.\n      // TODO: It's possible that even a concurrent render may never have yielded\n      // to the main thread, if it was fast enough, or if it expired. We could\n      // skip the consistency check in that case, too.\n      var renderWasConcurrent = !includesBlockingLane(root, lanes);\n      var finishedWork = root.current.alternate;\n\n      if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {\n        // A store was mutated in an interleaved event. Render again,\n        // synchronously, to block further mutations.\n        exitStatus = renderRootSync(root, lanes); // We need to check again if something threw\n\n        if (exitStatus === RootErrored) {\n          var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n          if (_errorRetryLanes !== NoLanes) {\n            lanes = _errorRetryLanes;\n            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any\n            // concurrent events.\n          }\n        }\n\n        if (exitStatus === RootFatalErrored) {\n          var _fatalError = workInProgressRootFatalError;\n          prepareFreshStack(root, NoLanes);\n          markRootSuspended$1(root, lanes);\n          ensureRootIsScheduled(root, now());\n          throw _fatalError;\n        }\n      } // We now have a consistent tree. The next step is either to commit it,\n      // or, if something suspended, wait to commit it after a timeout.\n\n\n      root.finishedWork = finishedWork;\n      root.finishedLanes = lanes;\n      finishConcurrentRender(root, exitStatus, lanes);\n    }\n  }\n\n  ensureRootIsScheduled(root, now());\n\n  if (root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performConcurrentWorkOnRoot.bind(null, root);\n  }\n\n  return null;\n}\n\nfunction recoverFromConcurrentError(root, errorRetryLanes) {\n  // If an error occurred during hydration, discard server response and fall\n  // back to client side render.\n  // Before rendering again, save the errors from the previous attempt.\n  var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n\n  if (isRootDehydrated(root)) {\n    // The shell failed to hydrate. Set a flag to force a client rendering\n    // during the next attempt. To do this, we call prepareFreshStack now\n    // to create the root work-in-progress fiber. This is a bit weird in terms\n    // of factoring, because it relies on renderRootSync not calling\n    // prepareFreshStack again in the call below, which happens because the\n    // root and lanes haven't changed.\n    //\n    // TODO: I think what we should do is set ForceClientRender inside\n    // throwException, like we do for nested Suspense boundaries. The reason\n    // it's here instead is so we can switch to the synchronous work loop, too.\n    // Something to consider for a future refactor.\n    var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n    rootWorkInProgress.flags |= ForceClientRender;\n\n    {\n      errorHydratingContainer(root.containerInfo);\n    }\n  }\n\n  var exitStatus = renderRootSync(root, errorRetryLanes);\n\n  if (exitStatus !== RootErrored) {\n    // Successfully finished rendering on retry\n    // The errors from the failed first attempt have been recovered. Add\n    // them to the collection of recoverable errors. We'll log them in the\n    // commit phase.\n    var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n    workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors\n    // from the first attempt, to preserve the causal sequence.\n\n    if (errorsFromSecondAttempt !== null) {\n      queueRecoverableErrors(errorsFromSecondAttempt);\n    }\n  }\n\n  return exitStatus;\n}\n\nfunction queueRecoverableErrors(errors) {\n  if (workInProgressRootRecoverableErrors === null) {\n    workInProgressRootRecoverableErrors = errors;\n  } else {\n    workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);\n  }\n}\n\nfunction finishConcurrentRender(root, exitStatus, lanes) {\n  switch (exitStatus) {\n    case RootInProgress:\n    case RootFatalErrored:\n      {\n        throw new Error('Root did not complete. This is a bug in React.');\n      }\n    // Flow knows about invariant, so it complains if I add a break\n    // statement, but eslint doesn't know about invariant, so it complains\n    // if I do. eslint-disable-next-line no-fallthrough\n\n    case RootErrored:\n      {\n        // We should have already attempted to retry this tree. If we reached\n        // this point, it errored again. Commit it.\n        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n        break;\n      }\n\n    case RootSuspended:\n      {\n        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we\n        // should immediately commit it or wait a bit.\n\n        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope\n        !shouldForceFlushFallbacksInDEV()) {\n          // This render only included retries, no updates. Throttle committing\n          // retries so that we don't show too many loading states too quickly.\n          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.\n\n          if (msUntilTimeout > 10) {\n            var nextLanes = getNextLanes(root, NoLanes);\n\n            if (nextLanes !== NoLanes) {\n              // There's additional work on this root.\n              break;\n            }\n\n            var suspendedLanes = root.suspendedLanes;\n\n            if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n              // We should prefer to render the fallback of at the last\n              // suspended level. Ping the last suspended level to try\n              // rendering it again.\n              // FIXME: What if the suspended lanes are Idle? Should not restart.\n              var eventTime = requestEventTime();\n              markRootPinged(root, suspendedLanes);\n              break;\n            } // The render is suspended, it hasn't timed out, and there's no\n            // lower priority work to do. Instead of committing the fallback\n            // immediately, wait for more data to arrive.\n\n\n            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);\n            break;\n          }\n        } // The work expired. Commit immediately.\n\n\n        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n        break;\n      }\n\n    case RootSuspendedWithDelay:\n      {\n        markRootSuspended$1(root, lanes);\n\n        if (includesOnlyTransitions(lanes)) {\n          // This is a transition, so we should exit without committing a\n          // placeholder and without scheduling a timeout. Delay indefinitely\n          // until we receive more data.\n          break;\n        }\n\n        if (!shouldForceFlushFallbacksInDEV()) {\n          // This is not a transition, but we did trigger an avoided state.\n          // Schedule a placeholder to display after a short delay, using the Just\n          // Noticeable Difference.\n          // TODO: Is the JND optimization worth the added complexity? If this is\n          // the only reason we track the event time, then probably not.\n          // Consider removing.\n          var mostRecentEventTime = getMostRecentEventTime(root, lanes);\n          var eventTimeMs = mostRecentEventTime;\n          var timeElapsedMs = now() - eventTimeMs;\n\n          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.\n\n\n          if (_msUntilTimeout > 10) {\n            // Instead of committing the fallback immediately, wait for more data\n            // to arrive.\n            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);\n            break;\n          }\n        } // Commit the placeholder.\n\n\n        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n        break;\n      }\n\n    case RootCompleted:\n      {\n        // The work completed. Ready to commit.\n        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unknown root exit status.');\n      }\n  }\n}\n\nfunction isRenderConsistentWithExternalStores(finishedWork) {\n  // Search the rendered tree for external store reads, and check whether the\n  // stores were mutated in a concurrent event. Intentionally using an iterative\n  // loop instead of recursion so we can exit early.\n  var node = finishedWork;\n\n  while (true) {\n    if (node.flags & StoreConsistency) {\n      var updateQueue = node.updateQueue;\n\n      if (updateQueue !== null) {\n        var checks = updateQueue.stores;\n\n        if (checks !== null) {\n          for (var i = 0; i < checks.length; i++) {\n            var check = checks[i];\n            var getSnapshot = check.getSnapshot;\n            var renderedValue = check.value;\n\n            try {\n              if (!objectIs(getSnapshot(), renderedValue)) {\n                // Found an inconsistent store.\n                return false;\n              }\n            } catch (error) {\n              // If `getSnapshot` throws, return `false`. This will schedule\n              // a re-render, and the error will be rethrown during render.\n              return false;\n            }\n          }\n        }\n      }\n    }\n\n    var child = node.child;\n\n    if (node.subtreeFlags & StoreConsistency && child !== null) {\n      child.return = node;\n      node = child;\n      continue;\n    }\n\n    if (node === finishedWork) {\n      return true;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === finishedWork) {\n        return true;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  } // Flow doesn't know this is unreachable, but eslint does\n  // eslint-disable-next-line no-unreachable\n\n\n  return true;\n}\n\nfunction markRootSuspended$1(root, suspendedLanes) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  // TODO: Lol maybe there's a better way to factor this besides this\n  // obnoxiously named function :)\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);\n  markRootSuspended(root, suspendedLanes);\n} // This is the entry point for synchronous tasks that don't go\n// through Scheduler\n\n\nfunction performSyncWorkOnRoot(root) {\n  {\n    syncNestedUpdateFlag();\n  }\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  flushPassiveEffects();\n  var lanes = getNextLanes(root, NoLanes);\n\n  if (!includesSomeLane(lanes, SyncLane)) {\n    // There's no remaining sync work left.\n    ensureRootIsScheduled(root, now());\n    return null;\n  }\n\n  var exitStatus = renderRootSync(root, lanes);\n\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n    // If something threw an error, try rendering one more time. We'll render\n    // synchronously to block concurrent data mutations, and we'll includes\n    // all pending updates are included. If it still fails after the second\n    // attempt, we'll give up and commit the resulting tree.\n    var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n    if (errorRetryLanes !== NoLanes) {\n      lanes = errorRetryLanes;\n      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n    }\n  }\n\n  if (exitStatus === RootFatalErrored) {\n    var fatalError = workInProgressRootFatalError;\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended$1(root, lanes);\n    ensureRootIsScheduled(root, now());\n    throw fatalError;\n  }\n\n  if (exitStatus === RootDidNotComplete) {\n    throw new Error('Root did not complete. This is a bug in React.');\n  } // We now have a consistent tree. Because this is a sync render, we\n  // will commit it even if something suspended.\n\n\n  var finishedWork = root.current.alternate;\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next\n  // pending level.\n\n  ensureRootIsScheduled(root, now());\n  return null;\n}\n\nfunction flushRoot(root, lanes) {\n  if (lanes !== NoLanes) {\n    markRootEntangled(root, mergeLanes(lanes, SyncLane));\n    ensureRootIsScheduled(root, now());\n\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\nfunction batchedUpdates$1(fn, a) {\n  var prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer\n    // most batchedUpdates-like method.\n\n    if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n    !( ReactCurrentActQueue$1.isBatchingLegacy)) {\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\nfunction discreteUpdates(fn, a, b, c, d) {\n  var previousPriority = getCurrentUpdatePriority();\n  var prevTransition = ReactCurrentBatchConfig$3.transition;\n\n  try {\n    ReactCurrentBatchConfig$3.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    return fn(a, b, c, d);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$3.transition = prevTransition;\n\n    if (executionContext === NoContext) {\n      resetRenderTimer();\n    }\n  }\n} // Overload the definition to the two valid signatures.\n// Warning, this opts-out of checking the function body.\n\n// eslint-disable-next-line no-redeclare\nfunction flushSync(fn) {\n  // In legacy mode, we flush pending passive effects at the beginning of the\n  // next event, not at the end of the previous one.\n  if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {\n    flushPassiveEffects();\n  }\n\n  var prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  var prevTransition = ReactCurrentBatchConfig$3.transition;\n  var previousPriority = getCurrentUpdatePriority();\n\n  try {\n    ReactCurrentBatchConfig$3.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n\n    if (fn) {\n      return fn();\n    } else {\n      return undefined;\n    }\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$3.transition = prevTransition;\n    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.\n    // Note that this will happen even if batchedUpdates is higher up\n    // the stack.\n\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      flushSyncCallbacks();\n    }\n  }\n}\nfunction isAlreadyRendering() {\n  // Used by the renderer to print a warning if certain APIs are called from\n  // the wrong context.\n  return  (executionContext & (RenderContext | CommitContext)) !== NoContext;\n}\nfunction pushRenderLanes(fiber, lanes) {\n  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n  workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);\n}\nfunction popRenderLanes(fiber) {\n  subtreeRenderLanes = subtreeRenderLanesCursor.current;\n  pop(subtreeRenderLanesCursor, fiber);\n}\n\nfunction prepareFreshStack(root, lanes) {\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n  var timeoutHandle = root.timeoutHandle;\n\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n\n    cancelTimeout(timeoutHandle);\n  }\n\n  if (workInProgress !== null) {\n    var interruptedWork = workInProgress.return;\n\n    while (interruptedWork !== null) {\n      var current = interruptedWork.alternate;\n      unwindInterruptedWork(current, interruptedWork);\n      interruptedWork = interruptedWork.return;\n    }\n  }\n\n  workInProgressRoot = root;\n  var rootWorkInProgress = createWorkInProgress(root.current, null);\n  workInProgress = rootWorkInProgress;\n  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n  workInProgressRootExitStatus = RootInProgress;\n  workInProgressRootFatalError = null;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootInterleavedUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n  workInProgressRootConcurrentErrors = null;\n  workInProgressRootRecoverableErrors = null;\n  finishQueueingConcurrentUpdates();\n\n  {\n    ReactStrictModeWarnings.discardPendingWarnings();\n  }\n\n  return rootWorkInProgress;\n}\n\nfunction handleError(root, thrownValue) {\n  do {\n    var erroredWork = workInProgress;\n\n    try {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a\n      // separate issue. Write a regression test using string refs.\n\n      ReactCurrentOwner$2.current = null;\n\n      if (erroredWork === null || erroredWork.return === null) {\n        // Expected to be working on a non-root fiber. This is a fatal error\n        // because there's no ancestor that can handle it; the root is\n        // supposed to capture all errors that weren't caught by an error\n        // boundary.\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next\n        // sibling, or the parent if there are no siblings. But since the root\n        // has no siblings nor a parent, we set it to null. Usually this is\n        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n        // intentionally not calling those, we need set it here.\n        // TODO: Consider calling `unwindWork` to pop the contexts.\n\n        workInProgress = null;\n        return;\n      }\n\n      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n\n      if (enableSchedulingProfiler) {\n        markComponentRenderStopped();\n\n        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {\n          var wakeable = thrownValue;\n          markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);\n        } else {\n          markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);\n        }\n      }\n\n      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);\n      completeUnitOfWork(erroredWork);\n    } catch (yetAnotherThrownValue) {\n      // Something in the return path also threw.\n      thrownValue = yetAnotherThrownValue;\n\n      if (workInProgress === erroredWork && erroredWork !== null) {\n        // If this boundary has already errored, then we had trouble processing\n        // the error. Bubble it to the next boundary.\n        erroredWork = erroredWork.return;\n        workInProgress = erroredWork;\n      } else {\n        erroredWork = workInProgress;\n      }\n\n      continue;\n    } // Return to the normal work loop.\n\n\n    return;\n  } while (true);\n}\n\nfunction pushDispatcher() {\n  var prevDispatcher = ReactCurrentDispatcher$2.current;\n  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;\n\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher) {\n  ReactCurrentDispatcher$2.current = prevDispatcher;\n}\n\nfunction markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now();\n}\nfunction markSkippedUpdateLanes(lane) {\n  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);\n}\nfunction renderDidSuspend() {\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\nfunction renderDidSuspendDelayIfPossible() {\n  if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {\n    workInProgressRootExitStatus = RootSuspendedWithDelay;\n  } // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n\n\n  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);\n  }\n}\nfunction renderDidError(error) {\n  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n\n  if (workInProgressRootConcurrentErrors === null) {\n    workInProgressRootConcurrentErrors = [error];\n  } else {\n    workInProgressRootConcurrentErrors.push(error);\n  }\n} // Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\n\nfunction renderHasNotSuspendedYet() {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootInProgress;\n}\n\nfunction renderRootSync(root, lanes) {\n  var prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    {\n      if (isDevToolsPresent) {\n        var memoizedUpdaters = root.memoizedUpdaters;\n\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n\n\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    workInProgressTransitions = getTransitionsForLanes();\n    prepareFreshStack(root, lanes);\n  }\n\n  {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopSync();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n\n  resetContextDependencies();\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n\n  if (workInProgress !== null) {\n    // This is a sync render, so we should have finished the whole tree.\n    throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');\n  }\n\n  {\n    markRenderStopped();\n  } // Set this to null to indicate there's no in-progress render.\n\n\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = NoLanes;\n  return workInProgressRootExitStatus;\n} // The work loop is an extremely hot path. Tell Closure not to inline it.\n\n/** @noinline */\n\n\nfunction workLoopSync() {\n  // Already timed out, so perform work without checking if we need to yield.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root, lanes) {\n  var prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    {\n      if (isDevToolsPresent) {\n        var memoizedUpdaters = root.memoizedUpdaters;\n\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n\n\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    workInProgressTransitions = getTransitionsForLanes();\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n  }\n\n  {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopConcurrent();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n\n  resetContextDependencies();\n  popDispatcher(prevDispatcher);\n  executionContext = prevExecutionContext;\n\n\n  if (workInProgress !== null) {\n    // Still work remaining.\n    {\n      markRenderYielded();\n    }\n\n    return RootInProgress;\n  } else {\n    // Completed the tree.\n    {\n      markRenderStopped();\n    } // Set this to null to indicate there's no in-progress render.\n\n\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.\n\n    return workInProgressRootExitStatus;\n  }\n}\n/** @noinline */\n\n\nfunction workLoopConcurrent() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork) {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  var current = unitOfWork.alternate;\n  setCurrentFiber(unitOfWork);\n  var next;\n\n  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n  } else {\n    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n  }\n\n  resetCurrentFiber();\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner$2.current = null;\n}\n\nfunction completeUnitOfWork(unitOfWork) {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  var completedWork = unitOfWork;\n\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    var current = completedWork.alternate;\n    var returnFiber = completedWork.return; // Check if the work completed or if something threw.\n\n    if ((completedWork.flags & Incomplete) === NoFlags) {\n      setCurrentFiber(completedWork);\n      var next = void 0;\n\n      if ( (completedWork.mode & ProfileMode) === NoMode) {\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n      } else {\n        startProfilerTimer(completedWork);\n        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.\n\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n      }\n\n      resetCurrentFiber();\n\n      if (next !== null) {\n        // Completing this fiber spawned new work. Work on that next.\n        workInProgress = next;\n        return;\n      }\n    } else {\n      // This fiber did not complete because something threw. Pop values off\n      // the stack without entering the complete phase. If this is a boundary,\n      // capture values if possible.\n      var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.\n\n\n      if (_next !== null) {\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        // Since we're restarting, remove anything that is not a host effect\n        // from the effect tag.\n        _next.flags &= HostEffectMask;\n        workInProgress = _next;\n        return;\n      }\n\n      if ( (completedWork.mode & ProfileMode) !== NoMode) {\n        // Record the render duration for the fiber that errored.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.\n\n        var actualDuration = completedWork.actualDuration;\n        var child = completedWork.child;\n\n        while (child !== null) {\n          actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n\n        completedWork.actualDuration = actualDuration;\n      }\n\n      if (returnFiber !== null) {\n        // Mark the parent fiber as incomplete and clear its subtree flags.\n        returnFiber.flags |= Incomplete;\n        returnFiber.subtreeFlags = NoFlags;\n        returnFiber.deletions = null;\n      } else {\n        // We've unwound all the way to the root.\n        workInProgressRootExitStatus = RootDidNotComplete;\n        workInProgress = null;\n        return;\n      }\n    }\n\n    var siblingFiber = completedWork.sibling;\n\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    } // Otherwise, return to the parent\n\n\n    completedWork = returnFiber; // Update the next thing we're working on in case something throws.\n\n    workInProgress = completedWork;\n  } while (completedWork !== null); // We've reached the root.\n\n\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction commitRoot(root, recoverableErrors, transitions) {\n  // TODO: This no longer makes any sense. We already wrap the mutation and\n  // layout phases. Should be able to remove.\n  var previousUpdateLanePriority = getCurrentUpdatePriority();\n  var prevTransition = ReactCurrentBatchConfig$3.transition;\n\n  try {\n    ReactCurrentBatchConfig$3.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);\n  } finally {\n    ReactCurrentBatchConfig$3.transition = prevTransition;\n    setCurrentUpdatePriority(previousUpdateLanePriority);\n  }\n\n  return null;\n}\n\nfunction commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPassiveEffects();\n  } while (rootWithPendingPassiveEffects !== null);\n\n  flushRenderPhaseStrictModeWarningsInDEV();\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  var finishedWork = root.finishedWork;\n  var lanes = root.finishedLanes;\n\n  {\n    markCommitStarted(lanes);\n  }\n\n  if (finishedWork === null) {\n\n    {\n      markCommitStopped();\n    }\n\n    return null;\n  } else {\n    {\n      if (lanes === NoLanes) {\n        error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');\n      }\n    }\n  }\n\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  if (finishedWork === root.current) {\n    throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n  } // commitRoot never returns a continuation; it always finishes synchronously.\n  // So we can clear these now to allow a new callback to be scheduled.\n\n\n  root.callbackNode = null;\n  root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first\n  // pending time is whatever is left on the root fiber.\n\n  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n  markRootFinished(root, remainingLanes);\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } // If there are pending passive effects, schedule a callback to process them.\n  // Do this as early as possible, so it is queued before anything else that\n  // might get scheduled in the commit phase. (See #16714.)\n  // TODO: Delete all other places that schedule the passive effect callback\n  // They're redundant.\n\n\n  if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      // to store it in pendingPassiveTransitions until they get processed\n      // We need to pass this through as an argument to commitRoot\n      // because workInProgressTransitions might have changed between\n      // the previous render and commit if we throttle the commit\n      // with setTimeout\n\n      pendingPassiveTransitions = transitions;\n      scheduleCallback$1(NormalPriority, function () {\n        flushPassiveEffects(); // This render triggered passive effects: release the root cache pool\n        // *after* passive effects fire to avoid freeing a cache pool that may\n        // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n\n        return null;\n      });\n    }\n  } // Check if there are any effects in the whole tree.\n  // TODO: This is left over from the effect list implementation, where we had\n  // to check for the existence of `firstEffect` to satisfy Flow. I think the\n  // only other reason this optimization exists is because it affects profiling.\n  // Reconsider whether this is necessary.\n\n\n  var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n  var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n\n  if (subtreeHasEffects || rootHasEffect) {\n    var prevTransition = ReactCurrentBatchConfig$3.transition;\n    ReactCurrentBatchConfig$3.transition = null;\n    var previousPriority = getCurrentUpdatePriority();\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    var prevExecutionContext = executionContext;\n    executionContext |= CommitContext; // Reset this to null before calling lifecycles\n\n    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass\n    // of the effect list for each phase: all mutation effects come before all\n    // layout effects, and so on.\n    // The first phase a \"before mutation\" phase. We use this phase to read the\n    // state of the host tree right before we mutate it. This is where\n    // getSnapshotBeforeUpdate is called.\n\n    var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(root, finishedWork);\n\n    {\n      // Mark the current commit time to be shared by all Profilers in this\n      // batch. This enables them to be grouped later.\n      recordCommitTime();\n    }\n\n\n    commitMutationEffects(root, finishedWork, lanes);\n\n    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after\n    // the mutation phase, so that the previous tree is still current during\n    // componentWillUnmount, but before the layout phase, so that the finished\n    // work is current during componentDidMount/Update.\n\n    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read\n\n    {\n      markLayoutEffectsStarted(lanes);\n    }\n\n    commitLayoutEffects(finishedWork, root, lanes);\n\n    {\n      markLayoutEffectsStopped();\n    }\n    // opportunity to paint.\n\n\n    requestPaint();\n    executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.\n\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$3.transition = prevTransition;\n  } else {\n    // No effects.\n    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were\n    // no effects.\n    // TODO: Maybe there's a better way to report this.\n\n    {\n      recordCommitTime();\n    }\n  }\n\n  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n  if (rootDoesHavePassiveEffects) {\n    // This commit has passive effects. Stash a reference to them. But don't\n    // schedule a callback until after flushing layout work.\n    rootDoesHavePassiveEffects = false;\n    rootWithPendingPassiveEffects = root;\n    pendingPassiveEffectsLanes = lanes;\n  } else {\n\n    {\n      nestedPassiveUpdateCount = 0;\n      rootWithPassiveNestedUpdates = null;\n    }\n  } // Read this again, since an effect might have updated it\n\n\n  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root\n  // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n  // is to detect whether something might have called setState inside\n  // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n  // inside `componentDidCatch` is itself flawed — that's why we recommend\n  // `getDerivedStateFromError` instead. However, it could be improved by\n  // checking if remainingLanes includes Sync work, instead of whether there's\n  // any work remaining at all (which would also include stuff like Suspense\n  // retries or transitions). It's been like this for a while, though, so fixing\n  // it probably isn't that urgent.\n\n  if (remainingLanes === NoLanes) {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  {\n    if (!rootDidHavePassiveEffects) {\n      commitDoubleInvokeEffectsInDEV(root.current, false);\n    }\n  }\n\n  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);\n\n  {\n    if (isDevToolsPresent) {\n      root.memoizedUpdaters.clear();\n    }\n  }\n\n  {\n    onCommitRoot$1();\n  } // Always call this before exiting `commitRoot`, to ensure that any\n  // additional work on this root is scheduled.\n\n\n  ensureRootIsScheduled(root, now());\n\n  if (recoverableErrors !== null) {\n    // There were errors during this render, but recovered from them without\n    // needing to surface it to the UI. We log them here.\n    var onRecoverableError = root.onRecoverableError;\n\n    for (var i = 0; i < recoverableErrors.length; i++) {\n      var recoverableError = recoverableErrors[i];\n      var componentStack = recoverableError.stack;\n      var digest = recoverableError.digest;\n      onRecoverableError(recoverableError.value, {\n        componentStack: componentStack,\n        digest: digest\n      });\n    }\n  }\n\n  if (hasUncaughtError) {\n    hasUncaughtError = false;\n    var error$1 = firstUncaughtError;\n    firstUncaughtError = null;\n    throw error$1;\n  } // If the passive effects are the result of a discrete render, flush them\n  // synchronously at the end of the current task so that the result is\n  // immediately observable. Otherwise, we assume that they are not\n  // order-dependent and do not need to be observed by external systems, so we\n  // can wait until after paint.\n  // TODO: We can optimize this by not scheduling the callback earlier. Since we\n  // currently schedule the callback in multiple places, will wait until those\n  // are consolidated.\n\n\n  if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {\n    flushPassiveEffects();\n  } // Read this again, since a passive effect might have updated it\n\n\n  remainingLanes = root.pendingLanes;\n\n  if (includesSomeLane(remainingLanes, SyncLane)) {\n    {\n      markNestedUpdateScheduled();\n    } // Count the number of times the root synchronously re-renders without\n    // finishing. If there are too many, it indicates an infinite update loop.\n\n\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  } // If layout work was scheduled, flush it now.\n\n\n  flushSyncCallbacks();\n\n  {\n    markCommitStopped();\n  }\n\n  return null;\n}\n\nfunction flushPassiveEffects() {\n  // Returns whether passive effects were flushed.\n  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n  // probably just combine the two functions. I believe they were only separate\n  // in the first place because we used to wrap it with\n  // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n  // priority within React itself, so we can mutate the variable directly.\n  if (rootWithPendingPassiveEffects !== null) {\n    var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n    var priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n    var prevTransition = ReactCurrentBatchConfig$3.transition;\n    var previousPriority = getCurrentUpdatePriority();\n\n    try {\n      ReactCurrentBatchConfig$3.transition = null;\n      setCurrentUpdatePriority(priority);\n      return flushPassiveEffectsImpl();\n    } finally {\n      setCurrentUpdatePriority(previousPriority);\n      ReactCurrentBatchConfig$3.transition = prevTransition; // Once passive effects have run for the tree - giving components a\n    }\n  }\n\n  return false;\n}\nfunction enqueuePendingPassiveProfilerEffect(fiber) {\n  {\n    pendingPassiveProfilerEffects.push(fiber);\n\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback$1(NormalPriority, function () {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n}\n\nfunction flushPassiveEffectsImpl() {\n  if (rootWithPendingPassiveEffects === null) {\n    return false;\n  } // Cache and clear the transitions flag\n\n\n  var transitions = pendingPassiveTransitions;\n  pendingPassiveTransitions = null;\n  var root = rootWithPendingPassiveEffects;\n  var lanes = pendingPassiveEffectsLanes;\n  rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n  // Figure out why and fix it. It's not causing any known issues (probably\n  // because it's only used for profiling), but it's a refactor hazard.\n\n  pendingPassiveEffectsLanes = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Cannot flush passive effects while already rendering.');\n  }\n\n  {\n    isFlushingPassiveEffects = true;\n    didScheduleUpdateDuringPassiveEffects = false;\n  }\n\n  {\n    markPassiveEffectsStarted(lanes);\n  }\n\n  var prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n  commitPassiveUnmountEffects(root.current);\n  commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects\n\n  {\n    var profilerEffects = pendingPassiveProfilerEffects;\n    pendingPassiveProfilerEffects = [];\n\n    for (var i = 0; i < profilerEffects.length; i++) {\n      var _fiber = profilerEffects[i];\n      commitPassiveEffectDurations(root, _fiber);\n    }\n  }\n\n  {\n    markPassiveEffectsStopped();\n  }\n\n  {\n    commitDoubleInvokeEffectsInDEV(root.current, true);\n  }\n\n  executionContext = prevExecutionContext;\n  flushSyncCallbacks();\n\n  {\n    // If additional passive effects were scheduled, increment a counter. If this\n    // exceeds the limit, we'll fire a warning.\n    if (didScheduleUpdateDuringPassiveEffects) {\n      if (root === rootWithPassiveNestedUpdates) {\n        nestedPassiveUpdateCount++;\n      } else {\n        nestedPassiveUpdateCount = 0;\n        rootWithPassiveNestedUpdates = root;\n      }\n    } else {\n      nestedPassiveUpdateCount = 0;\n    }\n\n    isFlushingPassiveEffects = false;\n    didScheduleUpdateDuringPassiveEffects = false;\n  } // TODO: Move to commitPassiveMountEffects\n\n\n  onPostCommitRoot(root);\n\n  {\n    var stateNode = root.current.stateNode;\n    stateNode.effectDuration = 0;\n    stateNode.passiveEffectDuration = 0;\n  }\n\n  return true;\n}\n\nfunction isAlreadyFailedLegacyErrorBoundary(instance) {\n  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\n}\nfunction markLegacyErrorBoundaryAsFailed(instance) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction prepareToThrowUncaughtError(error) {\n  if (!hasUncaughtError) {\n    hasUncaughtError = true;\n    firstUncaughtError = error;\n  }\n}\n\nvar onUncaughtError = prepareToThrowUncaughtError;\n\nfunction captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n  var errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);\n  var root = enqueueUpdate(rootFiber, update, SyncLane);\n  var eventTime = requestEventTime();\n\n  if (root !== null) {\n    markRootUpdated(root, SyncLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nfunction captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {\n  {\n    reportUncaughtErrorInDEV(error$1);\n    setIsRunningInsertionEffect(false);\n  }\n\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);\n    return;\n  }\n\n  var fiber = null;\n\n  {\n    fiber = nearestMountedAncestor;\n  }\n\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      var ctor = fiber.type;\n      var instance = fiber.stateNode;\n\n      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n        var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);\n        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);\n        var root = enqueueUpdate(fiber, update, SyncLane);\n        var eventTime = requestEventTime();\n\n        if (root !== null) {\n          markRootUpdated(root, SyncLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n        }\n\n        return;\n      }\n    }\n\n    fiber = fiber.return;\n  }\n\n  {\n    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n    // will fire for errors that are thrown by destroy functions inside deleted\n    // trees. What it should instead do is propagate the error to the parent of\n    // the deleted tree. In the meantime, do not add this warning to the\n    // allowlist; this is only for our internal use.\n    error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\\n\\n' + 'Error message:\\n\\n%s', error$1);\n  }\n}\nfunction pingSuspendedRoot(root, wakeable, pingedLanes) {\n  var pingCache = root.pingCache;\n\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  var eventTime = requestEventTime();\n  markRootPinged(root, pingedLanes);\n  warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n\n  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {\n      // Restart from the root.\n      prepareFreshStack(root, NoLanes);\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber, retryLane) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new lanes.\n  if (retryLane === NoLane) {\n    // TODO: Assign this to `suspenseState.retryLane`? to avoid\n    // unnecessary entanglement?\n    retryLane = requestRetryLane(boundaryFiber);\n  } // TODO: Special case idle priority?\n\n\n  var eventTime = requestEventTime();\n  var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n\n  if (root !== null) {\n    markRootUpdated(root, retryLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nfunction retryDehydratedSuspenseBoundary(boundaryFiber) {\n  var suspenseState = boundaryFiber.memoizedState;\n  var retryLane = NoLane;\n\n  if (suspenseState !== null) {\n    retryLane = suspenseState.retryLane;\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\nfunction resolveRetryWakeable(boundaryFiber, wakeable) {\n  var retryLane = NoLane; // Default\n\n  var retryCache;\n\n  switch (boundaryFiber.tag) {\n    case SuspenseComponent:\n      retryCache = boundaryFiber.stateNode;\n      var suspenseState = boundaryFiber.memoizedState;\n\n      if (suspenseState !== null) {\n        retryLane = suspenseState.retryLane;\n      }\n\n      break;\n\n    case SuspenseListComponent:\n      retryCache = boundaryFiber.stateNode;\n      break;\n\n    default:\n      throw new Error('Pinged unknown suspense boundary type. ' + 'This is probably a bug in React.');\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n} // Computes the next Just Noticeable Difference (JND) boundary.\n// The theory is that a person can't tell the difference between small differences in time.\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n// difference in the experience. However, waiting for longer might mean that we can avoid\n// showing an intermediate loading state. The longer we have already waited, the harder it\n// is to tell small differences in time. Therefore, the longer we've already waited,\n// the longer we can wait additionally. At some point we have to give up though.\n// We pick a train model where the next boundary commits at a consistent schedule.\n// These particular numbers are vague estimates. We expect to adjust them based on research.\n\nfunction jnd(timeElapsed) {\n  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;\n}\n\nfunction checkForNestedUpdates() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    rootWithNestedUpdates = null;\n    throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');\n  }\n\n  {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n      rootWithPassiveNestedUpdates = null;\n\n      error('Maximum update depth exceeded. This can happen when a component ' + \"calls setState inside useEffect, but useEffect either doesn't \" + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');\n    }\n  }\n}\n\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\n  {\n    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n    {\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n    }\n  }\n}\n\nfunction commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {\n  {\n    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n    // Maybe not a big deal since this is DEV only behavior.\n    setCurrentFiber(fiber);\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);\n    }\n\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n    }\n\n    resetCurrentFiber();\n  }\n}\n\nfunction invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    var current = firstChild;\n    var subtreeRoot = null;\n\n    while (current !== null) {\n      var primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n\n      if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {\n        current = current.child;\n      } else {\n        if ((current.flags & fiberFlags) !== NoFlags) {\n          invokeEffectFn(current);\n        }\n\n        if (current.sibling !== null) {\n          current = current.sibling;\n        } else {\n          current = subtreeRoot = current.return;\n        }\n      }\n    }\n  }\n}\n\nvar didWarnStateUpdateForNotYetMountedComponent = null;\nfunction warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n  {\n    if ((executionContext & RenderContext) !== NoContext) {\n      // We let the other warning about render phase updates deal with this one.\n      return;\n    }\n\n    if (!(fiber.mode & ConcurrentMode)) {\n      return;\n    }\n\n    var tag = fiber.tag;\n\n    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    } // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n\n\n    var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n        return;\n      }\n\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n    }\n\n    var previousFiber = current;\n\n    try {\n      setCurrentFiber(fiber);\n\n      error(\"Can't perform a React state update on a component that hasn't mounted yet. \" + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');\n    } finally {\n      if (previousFiber) {\n        setCurrentFiber(fiber);\n      } else {\n        resetCurrentFiber();\n      }\n    }\n  }\n}\nvar beginWork$1;\n\n{\n  var dummyFiber = null;\n\n  beginWork$1 = function (current, unitOfWork, lanes) {\n    // If a component throws an error, we replay it again in a synchronously\n    // dispatched event, so that the debugger will treat it as an uncaught\n    // error See ReactErrorUtils for more information.\n    // Before entering the begin phase, copy the work-in-progress onto a dummy\n    // fiber. If beginWork throws, we'll use this to reset the state.\n    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);\n\n    try {\n      return beginWork(current, unitOfWork, lanes);\n    } catch (originalError) {\n      if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {\n        // Don't replay promises.\n        // Don't replay errors if we are hydrating and have already suspended or handled an error\n        throw originalError;\n      } // Keep this code in sync with handleError; any changes here must have\n      // corresponding changes there.\n\n\n      resetContextDependencies();\n      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the\n      // same fiber again.\n      // Unwind the failed stack frame\n\n      unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.\n\n      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n      if ( unitOfWork.mode & ProfileMode) {\n        // Reset the profiler timer.\n        startProfilerTimer(unitOfWork);\n      } // Run beginWork again.\n\n\n      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);\n\n      if (hasCaughtError()) {\n        var replayError = clearCaughtError();\n\n        if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) {\n          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\n          originalError._suppressLogging = true;\n        }\n      } // We always throw the original error in case the second render pass is not idempotent.\n      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.\n\n\n      throw originalError;\n    }\n  };\n}\n\nvar didWarnAboutUpdateInRender = false;\nvar didWarnAboutUpdateInRenderForAnotherComponent;\n\n{\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n}\n\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n  {\n    if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {\n      switch (fiber.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.\n\n            var dedupeKey = renderingComponentName;\n\n            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n              var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);\n            }\n\n            break;\n          }\n\n        case ClassComponent:\n          {\n            if (!didWarnAboutUpdateInRender) {\n              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');\n\n              didWarnAboutUpdateInRender = true;\n            }\n\n            break;\n          }\n      }\n    }\n  }\n}\n\nfunction restorePendingUpdaters(root, lanes) {\n  {\n    if (isDevToolsPresent) {\n      var memoizedUpdaters = root.memoizedUpdaters;\n      memoizedUpdaters.forEach(function (schedulingFiber) {\n        addFiberToLanesMap(root, schedulingFiber, lanes);\n      }); // This function intentionally does not clear memoized updaters.\n      // Those may still be relevant to the current commit\n      // and a future one (e.g. Suspense).\n    }\n  }\n}\nvar fakeActCallbackNode = {};\n\nfunction scheduleCallback$1(priorityLevel, callback) {\n  {\n    // If we're currently inside an `act` scope, bypass Scheduler and push to\n    // the `act` queue instead.\n    var actQueue = ReactCurrentActQueue$1.current;\n\n    if (actQueue !== null) {\n      actQueue.push(callback);\n      return fakeActCallbackNode;\n    } else {\n      return scheduleCallback(priorityLevel, callback);\n    }\n  }\n}\n\nfunction cancelCallback$1(callbackNode) {\n  if ( callbackNode === fakeActCallbackNode) {\n    return;\n  } // In production, always call Scheduler. This function will be stripped out.\n\n\n  return cancelCallback(callbackNode);\n}\n\nfunction shouldForceFlushFallbacksInDEV() {\n  // Never force flush in production. This function should get stripped out.\n  return  ReactCurrentActQueue$1.current !== null;\n}\n\nfunction warnIfUpdatesNotWrappedWithActDEV(fiber) {\n  {\n    if (fiber.mode & ConcurrentMode) {\n      if (!isConcurrentActEnvironment()) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n    } else {\n      // Legacy mode has additional cases where we suppress a warning.\n      if (!isLegacyActEnvironment()) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n\n      if (executionContext !== NoContext) {\n        // Legacy mode doesn't warn if the update is batched, i.e.\n        // batchedUpdates or flushSync.\n        return;\n      }\n\n      if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {\n        // For backwards compatibility with pre-hooks code, legacy mode only\n        // warns for updates that originate from a hook.\n        return;\n      }\n    }\n\n    if (ReactCurrentActQueue$1.current === null) {\n      var previousFiber = current;\n\n      try {\n        setCurrentFiber(fiber);\n\n        error('An update to %s inside a test was not wrapped in act(...).\\n\\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\\n\\n' + 'act(() => {\\n' + '  /* fire events that update state */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));\n      } finally {\n        if (previousFiber) {\n          setCurrentFiber(fiber);\n        } else {\n          resetCurrentFiber();\n        }\n      }\n    }\n  }\n}\n\nfunction warnIfSuspenseResolutionNotWrappedWithActDEV(root) {\n  {\n    if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {\n      error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\\n\\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\\n\\n' + 'act(() => {\\n' + '  /* finish loading suspended data */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');\n    }\n  }\n}\n\nfunction setIsRunningInsertionEffect(isRunning) {\n  {\n    isRunningInsertionEffect = isRunning;\n  }\n}\n\n/* eslint-disable react-internal/prod-error-codes */\nvar resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.\n\nvar failedBoundaries = null;\nvar setRefreshHandler = function (handler) {\n  {\n    resolveFamily = handler;\n  }\n};\nfunction resolveFunctionForHotReloading(type) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n\n    var family = resolveFamily(type);\n\n    if (family === undefined) {\n      return type;\n    } // Use the latest known implementation.\n\n\n    return family.current;\n  }\n}\nfunction resolveClassForHotReloading(type) {\n  // No implementation differences.\n  return resolveFunctionForHotReloading(type);\n}\nfunction resolveForwardRefForHotReloading(type) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n\n    var family = resolveFamily(type);\n\n    if (family === undefined) {\n      // Check if we're dealing with a real forwardRef. Don't want to crash early.\n      if (type !== null && type !== undefined && typeof type.render === 'function') {\n        // ForwardRef is special because its resolved .type is an object,\n        // but it's possible that we only have its inner render function in the map.\n        // If that inner render function is different, we'll build a new forwardRef type.\n        var currentRender = resolveFunctionForHotReloading(type.render);\n\n        if (type.render !== currentRender) {\n          var syntheticType = {\n            $$typeof: REACT_FORWARD_REF_TYPE,\n            render: currentRender\n          };\n\n          if (type.displayName !== undefined) {\n            syntheticType.displayName = type.displayName;\n          }\n\n          return syntheticType;\n        }\n      }\n\n      return type;\n    } // Use the latest known implementation.\n\n\n    return family.current;\n  }\n}\nfunction isCompatibleFamilyForHotReloading(fiber, element) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return false;\n    }\n\n    var prevType = fiber.elementType;\n    var nextType = element.type; // If we got here, we know types aren't === equal.\n\n    var needsCompareFamilies = false;\n    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;\n\n    switch (fiber.tag) {\n      case ClassComponent:\n        {\n          if (typeof nextType === 'function') {\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      case FunctionComponent:\n        {\n          if (typeof nextType === 'function') {\n            needsCompareFamilies = true;\n          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n            // We don't know the inner type yet.\n            // We're going to assume that the lazy inner type is stable,\n            // and so it is sufficient to avoid reconciling it away.\n            // We're not going to unwrap or actually use the new lazy type.\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      case ForwardRef:\n        {\n          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n            needsCompareFamilies = true;\n          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      case MemoComponent:\n      case SimpleMemoComponent:\n        {\n          if ($$typeofNextType === REACT_MEMO_TYPE) {\n            // TODO: if it was but can no longer be simple,\n            // we shouldn't set this.\n            needsCompareFamilies = true;\n          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      default:\n        return false;\n    } // Check if both types have a family and it's the same one.\n\n\n    if (needsCompareFamilies) {\n      // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n      // This means both of them need to be registered to preserve state.\n      // If we unwrapped and compared the inner types for wrappers instead,\n      // then we would risk falsely saying two separate memo(Foo)\n      // calls are equivalent because they wrap the same Foo function.\n      var prevFamily = resolveFamily(prevType);\n\n      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\nfunction markFailedErrorBoundaryForHotReloading(fiber) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n\n    if (typeof WeakSet !== 'function') {\n      return;\n    }\n\n    if (failedBoundaries === null) {\n      failedBoundaries = new WeakSet();\n    }\n\n    failedBoundaries.add(fiber);\n  }\n}\nvar scheduleRefresh = function (root, update) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n\n    var staleFamilies = update.staleFamilies,\n        updatedFamilies = update.updatedFamilies;\n    flushPassiveEffects();\n    flushSync(function () {\n      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);\n    });\n  }\n};\nvar scheduleRoot = function (root, element) {\n  {\n    if (root.context !== emptyContextObject) {\n      // Super edge case: root has a legacy _renderSubtree context\n      // but we don't know the parentComponent so we can't pass it.\n      // Just ignore. We'll delete this with _renderSubtree code path later.\n      return;\n    }\n\n    flushPassiveEffects();\n    flushSync(function () {\n      updateContainer(element, root, null, null);\n    });\n  }\n};\n\nfunction scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {\n  {\n    var alternate = fiber.alternate,\n        child = fiber.child,\n        sibling = fiber.sibling,\n        tag = fiber.tag,\n        type = fiber.type;\n    var candidateType = null;\n\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n    }\n\n    if (resolveFamily === null) {\n      throw new Error('Expected resolveFamily to be set during hot reload.');\n    }\n\n    var needsRender = false;\n    var needsRemount = false;\n\n    if (candidateType !== null) {\n      var family = resolveFamily(candidateType);\n\n      if (family !== undefined) {\n        if (staleFamilies.has(family)) {\n          needsRemount = true;\n        } else if (updatedFamilies.has(family)) {\n          if (tag === ClassComponent) {\n            needsRemount = true;\n          } else {\n            needsRender = true;\n          }\n        }\n      }\n    }\n\n    if (failedBoundaries !== null) {\n      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {\n        needsRemount = true;\n      }\n    }\n\n    if (needsRemount) {\n      fiber._debugNeedsRemount = true;\n    }\n\n    if (needsRemount || needsRender) {\n      var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n      if (_root !== null) {\n        scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n\n    if (child !== null && !needsRemount) {\n      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);\n    }\n\n    if (sibling !== null) {\n      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);\n    }\n  }\n}\n\nvar findHostInstancesForRefresh = function (root, families) {\n  {\n    var hostInstances = new Set();\n    var types = new Set(families.map(function (family) {\n      return family.current;\n    }));\n    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);\n    return hostInstances;\n  }\n};\n\nfunction findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {\n  {\n    var child = fiber.child,\n        sibling = fiber.sibling,\n        tag = fiber.tag,\n        type = fiber.type;\n    var candidateType = null;\n\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n    }\n\n    var didMatch = false;\n\n    if (candidateType !== null) {\n      if (types.has(candidateType)) {\n        didMatch = true;\n      }\n    }\n\n    if (didMatch) {\n      // We have a match. This only drills down to the closest host components.\n      // There's no need to search deeper because for the purpose of giving\n      // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n      findHostInstancesForFiberShallowly(fiber, hostInstances);\n    } else {\n      // If there's no match, maybe there will be one further down in the child tree.\n      if (child !== null) {\n        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);\n      }\n    }\n\n    if (sibling !== null) {\n      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);\n    }\n  }\n}\n\nfunction findHostInstancesForFiberShallowly(fiber, hostInstances) {\n  {\n    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);\n\n    if (foundHostInstances) {\n      return;\n    } // If we didn't find any host children, fallback to closest host parent.\n\n\n    var node = fiber;\n\n    while (true) {\n      switch (node.tag) {\n        case HostComponent:\n          hostInstances.add(node.stateNode);\n          return;\n\n        case HostPortal:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n\n        case HostRoot:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n      }\n\n      if (node.return === null) {\n        throw new Error('Expected to reach root first.');\n      }\n\n      node = node.return;\n    }\n  }\n}\n\nfunction findChildHostInstancesForFiberShallowly(fiber, hostInstances) {\n  {\n    var node = fiber;\n    var foundHostInstances = false;\n\n    while (true) {\n      if (node.tag === HostComponent) {\n        // We got a match.\n        foundHostInstances = true;\n        hostInstances.add(node.stateNode); // There may still be more, so keep searching.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === fiber) {\n        return foundHostInstances;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === fiber) {\n          return foundHostInstances;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n\n  return false;\n}\n\nvar hasBadMapPolyfill;\n\n{\n  hasBadMapPolyfill = false;\n\n  try {\n    var nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction FiberNode(tag, pendingProps, key, mode) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null; // Fiber\n\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n  this.ref = null;\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n  this.mode = mode; // Effects\n\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n  this.alternate = null;\n\n  {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  {\n    // This isn't directly used but is handy for debugging internals:\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n} // This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\n\n\nvar createFiber = function (tag, pendingProps, key, mode) {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct$1(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction isSimpleFunctionComponent(type) {\n  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;\n}\nfunction resolveLazyComponentTag(Component) {\n  if (typeof Component === 'function') {\n    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    var $$typeof = Component.$$typeof;\n\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n\n  return IndeterminateComponent;\n} // This is used to create an alternate fiber to do work on.\n\nfunction createWorkInProgress(current, pendingProps) {\n  var workInProgress = current.alternate;\n\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    {\n      // DEV-only fields\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // We already have an alternate.\n    // Reset the effect tag.\n\n    workInProgress.flags = NoFlags; // The effects are no longer valid.\n\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n\n    {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  } // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n\n\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n\n  var currentDependencies = current.dependencies;\n  workInProgress.dependencies = currentDependencies === null ? null : {\n    lanes: currentDependencies.lanes,\n    firstContext: currentDependencies.firstContext\n  }; // These will be overridden during the parent's reconciliation\n\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n    }\n  }\n\n  return workInProgress;\n} // Used to reuse a Fiber for a second pass.\n\nfunction resetWorkInProgress(workInProgress, renderLanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\n\n  var current = workInProgress.alternate;\n\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n    workInProgress.dependencies = null;\n    workInProgress.stateNode = null;\n\n    {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n\n    var currentDependencies = current.dependencies;\n    workInProgress.dependencies = currentDependencies === null ? null : {\n      lanes: currentDependencies.lanes,\n      firstContext: currentDependencies.firstContext\n    };\n\n    {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\nfunction createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\n  var mode;\n\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n\n    if (isStrictMode === true) {\n      mode |= StrictLegacyMode;\n\n      {\n        mode |= StrictEffectsMode;\n      }\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  if ( isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\nfunction createFiberFromTypeAndProps(type, // React$ElementType\nkey, pendingProps, owner, mode, lanes) {\n  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n  var resolvedType = type;\n\n  if (typeof type === 'function') {\n    if (shouldConstruct$1(type)) {\n      fiberTag = ClassComponent;\n\n      {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n\n        if ( (mode & ConcurrentMode) !== NoMode) {\n          // Strict effects should never run on legacy roots\n          mode |= StrictEffectsMode;\n        }\n\n        break;\n\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n\n      case REACT_LEGACY_HIDDEN_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_SCOPE_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_CACHE_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_TRACING_MARKER_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      default:\n        {\n          if (typeof type === 'object' && type !== null) {\n            switch (type.$$typeof) {\n              case REACT_PROVIDER_TYPE:\n                fiberTag = ContextProvider;\n                break getTag;\n\n              case REACT_CONTEXT_TYPE:\n                // This is a consumer\n                fiberTag = ContextConsumer;\n                break getTag;\n\n              case REACT_FORWARD_REF_TYPE:\n                fiberTag = ForwardRef;\n\n                {\n                  resolvedType = resolveForwardRefForHotReloading(resolvedType);\n                }\n\n                break getTag;\n\n              case REACT_MEMO_TYPE:\n                fiberTag = MemoComponent;\n                break getTag;\n\n              case REACT_LAZY_TYPE:\n                fiberTag = LazyComponent;\n                resolvedType = null;\n                break getTag;\n            }\n          }\n\n          var info = '';\n\n          {\n            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n              info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n            }\n\n            var ownerName = owner ? getComponentNameFromFiber(owner) : null;\n\n            if (ownerName) {\n              info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n            }\n          }\n\n          throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n        }\n    }\n  }\n\n  var fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\nfunction createFiberFromElement(element, mode, lanes) {\n  var owner = null;\n\n  {\n    owner = element._owner;\n  }\n\n  var type = element.type;\n  var key = element.key;\n  var pendingProps = element.props;\n  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n\n  {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n\n  return fiber;\n}\nfunction createFiberFromFragment(elements, mode, lanes, key) {\n  var fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(pendingProps, mode, lanes, key) {\n  {\n    if (typeof pendingProps.id !== 'string') {\n      error('Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);\n    }\n  }\n\n  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0\n    };\n  }\n\n  return fiber;\n}\n\nfunction createFiberFromSuspense(pendingProps, mode, lanes, key) {\n  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  var primaryChildInstance = {\n    isHidden: false\n  };\n  fiber.stateNode = primaryChildInstance;\n  return fiber;\n}\nfunction createFiberFromText(content, mode, lanes) {\n  var fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromHostInstanceForDeletion() {\n  var fiber = createFiber(HostComponent, null, null, NoMode);\n  fiber.elementType = 'DELETED';\n  return fiber;\n}\nfunction createFiberFromDehydratedFragment(dehydratedNode) {\n  var fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\nfunction createFiberFromPortal(portal, mode, lanes) {\n  var pendingProps = portal.children !== null ? portal.children : [];\n  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null,\n    // Used by persistent updates\n    implementation: portal.implementation\n  };\n  return fiber;\n} // Used for stashing WIP properties to replay failed work in DEV.\n\nfunction assignFiberPropertiesInDEV(target, source) {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  } // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.subtreeFlags = source.subtreeFlags;\n  target.deletions = source.deletions;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n\n  {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n\nfunction FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.callbackNode = null;\n  this.callbackPriority = NoLane;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n  this.identifierPrefix = identifierPrefix;\n  this.onRecoverableError = onRecoverableError;\n\n  {\n    this.mutableSourceEagerHydrationData = null;\n  }\n\n  {\n    this.effectDuration = 0;\n    this.passiveEffectDuration = 0;\n  }\n\n  {\n    this.memoizedUpdaters = new Set();\n    var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];\n\n    for (var _i = 0; _i < TotalLanes; _i++) {\n      pendingUpdatersLaneMap.push(new Set());\n    }\n  }\n\n  {\n    switch (tag) {\n      case ConcurrentRoot:\n        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n        break;\n\n      case LegacyRoot:\n        this._debugRootType = hydrate ? 'hydrate()' : 'render()';\n        break;\n    }\n  }\n}\n\nfunction createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the\n// host config, but because they are passed in at runtime, we have to thread\n// them through the root constructor. Perhaps we should put them all into a\n// single type, like a DynamicHostConfig that is defined by the renderer.\nidentifierPrefix, onRecoverableError, transitionCallbacks) {\n  var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);\n  // stateNode is any.\n\n\n  var uninitializedFiber = createHostRootFiber(tag, isStrictMode);\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  {\n    var _initialState = {\n      element: initialChildren,\n      isDehydrated: hydrate,\n      cache: null,\n      // not enabled yet\n      transitions: null,\n      pendingSuspenseBoundaries: null\n    };\n    uninitializedFiber.memoizedState = _initialState;\n  }\n\n  initializeUpdateQueue(uninitializedFiber);\n  return root;\n}\n\nvar ReactVersion = '18.3.1';\n\nfunction createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.\nimplementation) {\n  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  {\n    checkKeyStringCoercion(key);\n  }\n\n  return {\n    // This tag allow us to uniquely identify this as a React Portal\n    $$typeof: REACT_PORTAL_TYPE,\n    key: key == null ? null : '' + key,\n    children: children,\n    containerInfo: containerInfo,\n    implementation: implementation\n  };\n}\n\nvar didWarnAboutNestedUpdates;\nvar didWarnAboutFindNodeInStrictMode;\n\n{\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = {};\n}\n\nfunction getContextForSubtree(parentComponent) {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  var fiber = get(parentComponent);\n  var parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    var Component = fiber.type;\n\n    if (isContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction findHostInstanceWithWarning(component, methodName) {\n  {\n    var fiber = get(component);\n\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        throw new Error('Unable to find node on an unmounted component.');\n      } else {\n        var keys = Object.keys(component).join(',');\n        throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n      }\n    }\n\n    var hostFiber = findCurrentHostFiber(fiber);\n\n    if (hostFiber === null) {\n      return null;\n    }\n\n    if (hostFiber.mode & StrictLegacyMode) {\n      var componentName = getComponentNameFromFiber(fiber) || 'Component';\n\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n        var previousFiber = current;\n\n        try {\n          setCurrentFiber(hostFiber);\n\n          if (fiber.mode & StrictLegacyMode) {\n            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n          } else {\n            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n          }\n        } finally {\n          // Ideally this should reset to previous but this shouldn't be called in\n          // render and there's another warning for that anyway.\n          if (previousFiber) {\n            setCurrentFiber(previousFiber);\n          } else {\n            resetCurrentFiber();\n          }\n        }\n      }\n    }\n\n    return hostFiber.stateNode;\n  }\n}\n\nfunction createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n  var hydrate = false;\n  var initialChildren = null;\n  return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);\n}\nfunction createHydrationContainer(initialChildren, // TODO: Remove `callback` when we delete legacy mode.\ncallback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n  var hydrate = true;\n  var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor\n\n  root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from\n  // a regular update because the initial render must match was was rendered\n  // on the server.\n  // NOTE: This update intentionally doesn't have a payload. We're only using\n  // the update to schedule work on the root fiber (and, for legacy roots, to\n  // enqueue the callback if one is provided).\n\n  var current = root.current;\n  var eventTime = requestEventTime();\n  var lane = requestUpdateLane(current);\n  var update = createUpdate(eventTime, lane);\n  update.callback = callback !== undefined && callback !== null ? callback : null;\n  enqueueUpdate(current, update, lane);\n  scheduleInitialHydrationOnRoot(root, lane, eventTime);\n  return root;\n}\nfunction updateContainer(element, container, parentComponent, callback) {\n  {\n    onScheduleRoot(container, element);\n  }\n\n  var current$1 = container.current;\n  var eventTime = requestEventTime();\n  var lane = requestUpdateLane(current$1);\n\n  {\n    markRenderScheduled(lane);\n  }\n\n  var context = getContextForSubtree(parentComponent);\n\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  {\n    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {\n      didWarnAboutNestedUpdates = true;\n\n      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');\n    }\n  }\n\n  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n\n  update.payload = {\n    element: element\n  };\n  callback = callback === undefined ? null : callback;\n\n  if (callback !== null) {\n    {\n      if (typeof callback !== 'function') {\n        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n      }\n    }\n\n    update.callback = callback;\n  }\n\n  var root = enqueueUpdate(current$1, update, lane);\n\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, current$1, lane, eventTime);\n    entangleTransitions(root, current$1, lane);\n  }\n\n  return lane;\n}\nfunction getPublicRootInstance(container) {\n  var containerFiber = container.current;\n\n  if (!containerFiber.child) {\n    return null;\n  }\n\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\nfunction attemptSynchronousHydration$1(fiber) {\n  switch (fiber.tag) {\n    case HostRoot:\n      {\n        var root = fiber.stateNode;\n\n        if (isRootDehydrated(root)) {\n          // Flush the first scheduled \"update\".\n          var lanes = getHighestPriorityPendingLanes(root);\n          flushRoot(root, lanes);\n        }\n\n        break;\n      }\n\n    case SuspenseComponent:\n      {\n        flushSync(function () {\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n          if (root !== null) {\n            var eventTime = requestEventTime();\n            scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);\n          }\n        }); // If we're still blocked after this, we need to increase\n        // the priority of any promises resolving within this\n        // boundary so that they next attempt also has higher pri.\n\n        var retryLane = SyncLane;\n        markRetryLaneIfNotHydrated(fiber, retryLane);\n        break;\n      }\n  }\n}\n\nfunction markRetryLaneImpl(fiber, retryLane) {\n  var suspenseState = fiber.memoizedState;\n\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);\n  }\n} // Increases the priority of thenables when they resolve within this boundary.\n\n\nfunction markRetryLaneIfNotHydrated(fiber, retryLane) {\n  markRetryLaneImpl(fiber, retryLane);\n  var alternate = fiber.alternate;\n\n  if (alternate) {\n    markRetryLaneImpl(alternate, retryLane);\n  }\n}\nfunction attemptContinuousHydration$1(fiber) {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n\n  var lane = SelectiveHydrationLane;\n  var root = enqueueConcurrentRenderForLane(fiber, lane);\n\n  if (root !== null) {\n    var eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\nfunction attemptHydrationAtCurrentPriority$1(fiber) {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority other than synchronously flush it.\n    return;\n  }\n\n  var lane = requestUpdateLane(fiber);\n  var root = enqueueConcurrentRenderForLane(fiber, lane);\n\n  if (root !== null) {\n    var eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\nfunction findHostInstanceWithNoPortals(fiber) {\n  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n\n  if (hostFiber === null) {\n    return null;\n  }\n\n  return hostFiber.stateNode;\n}\n\nvar shouldErrorImpl = function (fiber) {\n  return null;\n};\n\nfunction shouldError(fiber) {\n  return shouldErrorImpl(fiber);\n}\n\nvar shouldSuspendImpl = function (fiber) {\n  return false;\n};\n\nfunction shouldSuspend(fiber) {\n  return shouldSuspendImpl(fiber);\n}\nvar overrideHookState = null;\nvar overrideHookStateDeletePath = null;\nvar overrideHookStateRenamePath = null;\nvar overrideProps = null;\nvar overridePropsDeletePath = null;\nvar overridePropsRenamePath = null;\nvar scheduleUpdate = null;\nvar setErrorHandler = null;\nvar setSuspenseHandler = null;\n\n{\n  var copyWithDeleteImpl = function (obj, path, index) {\n    var key = path[index];\n    var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n    if (index + 1 === path.length) {\n      if (isArray(updated)) {\n        updated.splice(key, 1);\n      } else {\n        delete updated[key];\n      }\n\n      return updated;\n    } // $FlowFixMe number or string is fine here\n\n\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n    return updated;\n  };\n\n  var copyWithDelete = function (obj, path) {\n    return copyWithDeleteImpl(obj, path, 0);\n  };\n\n  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {\n    var oldKey = oldPath[index];\n    var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n    if (index + 1 === oldPath.length) {\n      var newKey = newPath[index]; // $FlowFixMe number or string is fine here\n\n      updated[newKey] = updated[oldKey];\n\n      if (isArray(updated)) {\n        updated.splice(oldKey, 1);\n      } else {\n        delete updated[oldKey];\n      }\n    } else {\n      // $FlowFixMe number or string is fine here\n      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here\n      obj[oldKey], oldPath, newPath, index + 1);\n    }\n\n    return updated;\n  };\n\n  var copyWithRename = function (obj, oldPath, newPath) {\n    if (oldPath.length !== newPath.length) {\n      warn('copyWithRename() expects paths of the same length');\n\n      return;\n    } else {\n      for (var i = 0; i < newPath.length - 1; i++) {\n        if (oldPath[i] !== newPath[i]) {\n          warn('copyWithRename() expects paths to be the same except for the deepest key');\n\n          return;\n        }\n      }\n    }\n\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n  };\n\n  var copyWithSetImpl = function (obj, path, index, value) {\n    if (index >= path.length) {\n      return value;\n    }\n\n    var key = path[index];\n    var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here\n\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n    return updated;\n  };\n\n  var copyWithSet = function (obj, path, value) {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  var findHook = function (fiber, id) {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    var currentHook = fiber.memoizedState;\n\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n\n    return currentHook;\n  }; // Support DevTools editable values for useState and useReducer.\n\n\n  overrideHookState = function (fiber, id, path, value) {\n    var hook = findHook(fiber, id);\n\n    if (hook !== null) {\n      var newState = copyWithSet(hook.memoizedState, path, value);\n      hook.memoizedState = newState;\n      hook.baseState = newState; // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n\n  overrideHookStateDeletePath = function (fiber, id, path) {\n    var hook = findHook(fiber, id);\n\n    if (hook !== null) {\n      var newState = copyWithDelete(hook.memoizedState, path);\n      hook.memoizedState = newState;\n      hook.baseState = newState; // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n\n  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {\n    var hook = findHook(fiber, id);\n\n    if (hook !== null) {\n      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n      hook.memoizedState = newState;\n      hook.baseState = newState; // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.\n\n\n  overrideProps = function (fiber, path, value) {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n\n    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  overridePropsDeletePath = function (fiber, path) {\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n\n    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  overridePropsRenamePath = function (fiber, oldPath, newPath) {\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n\n    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  scheduleUpdate = function (fiber) {\n    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  setErrorHandler = function (newShouldErrorImpl) {\n    shouldErrorImpl = newShouldErrorImpl;\n  };\n\n  setSuspenseHandler = function (newShouldSuspendImpl) {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nfunction findHostInstanceByFiber(fiber) {\n  var hostFiber = findCurrentHostFiber(fiber);\n\n  if (hostFiber === null) {\n    return null;\n  }\n\n  return hostFiber.stateNode;\n}\n\nfunction emptyFindFiberByHostInstance(instance) {\n  return null;\n}\n\nfunction getCurrentFiberForDevTools() {\n  return current;\n}\n\nfunction injectIntoDevTools(devToolsConfig) {\n  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n  return injectInternals({\n    bundleType: devToolsConfig.bundleType,\n    version: devToolsConfig.version,\n    rendererPackageName: devToolsConfig.rendererPackageName,\n    rendererConfig: devToolsConfig.rendererConfig,\n    overrideHookState: overrideHookState,\n    overrideHookStateDeletePath: overrideHookStateDeletePath,\n    overrideHookStateRenamePath: overrideHookStateRenamePath,\n    overrideProps: overrideProps,\n    overridePropsDeletePath: overridePropsDeletePath,\n    overridePropsRenamePath: overridePropsRenamePath,\n    setErrorHandler: setErrorHandler,\n    setSuspenseHandler: setSuspenseHandler,\n    scheduleUpdate: scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber: findHostInstanceByFiber,\n    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,\n    // React Refresh\n    findHostInstancesForRefresh:  findHostInstancesForRefresh ,\n    scheduleRefresh:  scheduleRefresh ,\n    scheduleRoot:  scheduleRoot ,\n    setRefreshHandler:  setRefreshHandler ,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber:  getCurrentFiberForDevTools ,\n    // Enables DevTools to detect reconciler version rather than renderer version\n    // which may not match for third party renderers.\n    reconcilerVersion: ReactVersion\n  });\n}\n\n/* global reportError */\n\nvar defaultOnRecoverableError = typeof reportError === 'function' ? // In modern browsers, reportError will dispatch an error event,\n// emulating an uncaught JavaScript error.\nreportError : function (error) {\n  // In older browsers and test environments, fallback to console.error.\n  // eslint-disable-next-line react-internal/no-production-logging\n  console['error'](error);\n};\n\nfunction ReactDOMRoot(internalRoot) {\n  this._internalRoot = internalRoot;\n}\n\nReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function (children) {\n  var root = this._internalRoot;\n\n  if (root === null) {\n    throw new Error('Cannot update an unmounted root.');\n  }\n\n  {\n    if (typeof arguments[1] === 'function') {\n      error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');\n    } else if (isValidContainer(arguments[1])) {\n      error('You passed a container to the second argument of root.render(...). ' + \"You don't need to pass it again since you already passed it to create the root.\");\n    } else if (typeof arguments[1] !== 'undefined') {\n      error('You passed a second argument to root.render(...) but it only accepts ' + 'one argument.');\n    }\n\n    var container = root.containerInfo;\n\n    if (container.nodeType !== COMMENT_NODE) {\n      var hostInstance = findHostInstanceWithNoPortals(root.current);\n\n      if (hostInstance) {\n        if (hostInstance.parentNode !== container) {\n          error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + \"root.unmount() to empty a root's container.\");\n        }\n      }\n    }\n  }\n\n  updateContainer(children, root, null, null);\n};\n\nReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function () {\n  {\n    if (typeof arguments[0] === 'function') {\n      error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');\n    }\n  }\n\n  var root = this._internalRoot;\n\n  if (root !== null) {\n    this._internalRoot = null;\n    var container = root.containerInfo;\n\n    {\n      if (isAlreadyRendering()) {\n        error('Attempted to synchronously unmount a root while React was already ' + 'rendering. React cannot finish unmounting the root until the ' + 'current render has completed, which may lead to a race condition.');\n      }\n    }\n\n    flushSync(function () {\n      updateContainer(null, root, null, null);\n    });\n    unmarkContainerAsRoot(container);\n  }\n};\n\nfunction createRoot(container, options) {\n  if (!isValidContainer(container)) {\n    throw new Error('createRoot(...): Target container is not a DOM element.');\n  }\n\n  warnIfReactDOMContainerInDEV(container);\n  var isStrictMode = false;\n  var concurrentUpdatesByDefaultOverride = false;\n  var identifierPrefix = '';\n  var onRecoverableError = defaultOnRecoverableError;\n  var transitionCallbacks = null;\n\n  if (options !== null && options !== undefined) {\n    {\n      if (options.hydrate) {\n        warn('hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.');\n      } else {\n        if (typeof options === 'object' && options !== null && options.$$typeof === REACT_ELEMENT_TYPE) {\n          error('You passed a JSX element to createRoot. You probably meant to ' + 'call root.render instead. ' + 'Example usage:\\n\\n' + '  let root = createRoot(domContainer);\\n' + '  root.render(<App />);');\n        }\n      }\n    }\n\n    if (options.unstable_strictMode === true) {\n      isStrictMode = true;\n    }\n\n    if (options.identifierPrefix !== undefined) {\n      identifierPrefix = options.identifierPrefix;\n    }\n\n    if (options.onRecoverableError !== undefined) {\n      onRecoverableError = options.onRecoverableError;\n    }\n\n    if (options.transitionCallbacks !== undefined) {\n      transitionCallbacks = options.transitionCallbacks;\n    }\n  }\n\n  var root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);\n  markContainerAsRoot(root.current, container);\n  var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;\n  listenToAllSupportedEvents(rootContainerElement);\n  return new ReactDOMRoot(root);\n}\n\nfunction ReactDOMHydrationRoot(internalRoot) {\n  this._internalRoot = internalRoot;\n}\n\nfunction scheduleHydration(target) {\n  if (target) {\n    queueExplicitHydrationTarget(target);\n  }\n}\n\nReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;\nfunction hydrateRoot(container, initialChildren, options) {\n  if (!isValidContainer(container)) {\n    throw new Error('hydrateRoot(...): Target container is not a DOM element.');\n  }\n\n  warnIfReactDOMContainerInDEV(container);\n\n  {\n    if (initialChildren === undefined) {\n      error('Must provide initial children as second argument to hydrateRoot. ' + 'Example usage: hydrateRoot(domContainer, <App />)');\n    }\n  } // For now we reuse the whole bag of options since they contain\n  // the hydration callbacks.\n\n\n  var hydrationCallbacks = options != null ? options : null; // TODO: Delete this option\n\n  var mutableSources = options != null && options.hydratedSources || null;\n  var isStrictMode = false;\n  var concurrentUpdatesByDefaultOverride = false;\n  var identifierPrefix = '';\n  var onRecoverableError = defaultOnRecoverableError;\n\n  if (options !== null && options !== undefined) {\n    if (options.unstable_strictMode === true) {\n      isStrictMode = true;\n    }\n\n    if (options.identifierPrefix !== undefined) {\n      identifierPrefix = options.identifierPrefix;\n    }\n\n    if (options.onRecoverableError !== undefined) {\n      onRecoverableError = options.onRecoverableError;\n    }\n  }\n\n  var root = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);\n  markContainerAsRoot(root.current, container); // This can't be a comment node since hydration doesn't work on comment nodes anyway.\n\n  listenToAllSupportedEvents(container);\n\n  if (mutableSources) {\n    for (var i = 0; i < mutableSources.length; i++) {\n      var mutableSource = mutableSources[i];\n      registerMutableSourceForHydration(root, mutableSource);\n    }\n  }\n\n  return new ReactDOMHydrationRoot(root);\n}\nfunction isValidContainer(node) {\n  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers  ));\n} // TODO: Remove this function which also includes comment nodes.\n// We only use it in places that are currently more relaxed.\n\nfunction isValidContainerLegacy(node) {\n  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));\n}\n\nfunction warnIfReactDOMContainerInDEV(container) {\n  {\n    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {\n      error('createRoot(): Creating roots directly with document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try using a container element created ' + 'for your app.');\n    }\n\n    if (isContainerMarkedAsRoot(container)) {\n      if (container._reactRootContainer) {\n        error('You are calling ReactDOMClient.createRoot() on a container that was previously ' + 'passed to ReactDOM.render(). This is not supported.');\n      } else {\n        error('You are calling ReactDOMClient.createRoot() on a container that ' + 'has already been passed to createRoot() before. Instead, call ' + 'root.render() on the existing root instead if you want to update it.');\n      }\n    }\n  }\n}\n\nvar ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;\nvar topLevelUpdateWarnings;\n\n{\n  topLevelUpdateWarnings = function (container) {\n    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {\n      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);\n\n      if (hostInstance) {\n        if (hostInstance.parentNode !== container) {\n          error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');\n        }\n      }\n    }\n\n    var isRootRenderedBySomeReact = !!container._reactRootContainer;\n    var rootEl = getReactRootElementInContainer(container);\n    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));\n\n    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {\n      error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');\n    }\n\n    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {\n      error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');\n    }\n  };\n}\n\nfunction getReactRootElementInContainer(container) {\n  if (!container) {\n    return null;\n  }\n\n  if (container.nodeType === DOCUMENT_NODE) {\n    return container.documentElement;\n  } else {\n    return container.firstChild;\n  }\n}\n\nfunction noopOnRecoverableError() {// This isn't reachable because onRecoverableError isn't called in the\n  // legacy API.\n}\n\nfunction legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {\n  if (isHydrationContainer) {\n    if (typeof callback === 'function') {\n      var originalCallback = callback;\n\n      callback = function () {\n        var instance = getPublicRootInstance(root);\n        originalCallback.call(instance);\n      };\n    }\n\n    var root = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, // hydrationCallbacks\n    false, // isStrictMode\n    false, // concurrentUpdatesByDefaultOverride,\n    '', // identifierPrefix\n    noopOnRecoverableError);\n    container._reactRootContainer = root;\n    markContainerAsRoot(root.current, container);\n    var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;\n    listenToAllSupportedEvents(rootContainerElement);\n    flushSync();\n    return root;\n  } else {\n    // First clear any existing content.\n    var rootSibling;\n\n    while (rootSibling = container.lastChild) {\n      container.removeChild(rootSibling);\n    }\n\n    if (typeof callback === 'function') {\n      var _originalCallback = callback;\n\n      callback = function () {\n        var instance = getPublicRootInstance(_root);\n\n        _originalCallback.call(instance);\n      };\n    }\n\n    var _root = createContainer(container, LegacyRoot, null, // hydrationCallbacks\n    false, // isStrictMode\n    false, // concurrentUpdatesByDefaultOverride,\n    '', // identifierPrefix\n    noopOnRecoverableError);\n\n    container._reactRootContainer = _root;\n    markContainerAsRoot(_root.current, container);\n\n    var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;\n\n    listenToAllSupportedEvents(_rootContainerElement); // Initial mount should not be batched.\n\n    flushSync(function () {\n      updateContainer(initialChildren, _root, parentComponent, callback);\n    });\n    return _root;\n  }\n}\n\nfunction warnOnInvalidCallback$1(callback, callerName) {\n  {\n    if (callback !== null && typeof callback !== 'function') {\n      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);\n    }\n  }\n}\n\nfunction legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {\n  {\n    topLevelUpdateWarnings(container);\n    warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');\n  }\n\n  var maybeRoot = container._reactRootContainer;\n  var root;\n\n  if (!maybeRoot) {\n    // Initial mount\n    root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);\n  } else {\n    root = maybeRoot;\n\n    if (typeof callback === 'function') {\n      var originalCallback = callback;\n\n      callback = function () {\n        var instance = getPublicRootInstance(root);\n        originalCallback.call(instance);\n      };\n    } // Update\n\n\n    updateContainer(children, root, parentComponent, callback);\n  }\n\n  return getPublicRootInstance(root);\n}\n\nvar didWarnAboutFindDOMNode = false;\nfunction findDOMNode(componentOrElement) {\n  {\n    if (!didWarnAboutFindDOMNode) {\n      didWarnAboutFindDOMNode = true;\n\n      error('findDOMNode is deprecated and will be removed in the next major ' + 'release. Instead, add a ref directly to the element you want ' + 'to reference. Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node');\n    }\n\n    var owner = ReactCurrentOwner$3.current;\n\n    if (owner !== null && owner.stateNode !== null) {\n      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;\n\n      if (!warnedAboutRefsInRender) {\n        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromType(owner.type) || 'A component');\n      }\n\n      owner.stateNode._warnedAboutRefsInRender = true;\n    }\n  }\n\n  if (componentOrElement == null) {\n    return null;\n  }\n\n  if (componentOrElement.nodeType === ELEMENT_NODE) {\n    return componentOrElement;\n  }\n\n  {\n    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');\n  }\n}\nfunction hydrate(element, container, callback) {\n  {\n    error('ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + \"if it's running React 17. Learn \" + 'more: https://reactjs.org/link/switch-to-createroot');\n  }\n\n  if (!isValidContainerLegacy(container)) {\n    throw new Error('Target container is not a DOM element.');\n  }\n\n  {\n    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;\n\n    if (isModernRoot) {\n      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call hydrateRoot(container, element)?');\n    }\n  } // TODO: throw or warn if we couldn't hydrate?\n\n\n  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);\n}\nfunction render(element, container, callback) {\n  {\n    error('ReactDOM.render is no longer supported in React 18. Use createRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + \"if it's running React 17. Learn \" + 'more: https://reactjs.org/link/switch-to-createroot');\n  }\n\n  if (!isValidContainerLegacy(container)) {\n    throw new Error('Target container is not a DOM element.');\n  }\n\n  {\n    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;\n\n    if (isModernRoot) {\n      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');\n    }\n  }\n\n  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);\n}\nfunction unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {\n  {\n    error('ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported ' + 'in React 18. Consider using a portal instead. Until you switch to ' + \"the createRoot API, your app will behave as if it's running React \" + '17. Learn more: https://reactjs.org/link/switch-to-createroot');\n  }\n\n  if (!isValidContainerLegacy(containerNode)) {\n    throw new Error('Target container is not a DOM element.');\n  }\n\n  if (parentComponent == null || !has(parentComponent)) {\n    throw new Error('parentComponent must be a valid React Component');\n  }\n\n  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);\n}\nvar didWarnAboutUnmountComponentAtNode = false;\nfunction unmountComponentAtNode(container) {\n  {\n    if (!didWarnAboutUnmountComponentAtNode) {\n      didWarnAboutUnmountComponentAtNode = true;\n\n      error('unmountComponentAtNode is deprecated and will be removed in the ' + 'next major release. Switch to the createRoot API. Learn ' + 'more: https://reactjs.org/link/switch-to-createroot');\n    }\n  }\n\n  if (!isValidContainerLegacy(container)) {\n    throw new Error('unmountComponentAtNode(...): Target container is not a DOM element.');\n  }\n\n  {\n    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;\n\n    if (isModernRoot) {\n      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?');\n    }\n  }\n\n  if (container._reactRootContainer) {\n    {\n      var rootEl = getReactRootElementInContainer(container);\n      var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);\n\n      if (renderedByDifferentReact) {\n        error(\"unmountComponentAtNode(): The node you're attempting to unmount \" + 'was rendered by another copy of React.');\n      }\n    } // Unmount should not be batched.\n\n\n    flushSync(function () {\n      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {\n        // $FlowFixMe This should probably use `delete container._reactRootContainer`\n        container._reactRootContainer = null;\n        unmarkContainerAsRoot(container);\n      });\n    }); // If you call unmountComponentAtNode twice in quick succession, you'll\n    // get `true` twice. That's probably fine?\n\n    return true;\n  } else {\n    {\n      var _rootEl = getReactRootElementInContainer(container);\n\n      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.\n\n      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;\n\n      if (hasNonRootReactChild) {\n        error(\"unmountComponentAtNode(): The node you're attempting to unmount \" + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');\n      }\n    }\n\n    return false;\n  }\n}\n\nsetAttemptSynchronousHydration(attemptSynchronousHydration$1);\nsetAttemptContinuousHydration(attemptContinuousHydration$1);\nsetAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);\nsetGetCurrentUpdatePriority(getCurrentUpdatePriority);\nsetAttemptHydrationAtPriority(runWithPriority);\n\n{\n  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype\n  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype\n  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {\n    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');\n  }\n}\n\nsetRestoreImplementation(restoreControlledState$3);\nsetBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);\n\nfunction createPortal$1(children, container) {\n  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  if (!isValidContainer(container)) {\n    throw new Error('Target container is not a DOM element.');\n  } // TODO: pass ReactDOM portal implementation as third argument\n  // $FlowFixMe The Flow type is opaque but there's no way to actually create it.\n\n\n  return createPortal(children, container, null, key);\n}\n\nfunction renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {\n  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);\n}\n\nvar Internals = {\n  usingClientEntryPoint: false,\n  // Keep in sync with ReactTestUtils.js.\n  // This is an array for better minification.\n  Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]\n};\n\nfunction createRoot$1(container, options) {\n  {\n    if (!Internals.usingClientEntryPoint && !false) {\n      error('You are importing createRoot from \"react-dom\" which is not supported. ' + 'You should instead import it from \"react-dom/client\".');\n    }\n  }\n\n  return createRoot(container, options);\n}\n\nfunction hydrateRoot$1(container, initialChildren, options) {\n  {\n    if (!Internals.usingClientEntryPoint && !false) {\n      error('You are importing hydrateRoot from \"react-dom\" which is not supported. ' + 'You should instead import it from \"react-dom/client\".');\n    }\n  }\n\n  return hydrateRoot(container, initialChildren, options);\n} // Overload the definition to the two valid signatures.\n// Warning, this opts-out of checking the function body.\n\n\n// eslint-disable-next-line no-redeclare\nfunction flushSync$1(fn) {\n  {\n    if (isAlreadyRendering()) {\n      error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');\n    }\n  }\n\n  return flushSync(fn);\n}\nvar foundDevTools = injectIntoDevTools({\n  findFiberByHostInstance: getClosestInstanceFromNode,\n  bundleType:  1 ,\n  version: ReactVersion,\n  rendererPackageName: 'react-dom'\n});\n\n{\n  if (!foundDevTools && canUseDOM && window.top === window.self) {\n    // If we're in Chrome or Firefox, provide a download link if not installed.\n    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {\n      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.\n\n      if (/^(https?|file):$/.test(protocol)) {\n        // eslint-disable-next-line react-internal/no-production-logging\n        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools' + (protocol === 'file:' ? '\\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''), 'font-weight:bold');\n      }\n    }\n  }\n}\n\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;\nexports.createPortal = createPortal$1;\nexports.createRoot = createRoot$1;\nexports.findDOMNode = findDOMNode;\nexports.flushSync = flushSync$1;\nexports.hydrate = hydrate;\nexports.hydrateRoot = hydrateRoot$1;\nexports.render = render;\nexports.unmountComponentAtNode = unmountComponentAtNode;\nexports.unstable_batchedUpdates = batchedUpdates$1;\nexports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;\nexports.version = ReactVersion;\n          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n}\n        \n  })();\n}\n\n\n//# sourceURL=webpack://templates/./node_modules/react-dom/cjs/react-dom.development.js?");

/***/ }),

/***/ "./node_modules/react-dom/index.js":
/*!*****************************************!*\
  !*** ./node_modules/react-dom/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (true) {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-dom.development.js */ \"./node_modules/react-dom/cjs/react-dom.development.js\");\n}\n\n\n//# sourceURL=webpack://templates/./node_modules/react-dom/index.js?");

/***/ }),

/***/ "./node_modules/react/cjs/react.development.js":
/*!*****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \*****************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n/**\n * @license React\n * react.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n\n          'use strict';\n\n/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n}\n          var ReactVersion = '18.3.1';\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\n/**\n * Keeps track of the current dispatcher.\n */\nvar ReactCurrentDispatcher = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\n/**\n * Keeps track of the current batch's configuration such as how long an update\n * should suspend for if it needs to.\n */\nvar ReactCurrentBatchConfig = {\n  transition: null\n};\n\nvar ReactCurrentActQueue = {\n  current: null,\n  // Used to reproduce behavior of `batchedUpdates` in legacy mode.\n  isBatchingLegacy: false,\n  didScheduleLegacyUpdate: false\n};\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nvar ReactCurrentOwner = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\nvar ReactDebugCurrentFrame = {};\nvar currentExtraStackFrame = null;\nfunction setExtraStackFrame(stack) {\n  {\n    currentExtraStackFrame = stack;\n  }\n}\n\n{\n  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {\n    {\n      currentExtraStackFrame = stack;\n    }\n  }; // Stack implementation injected by the current renderer.\n\n\n  ReactDebugCurrentFrame.getCurrentStack = null;\n\n  ReactDebugCurrentFrame.getStackAddendum = function () {\n    var stack = ''; // Add an extra top frame while an element is being validated\n\n    if (currentExtraStackFrame) {\n      stack += currentExtraStackFrame;\n    } // Delegate to the injected renderer-specific implementation\n\n\n    var impl = ReactDebugCurrentFrame.getCurrentStack;\n\n    if (impl) {\n      stack += impl() || '';\n    }\n\n    return stack;\n  };\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar ReactSharedInternals = {\n  ReactCurrentDispatcher: ReactCurrentDispatcher,\n  ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n  ReactCurrentOwner: ReactCurrentOwner\n};\n\n{\n  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;\n  ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;\n}\n\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nfunction warn(format) {\n  {\n    {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      printWarning('warn', format, args);\n    }\n  }\n}\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\nvar didWarnStateUpdateForUnmountedComponent = {};\n\nfunction warnNoop(publicInstance, callerName) {\n  {\n    var _constructor = publicInstance.constructor;\n    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n    var warningKey = componentName + \".\" + callerName;\n\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return;\n    }\n\n    error(\"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n\n    didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n  }\n}\n/**\n * This is the abstract API for an update queue.\n */\n\n\nvar ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n    warnNoop(publicInstance, 'setState');\n  }\n};\n\nvar assign = Object.assign;\n\nvar emptyObject = {};\n\n{\n  Object.freeze(emptyObject);\n}\n/**\n * Base class helpers for the updating state of a component.\n */\n\n\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n  // renderer.\n\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\n\nComponent.prototype.setState = function (partialState, callback) {\n  if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {\n    throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');\n  }\n\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\n\n\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\n\n\n{\n  var deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n\n  var defineDeprecationWarning = function (methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function () {\n        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n\n        return undefined;\n      }\n    });\n  };\n\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\n\nComponentDummy.prototype = Component.prototype;\n/**\n * Convenience component with default shallow equality check for sCU.\n */\n\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nvar pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\npureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\nassign(pureComponentPrototype, Component.prototype);\npureComponentPrototype.isPureReactComponent = true;\n\n// an immutable object with a single mutable value\nfunction createRef() {\n  var refObject = {\n    current: null\n  };\n\n  {\n    Object.seal(refObject);\n  }\n\n  return refObject;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  var warnAboutAccessingKey = function () {\n    {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    }\n  };\n\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  var warnAboutAccessingRef = function () {\n    {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    }\n  };\n\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true\n  });\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\n\nfunction createElement(type, config, children) {\n  var propName; // Reserved names are extracted\n\n  var props = {};\n  var key = null;\n  var ref = null;\n  var self = null;\n  var source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n\n      {\n        warnIfStringRefCannotBeAutoConverted(config);\n      }\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n\n    props.children = childArray;\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  {\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n  }\n\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\nfunction cloneAndReplaceKey(oldElement, newKey) {\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n  return newElement;\n}\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\n\nfunction cloneElement(element, config, children) {\n  if (element === null || element === undefined) {\n    throw new Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\");\n  }\n\n  var propName; // Original props are copied\n\n  var props = assign({}, element.props); // Reserved names are extracted\n\n  var key = element.key;\n  var ref = element.ref; // Self is preserved since the owner is preserved.\n\n  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n\n  var source = element._source; // Owner will be preserved, unless ref is overridden\n\n  var owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    } // Remaining properties override existing props\n\n\n    var defaultProps;\n\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\n\nvar SEPARATOR = '.';\nvar SUBSEPARATOR = ':';\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\n\nfunction escape(key) {\n  var escapeRegex = /[=:]/g;\n  var escaperLookup = {\n    '=': '=0',\n    ':': '=2'\n  };\n  var escapedString = key.replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n  return '$' + escapedString;\n}\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\n\nvar didWarnAboutMaps = false;\nvar userProvidedKeyEscapeRegex = /\\/+/g;\n\nfunction escapeUserProvidedKey(text) {\n  return text.replace(userProvidedKeyEscapeRegex, '$&/');\n}\n/**\n * Generate a key string that identifies a element within a set.\n *\n * @param {*} element A element that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\n\n\nfunction getElementKey(element, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (typeof element === 'object' && element !== null && element.key != null) {\n    // Explicit key\n    {\n      checkKeyStringCoercion(element.key);\n    }\n\n    return escape('' + element.key);\n  } // Implicit key determined by the index in the set\n\n\n  return index.toString(36);\n}\n\nfunction mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  var invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n\n      case 'object':\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n        }\n\n    }\n  }\n\n  if (invokeCallback) {\n    var _child = children;\n    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows:\n\n    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;\n\n    if (isArray(mappedChild)) {\n      var escapedChildKey = '';\n\n      if (childKey != null) {\n        escapedChildKey = escapeUserProvidedKey(childKey) + '/';\n      }\n\n      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {\n        return c;\n      });\n    } else if (mappedChild != null) {\n      if (isValidElement(mappedChild)) {\n        {\n          // The `if` statement here prevents auto-disabling of the safe\n          // coercion ESLint rule, so we must manually disable it below.\n          // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key\n          if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {\n            checkKeyStringCoercion(mappedChild.key);\n          }\n        }\n\n        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as\n        // traverseAllChildren used to do for objects as children\n        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key\n        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number\n        // eslint-disable-next-line react-internal/safe-string-coercion\n        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);\n      }\n\n      array.push(mappedChild);\n    }\n\n    return 1;\n  }\n\n  var child;\n  var nextName;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getElementKey(child, i);\n      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n\n    if (typeof iteratorFn === 'function') {\n      var iterableChildren = children;\n\n      {\n        // Warn about using Maps as children\n        if (iteratorFn === iterableChildren.entries) {\n          if (!didWarnAboutMaps) {\n            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n          }\n\n          didWarnAboutMaps = true;\n        }\n      }\n\n      var iterator = iteratorFn.call(iterableChildren);\n      var step;\n      var ii = 0;\n\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getElementKey(child, ii++);\n        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n      }\n    } else if (type === 'object') {\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      var childrenString = String(children);\n      throw new Error(\"Objects are not valid as a React child (found: \" + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n    }\n  }\n\n  return subtreeCount;\n}\n\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n\n  var result = [];\n  var count = 0;\n  mapIntoArray(children, result, '', '', function (child) {\n    return func.call(context, child, count++);\n  });\n  return result;\n}\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\n\n\nfunction countChildren(children) {\n  var n = 0;\n  mapChildren(children, function () {\n    n++; // Don't return anything\n  });\n  return n;\n}\n\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  mapChildren(children, function () {\n    forEachFunc.apply(this, arguments); // Don't return anything.\n  }, forEachContext);\n}\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */\n\n\nfunction toArray(children) {\n  return mapChildren(children, function (child) {\n    return child;\n  }) || [];\n}\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\n\n\nfunction onlyChild(children) {\n  if (!isValidElement(children)) {\n    throw new Error('React.Children.only expected to receive a single React element child.');\n  }\n\n  return children;\n}\n\nfunction createContext(defaultValue) {\n  // TODO: Second argument used to be an optional `calculateChangedBits`\n  // function. Warn to reserve for future use?\n  var context = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: null,\n    Consumer: null,\n    // Add these to use same hidden class in VM as ServerContext\n    _defaultValue: null,\n    _globalName: null\n  };\n  context.Provider = {\n    $$typeof: REACT_PROVIDER_TYPE,\n    _context: context\n  };\n  var hasWarnedAboutUsingNestedContextConsumers = false;\n  var hasWarnedAboutUsingConsumerProvider = false;\n  var hasWarnedAboutDisplayNameOnConsumer = false;\n\n  {\n    // A separate object, but proxies back to the original context object for\n    // backwards compatibility. It has a different $$typeof, so we can properly\n    // warn for the incorrect usage of Context as a Consumer.\n    var Consumer = {\n      $$typeof: REACT_CONTEXT_TYPE,\n      _context: context\n    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n\n    Object.defineProperties(Consumer, {\n      Provider: {\n        get: function () {\n          if (!hasWarnedAboutUsingConsumerProvider) {\n            hasWarnedAboutUsingConsumerProvider = true;\n\n            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n          }\n\n          return context.Provider;\n        },\n        set: function (_Provider) {\n          context.Provider = _Provider;\n        }\n      },\n      _currentValue: {\n        get: function () {\n          return context._currentValue;\n        },\n        set: function (_currentValue) {\n          context._currentValue = _currentValue;\n        }\n      },\n      _currentValue2: {\n        get: function () {\n          return context._currentValue2;\n        },\n        set: function (_currentValue2) {\n          context._currentValue2 = _currentValue2;\n        }\n      },\n      _threadCount: {\n        get: function () {\n          return context._threadCount;\n        },\n        set: function (_threadCount) {\n          context._threadCount = _threadCount;\n        }\n      },\n      Consumer: {\n        get: function () {\n          if (!hasWarnedAboutUsingNestedContextConsumers) {\n            hasWarnedAboutUsingNestedContextConsumers = true;\n\n            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n          }\n\n          return context.Consumer;\n        }\n      },\n      displayName: {\n        get: function () {\n          return context.displayName;\n        },\n        set: function (displayName) {\n          if (!hasWarnedAboutDisplayNameOnConsumer) {\n            warn('Setting `displayName` on Context.Consumer has no effect. ' + \"You should set it directly on the context with Context.displayName = '%s'.\", displayName);\n\n            hasWarnedAboutDisplayNameOnConsumer = true;\n          }\n        }\n      }\n    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n\n    context.Consumer = Consumer;\n  }\n\n  {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}\n\nvar Uninitialized = -1;\nvar Pending = 0;\nvar Resolved = 1;\nvar Rejected = 2;\n\nfunction lazyInitializer(payload) {\n  if (payload._status === Uninitialized) {\n    var ctor = payload._result;\n    var thenable = ctor(); // Transition to the next state.\n    // This might throw either because it's missing or throws. If so, we treat it\n    // as still uninitialized and try again next time. Which is the same as what\n    // happens if the ctor or any wrappers processing the ctor throws. This might\n    // end up fixing it if the resolution was a concurrency bug.\n\n    thenable.then(function (moduleObject) {\n      if (payload._status === Pending || payload._status === Uninitialized) {\n        // Transition to the next state.\n        var resolved = payload;\n        resolved._status = Resolved;\n        resolved._result = moduleObject;\n      }\n    }, function (error) {\n      if (payload._status === Pending || payload._status === Uninitialized) {\n        // Transition to the next state.\n        var rejected = payload;\n        rejected._status = Rejected;\n        rejected._result = error;\n      }\n    });\n\n    if (payload._status === Uninitialized) {\n      // In case, we're still uninitialized, then we're waiting for the thenable\n      // to resolve. Set it as pending in the meantime.\n      var pending = payload;\n      pending._status = Pending;\n      pending._result = thenable;\n    }\n  }\n\n  if (payload._status === Resolved) {\n    var moduleObject = payload._result;\n\n    {\n      if (moduleObject === undefined) {\n        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' + // Break up imports to avoid accidentally parsing them as dependencies.\n        'const MyComponent = lazy(() => imp' + \"ort('./MyComponent'))\\n\\n\" + 'Did you accidentally put curly braces around the import?', moduleObject);\n      }\n    }\n\n    {\n      if (!('default' in moduleObject)) {\n        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' + // Break up imports to avoid accidentally parsing them as dependencies.\n        'const MyComponent = lazy(() => imp' + \"ort('./MyComponent'))\", moduleObject);\n      }\n    }\n\n    return moduleObject.default;\n  } else {\n    throw payload._result;\n  }\n}\n\nfunction lazy(ctor) {\n  var payload = {\n    // We use these fields to store the result.\n    _status: Uninitialized,\n    _result: ctor\n  };\n  var lazyType = {\n    $$typeof: REACT_LAZY_TYPE,\n    _payload: payload,\n    _init: lazyInitializer\n  };\n\n  {\n    // In production, this would just set it on the object.\n    var defaultProps;\n    var propTypes; // $FlowFixMe\n\n    Object.defineProperties(lazyType, {\n      defaultProps: {\n        configurable: true,\n        get: function () {\n          return defaultProps;\n        },\n        set: function (newDefaultProps) {\n          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n          defaultProps = newDefaultProps; // Match production behavior more closely:\n          // $FlowFixMe\n\n          Object.defineProperty(lazyType, 'defaultProps', {\n            enumerable: true\n          });\n        }\n      },\n      propTypes: {\n        configurable: true,\n        get: function () {\n          return propTypes;\n        },\n        set: function (newPropTypes) {\n          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n          propTypes = newPropTypes; // Match production behavior more closely:\n          // $FlowFixMe\n\n          Object.defineProperty(lazyType, 'propTypes', {\n            enumerable: true\n          });\n        }\n      }\n    });\n  }\n\n  return lazyType;\n}\n\nfunction forwardRef(render) {\n  {\n    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');\n    } else if (typeof render !== 'function') {\n      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n    } else {\n      if (render.length !== 0 && render.length !== 2) {\n        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');\n      }\n    }\n\n    if (render != null) {\n      if (render.defaultProps != null || render.propTypes != null) {\n        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');\n      }\n    }\n  }\n\n  var elementType = {\n    $$typeof: REACT_FORWARD_REF_TYPE,\n    render: render\n  };\n\n  {\n    var ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n        return ownName;\n      },\n      set: function (name) {\n        ownName = name; // The inner component shouldn't inherit this display name in most cases,\n        // because the component may be used elsewhere.\n        // But it's nice for anonymous functions to inherit the name,\n        // so that our component-stack generation logic will display their frames.\n        // An anonymous function generally suggests a pattern like:\n        //   React.forwardRef((props, ref) => {...});\n        // This kind of inner function is not used elsewhere so the side effect is okay.\n\n        if (!render.name && !render.displayName) {\n          render.displayName = name;\n        }\n      }\n    });\n  }\n\n  return elementType;\n}\n\nvar REACT_MODULE_REFERENCE;\n\n{\n  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\n}\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction memo(type, compare) {\n  {\n    if (!isValidElementType(type)) {\n      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n    }\n  }\n\n  var elementType = {\n    $$typeof: REACT_MEMO_TYPE,\n    type: type,\n    compare: compare === undefined ? null : compare\n  };\n\n  {\n    var ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n        return ownName;\n      },\n      set: function (name) {\n        ownName = name; // The inner component shouldn't inherit this display name in most cases,\n        // because the component may be used elsewhere.\n        // But it's nice for anonymous functions to inherit the name,\n        // so that our component-stack generation logic will display their frames.\n        // An anonymous function generally suggests a pattern like:\n        //   React.memo((props) => {...});\n        // This kind of inner function is not used elsewhere so the side effect is okay.\n\n        if (!type.name && !type.displayName) {\n          type.displayName = name;\n        }\n      }\n    });\n  }\n\n  return elementType;\n}\n\nfunction resolveDispatcher() {\n  var dispatcher = ReactCurrentDispatcher.current;\n\n  {\n    if (dispatcher === null) {\n      error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n    }\n  } // Will result in a null access error if accessed outside render phase. We\n  // intentionally don't throw our own error because this is in a hot path.\n  // Also helps ensure this is inlined.\n\n\n  return dispatcher;\n}\nfunction useContext(Context) {\n  var dispatcher = resolveDispatcher();\n\n  {\n    // TODO: add a more generic warning for invalid values.\n    if (Context._context !== undefined) {\n      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n      // and nobody should be using this in existing code.\n\n      if (realContext.Consumer === Context) {\n        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');\n      } else if (realContext.Provider === Context) {\n        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');\n      }\n    }\n  }\n\n  return dispatcher.useContext(Context);\n}\nfunction useState(initialState) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useState(initialState);\n}\nfunction useReducer(reducer, initialArg, init) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useReducer(reducer, initialArg, init);\n}\nfunction useRef(initialValue) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useRef(initialValue);\n}\nfunction useEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useEffect(create, deps);\n}\nfunction useInsertionEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useInsertionEffect(create, deps);\n}\nfunction useLayoutEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useLayoutEffect(create, deps);\n}\nfunction useCallback(callback, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useCallback(callback, deps);\n}\nfunction useMemo(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useMemo(create, deps);\n}\nfunction useImperativeHandle(ref, create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useImperativeHandle(ref, create, deps);\n}\nfunction useDebugValue(value, formatterFn) {\n  {\n    var dispatcher = resolveDispatcher();\n    return dispatcher.useDebugValue(value, formatterFn);\n  }\n}\nfunction useTransition() {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useTransition();\n}\nfunction useDeferredValue(value) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useDeferredValue(value);\n}\nfunction useId() {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useId();\n}\nfunction useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher$1.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher$1.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      setExtraStackFrame(stack);\n    } else {\n      setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n    if (name) {\n      return '\\n\\nCheck the render method of `' + name + '`.';\n    }\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  if (source !== undefined) {\n    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n    var lineNumber = source.lineNumber;\n    return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendumForProps(elementProps) {\n  if (elementProps !== null && elementProps !== undefined) {\n    return getSourceInfoErrorAddendum(elementProps.__source);\n  }\n\n  return '';\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  var info = getDeclarationErrorAddendum();\n\n  if (!info) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n    if (parentName) {\n      info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n    }\n  }\n\n  return info;\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n\n  element._store.validated = true;\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n    return;\n  }\n\n  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n\n  var childOwner = '';\n\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n  }\n\n  {\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !== 'object') {\n    return;\n  }\n\n  if (isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n\n      if (isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = getIteratorFn(node);\n\n    if (typeof iteratorFn === 'function') {\n      // Entry iterators used to provide implicit keys,\n      // but now we print a separate warning for them later.\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step;\n\n        while (!(step = iterator.next()).done) {\n          if (isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\nfunction createElementWithValidation(type, props, children) {\n  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n\n  if (!validType) {\n    var info = '';\n\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n\n    if (sourceInfo) {\n      info += sourceInfo;\n    } else {\n      info += getDeclarationErrorAddendum();\n    }\n\n    var typeString;\n\n    if (type === null) {\n      typeString = 'null';\n    } else if (isArray(type)) {\n      typeString = 'array';\n    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n      typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n      info = ' Did you accidentally export a JSX literal instead of a component?';\n    } else {\n      typeString = typeof type;\n    }\n\n    {\n      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n  }\n\n  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n\n  if (element == null) {\n    return element;\n  } // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n\n\n  if (validType) {\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n  }\n\n  if (type === REACT_FRAGMENT_TYPE) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n}\nvar didWarnAboutDeprecatedCreateFactory = false;\nfunction createFactoryWithValidation(type) {\n  var validatedFactory = createElementWithValidation.bind(null, type);\n  validatedFactory.type = type;\n\n  {\n    if (!didWarnAboutDeprecatedCreateFactory) {\n      didWarnAboutDeprecatedCreateFactory = true;\n\n      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');\n    } // Legacy hook: remove it\n\n\n    Object.defineProperty(validatedFactory, 'type', {\n      enumerable: false,\n      get: function () {\n        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n\n        Object.defineProperty(this, 'type', {\n          value: type\n        });\n        return type;\n      }\n    });\n  }\n\n  return validatedFactory;\n}\nfunction cloneElementWithValidation(element, props, children) {\n  var newElement = cloneElement.apply(this, arguments);\n\n  for (var i = 2; i < arguments.length; i++) {\n    validateChildKeys(arguments[i], newElement.type);\n  }\n\n  validatePropTypes(newElement);\n  return newElement;\n}\n\nfunction startTransition(scope, options) {\n  var prevTransition = ReactCurrentBatchConfig.transition;\n  ReactCurrentBatchConfig.transition = {};\n  var currentTransition = ReactCurrentBatchConfig.transition;\n\n  {\n    ReactCurrentBatchConfig.transition._updatedFibers = new Set();\n  }\n\n  try {\n    scope();\n  } finally {\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    {\n      if (prevTransition === null && currentTransition._updatedFibers) {\n        var updatedFibersCount = currentTransition._updatedFibers.size;\n\n        if (updatedFibersCount > 10) {\n          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n        }\n\n        currentTransition._updatedFibers.clear();\n      }\n    }\n  }\n}\n\nvar didWarnAboutMessageChannel = false;\nvar enqueueTaskImpl = null;\nfunction enqueueTask(task) {\n  if (enqueueTaskImpl === null) {\n    try {\n      // read require off the module object to get around the bundlers.\n      // we don't want them to detect a require and bundle a Node polyfill.\n      var requireString = ('require' + Math.random()).slice(0, 7);\n      var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's\n      // version of setImmediate, bypassing fake timers if any.\n\n      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;\n    } catch (_err) {\n      // we're in a browser\n      // we can't use regular timers because they may still be faked\n      // so we try MessageChannel+postMessage instead\n      enqueueTaskImpl = function (callback) {\n        {\n          if (didWarnAboutMessageChannel === false) {\n            didWarnAboutMessageChannel = true;\n\n            if (typeof MessageChannel === 'undefined') {\n              error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');\n            }\n          }\n        }\n\n        var channel = new MessageChannel();\n        channel.port1.onmessage = callback;\n        channel.port2.postMessage(undefined);\n      };\n    }\n  }\n\n  return enqueueTaskImpl(task);\n}\n\nvar actScopeDepth = 0;\nvar didWarnNoAwaitAct = false;\nfunction act(callback) {\n  {\n    // `act` calls can be nested, so we track the depth. This represents the\n    // number of `act` scopes on the stack.\n    var prevActScopeDepth = actScopeDepth;\n    actScopeDepth++;\n\n    if (ReactCurrentActQueue.current === null) {\n      // This is the outermost `act` scope. Initialize the queue. The reconciler\n      // will detect the queue and use it instead of Scheduler.\n      ReactCurrentActQueue.current = [];\n    }\n\n    var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;\n    var result;\n\n    try {\n      // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only\n      // set to `true` while the given callback is executed, not for updates\n      // triggered during an async event, because this is how the legacy\n      // implementation of `act` behaved.\n      ReactCurrentActQueue.isBatchingLegacy = true;\n      result = callback(); // Replicate behavior of original `act` implementation in legacy mode,\n      // which flushed updates immediately after the scope function exits, even\n      // if it's an async function.\n\n      if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {\n        var queue = ReactCurrentActQueue.current;\n\n        if (queue !== null) {\n          ReactCurrentActQueue.didScheduleLegacyUpdate = false;\n          flushActQueue(queue);\n        }\n      }\n    } catch (error) {\n      popActScope(prevActScopeDepth);\n      throw error;\n    } finally {\n      ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;\n    }\n\n    if (result !== null && typeof result === 'object' && typeof result.then === 'function') {\n      var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait\n      // for it to resolve before exiting the current scope.\n\n      var wasAwaited = false;\n      var thenable = {\n        then: function (resolve, reject) {\n          wasAwaited = true;\n          thenableResult.then(function (returnValue) {\n            popActScope(prevActScopeDepth);\n\n            if (actScopeDepth === 0) {\n              // We've exited the outermost act scope. Recursively flush the\n              // queue until there's no remaining work.\n              recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n            } else {\n              resolve(returnValue);\n            }\n          }, function (error) {\n            // The callback threw an error.\n            popActScope(prevActScopeDepth);\n            reject(error);\n          });\n        }\n      };\n\n      {\n        if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {\n          // eslint-disable-next-line no-undef\n          Promise.resolve().then(function () {}).then(function () {\n            if (!wasAwaited) {\n              didWarnNoAwaitAct = true;\n\n              error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');\n            }\n          });\n        }\n      }\n\n      return thenable;\n    } else {\n      var returnValue = result; // The callback is not an async function. Exit the current scope\n      // immediately, without awaiting.\n\n      popActScope(prevActScopeDepth);\n\n      if (actScopeDepth === 0) {\n        // Exiting the outermost act scope. Flush the queue.\n        var _queue = ReactCurrentActQueue.current;\n\n        if (_queue !== null) {\n          flushActQueue(_queue);\n          ReactCurrentActQueue.current = null;\n        } // Return a thenable. If the user awaits it, we'll flush again in\n        // case additional work was scheduled by a microtask.\n\n\n        var _thenable = {\n          then: function (resolve, reject) {\n            // Confirm we haven't re-entered another `act` scope, in case\n            // the user does something weird like await the thenable\n            // multiple times.\n            if (ReactCurrentActQueue.current === null) {\n              // Recursively flush the queue until there's no remaining work.\n              ReactCurrentActQueue.current = [];\n              recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n            } else {\n              resolve(returnValue);\n            }\n          }\n        };\n        return _thenable;\n      } else {\n        // Since we're inside a nested `act` scope, the returned thenable\n        // immediately resolves. The outer scope will flush the queue.\n        var _thenable2 = {\n          then: function (resolve, reject) {\n            resolve(returnValue);\n          }\n        };\n        return _thenable2;\n      }\n    }\n  }\n}\n\nfunction popActScope(prevActScopeDepth) {\n  {\n    if (prevActScopeDepth !== actScopeDepth - 1) {\n      error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');\n    }\n\n    actScopeDepth = prevActScopeDepth;\n  }\n}\n\nfunction recursivelyFlushAsyncActWork(returnValue, resolve, reject) {\n  {\n    var queue = ReactCurrentActQueue.current;\n\n    if (queue !== null) {\n      try {\n        flushActQueue(queue);\n        enqueueTask(function () {\n          if (queue.length === 0) {\n            // No additional work was scheduled. Finish.\n            ReactCurrentActQueue.current = null;\n            resolve(returnValue);\n          } else {\n            // Keep flushing work until there's none left.\n            recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n          }\n        });\n      } catch (error) {\n        reject(error);\n      }\n    } else {\n      resolve(returnValue);\n    }\n  }\n}\n\nvar isFlushing = false;\n\nfunction flushActQueue(queue) {\n  {\n    if (!isFlushing) {\n      // Prevent re-entrance.\n      isFlushing = true;\n      var i = 0;\n\n      try {\n        for (; i < queue.length; i++) {\n          var callback = queue[i];\n\n          do {\n            callback = callback(true);\n          } while (callback !== null);\n        }\n\n        queue.length = 0;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        queue = queue.slice(i + 1);\n        throw error;\n      } finally {\n        isFlushing = false;\n      }\n    }\n  }\n}\n\nvar createElement$1 =  createElementWithValidation ;\nvar cloneElement$1 =  cloneElementWithValidation ;\nvar createFactory =  createFactoryWithValidation ;\nvar Children = {\n  map: mapChildren,\n  forEach: forEachChildren,\n  count: countChildren,\n  toArray: toArray,\n  only: onlyChild\n};\n\nexports.Children = Children;\nexports.Component = Component;\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.Profiler = REACT_PROFILER_TYPE;\nexports.PureComponent = PureComponent;\nexports.StrictMode = REACT_STRICT_MODE_TYPE;\nexports.Suspense = REACT_SUSPENSE_TYPE;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;\nexports.act = act;\nexports.cloneElement = cloneElement$1;\nexports.createContext = createContext;\nexports.createElement = createElement$1;\nexports.createFactory = createFactory;\nexports.createRef = createRef;\nexports.forwardRef = forwardRef;\nexports.isValidElement = isValidElement;\nexports.lazy = lazy;\nexports.memo = memo;\nexports.startTransition = startTransition;\nexports.unstable_act = act;\nexports.useCallback = useCallback;\nexports.useContext = useContext;\nexports.useDebugValue = useDebugValue;\nexports.useDeferredValue = useDeferredValue;\nexports.useEffect = useEffect;\nexports.useId = useId;\nexports.useImperativeHandle = useImperativeHandle;\nexports.useInsertionEffect = useInsertionEffect;\nexports.useLayoutEffect = useLayoutEffect;\nexports.useMemo = useMemo;\nexports.useReducer = useReducer;\nexports.useRef = useRef;\nexports.useState = useState;\nexports.useSyncExternalStore = useSyncExternalStore;\nexports.useTransition = useTransition;\nexports.version = ReactVersion;\n          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n}\n        \n  })();\n}\n\n\n//# sourceURL=webpack://templates/./node_modules/react/cjs/react.development.js?");

/***/ }),

/***/ "./node_modules/react/index.js":
/*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ \"./node_modules/react/cjs/react.development.js\");\n}\n\n\n//# sourceURL=webpack://templates/./node_modules/react/index.js?");

/***/ }),

/***/ "./node_modules/scheduler/cjs/scheduler.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler.development.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("/**\n * @license React\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n\n          'use strict';\n\n/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n}\n          var enableSchedulerDebugging = false;\nvar enableProfiling = false;\nvar frameYieldMs = 5;\n\nfunction push(heap, node) {\n  var index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\nfunction peek(heap) {\n  return heap.length === 0 ? null : heap[0];\n}\nfunction pop(heap) {\n  if (heap.length === 0) {\n    return null;\n  }\n\n  var first = heap[0];\n  var last = heap.pop();\n\n  if (last !== first) {\n    heap[0] = last;\n    siftDown(heap, last, 0);\n  }\n\n  return first;\n}\n\nfunction siftUp(heap, node, i) {\n  var index = i;\n\n  while (index > 0) {\n    var parentIndex = index - 1 >>> 1;\n    var parent = heap[parentIndex];\n\n    if (compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown(heap, node, i) {\n  var index = i;\n  var length = heap.length;\n  var halfLength = length >>> 1;\n\n  while (index < halfLength) {\n    var leftIndex = (index + 1) * 2 - 1;\n    var left = heap[leftIndex];\n    var rightIndex = leftIndex + 1;\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n    if (compare(left, node) < 0) {\n      if (rightIndex < length && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (rightIndex < length && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a, b) {\n  // Compare sort index first, then task id.\n  var diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n\n// TODO: Use symbols?\nvar ImmediatePriority = 1;\nvar UserBlockingPriority = 2;\nvar NormalPriority = 3;\nvar LowPriority = 4;\nvar IdlePriority = 5;\n\nfunction markTaskErrored(task, ms) {\n}\n\n/* eslint-disable no-var */\n\nvar hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\nif (hasPerformanceNow) {\n  var localPerformance = performance;\n\n  exports.unstable_now = function () {\n    return localPerformance.now();\n  };\n} else {\n  var localDate = Date;\n  var initialTime = localDate.now();\n\n  exports.unstable_now = function () {\n    return localDate.now() - initialTime;\n  };\n} // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\n\n\nvar maxSigned31BitInt = 1073741823; // Times out immediately\n\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\nvar taskQueue = [];\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.\n\nvar isPerformingWork = false;\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.\n\nvar localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;\nvar localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;\nvar localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom\n\nvar isInputPending = typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;\n\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  var timer = peek(timerQueue);\n\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      var firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n\n\n  isHostCallbackScheduled = false;\n\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  var previousPriorityLevel = currentPriorityLevel;\n\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          var currentTime = exports.unstable_now();\n          markTaskErrored(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        throw error;\n      }\n    } else {\n      // No catch in prod code path.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n  }\n}\n\nfunction workLoop(hasTimeRemaining, initialTime) {\n  var currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n\n  while (currentTask !== null && !(enableSchedulerDebugging )) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n\n    var callback = currentTask.callback;\n\n    if (typeof callback === 'function') {\n      currentTask.callback = null;\n      currentPriorityLevel = currentTask.priorityLevel;\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n\n      var continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = exports.unstable_now();\n\n      if (typeof continuationCallback === 'function') {\n        currentTask.callback = continuationCallback;\n      } else {\n\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n      }\n\n      advanceTimers(currentTime);\n    } else {\n      pop(taskQueue);\n    }\n\n    currentTask = peek(taskQueue);\n  } // Return whether there's additional work\n\n\n  if (currentTask !== null) {\n    return true;\n  } else {\n    var firstTimer = peek(timerQueue);\n\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel;\n\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel;\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n  var currentTime = exports.unstable_now();\n  var startTime;\n\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n\n    case UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n\n    case IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n\n    case LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n\n    case NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n  var newTask = {\n    id: taskIdCounter++,\n    callback: callback,\n    priorityLevel: priorityLevel,\n    startTime: startTime,\n    expirationTime: expirationTime,\n    sortIndex: -1\n  };\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      } // Schedule a timeout.\n\n\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    // wait until the next time we yield.\n\n\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n}\n\nfunction unstable_continueExecution() {\n\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task) {\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n\n\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nvar isMessageLoopRunning = false;\nvar scheduledHostCallback = null;\nvar taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n// thread, like user events. By default, it yields multiple times per frame.\n// It does not attempt to align with frame boundaries, since most tasks don't\n// need to be frame aligned; for those that do, use requestAnimationFrame.\n\nvar frameInterval = frameYieldMs;\nvar startTime = -1;\n\nfunction shouldYieldToHost() {\n  var timeElapsed = exports.unstable_now() - startTime;\n\n  if (timeElapsed < frameInterval) {\n    // The main thread has only been blocked for a really short amount of time;\n    // smaller than a single frame. Don't yield yet.\n    return false;\n  } // The main thread has been blocked for a non-negligible amount of time. We\n\n\n  return true;\n}\n\nfunction requestPaint() {\n\n}\n\nfunction forceFrameRate(fps) {\n  if (fps < 0 || fps > 125) {\n    // Using console['error'] to evade Babel and ESLint\n    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');\n    return;\n  }\n\n  if (fps > 0) {\n    frameInterval = Math.floor(1000 / fps);\n  } else {\n    // reset the framerate\n    frameInterval = frameYieldMs;\n  }\n}\n\nvar performWorkUntilDeadline = function () {\n  if (scheduledHostCallback !== null) {\n    var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread\n    // has been blocked.\n\n    startTime = currentTime;\n    var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the\n    // error can be observed.\n    //\n    // Intentionally not using a try-catch, since that makes some debugging\n    // techniques harder. Instead, if `scheduledHostCallback` errors, then\n    // `hasMoreWork` will remain true, and we'll continue the work loop.\n\n    var hasMoreWork = true;\n\n    try {\n      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n    } finally {\n      if (hasMoreWork) {\n        // If there's more work, schedule the next message event at the end\n        // of the preceding one.\n        schedulePerformWorkUntilDeadline();\n      } else {\n        isMessageLoopRunning = false;\n        scheduledHostCallback = null;\n      }\n    }\n  } else {\n    isMessageLoopRunning = false;\n  } // Yielding to the browser will give it a chance to paint, so we can\n};\n\nvar schedulePerformWorkUntilDeadline;\n\nif (typeof localSetImmediate === 'function') {\n  // Node.js and old IE.\n  // There's a few reasons for why we prefer setImmediate.\n  //\n  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\n  // (Even though this is a DOM fork of the Scheduler, you could get here\n  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\n  // https://github.com/facebook/react/issues/20756\n  //\n  // But also, it runs earlier which is the semantic we want.\n  // If other browsers ever implement it, it's better to use it.\n  // Although both of these would be inferior to native scheduling.\n  schedulePerformWorkUntilDeadline = function () {\n    localSetImmediate(performWorkUntilDeadline);\n  };\n} else if (typeof MessageChannel !== 'undefined') {\n  // DOM and Worker environments.\n  // We prefer MessageChannel because of the 4ms setTimeout clamping.\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n\n  schedulePerformWorkUntilDeadline = function () {\n    port.postMessage(null);\n  };\n} else {\n  // We should only fallback here in non-browser environments.\n  schedulePerformWorkUntilDeadline = function () {\n    localSetTimeout(performWorkUntilDeadline, 0);\n  };\n}\n\nfunction requestHostCallback(callback) {\n  scheduledHostCallback = callback;\n\n  if (!isMessageLoopRunning) {\n    isMessageLoopRunning = true;\n    schedulePerformWorkUntilDeadline();\n  }\n}\n\nfunction requestHostTimeout(callback, ms) {\n  taskTimeoutID = localSetTimeout(function () {\n    callback(exports.unstable_now());\n  }, ms);\n}\n\nfunction cancelHostTimeout() {\n  localClearTimeout(taskTimeoutID);\n  taskTimeoutID = -1;\n}\n\nvar unstable_requestPaint = requestPaint;\nvar unstable_Profiling =  null;\n\nexports.unstable_IdlePriority = IdlePriority;\nexports.unstable_ImmediatePriority = ImmediatePriority;\nexports.unstable_LowPriority = LowPriority;\nexports.unstable_NormalPriority = NormalPriority;\nexports.unstable_Profiling = unstable_Profiling;\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\nexports.unstable_cancelCallback = unstable_cancelCallback;\nexports.unstable_continueExecution = unstable_continueExecution;\nexports.unstable_forceFrameRate = forceFrameRate;\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\nexports.unstable_next = unstable_next;\nexports.unstable_pauseExecution = unstable_pauseExecution;\nexports.unstable_requestPaint = unstable_requestPaint;\nexports.unstable_runWithPriority = unstable_runWithPriority;\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\nexports.unstable_shouldYield = shouldYieldToHost;\nexports.unstable_wrapCallback = unstable_wrapCallback;\n          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n}\n        \n  })();\n}\n\n\n//# sourceURL=webpack://templates/./node_modules/scheduler/cjs/scheduler.development.js?");

/***/ }),

/***/ "./node_modules/scheduler/index.js":
/*!*****************************************!*\
  !*** ./node_modules/scheduler/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ \"./node_modules/scheduler/cjs/scheduler.development.js\");\n}\n\n\n//# sourceURL=webpack://templates/./node_modules/scheduler/index.js?");

/***/ }),

/***/ "./src/app.css":
/*!*********************!*\
  !*** ./src/app.css ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_app_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./app.css */ \"./node_modules/css-loader/dist/cjs.js!./src/app.css\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\noptions.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_app_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_app_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_app_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_app_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n\n\n//# sourceURL=webpack://templates/./src/app.css?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://templates/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;\n\n//# sourceURL=webpack://templates/./node_modules/style-loader/dist/runtime/insertBySelector.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;\n\n//# sourceURL=webpack://templates/./node_modules/style-loader/dist/runtime/insertStyleElement.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;\n\n//# sourceURL=webpack://templates/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;\n\n//# sourceURL=webpack://templates/./node_modules/style-loader/dist/runtime/styleDomAPI.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;\n\n//# sourceURL=webpack://templates/./node_modules/style-loader/dist/runtime/styleTagTransform.js?");

/***/ }),

/***/ "./src/images/enabled-bg.svg":
/*!***********************************!*\
  !*** ./src/images/enabled-bg.svg ***!
  \***********************************/
/***/ (() => {

eval("throw new Error(\"Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\\n> <svg id=\\\"svg\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" width=\\\"400\\\" height=\\\"570.2127659574468\\\" viewBox=\\\"0, 0, 400,570.2127659574468\\\"><g id=\\\"svgg\\\"><path id=\\\"path0\\\" d=\\\"M0.315 8.579 L 0.430 17.200 4.241 17.200 C 9.973 17.200,9.600 17.814,9.600 8.386 L 9.600 0.400 5.700 0.395 C 3.555 0.392,1.440 0.292,1.000 0.174 C 0.216 -0.038,0.202 0.126,0.315 8.579 M120.077 1.700 L 120.200 3.400 122.767 3.716 L 125.333 4.032 126.867 2.535 C 129.250 0.207,129.031 -0.000,124.177 0.000 L 119.954 0.000 120.077 1.700 M148.724 0.324 C 147.848 0.425,147.519 0.798,146.958 2.324 C 146.578 3.356,146.118 4.371,145.934 4.580 C 145.750 4.789,145.600 5.499,145.600 6.158 C 145.600 6.912,145.203 7.771,144.528 8.475 C 143.580 9.465,143.437 9.980,143.280 12.973 C 143.127 15.886,142.971 16.476,142.151 17.246 C 140.864 18.455,140.888 20.129,142.200 20.727 C 143.014 21.098,143.200 21.469,143.200 22.717 C 143.200 23.899,143.475 24.514,144.400 25.400 C 145.224 26.189,145.600 26.935,145.600 27.780 C 145.600 28.672,145.847 29.119,146.500 29.405 C 147.867 30.005,147.936 32.078,146.622 33.111 C 145.535 33.966,145.883 34.400,147.656 34.400 C 148.091 34.400,148.342 34.571,148.212 34.780 C 147.923 35.248,149.254 36.000,150.374 36.000 C 151.185 36.000,151.200 36.169,151.200 45.200 C 151.200 50.374,151.357 54.400,151.559 54.400 C 151.757 54.400,152.404 55.729,152.996 57.354 L 154.074 60.308 157.937 60.494 C 160.822 60.633,161.960 60.543,162.431 60.140 C 162.779 59.843,163.512 59.600,164.062 59.600 C 164.611 59.600,165.483 59.150,166.000 58.600 C 166.569 57.994,167.382 57.600,168.062 57.600 C 169.577 57.600,170.990 54.993,170.639 52.843 C 170.509 52.049,170.242 49.192,170.045 46.493 C 169.672 41.387,169.314 40.400,167.832 40.400 C 166.583 40.400,164.112 37.689,163.799 35.974 C 163.470 34.171,164.009 33.691,166.549 33.526 L 168.478 33.400 168.435 22.600 C 168.412 16.660,168.529 11.592,168.696 11.337 C 168.863 11.083,169.000 15.770,169.000 21.752 L 169.000 32.629 170.334 34.315 L 171.667 36.000 174.405 36.000 C 177.523 36.000,183.431 34.167,184.317 32.925 C 184.601 32.526,185.235 31.575,185.726 30.810 C 186.658 29.358,188.558 28.025,189.028 28.494 C 189.178 28.644,188.758 29.223,188.095 29.781 C 187.433 30.339,186.507 31.612,186.037 32.610 C 185.104 34.596,184.528 34.946,181.100 35.611 C 177.018 36.402,178.039 37.385,183.304 37.731 C 186.858 37.964,187.200 38.291,187.200 41.449 C 187.200 43.733,187.284 44.000,188.000 44.000 C 188.440 44.000,188.800 43.837,188.800 43.638 C 188.800 43.438,189.700 42.628,190.800 41.838 C 192.677 40.490,192.800 40.293,192.800 38.649 C 192.800 37.294,192.997 36.767,193.670 36.320 C 194.779 35.583,194.433 34.596,192.935 34.219 C 189.830 33.440,190.549 30.411,194.374 28.152 C 194.970 27.800,195.653 26.995,195.891 26.363 C 196.275 25.346,196.500 25.226,197.862 25.308 C 200.283 25.453,200.224 23.103,197.800 22.800 C 195.979 22.572,196.267 22.227,198.600 21.839 C 202.567 21.179,202.530 21.208,203.381 18.161 C 203.594 17.398,203.457 17.326,201.858 17.361 C 200.605 17.389,200.158 17.547,200.299 17.913 C 200.589 18.670,197.757 21.237,195.454 22.304 C 194.351 22.815,192.687 24.039,191.758 25.023 C 189.658 27.246,187.906 28.000,184.839 28.000 C 182.476 28.000,182.442 28.016,181.322 29.700 C 179.525 32.400,173.264 34.635,171.747 33.119 C 169.933 31.305,168.798 13.821,170.217 9.550 C 171.098 6.895,171.401 6.800,178.945 6.800 C 186.960 6.800,187.556 6.451,187.132 2.007 C 187.048 1.127,187.117 0.360,187.286 0.303 C 187.725 0.155,150.014 0.175,148.724 0.324 M195.200 0.400 C 198.177 0.620,198.314 0.660,196.300 0.725 C 193.467 0.817,192.793 2.155,195.489 2.337 C 198.041 2.509,198.400 3.166,198.400 7.662 C 198.400 14.200,199.423 11.442,200.241 2.700 L 200.493 0.000 196.147 0.075 L 191.800 0.149 195.200 0.400 M328.361 0.292 L 326.522 0.439 326.272 5.665 C 326.040 10.516,325.684 12.000,324.751 12.000 C 324.558 12.000,324.400 11.111,324.400 10.024 C 324.400 7.591,324.204 7.458,322.039 8.427 C 321.089 8.852,319.837 9.203,319.256 9.207 C 318.123 9.214,316.170 10.277,313.778 12.189 C 312.735 13.023,311.499 13.520,309.645 13.851 L 307.000 14.323 311.630 14.362 C 316.076 14.398,316.298 14.360,317.200 13.400 C 317.995 12.554,318.500 12.400,320.482 12.400 C 323.207 12.400,323.379 12.614,323.369 16.000 C 323.356 20.541,322.088 21.698,319.863 19.200 C 319.079 18.320,318.438 18.000,317.459 18.000 C 316.632 18.000,315.848 17.696,315.400 17.200 C 314.774 16.509,314.168 16.400,310.938 16.400 C 307.431 16.400,307.200 16.349,307.200 15.576 C 307.200 15.123,307.020 14.864,306.800 15.000 C 305.324 15.912,306.523 16.577,310.403 16.996 C 312.706 17.244,313.950 17.961,316.134 20.300 C 316.836 21.053,317.742 21.600,318.286 21.600 C 318.803 21.600,319.329 21.870,319.455 22.200 C 319.628 22.651,320.346 22.799,322.343 22.795 C 325.988 22.787,326.730 22.536,326.877 21.259 C 326.966 20.491,327.263 20.163,327.956 20.065 C 328.750 19.953,328.860 20.054,328.604 20.665 C 328.434 21.069,328.205 22.369,328.094 23.554 L 327.892 25.707 329.723 25.432 C 331.392 25.182,331.613 25.248,332.223 26.179 C 332.620 26.784,333.267 27.200,333.813 27.200 C 334.319 27.200,334.824 27.425,334.935 27.700 C 335.046 27.975,335.151 27.801,335.168 27.314 C 335.189 26.728,334.276 25.504,332.474 23.702 C 329.281 20.508,329.232 19.820,332.001 16.999 L 333.635 15.334 333.518 7.867 L 333.400 0.399 336.500 0.400 C 338.205 0.400,339.615 0.445,339.634 0.500 C 339.652 0.555,339.827 3.300,340.023 6.600 C 340.475 14.216,340.722 15.852,341.647 17.370 C 342.169 18.225,342.397 19.362,342.399 21.100 C 342.400 23.282,342.496 23.600,343.154 23.600 C 344.578 23.600,345.200 25.286,345.200 29.143 C 345.200 32.899,345.049 33.200,343.167 33.200 C 342.208 33.200,342.366 31.575,342.002 45.200 C 341.700 56.526,341.125 63.416,340.360 64.895 C 340.162 65.277,340.000 65.847,340.000 66.161 C 340.000 66.476,339.784 66.805,339.520 66.893 C 339.146 67.018,339.146 67.119,339.520 67.350 C 339.784 67.514,340.000 67.462,340.000 67.236 C 340.000 67.010,340.247 66.920,340.548 67.036 C 341.341 67.340,341.494 66.658,341.782 61.566 C 341.924 59.055,342.215 55.830,342.429 54.400 C 342.791 51.980,343.248 41.221,343.186 36.549 C 343.153 34.016,343.760 33.328,346.305 33.012 C 350.136 32.536,350.185 32.495,350.326 29.592 C 350.395 28.166,350.339 26.235,350.201 25.300 L 349.951 23.600 347.714 23.600 L 345.476 23.600 345.725 18.400 C 345.932 14.077,345.879 13.200,345.411 13.200 C 344.580 13.200,344.208 12.398,344.204 10.600 C 344.200 9.008,344.192 9.000,342.728 9.085 C 340.965 9.186,340.801 8.729,340.848 3.848 C 340.870 1.612,340.722 0.597,340.339 0.354 C 339.821 0.026,332.178 -0.014,328.361 0.292 M153.070 3.100 C 153.503 19.760,153.229 27.461,152.187 27.860 C 151.164 28.253,146.400 22.999,146.400 21.477 C 146.400 20.580,146.082 19.841,145.433 19.231 C 144.263 18.131,144.370 14.716,145.646 12.477 C 146.061 11.750,146.400 10.746,146.400 10.247 C 146.400 9.748,146.850 8.917,147.400 8.400 C 148.069 7.771,148.400 7.030,148.400 6.159 C 148.400 4.916,149.238 3.600,150.029 3.600 C 150.592 3.600,150.473 0.896,149.900 0.665 C 149.625 0.554,150.210 0.449,151.200 0.432 L 153.000 0.400 153.070 3.100 M186.400 4.800 C 186.400 5.503,186.133 5.600,184.200 5.600 C 181.653 5.600,181.344 5.125,183.500 4.521 C 185.865 3.859,186.400 3.910,186.400 4.800 M284.336 13.000 C 284.431 14.885,284.335 16.000,284.076 16.000 C 283.056 16.000,282.405 15.427,281.987 14.162 C 281.056 11.340,278.136 11.479,278.628 14.322 C 278.769 15.135,279.150 15.980,279.476 16.200 C 279.803 16.420,280.343 16.792,280.677 17.026 C 281.548 17.635,282.250 32.721,281.445 33.526 C 280.698 34.274,278.237 34.779,275.290 34.790 C 272.341 34.802,272.000 35.252,272.000 39.140 C 272.000 42.386,269.782 48.400,268.585 48.400 C 268.279 48.400,267.825 48.779,267.577 49.243 C 266.875 50.554,267.690 51.000,270.786 51.000 C 272.295 51.000,273.665 51.135,273.831 51.300 C 273.997 51.465,274.958 51.603,275.967 51.606 C 278.553 51.615,278.671 51.781,278.939 55.800 C 279.071 57.780,279.296 60.882,279.440 62.692 C 279.658 65.426,279.586 66.162,279.019 67.027 C 278.176 68.314,278.199 68.337,281.504 69.449 C 283.971 70.279,284.200 70.451,284.200 71.473 C 284.200 73.107,283.117 73.086,281.500 71.422 C 279.690 69.558,279.758 69.496,279.430 73.300 C 278.564 83.349,278.528 84.596,279.065 85.900 C 280.714 89.905,280.790 90.018,281.989 90.258 C 283.816 90.623,284.137 91.329,284.252 95.230 C 284.310 97.194,284.592 99.290,284.879 99.886 C 285.365 100.897,285.767 101.182,288.400 102.377 C 290.069 103.134,291.272 107.814,290.000 108.600 C 289.780 108.736,289.600 109.535,289.600 110.375 C 289.600 111.244,289.342 112.116,289.000 112.400 C 288.603 112.730,288.400 113.625,288.400 115.049 C 288.400 117.168,288.382 117.200,287.210 117.200 C 286.134 117.200,284.800 118.650,284.800 119.820 C 284.800 120.182,291.337 119.745,294.000 119.205 C 295.210 118.960,296.875 118.660,297.700 118.538 C 299.676 118.246,299.754 117.200,297.800 117.200 L 296.400 117.200 296.400 114.849 C 296.400 113.278,296.207 112.337,295.817 112.014 C 295.441 111.702,295.313 111.133,295.457 110.414 C 295.582 109.790,295.486 109.177,295.240 109.025 C 294.670 108.672,294.654 104.000,295.224 104.000 C 295.457 104.000,295.548 103.839,295.426 103.642 C 295.100 103.114,296.211 102.800,298.409 102.800 C 299.478 102.800,300.464 102.620,300.600 102.400 C 300.736 102.180,301.530 102.000,302.364 102.000 C 305.495 102.000,306.319 101.406,306.134 99.279 C 305.585 92.968,305.498 92.662,304.533 93.627 C 304.298 93.862,303.407 93.997,302.553 93.927 L 301.000 93.800 300.884 90.500 L 300.768 87.200 302.522 87.200 C 305.687 87.200,305.793 86.874,305.842 77.058 C 305.865 72.406,306.056 66.620,306.266 64.200 C 306.534 61.124,306.518 59.452,306.213 58.645 L 305.778 57.489 297.989 57.445 L 290.200 57.400 289.901 53.400 C 289.437 47.212,289.418 46.581,289.512 40.484 L 289.600 34.768 292.900 34.884 L 296.200 35.000 296.440 40.600 C 296.725 47.245,296.359 46.400,298.955 46.400 C 301.044 46.400,301.115 46.437,301.286 47.602 C 301.516 49.169,301.467 49.200,298.747 49.200 C 296.445 49.200,294.521 50.482,296.083 50.975 C 297.540 51.436,305.128 51.617,305.268 51.195 C 305.710 49.871,307.600 52.481,307.600 54.414 C 307.600 56.343,307.620 56.375,309.136 56.783 C 311.522 57.425,313.199 59.974,313.201 62.961 C 313.203 64.962,314.467 67.200,315.594 67.200 C 316.758 67.200,316.764 64.570,315.601 64.200 C 314.723 63.922,314.197 62.471,314.559 61.329 C 314.686 60.928,314.524 60.089,314.200 59.464 C 313.782 58.659,313.725 58.114,314.005 57.590 C 314.596 56.486,314.498 56.173,313.400 55.673 C 312.549 55.285,312.400 54.949,312.400 53.418 C 312.400 50.773,313.229 50.361,318.339 50.465 C 322.914 50.558,323.100 50.621,323.583 52.234 C 323.929 53.393,323.931 53.394,323.966 52.362 C 324.010 51.009,322.859 50.000,321.269 50.000 C 319.725 50.000,319.447 48.224,320.800 47.000 C 321.848 46.052,321.809 45.739,320.607 45.438 C 320.061 45.301,319.348 44.673,319.022 44.043 C 318.409 42.856,317.675 42.400,316.381 42.400 C 315.967 42.400,315.435 42.039,315.199 41.598 C 314.842 40.931,314.510 40.837,313.229 41.042 C 311.987 41.240,311.524 41.124,310.844 40.444 C 310.380 39.980,309.550 39.600,309.000 39.600 C 308.067 39.600,308.000 39.466,308.000 37.608 C 308.000 35.176,306.311 34.000,302.816 34.000 C 301.707 34.000,300.800 33.849,300.800 33.664 C 300.800 33.480,300.350 33.123,299.800 32.873 C 298.985 32.502,298.800 32.132,298.800 30.876 C 298.800 30.029,298.443 27.370,298.006 24.968 C 297.569 22.565,297.209 20.026,297.206 19.324 C 297.198 17.718,297.215 17.727,293.220 17.226 C 289.260 16.730,288.964 16.529,288.697 14.163 C 288.450 11.971,286.803 10.000,285.217 10.000 C 284.185 10.000,284.185 10.002,284.336 13.000 M364.214 14.778 C 364.070 15.010,363.517 15.200,362.984 15.200 C 362.311 15.200,361.946 15.477,361.788 16.107 C 361.604 16.839,361.269 17.022,360.053 17.054 C 357.250 17.128,356.670 17.740,356.945 20.339 C 357.076 21.583,357.288 24.940,357.416 27.800 C 357.750 35.281,357.534 34.800,360.562 34.800 C 363.655 34.800,363.615 34.895,363.872 26.926 C 364.027 22.135,363.964 21.498,363.189 19.978 C 362.184 18.008,362.310 17.830,365.200 17.131 C 367.138 16.663,367.400 16.481,367.400 15.600 C 367.400 14.524,364.787 13.850,364.214 14.778 M85.600 15.600 C 85.600 16.202,85.809 16.418,86.300 16.324 C 86.685 16.250,87.000 15.924,87.000 15.600 C 87.000 15.276,86.685 14.950,86.300 14.876 C 85.809 14.782,85.600 14.998,85.600 15.600 M294.000 20.752 C 294.000 22.806,294.246 24.048,294.969 25.652 C 295.587 27.020,295.986 28.744,296.069 30.400 L 296.200 33.000 292.800 33.744 C 285.837 35.269,284.400 34.817,284.400 31.105 C 284.400 29.366,284.525 29.091,285.597 28.481 L 286.795 27.800 286.797 22.900 L 286.800 18.000 290.400 18.000 L 294.000 18.000 294.000 20.752 M348.806 18.300 C 348.825 19.210,349.601 19.798,349.994 19.200 C 350.584 18.301,350.486 18.000,349.600 18.000 C 349.160 18.000,348.803 18.135,348.806 18.300 M339.000 32.400 C 338.864 32.620,338.341 32.800,337.838 32.800 C 336.455 32.800,335.566 34.074,335.425 36.259 C 335.357 37.327,335.023 40.000,334.684 42.200 C 333.919 47.162,333.417 52.681,333.759 52.359 C 333.900 52.226,334.191 50.516,334.406 48.559 C 335.017 43.005,335.457 40.245,335.992 38.624 C 336.264 37.801,336.378 36.590,336.246 35.931 C 335.896 34.178,336.550 33.269,338.270 33.124 C 339.078 33.056,339.812 32.775,339.902 32.500 C 340.097 31.906,339.356 31.824,339.000 32.400 M351.759 35.362 C 351.641 35.670,351.602 38.809,351.672 42.336 L 351.800 48.750 352.975 49.975 C 354.606 51.676,355.764 51.641,355.467 49.900 C 355.344 49.185,355.130 45.810,354.991 42.400 C 354.851 38.990,354.649 35.885,354.541 35.500 C 354.302 34.641,352.079 34.530,351.759 35.362 M365.900 35.440 L 364.000 36.024 364.000 39.438 C 364.000 44.374,364.025 44.400,368.718 44.400 C 373.447 44.400,373.659 44.196,373.919 39.375 C 374.170 34.704,371.907 33.593,365.900 35.440 M358.236 43.100 C 357.247 46.282,356.867 53.230,357.606 54.612 C 359.129 57.458,361.979 57.928,371.816 56.955 C 375.051 56.635,375.148 56.793,375.287 62.625 L 375.400 67.400 382.800 67.397 C 392.088 67.393,393.856 66.784,392.148 64.177 C 391.610 63.356,391.480 61.811,391.407 55.370 C 391.302 46.186,391.450 46.509,387.641 47.138 C 386.104 47.392,382.608 47.600,379.873 47.600 L 374.900 47.600 374.660 48.800 L 374.420 50.000 370.570 50.000 L 366.720 50.000 362.969 46.200 C 359.065 42.245,358.597 41.938,358.236 43.100 M157.393 45.334 C 157.730 45.847,158.454 46.508,159.003 46.801 C 159.757 47.205,160.000 47.657,160.000 48.658 C 160.000 49.628,160.267 50.156,161.000 50.637 C 162.291 51.483,162.346 53.088,161.100 53.564 C 160.605 53.753,159.857 54.289,159.438 54.754 C 158.489 55.808,155.808 55.913,154.731 54.938 C 153.699 54.004,153.644 46.256,154.662 45.131 C 155.566 44.132,156.659 44.213,157.393 45.334 M306.967 45.843 C 307.347 45.988,307.600 46.559,307.600 47.269 C 307.600 47.920,307.797 48.820,308.037 49.269 C 308.634 50.385,307.971 51.027,306.843 50.423 C 306.090 50.020,305.471 45.600,306.167 45.600 C 306.259 45.600,306.619 45.709,306.967 45.843 M288.667 49.700 C 288.840 49.975,289.106 51.910,289.257 54.000 C 289.408 56.090,289.685 58.520,289.872 59.400 L 290.213 61.000 297.862 61.108 C 306.533 61.231,305.989 60.984,305.989 64.800 C 305.989 68.104,305.779 68.400,303.433 68.400 C 300.357 68.400,300.400 68.271,300.400 77.418 C 300.400 86.322,300.328 86.585,297.800 86.867 L 296.600 87.000 296.488 91.849 C 296.389 96.159,296.284 96.781,295.550 97.445 C 294.187 98.679,292.800 96.739,292.800 93.598 C 292.800 91.405,292.709 91.171,291.490 90.242 C 289.795 88.949,288.857 86.063,288.706 81.683 C 288.631 79.482,288.416 78.257,288.068 78.042 C 287.723 77.829,287.465 76.414,287.317 73.926 L 287.090 70.135 285.845 69.767 L 284.600 69.400 284.492 60.545 L 284.385 51.689 281.692 51.439 C 274.332 50.755,274.400 50.769,274.400 49.963 C 274.400 49.008,288.073 48.756,288.667 49.700 M304.400 50.000 C 304.400 50.525,304.133 50.800,303.624 50.800 C 302.745 50.800,302.231 50.198,302.600 49.600 C 303.061 48.854,304.400 49.152,304.400 50.000 M324.140 54.421 C 324.232 54.922,327.987 56.380,329.800 56.620 L 331.000 56.778 329.800 56.456 C 329.140 56.279,328.024 55.834,327.320 55.467 C 326.616 55.100,325.686 54.800,325.253 54.800 C 324.821 54.800,324.375 54.615,324.263 54.390 C 324.139 54.140,324.091 54.152,324.140 54.421 M92.251 60.591 C 91.793 60.939,91.054 61.071,90.351 60.930 C 89.324 60.725,89.200 60.810,89.200 61.719 C 89.200 62.280,88.768 63.252,88.240 63.879 C 86.660 65.758,86.759 68.000,88.424 68.000 C 88.851 68.000,89.200 68.270,89.200 68.600 C 89.200 69.325,84.588 69.422,79.261 68.810 C 75.665 68.397,68.576 68.864,67.189 69.606 C 66.539 69.954,66.400 70.448,66.400 72.414 C 66.400 73.738,66.222 74.800,66.000 74.800 C 65.778 74.800,65.600 73.743,65.600 72.429 C 65.600 70.806,65.401 69.859,64.971 69.429 C 64.019 68.476,63.512 68.671,63.745 69.900 C 63.860 70.505,64.064 74.510,64.200 78.800 C 64.506 88.521,64.610 89.200,65.783 89.200 C 67.833 89.200,69.157 92.287,69.182 97.126 C 69.210 102.256,68.800 102.000,76.990 102.000 C 81.201 102.000,84.051 102.158,84.200 102.400 C 84.336 102.620,85.686 102.800,87.200 102.800 C 88.714 102.800,90.064 102.620,90.200 102.400 C 90.336 102.180,91.403 102.000,92.571 102.000 L 94.695 102.000 94.943 100.500 C 95.080 99.675,95.193 95.824,95.196 91.943 C 95.201 83.921,94.972 84.400,98.788 84.400 L 101.110 84.400 101.269 81.577 C 101.377 79.672,101.619 78.632,102.014 78.383 C 102.873 77.840,113.403 77.952,116.200 78.534 L 118.600 79.034 118.456 90.617 C 118.377 96.988,118.265 102.740,118.208 103.400 C 118.150 104.060,118.080 105.275,118.052 106.100 L 118.000 107.600 101.424 107.600 C 90.804 107.600,84.758 107.744,84.600 108.000 C 84.451 108.241,81.638 108.400,77.502 108.400 C 70.988 108.400,70.605 108.443,69.712 109.283 L 68.772 110.166 69.044 106.294 C 69.338 102.112,69.057 101.211,67.451 101.188 C 66.681 101.177,66.666 101.137,67.300 100.768 C 68.868 99.854,67.714 92.200,66.008 92.200 C 64.619 92.200,63.580 99.846,64.862 100.638 C 65.142 100.811,64.577 101.302,63.424 101.888 C 61.689 102.770,61.577 102.912,62.129 103.527 C 62.642 104.098,62.668 104.656,62.295 107.200 C 62.054 108.850,61.832 112.078,61.802 114.373 C 61.745 118.792,61.812 118.639,59.536 119.532 C 57.491 120.335,56.761 127.844,58.197 133.300 C 58.888 135.923,60.400 132.542,60.400 128.376 C 60.400 124.602,62.157 120.947,62.962 123.045 C 63.098 123.400,62.827 124.309,62.359 125.066 C 61.332 126.728,61.332 136.513,62.359 137.751 C 62.741 138.211,62.776 138.547,62.479 138.905 C 62.248 139.183,62.001 140.128,61.930 141.005 C 61.803 142.564,61.762 142.603,60.149 142.721 L 58.498 142.841 58.233 144.837 C 58.087 145.934,57.774 147.259,57.536 147.781 C 57.213 148.491,57.267 149.618,57.753 152.265 C 58.110 154.209,58.401 156.547,58.401 157.460 L 58.400 159.120 59.760 157.760 C 60.583 156.937,61.516 156.400,62.123 156.400 L 63.125 156.400 63.278 148.900 C 63.398 143.003,63.574 141.076,64.101 139.886 C 64.740 138.441,64.735 138.313,63.987 137.086 C 62.136 134.050,63.272 123.239,65.592 121.805 C 65.817 121.666,66.006 120.528,66.013 119.276 C 66.026 116.823,66.490 115.879,67.902 115.431 C 68.732 115.168,68.800 115.269,68.800 116.773 L 68.800 118.400 76.600 118.400 L 84.400 118.400 84.400 114.462 C 84.400 108.744,82.585 109.263,103.102 109.120 L 120.386 109.000 120.833 110.078 C 121.437 111.538,121.167 118.594,120.481 119.281 C 120.096 119.666,117.745 119.832,111.365 119.922 L 102.768 120.044 102.884 123.322 L 103.000 126.600 118.511 126.705 C 130.720 126.787,134.055 126.702,134.177 126.305 C 134.263 126.027,134.439 124.495,134.569 122.900 L 134.806 120.000 128.831 120.000 C 121.195 120.000,121.511 120.260,121.577 114.035 C 121.603 111.486,121.516 108.115,121.382 106.544 C 121.248 104.974,121.313 103.056,121.526 102.282 C 121.740 101.508,121.762 100.722,121.576 100.536 C 121.389 100.349,121.142 96.957,121.026 92.998 C 120.910 89.039,120.711 82.125,120.583 77.633 C 120.409 71.471,120.211 69.265,119.776 68.644 C 119.459 68.192,119.200 67.452,119.200 67.000 C 119.200 64.491,113.310 63.275,110.871 65.280 C 110.255 65.787,107.404 67.200,106.999 67.200 C 106.903 67.200,106.922 66.948,107.040 66.640 C 107.382 65.749,106.544 65.525,104.808 66.045 C 103.711 66.373,103.200 66.754,103.200 67.241 C 103.200 68.836,99.155 69.835,96.667 68.855 C 95.542 68.412,94.376 64.596,94.664 62.300 C 94.816 61.091,94.751 60.400,94.484 60.400 C 94.254 60.400,93.826 60.315,93.533 60.211 C 93.240 60.107,92.663 60.279,92.251 60.591 M93.098 63.900 C 93.358 64.505,93.798 65.310,94.076 65.689 C 94.740 66.594,94.172 67.157,92.287 67.463 C 88.755 68.037,87.478 65.984,90.031 63.836 C 91.611 62.506,92.506 62.525,93.098 63.900 M115.011 66.818 C 115.368 67.395,114.456 68.400,113.575 68.400 C 112.698 68.400,112.248 67.774,112.552 66.981 C 112.808 66.314,114.625 66.193,115.011 66.818 M17.613 68.448 C 17.162 69.441,16.814 71.076,16.809 72.224 C 16.804 73.371,16.546 74.583,16.213 75.024 C 15.890 75.451,15.620 76.310,15.613 76.934 L 15.600 78.068 12.214 77.951 C 7.843 77.800,6.901 78.485,6.718 81.952 L 6.600 84.200 3.300 84.316 L 0.000 84.432 0.000 92.770 L 0.000 101.107 2.698 101.396 C 4.182 101.555,6.315 102.028,7.438 102.448 C 8.560 102.868,9.911 103.164,10.439 103.106 C 11.240 103.018,11.423 103.200,11.535 104.200 C 11.885 107.299,16.542 107.334,16.875 104.240 C 17.098 102.168,18.370 101.668,24.600 101.199 C 27.680 100.967,30.764 100.688,31.453 100.579 L 32.705 100.381 32.874 96.691 C 33.079 92.199,33.682 90.773,35.600 90.240 C 36.370 90.026,37.133 89.634,37.295 89.370 C 37.457 89.106,38.042 88.776,38.595 88.637 C 39.963 88.294,39.945 86.604,38.557 85.155 L 37.514 84.067 37.957 78.776 C 38.479 72.539,38.525 68.800,38.080 68.800 C 37.252 68.800,36.800 69.959,36.800 72.080 C 36.800 73.876,36.664 74.400,36.200 74.400 C 35.735 74.400,35.600 73.872,35.600 72.049 C 35.600 68.952,35.178 68.629,31.045 68.549 C 26.556 68.463,22.248 67.975,21.958 67.520 C 21.071 66.128,18.407 66.696,17.613 68.448 M234.800 68.049 C 232.885 68.615,232.809 68.748,233.231 70.800 C 233.434 71.790,233.863 74.000,234.184 75.711 C 234.504 77.422,234.848 78.955,234.949 79.117 C 235.049 79.279,235.001 84.809,234.843 91.406 C 234.611 101.060,234.657 103.487,235.077 103.844 C 235.365 104.088,235.604 104.538,235.609 104.844 C 235.624 105.801,237.120 107.495,237.333 106.797 C 237.922 104.867,238.556 98.483,238.762 92.414 L 239.000 85.428 240.400 85.039 C 242.346 84.497,242.407 84.310,242.130 79.742 C 241.986 77.372,242.057 74.960,242.302 73.942 C 242.532 72.984,242.603 71.390,242.460 70.400 C 242.175 68.424,242.598 68.645,237.600 67.857 C 236.830 67.736,235.570 67.822,234.800 68.049 M240.900 68.796 C 241.946 68.800,242.000 68.894,241.995 70.700 C 241.988 73.005,241.634 74.468,241.155 74.172 C 240.956 74.049,240.800 76.149,240.800 78.953 C 240.800 85.175,239.905 86.395,238.716 81.794 C 238.432 80.695,237.795 79.391,237.300 78.898 C 236.703 78.302,236.400 77.520,236.400 76.574 C 236.400 75.789,236.242 74.844,236.050 74.474 C 234.351 71.206,235.548 68.218,238.400 68.602 C 239.170 68.706,240.295 68.793,240.900 68.796 M253.400 68.634 C 252.860 68.860,252.932 72.402,253.497 73.400 C 254.262 74.750,254.857 73.578,254.722 70.990 C 254.606 68.782,254.310 68.254,253.400 68.634 M319.921 79.984 C 319.604 84.266,319.669 84.420,322.223 85.471 C 323.807 86.122,323.997 86.339,323.999 87.500 C 324.000 88.974,324.201 89.018,328.741 88.543 C 333.338 88.063,331.370 85.939,325.974 85.557 C 320.713 85.185,320.456 84.938,320.314 80.100 L 320.200 76.200 319.921 79.984 M237.600 92.600 C 237.600 98.911,237.512 100.000,237.000 100.000 C 236.379 100.000,236.060 87.352,236.643 85.833 C 237.335 84.029,237.600 85.904,237.600 92.600 M338.800 87.400 C 338.800 88.378,338.981 88.800,339.400 88.800 C 339.819 88.800,340.000 88.378,340.000 87.400 C 340.000 86.422,339.819 86.000,339.400 86.000 C 338.981 86.000,338.800 86.422,338.800 87.400 M35.600 93.000 C 35.600 93.622,35.827 94.000,36.200 94.000 C 36.573 94.000,36.800 93.622,36.800 93.000 C 36.800 92.378,36.573 92.000,36.200 92.000 C 35.827 92.000,35.600 92.378,35.600 93.000 M341.597 98.603 C 339.998 100.530,341.528 101.196,347.691 101.252 C 351.935 101.291,352.835 101.378,351.200 101.589 C 346.279 102.225,345.798 102.383,346.750 103.050 C 347.785 103.775,347.929 107.948,347.049 111.688 C 346.456 114.207,346.716 114.774,348.744 115.394 C 349.264 115.552,350.350 116.280,351.158 117.010 C 352.542 118.260,356.275 119.995,357.600 120.004 C 357.930 120.006,358.966 120.617,359.902 121.361 C 360.838 122.105,362.053 122.827,362.602 122.965 C 363.789 123.263,363.946 124.400,362.800 124.400 C 361.913 124.400,361.764 125.212,362.425 126.447 C 362.789 127.127,363.106 127.203,364.626 126.975 C 366.369 126.714,366.406 126.732,366.651 127.954 C 366.822 128.812,367.131 129.200,367.642 129.200 C 368.098 129.200,368.480 129.581,368.632 130.186 C 368.768 130.728,369.221 131.280,369.639 131.412 C 370.056 131.545,370.505 132.136,370.636 132.727 C 371.155 135.064,371.248 135.200,372.338 135.200 C 372.934 135.200,373.867 135.515,374.411 135.900 C 374.955 136.285,375.850 136.611,376.400 136.625 C 379.806 136.710,380.805 136.862,381.315 137.372 C 381.807 137.864,382.106 137.867,383.444 137.390 C 385.567 136.633,386.561 136.691,384.700 137.463 C 383.231 138.073,383.200 138.130,383.200 140.228 C 383.200 141.425,382.848 143.263,382.402 144.394 C 381.964 145.506,381.502 147.448,381.377 148.708 C 381.252 149.969,381.067 151.405,380.967 151.900 C 380.586 153.783,385.653 152.565,386.403 150.593 C 386.621 150.018,386.800 146.789,386.800 143.417 C 386.800 136.655,386.742 136.800,389.433 136.800 L 390.800 136.800 390.861 139.500 L 390.922 142.200 391.190 139.600 C 391.340 138.136,391.293 136.783,391.081 136.502 C 390.875 136.228,390.797 135.655,390.909 135.228 C 391.131 134.378,390.528 134.000,388.947 134.000 C 387.629 134.000,385.600 132.919,385.600 132.217 C 385.600 131.907,385.229 131.536,384.776 131.392 C 384.322 131.248,383.753 130.696,383.511 130.165 C 383.270 129.634,382.827 129.200,382.527 129.200 C 382.228 129.200,381.787 128.770,381.547 128.244 C 381.308 127.718,380.682 127.092,380.156 126.853 C 379.630 126.613,379.200 126.163,379.200 125.851 C 379.200 125.232,378.365 124.800,377.167 124.800 C 376.490 124.800,376.400 124.496,376.400 122.200 L 376.400 119.600 375.200 119.600 C 374.540 119.600,374.000 119.420,374.000 119.200 C 374.000 118.980,373.595 118.803,373.100 118.806 C 372.218 118.812,372.220 118.822,373.200 119.322 C 374.115 119.790,374.200 120.058,374.200 122.497 C 374.200 125.234,373.697 126.355,372.735 125.759 C 372.441 125.577,371.300 125.360,370.200 125.278 C 368.979 125.186,367.577 124.741,366.600 124.133 C 365.720 123.586,364.132 122.608,363.070 121.959 C 360.741 120.535,360.827 119.874,363.382 119.576 C 365.418 119.338,366.412 118.493,366.384 117.024 C 366.372 116.386,366.247 116.479,365.829 117.440 C 364.491 120.514,361.363 119.677,360.194 115.932 C 359.572 113.940,359.399 114.703,359.998 116.793 C 360.812 119.632,360.082 120.051,356.352 118.886 C 352.854 117.794,352.800 117.706,352.800 113.126 C 352.800 109.291,352.761 109.114,351.700 108.170 C 347.132 104.105,347.142 104.137,350.366 103.772 C 352.212 103.563,352.775 103.339,352.928 102.752 C 353.191 101.748,356.276 101.677,356.994 102.659 C 357.429 103.255,357.497 103.235,357.700 102.459 C 357.872 101.802,357.746 101.600,357.163 101.600 C 356.221 101.600,356.201 101.283,357.083 100.308 C 357.602 99.735,357.664 99.390,357.340 98.877 C 356.719 97.891,342.395 97.642,341.597 98.603 M30.200 101.480 C 23.907 102.953,23.991 102.845,24.040 109.329 C 24.091 116.042,24.229 116.561,26.012 116.733 C 27.564 116.881,27.985 117.329,27.994 118.839 C 27.997 119.410,28.259 120.400,28.575 121.039 C 29.633 123.177,28.974 126.972,27.327 128.229 C 25.308 129.768,25.423 133.951,27.500 134.544 C 28.215 134.749,28.800 135.070,28.800 135.258 C 28.800 135.729,28.462 135.694,26.023 134.970 C 23.274 134.153,22.838 134.537,23.764 136.962 C 24.701 139.414,24.567 152.999,23.600 153.609 C 22.887 154.059,18.325 154.130,17.780 153.700 C 17.571 153.535,17.535 153.571,17.700 153.780 C 18.546 154.851,18.009 172.961,17.083 174.600 C 15.605 177.215,13.743 177.430,11.629 175.231 C 9.474 172.988,9.440 171.696,11.500 170.364 L 13.000 169.393 13.108 161.502 C 13.229 152.711,12.942 153.548,16.000 153.066 C 16.725 152.952,16.609 152.894,15.576 152.854 C 12.869 152.751,12.822 152.896,12.705 161.593 L 12.600 169.385 10.900 170.323 C 9.965 170.838,9.200 171.520,9.200 171.839 C 9.200 172.157,8.750 172.622,8.200 172.873 C 7.400 173.237,7.200 173.620,7.200 174.784 C 7.200 176.838,6.648 177.200,3.520 177.200 C 1.973 177.200,0.800 177.373,0.800 177.600 C 0.800 177.820,1.802 178.000,3.026 178.000 C 5.912 178.000,6.706 178.458,7.018 180.305 C 7.157 181.127,7.524 182.367,7.835 183.060 C 8.533 184.617,8.553 185.668,7.900 186.401 C 7.475 186.878,7.504 186.882,8.100 186.432 C 8.956 185.784,8.985 184.818,8.205 182.951 C 7.553 181.390,7.939 180.000,9.024 180.000 C 9.352 180.000,9.784 179.568,9.985 179.039 C 10.264 178.306,10.758 178.014,12.075 177.804 C 14.919 177.352,16.643 176.419,17.342 174.953 L 17.979 173.618 25.489 173.509 L 33.000 173.400 33.125 171.880 C 33.219 170.743,33.471 170.283,34.125 170.050 C 35.423 169.589,40.775 170.112,41.162 170.738 C 41.589 171.429,44.832 170.981,46.884 169.947 C 47.700 169.536,48.723 169.200,49.157 169.200 C 50.241 169.200,50.334 168.738,50.798 161.031 C 51.116 155.752,51.096 154.014,50.705 153.131 C 49.973 151.478,49.200 151.696,49.200 153.557 C 49.200 155.243,48.778 155.600,46.781 155.600 C 45.456 155.600,44.800 156.518,44.800 158.374 C 44.800 159.495,44.687 159.600,43.476 159.600 C 41.126 159.600,40.732 160.225,40.498 164.328 L 40.289 168.000 38.145 168.000 L 36.000 168.000 36.000 165.871 C 36.000 164.700,35.744 162.945,35.431 161.971 C 34.804 160.018,34.309 153.200,34.794 153.200 C 35.233 153.200,35.599 155.340,35.606 157.950 C 35.615 161.101,36.130 161.752,37.386 160.200 C 37.921 159.540,38.722 158.640,39.166 158.200 C 39.611 157.760,42.218 155.191,44.960 152.492 L 49.944 147.584 50.402 144.692 C 50.653 143.101,50.801 140.540,50.730 139.000 L 50.600 136.200 47.682 136.195 C 44.226 136.189,43.887 135.881,44.175 133.000 C 45.257 122.173,44.696 119.600,41.253 119.600 C 39.694 119.600,39.708 119.682,39.758 110.505 C 39.804 102.066,39.911 102.414,37.267 102.382 C 36.460 102.373,35.080 102.105,34.200 101.788 C 32.587 101.207,31.668 101.137,30.200 101.480 M340.800 101.557 C 340.800 101.754,341.085 102.024,341.433 102.157 C 342.411 102.533,342.541 102.451,342.000 101.800 C 341.448 101.135,340.800 101.004,340.800 101.557 M237.298 103.900 C 237.198 104.835,236.955 105.600,236.758 105.600 C 236.342 105.600,236.267 102.267,236.673 101.860 C 237.205 101.329,237.478 102.221,237.298 103.900 M33.400 102.400 C 33.536 102.620,34.196 102.800,34.867 102.800 C 35.952 102.800,36.060 102.905,35.848 103.752 C 35.717 104.275,35.875 105.580,36.200 106.652 C 36.805 108.645,37.031 116.344,36.555 118.726 C 36.007 121.466,31.198 122.191,30.095 119.700 C 29.043 117.324,28.832 103.258,29.838 102.523 C 30.680 101.907,33.045 101.825,33.400 102.400 M340.000 112.657 C 340.000 117.889,339.709 118.519,337.384 118.329 L 335.800 118.200 335.678 115.800 C 335.510 112.486,334.982 112.251,334.453 115.253 C 334.166 116.884,334.147 117.907,334.399 118.159 C 335.058 118.818,339.372 118.963,339.846 118.342 C 340.731 117.182,341.131 114.557,340.854 111.720 C 340.423 107.306,340.000 107.771,340.000 112.657 M197.062 112.331 C 196.136 113.354,196.180 113.472,198.200 115.380 C 201.424 118.425,200.881 118.800,193.244 118.800 C 186.738 118.800,186.140 118.565,186.527 116.160 C 186.667 115.287,186.632 114.833,186.447 115.129 C 186.136 115.628,180.581 115.206,179.618 114.611 C 179.142 114.317,175.535 117.972,175.830 118.449 C 176.000 118.724,177.986 118.860,181.348 118.827 C 184.237 118.799,189.474 118.955,192.986 119.175 C 201.401 119.701,202.248 119.278,202.360 114.500 C 202.398 112.885,202.343 112.800,201.249 112.800 C 200.616 112.800,199.874 112.530,199.600 112.200 C 198.927 111.389,197.865 111.444,197.062 112.331 M203.300 113.465 C 202.978 113.595,202.800 114.523,202.800 116.076 C 202.800 118.109,202.899 118.448,203.433 118.243 C 203.781 118.109,204.141 118.000,204.233 118.000 C 204.325 118.000,204.400 116.920,204.400 115.600 C 204.400 113.243,204.305 113.059,203.300 113.465 M221.480 116.082 C 221.208 118.105,221.354 118.400,222.624 118.400 C 223.730 118.400,223.869 117.691,223.161 115.660 C 222.540 113.879,221.749 114.077,221.480 116.082 M170.414 116.451 C 170.406 117.268,170.662 118.120,171.000 118.400 C 171.811 119.073,171.811 117.419,171.000 116.000 L 170.428 115.000 170.414 116.451 M171.870 115.486 C 171.463 116.145,172.070 117.600,172.747 117.591 C 173.551 117.580,175.480 116.147,175.144 115.810 C 174.696 115.362,172.105 115.106,171.870 115.486 M347.600 117.371 C 347.600 117.742,347.942 118.000,348.433 118.000 C 349.408 118.000,349.270 117.065,348.267 116.871 C 347.872 116.794,347.600 116.998,347.600 117.371 M2.545 119.377 C 1.335 119.904,1.297 119.994,1.498 121.862 C 1.781 124.489,2.000 124.574,2.000 122.057 C 2.000 119.590,2.597 119.200,6.377 119.200 C 8.986 119.200,9.454 119.538,9.703 121.602 L 9.872 123.000 9.936 121.529 C 10.050 118.902,6.208 117.783,2.545 119.377 M260.900 119.889 C 259.330 120.084,259.250 120.734,260.638 122.030 C 262.257 123.543,262.678 124.736,262.898 128.436 C 263.011 130.326,263.310 132.258,263.562 132.728 C 263.893 133.348,263.908 134.278,263.616 136.092 C 263.394 137.472,263.092 140.721,262.945 143.313 L 262.679 148.025 261.133 149.782 C 260.173 150.872,258.955 151.748,257.921 152.093 C 254.741 153.153,254.206 158.800,257.285 158.800 C 258.046 158.800,258.908 160.069,259.593 162.200 C 259.877 163.080,260.421 164.430,260.803 165.200 C 262.225 168.067,262.202 168.223,260.134 169.646 C 259.089 170.365,257.596 171.056,256.817 171.182 C 255.422 171.407,255.398 171.442,255.278 173.527 C 255.141 175.914,253.159 178.494,251.058 179.021 C 250.436 179.177,249.717 179.787,249.376 180.447 C 249.048 181.081,248.604 181.600,248.390 181.600 C 248.147 181.600,248.000 185.511,248.000 191.986 C 248.000 204.352,247.265 203.200,255.150 203.200 C 258.232 203.200,260.840 203.341,260.946 203.513 C 261.052 203.684,258.588 203.851,255.470 203.883 C 252.351 203.914,249.170 204.096,248.400 204.286 L 247.000 204.632 246.891 212.547 C 246.809 218.588,246.667 220.422,246.291 220.298 C 245.934 220.179,245.770 218.245,245.690 213.196 C 245.562 205.115,245.599 205.200,242.227 205.200 C 238.680 205.200,237.200 207.547,237.200 213.175 C 237.200 214.268,236.991 215.621,236.736 216.181 L 236.272 217.200 229.364 217.200 C 221.433 217.200,222.082 217.597,222.334 212.900 L 222.468 210.400 229.423 210.400 L 236.378 210.400 237.021 208.188 C 237.837 205.381,238.700 204.812,242.848 204.348 C 244.638 204.148,246.260 203.887,246.451 203.768 C 247.071 203.385,246.885 183.869,246.253 183.004 C 245.558 182.054,244.800 183.186,244.800 185.174 C 244.800 186.471,243.615 188.000,242.609 188.000 C 242.114 188.000,242.001 189.154,241.909 195.100 L 241.800 202.200 240.400 202.200 L 239.000 202.200 238.778 199.000 C 238.651 197.167,238.267 195.253,237.878 194.520 C 237.485 193.777,237.200 192.342,237.200 191.100 C 237.200 187.980,237.252 188.000,229.133 188.000 L 222.025 188.000 221.825 198.700 C 221.556 213.166,221.057 224.451,220.650 225.300 C 220.350 225.927,219.591 226.000,213.400 226.000 C 205.724 226.000,206.000 226.104,206.000 223.215 L 206.000 221.696 208.300 221.449 C 215.073 220.722,214.564 221.263,214.198 215.170 L 213.912 210.400 212.826 210.400 C 210.203 210.400,210.026 209.671,209.907 198.382 L 209.800 188.200 207.485 187.951 C 204.671 187.649,204.740 187.713,204.449 185.109 L 204.213 183.000 204.007 185.000 L 203.800 187.000 202.277 187.043 C 200.383 187.096,200.110 187.367,199.762 189.545 C 199.487 191.267,200.452 191.533,201.401 189.998 C 202.411 188.365,203.682 192.374,204.383 199.400 C 204.654 202.123,205.097 204.570,206.212 209.500 C 206.380 210.243,206.685 210.400,207.961 210.400 L 209.507 210.400 209.684 213.100 C 209.933 216.897,209.807 217.200,207.972 217.200 C 206.149 217.200,205.606 215.956,205.602 211.773 C 205.599 208.592,204.913 204.946,203.988 203.200 C 203.472 202.225,203.169 200.517,202.990 197.569 C 202.678 192.436,201.362 190.150,201.166 194.400 C 201.017 197.623,200.460 203.130,200.205 203.900 C 199.938 204.705,200.039 204.800,201.162 204.800 C 203.119 204.800,203.850 209.138,204.161 222.600 C 204.278 227.640,204.908 232.362,205.517 232.763 C 205.715 232.893,205.998 233.495,206.146 234.100 L 206.415 235.200 213.400 235.200 L 220.385 235.200 220.617 234.100 C 220.744 233.495,221.108 232.409,221.424 231.686 C 221.741 230.964,222.000 229.404,222.000 228.219 C 222.000 224.600,221.565 224.800,229.443 224.800 C 237.679 224.800,237.785 224.848,238.229 228.771 C 238.579 231.869,238.879 232.102,241.838 231.576 C 245.497 230.925,245.600 230.870,245.600 229.573 C 245.600 228.797,245.803 228.400,246.200 228.400 C 246.615 228.400,246.800 228.817,246.800 229.751 C 246.800 232.753,251.269 232.486,251.524 229.469 L 251.648 228.000 249.638 228.000 C 247.232 228.000,246.800 227.452,246.800 224.400 C 246.800 221.356,247.234 220.800,249.614 220.800 L 251.600 220.800 251.600 213.614 C 251.600 205.421,251.524 205.595,255.074 205.605 C 259.049 205.617,258.800 205.107,258.800 213.239 L 258.800 220.385 259.900 220.620 C 260.505 220.749,261.428 221.030,261.952 221.243 C 263.373 221.821,263.384 221.765,263.600 213.068 C 263.787 205.521,263.848 205.000,264.549 205.000 C 265.258 205.000,265.294 205.415,265.227 212.663 L 265.156 220.327 267.678 220.469 C 269.065 220.547,270.830 220.516,271.600 220.399 L 273.000 220.187 273.109 213.159 C 273.217 206.195,273.210 206.126,272.309 205.692 C 271.443 205.275,271.439 205.253,272.224 205.227 C 272.676 205.212,273.396 205.464,273.824 205.787 C 274.773 206.505,287.548 206.670,288.836 205.981 C 289.554 205.597,289.568 205.490,289.009 204.692 C 288.609 204.120,288.400 202.891,288.400 201.102 L 288.400 198.382 280.900 198.491 L 273.400 198.600 273.200 201.400 L 273.000 204.200 269.400 204.184 C 263.718 204.160,263.999 204.613,264.006 195.486 C 264.013 186.797,264.034 186.725,266.672 186.421 L 268.600 186.200 268.698 177.000 C 268.796 167.874,269.056 166.000,270.228 166.000 C 270.499 166.000,270.936 166.901,271.200 168.001 C 271.694 170.058,272.155 170.720,272.596 170.007 C 273.276 168.907,277.200 169.925,277.200 171.202 C 277.200 171.391,277.533 171.652,277.939 171.781 C 278.346 171.910,278.882 172.462,279.131 173.008 C 279.379 173.553,279.861 174.000,280.201 174.000 C 280.541 174.000,280.985 174.435,281.187 174.966 C 281.389 175.497,281.915 176.046,282.357 176.186 C 282.798 176.326,283.267 176.783,283.400 177.200 C 283.533 177.617,283.964 178.062,284.360 178.187 C 284.755 178.313,285.282 178.862,285.531 179.408 C 285.864 180.139,286.294 180.400,287.168 180.400 C 288.728 180.400,288.957 180.842,289.234 184.400 L 289.468 187.400 289.534 184.687 C 289.574 183.036,289.365 181.412,289.000 180.538 C 288.670 179.749,288.400 178.684,288.400 178.173 C 288.400 177.348,288.186 177.230,286.500 177.122 C 284.905 177.020,284.580 176.862,284.477 176.138 C 284.404 175.622,283.974 175.180,283.409 175.038 C 282.035 174.693,281.657 172.647,282.709 171.252 L 283.503 170.200 288.774 170.331 C 293.217 170.442,294.209 170.355,295.086 169.781 L 296.126 169.099 295.271 168.449 C 294.463 167.836,294.410 167.416,294.308 160.800 L 294.200 153.800 291.968 153.031 C 288.318 151.774,288.400 151.604,288.400 160.387 L 288.400 168.000 281.400 168.000 L 274.400 168.000 274.400 162.826 C 274.400 156.208,274.186 155.600,271.853 155.600 C 268.679 155.600,266.148 158.353,265.879 162.098 C 265.764 163.694,265.296 166.710,264.839 168.800 C 264.178 171.823,264.007 174.012,264.004 179.500 C 264.001 185.365,263.910 186.400,263.400 186.400 C 262.711 186.400,262.478 171.846,263.160 171.425 C 263.773 171.046,264.394 167.607,264.739 162.687 C 265.121 157.224,265.882 155.963,269.882 154.163 C 273.068 152.729,273.278 152.194,273.773 144.260 L 274.200 137.400 282.249 137.292 L 290.298 137.184 290.949 135.479 C 291.753 133.372,291.812 128.113,291.043 127.100 C 290.568 126.475,289.663 126.400,282.539 126.400 L 274.567 126.400 272.845 128.154 C 270.930 130.106,271.022 129.307,271.830 136.917 C 272.192 140.324,270.832 147.404,269.874 147.098 C 269.363 146.934,268.594 145.473,267.191 142.000 C 265.697 138.300,265.725 138.018,267.774 136.017 C 269.900 133.941,270.245 131.633,268.842 128.882 C 268.425 128.064,267.866 126.588,267.600 125.601 C 267.335 124.615,266.776 123.328,266.359 122.742 C 265.941 122.156,265.600 121.492,265.600 121.267 C 265.600 121.041,265.317 120.574,264.971 120.229 C 264.361 119.618,263.599 119.554,260.900 119.889 M318.500 119.889 C 316.953 120.081,316.943 120.167,317.798 125.835 C 318.126 128.016,318.396 131.003,318.398 132.473 C 318.400 135.457,318.568 135.290,314.840 135.994 C 311.488 136.627,311.600 136.330,311.600 144.595 C 311.600 153.587,311.777 154.000,315.629 154.000 L 318.000 154.000 318.000 161.000 L 318.000 168.000 315.876 168.000 C 312.773 168.000,312.204 168.543,312.985 170.756 C 313.879 173.291,313.891 205.078,312.999 209.737 C 312.189 213.975,312.357 214.154,316.040 212.949 C 317.135 212.591,318.140 212.406,318.273 212.539 C 318.630 212.896,317.597 214.000,316.905 214.000 C 315.432 214.000,313.600 216.846,313.600 219.135 L 313.600 221.314 310.439 221.098 C 306.609 220.835,306.400 220.997,306.400 224.218 C 306.400 226.852,307.090 228.016,308.631 227.984 C 309.141 227.974,308.944 227.771,308.046 227.381 C 306.722 226.806,306.698 226.753,306.946 224.941 C 307.086 223.922,307.200 222.843,307.200 222.544 C 307.200 222.245,307.560 222.000,308.000 222.000 C 308.440 222.000,308.800 222.245,308.800 222.544 C 308.800 222.900,309.503 223.172,310.831 223.329 C 311.948 223.461,313.860 224.026,315.079 224.585 C 316.624 225.292,317.985 225.600,319.568 225.600 C 322.815 225.600,323.893 226.777,321.400 227.600 C 320.251 227.979,320.005 228.254,320.028 229.131 C 320.052 230.041,320.101 230.085,320.360 229.425 C 320.527 228.999,321.279 228.438,322.032 228.180 C 323.006 227.845,323.374 227.492,323.311 226.955 C 323.124 225.367,324.142 221.888,324.849 221.703 C 325.863 221.438,326.125 220.380,325.322 219.792 C 324.558 219.234,325.170 218.000,326.211 218.000 C 327.416 218.000,327.947 214.754,327.250 211.645 C 326.620 208.831,326.567 208.748,325.536 208.954 C 324.137 209.232,323.806 208.355,324.822 207.062 C 326.029 205.528,326.033 172.034,324.826 170.910 C 323.422 169.602,323.200 168.139,323.200 160.207 C 323.200 155.788,323.040 152.409,322.827 152.333 C 322.085 152.068,322.186 137.356,322.936 136.607 C 323.510 136.033,323.600 134.869,323.600 128.014 C 323.600 118.727,323.908 119.218,318.500 119.889 M37.691 123.427 C 38.692 125.239,38.782 125.763,38.791 129.851 C 38.801 134.995,38.676 135.214,35.552 135.514 L 33.530 135.709 33.651 144.554 L 33.772 153.400 32.000 153.527 C 29.260 153.724,29.200 153.522,29.200 144.131 L 29.200 136.015 30.200 135.808 C 30.750 135.693,31.650 135.507,32.200 135.392 C 33.113 135.203,33.200 135.002,33.199 133.092 C 33.199 131.267,33.633 127.014,34.238 122.927 C 34.413 121.744,35.141 121.169,36.200 121.376 C 36.420 121.419,37.091 122.342,37.691 123.427 M253.674 122.121 C 252.826 123.024,252.821 123.107,253.404 126.156 C 253.732 127.869,254.000 130.605,254.000 132.235 L 254.000 135.200 255.739 135.200 C 258.179 135.200,259.402 137.516,258.171 139.802 C 257.757 140.571,257.201 141.200,256.936 141.200 C 256.348 141.200,256.185 141.737,255.568 145.715 C 254.719 151.190,256.051 152.193,259.514 148.687 C 261.499 146.677,261.600 146.473,261.600 144.461 C 261.600 143.299,261.814 141.954,262.076 141.474 C 262.704 140.321,262.709 135.349,262.082 134.722 C 261.764 134.404,261.600 132.733,261.600 129.806 L 261.600 125.373 259.487 123.286 C 257.017 120.847,255.211 120.485,253.674 122.121 M355.602 124.186 C 355.010 127.650,355.478 129.600,356.901 129.600 C 357.615 129.600,357.680 129.411,357.480 127.922 C 357.219 125.971,357.710 124.800,358.790 124.800 C 360.151 124.800,360.057 124.064,358.513 122.628 C 356.412 120.675,356.182 120.798,355.602 124.186 M40.675 123.700 C 41.059 124.417,41.495 126.434,41.648 128.200 C 41.800 129.960,42.050 132.039,42.202 132.821 C 42.470 134.197,42.431 134.256,40.960 134.708 C 39.329 135.208,38.560 134.990,39.703 134.350 C 40.665 133.812,40.748 125.587,39.800 124.800 C 39.136 124.249,38.974 122.400,39.590 122.400 C 39.804 122.400,40.293 122.985,40.675 123.700 M194.908 126.236 C 195.027 126.876,195.254 127.808,195.411 128.306 C 195.641 129.037,195.571 129.164,195.048 128.963 C 194.172 128.627,194.176 130.304,195.057 132.150 C 196.257 134.668,194.983 135.610,190.200 135.742 C 188.660 135.785,187.183 135.955,186.918 136.122 C 186.654 136.288,185.976 136.309,185.414 136.168 C 184.081 135.833,180.172 137.699,179.882 138.808 C 179.763 139.262,179.336 139.600,178.881 139.600 C 178.369 139.600,177.998 139.953,177.838 140.592 C 177.608 141.507,177.455 141.565,175.855 141.346 C 174.517 141.162,174.068 141.247,173.888 141.716 C 173.759 142.051,173.102 142.446,172.427 142.594 C 170.519 143.013,170.529 146.400,172.437 146.400 C 173.357 146.400,173.731 146.185,173.894 145.561 C 174.341 143.853,179.692 142.466,180.780 143.776 C 181.400 144.523,182.178 144.206,182.737 142.978 C 183.101 142.180,183.475 142.000,184.770 142.000 C 186.086 142.000,186.445 141.820,186.878 140.945 L 187.400 139.889 195.200 139.967 C 204.063 140.055,203.344 139.789,203.967 143.200 C 204.953 148.587,205.462 149.250,207.200 147.400 C 207.893 146.662,208.567 146.394,209.770 146.377 C 211.330 146.354,211.444 146.263,212.417 144.277 L 213.433 142.200 216.917 142.084 L 220.400 141.969 220.400 138.984 C 220.400 135.799,220.380 135.756,219.253 136.460 C 218.717 136.795,218.184 136.803,217.286 136.490 C 214.628 135.563,212.800 136.856,212.800 139.662 C 212.800 141.118,212.651 141.600,212.200 141.600 C 211.740 141.600,211.600 141.092,211.600 139.425 L 211.600 137.249 209.805 136.980 C 207.584 136.647,206.899 136.890,206.731 138.071 C 206.559 139.283,205.200 139.587,205.200 138.413 C 205.200 137.948,204.840 136.862,204.400 136.000 C 203.932 135.083,203.599 133.636,203.597 132.516 C 203.591 129.667,203.136 126.400,202.744 126.400 C 202.555 126.400,202.400 126.670,202.400 127.000 C 202.400 127.726,201.933 127.773,201.273 127.113 C 201.006 126.846,199.755 126.412,198.493 126.149 C 197.232 125.887,195.860 125.537,195.445 125.372 C 194.786 125.110,194.718 125.219,194.908 126.236 M354.113 135.359 C 351.861 135.966,351.266 136.573,351.910 137.605 C 352.248 138.146,352.402 140.591,352.406 145.495 C 352.413 153.718,352.442 153.810,354.851 153.360 L 356.600 153.033 355.000 152.817 L 353.400 152.600 353.291 145.356 C 353.172 137.439,353.176 137.425,355.538 136.952 C 356.594 136.741,356.801 136.823,356.806 137.450 C 356.811 138.075,356.875 138.101,357.189 137.603 C 357.427 137.228,357.424 136.864,357.183 136.623 C 356.973 136.413,356.800 135.916,356.800 135.520 C 356.800 134.719,356.544 134.704,354.113 135.359 M177.100 136.832 C 175.933 137.512,176.310 138.000,178.000 138.000 C 179.654 138.000,179.947 137.707,179.120 136.880 C 178.542 136.302,178.031 136.290,177.100 136.832 M319.611 137.428 C 320.319 139.291,320.109 152.672,319.367 152.957 C 318.363 153.343,313.799 153.239,313.380 152.821 C 312.465 151.908,313.152 136.865,314.116 136.706 C 317.430 136.159,319.217 136.394,319.611 137.428 M6.317 137.890 L 4.834 138.046 4.620 145.323 C 3.958 167.819,3.859 169.298,3.000 169.632 C 2.447 169.847,2.392 169.952,2.820 169.972 C 4.244 170.036,4.400 169.201,4.400 161.494 C 4.400 152.534,4.401 152.530,7.604 152.168 L 10.000 151.897 10.000 145.381 C 10.000 136.939,10.264 137.475,6.317 137.890 M41.119 140.500 L 41.000 143.000 38.500 143.119 L 36.000 143.238 36.000 140.619 L 36.000 138.000 38.619 138.000 L 41.238 138.000 41.119 140.500 M236.800 146.267 C 236.926 149.219,237.166 150.991,237.452 151.085 C 238.215 151.338,238.485 147.798,237.947 144.595 C 237.165 139.940,236.566 140.813,236.800 146.267 M367.895 145.477 C 366.943 145.725,367.424 146.400,368.554 146.400 C 369.053 146.400,369.874 146.840,370.380 147.378 C 370.885 147.916,371.771 148.411,372.349 148.478 C 373.219 148.579,373.458 148.876,373.739 150.200 C 373.925 151.080,374.330 152.391,374.639 153.114 C 375.414 154.929,375.410 162.359,374.633 163.424 C 374.171 164.057,373.415 164.240,370.533 164.414 C 366.629 164.651,366.747 164.873,371.200 165.666 L 374.200 166.200 374.324 167.700 L 374.448 169.200 376.527 169.200 L 378.606 169.200 378.480 166.100 C 378.411 164.395,378.506 161.048,378.691 158.663 L 379.027 154.325 377.511 154.568 C 375.758 154.848,374.999 153.664,373.943 149.000 C 373.428 146.726,373.343 146.607,372.302 146.728 C 371.656 146.804,370.724 146.515,370.040 146.028 C 369.400 145.573,368.814 145.221,368.738 145.246 C 368.662 145.272,368.283 145.376,367.895 145.477 M396.400 150.138 C 396.400 150.862,397.703 152.000,398.531 152.000 C 399.008 152.000,399.200 151.655,399.200 150.800 C 399.200 149.695,399.089 149.600,397.800 149.600 C 396.894 149.600,396.400 149.790,396.400 150.138 M399.693 150.800 C 399.693 151.570,399.775 151.885,399.876 151.500 C 399.976 151.115,399.976 150.485,399.876 150.100 C 399.775 149.715,399.693 150.030,399.693 150.800 M204.716 153.100 C 204.381 153.485,203.999 154.895,203.867 156.233 C 203.499 159.952,203.502 159.949,200.464 160.083 C 197.831 160.199,197.798 160.214,197.668 161.400 C 197.190 165.746,184.449 165.913,184.386 161.574 C 184.378 161.038,184.114 160.150,183.800 159.600 C 183.486 159.050,183.222 157.869,183.214 156.976 C 183.198 155.154,182.627 154.207,181.306 153.815 C 180.503 153.577,180.534 153.673,181.606 154.744 C 182.522 155.660,182.800 156.301,182.800 157.493 C 182.800 158.348,183.064 159.396,183.387 159.824 C 183.710 160.251,183.980 161.081,183.987 161.669 C 183.994 162.257,184.450 163.273,185.000 163.927 C 185.550 164.581,186.000 165.405,186.000 165.758 C 186.000 166.472,186.616 166.621,187.000 166.000 C 187.294 165.524,192.297 165.499,194.689 165.962 C 196.092 166.233,196.491 166.163,197.051 165.544 C 197.841 164.671,201.921 164.481,202.720 165.280 C 203.655 166.215,204.222 164.743,203.983 162.000 C 203.818 160.113,204.589 153.941,205.036 153.570 C 205.319 153.335,206.058 153.200,206.676 153.271 L 207.800 153.400 208.000 161.068 C 208.266 171.270,208.800 171.412,208.800 161.281 C 208.800 153.729,208.752 153.202,208.026 152.814 C 206.859 152.190,205.397 152.316,204.716 153.100 M178.100 153.476 C 178.485 153.576,179.115 153.576,179.500 153.476 C 179.885 153.375,179.570 153.293,178.800 153.293 C 178.030 153.293,177.715 153.375,178.100 153.476 M176.556 154.171 C 176.435 154.485,176.404 155.160,176.486 155.671 C 176.595 156.354,176.688 156.204,176.837 155.100 C 177.047 153.547,176.936 153.181,176.556 154.171 M154.284 167.049 C 153.038 168.296,154.217 169.248,157.158 169.372 L 159.472 169.470 159.221 168.235 C 158.972 167.009,155.224 166.109,154.284 167.049 M141.200 167.800 C 141.200 168.130,141.380 168.400,141.600 168.400 C 141.820 168.400,142.000 168.130,142.000 167.800 C 142.000 167.470,141.820 167.200,141.600 167.200 C 141.380 167.200,141.200 167.470,141.200 167.800 M293.396 168.547 C 294.894 169.643,291.375 170.550,289.507 169.550 C 288.667 169.101,288.667 169.099,289.633 168.564 C 290.891 167.867,292.456 167.860,293.396 168.547 M322.900 169.706 C 323.924 172.196,323.971 206.106,322.953 208.120 C 321.982 210.042,320.770 211.200,319.730 211.200 L 318.800 211.200 318.800 190.575 C 318.800 171.566,318.855 169.875,319.500 168.988 C 320.663 167.388,322.069 167.685,322.900 169.706 M160.700 169.882 C 161.195 169.978,162.005 169.978,162.500 169.882 C 162.995 169.787,162.590 169.709,161.600 169.709 C 160.610 169.709,160.205 169.787,160.700 169.882 M383.354 169.936 C 381.568 171.187,383.140 176.800,385.275 176.800 C 385.659 176.800,386.590 177.094,387.344 177.454 C 389.800 178.625,392.400 176.163,392.400 172.665 C 392.400 172.139,392.605 172.011,393.166 172.189 C 394.389 172.577,396.110 172.014,395.595 171.394 C 394.873 170.524,392.085 170.440,392.309 171.295 C 392.410 171.683,392.292 172.000,392.047 172.000 C 391.801 172.000,391.594 172.405,391.587 172.900 C 391.551 175.460,388.811 176.088,387.713 173.788 C 387.338 172.999,386.650 172.277,386.158 172.154 C 384.806 171.814,384.601 170.400,385.904 170.400 C 386.470 170.400,386.858 170.335,386.767 170.257 C 386.401 169.942,383.707 169.688,383.354 169.936 M164.367 171.046 C 165.008 171.929,165.371 173.207,165.617 175.446 C 166.328 181.907,167.346 184.946,169.530 187.130 C 170.297 187.897,170.400 188.437,170.402 191.700 C 170.406 196.728,170.844 202.000,171.259 202.000 C 171.447 202.000,171.604 201.415,171.610 200.700 C 171.615 199.985,171.975 198.337,172.410 197.038 C 172.844 195.739,173.200 193.804,173.200 192.738 C 173.200 191.333,173.420 190.580,174.000 190.000 C 174.924 189.076,175.003 188.304,174.302 187.074 C 174.015 186.572,173.706 183.988,173.574 181.000 L 173.345 175.800 173.273 181.081 C 173.225 184.511,173.370 186.735,173.684 187.425 C 174.123 188.389,174.067 188.561,173.084 189.277 C 172.488 189.711,172.000 190.337,172.000 190.667 C 172.000 192.124,170.978 190.747,170.776 189.018 C 170.648 187.922,170.272 186.896,169.899 186.623 C 168.911 185.900,166.997 180.416,166.402 176.600 C 165.873 173.207,165.240 171.359,164.334 170.564 C 163.478 169.812,163.478 169.819,164.367 171.046 M41.484 179.849 C 41.328 180.005,41.200 181.447,41.200 183.053 C 41.200 186.515,40.905 186.800,37.315 186.800 C 35.899 186.800,34.645 187.033,34.133 187.392 C 33.462 187.862,31.485 188.006,24.544 188.092 L 15.800 188.200 15.696 204.234 L 15.591 220.269 14.596 221.204 L 13.600 222.139 13.600 230.427 C 13.600 237.615,13.516 238.747,12.967 238.957 C 12.146 239.272,7.054 239.272,6.233 238.957 C 5.383 238.631,5.254 188.548,6.100 187.599 C 6.525 187.122,6.496 187.118,5.900 187.568 C 5.247 188.063,5.200 189.741,5.200 212.773 C 5.200 240.126,5.348 238.695,2.486 239.079 L 0.800 239.305 0.800 263.853 L 0.800 288.400 11.900 288.406 C 18.190 288.410,23.260 288.576,23.600 288.791 C 24.115 289.116,24.216 291.536,24.313 305.785 L 24.425 322.400 26.538 322.400 C 28.330 322.400,28.813 322.570,29.725 323.522 L 30.800 324.644 30.800 331.148 C 30.800 335.045,30.627 337.977,30.368 338.461 C 29.826 339.472,29.773 339.437,32.358 339.767 L 34.517 340.043 34.308 332.029 C 34.160 326.340,34.230 323.914,34.550 323.668 C 35.270 323.112,39.850 323.740,40.703 324.512 C 41.236 324.994,42.149 325.200,43.757 325.200 L 46.051 325.200 45.925 326.500 C 45.803 327.766,45.742 327.805,43.600 328.000 L 41.400 328.200 41.185 333.800 C 40.928 340.503,40.745 340.000,43.446 340.000 C 44.656 340.000,46.439 340.200,47.407 340.444 C 48.732 340.777,49.673 340.766,51.199 340.400 C 53.833 339.768,56.816 340.177,57.086 341.206 C 57.193 341.615,57.790 342.128,58.414 342.345 C 59.346 342.670,59.571 343.006,59.674 344.230 C 59.832 346.100,60.753 346.775,62.136 346.034 C 63.296 345.413,63.879 345.684,64.510 347.139 L 64.970 348.200 65.109 346.700 C 65.292 344.726,66.400 344.600,66.400 346.553 C 66.400 347.533,66.604 347.960,67.139 348.100 C 67.919 348.304,68.733 356.200,68.046 356.906 C 67.882 357.074,66.369 357.302,64.682 357.413 C 62.995 357.523,61.162 357.786,60.608 357.997 L 59.600 358.380 59.600 365.941 C 59.600 374.295,59.479 374.716,57.215 374.263 C 55.508 373.922,55.468 374.123,55.566 382.638 L 55.655 390.353 54.328 390.559 C 53.597 390.672,52.370 390.888,51.600 391.039 C 50.830 391.189,46.906 391.385,42.881 391.473 C 37.175 391.599,35.515 391.755,35.352 392.181 C 35.193 392.595,34.835 392.639,33.874 392.364 C 32.226 391.891,27.357 391.896,25.697 392.372 C 24.931 392.592,24.400 392.596,24.400 392.382 C 24.400 391.694,22.033 390.800,20.210 390.800 C 17.907 390.800,17.449 391.732,17.750 395.800 C 18.061 399.987,18.022 400.891,17.507 401.513 C 16.851 402.302,14.725 401.888,13.108 400.656 C 12.351 400.079,11.126 399.605,10.200 399.530 L 8.600 399.400 8.716 395.910 C 8.801 393.325,8.667 392.102,8.197 391.194 C 7.612 390.064,7.619 389.770,8.274 387.483 C 9.229 384.154,9.188 375.372,8.215 374.661 C 7.482 374.125,8.366 372.400,9.374 372.400 C 9.665 372.400,10.680 371.392,11.631 370.160 C 14.730 366.143,17.600 365.887,17.600 369.626 C 17.600 372.518,18.086 373.600,19.386 373.600 C 21.460 373.600,21.628 372.941,21.509 365.262 L 21.400 358.200 19.200 358.000 L 17.000 357.800 17.005 356.000 C 17.008 355.010,17.143 352.635,17.306 350.723 C 17.722 345.826,17.357 345.443,11.284 344.393 C 8.801 343.963,6.428 343.429,6.011 343.206 C 5.594 342.983,4.180 342.800,2.869 342.800 C 0.040 342.800,-0.023 342.893,0.057 346.933 C 0.106 349.406,0.153 349.580,0.400 348.200 C 0.558 347.320,0.712 346.915,0.743 347.300 C 0.781 347.763,1.136 348.000,1.792 348.000 C 3.658 348.000,3.641 351.374,1.773 351.842 C 1.074 352.018,0.782 352.385,0.737 353.143 C 0.703 353.725,0.551 353.300,0.400 352.200 C 0.249 351.100,0.097 361.020,0.063 374.244 C 0.028 387.468,0.114 399.123,0.254 400.144 L 0.509 402.000 2.954 402.007 C 5.288 402.014,5.457 402.083,6.633 403.507 C 9.518 407.000,8.593 408.361,3.100 408.707 L 0.000 408.903 0.000 462.443 L 0.000 515.983 8.100 516.092 L 16.200 516.200 16.322 518.554 C 16.430 520.648,16.626 521.125,18.104 522.877 C 20.199 525.362,20.289 525.183,20.841 517.407 C 21.293 511.039,21.194 511.254,23.831 510.956 C 27.079 510.589,27.152 510.739,27.467 518.400 L 27.737 525.000 28.458 523.400 C 28.861 522.506,29.184 520.840,29.190 519.624 C 29.199 517.557,29.742 513.773,30.339 511.600 C 31.065 508.957,39.409 509.005,45.700 511.688 L 47.600 512.499 47.600 536.622 L 47.600 560.746 46.400 561.600 C 45.212 562.446,45.200 562.492,45.200 566.227 L 45.200 570.000 50.367 570.000 C 53.209 570.000,55.819 569.891,56.167 569.757 C 57.255 569.340,57.101 546.299,55.999 544.490 C 55.237 543.242,55.200 542.467,55.200 527.879 C 55.200 510.760,55.194 510.800,57.799 510.800 C 58.544 510.800,59.264 510.620,59.400 510.400 C 59.536 510.180,60.132 509.994,60.724 509.987 L 61.800 509.973 60.856 509.187 C 60.336 508.754,59.661 508.400,59.356 508.400 C 58.891 508.400,58.800 505.938,58.800 493.418 L 58.800 478.436 60.100 478.194 C 60.815 478.061,62.570 478.008,64.000 478.076 L 66.600 478.200 66.892 485.600 C 67.871 510.429,67.933 509.404,65.419 510.037 C 63.104 510.620,63.212 509.749,63.205 527.846 C 63.200 542.882,63.169 543.532,62.400 544.509 C 61.640 545.475,61.600 546.132,61.600 557.513 L 61.600 569.500 62.850 569.750 C 64.923 570.165,69.892 570.047,69.200 569.600 C 68.742 569.304,68.897 569.211,69.853 569.206 L 71.107 569.200 71.267 565.220 C 71.449 560.681,71.388 560.806,73.567 560.514 L 75.200 560.295 75.200 558.196 C 75.200 556.819,75.406 555.927,75.800 555.600 C 76.642 554.901,76.547 554.484,75.500 554.282 C 75.005 554.187,76.715 554.084,79.300 554.054 C 83.930 554.001,84.000 553.986,84.000 553.075 C 84.000 552.566,84.540 551.632,85.200 551.000 C 87.367 548.924,86.975 546.651,84.300 545.784 C 83.145 545.410,81.615 544.550,80.900 543.873 L 79.600 542.643 79.600 510.545 C 79.600 489.277,79.463 478.363,79.194 478.196 C 77.770 477.316,77.102 474.644,77.284 470.552 C 77.505 465.593,77.970 464.720,81.133 463.331 C 82.380 462.784,83.867 461.893,84.439 461.352 C 85.010 460.811,86.360 460.150,87.439 459.884 C 90.221 459.197,91.137 457.282,91.633 451.116 C 91.832 448.632,92.177 445.151,92.398 443.379 C 92.619 441.608,92.800 437.168,92.800 433.512 C 92.800 426.361,92.914 425.600,93.981 425.600 C 95.742 425.600,96.000 424.535,96.000 417.274 L 96.000 410.411 97.449 409.805 C 102.718 407.604,102.598 407.138,102.612 429.870 C 102.625 449.668,102.912 457.709,103.675 459.700 L 104.097 460.800 118.979 460.800 L 133.861 460.800 134.768 461.766 C 135.671 462.727,135.676 462.802,135.852 477.819 C 135.952 486.364,136.196 493.219,136.414 493.627 C 136.626 494.023,136.800 495.309,136.800 496.485 C 136.800 499.637,137.448 500.335,140.509 500.481 L 143.000 500.600 143.126 501.907 C 143.212 502.800,143.624 503.489,144.426 504.082 C 147.595 506.425,145.734 509.200,140.994 509.200 C 139.589 509.200,137.486 509.408,136.320 509.662 L 134.200 510.125 137.000 510.793 L 139.800 511.461 139.800 519.498 C 139.800 528.135,139.800 528.133,138.000 528.133 C 136.822 528.133,136.800 528.171,136.813 530.167 C 136.824 532.042,136.871 532.139,137.413 531.424 C 137.736 530.996,138.000 530.843,138.000 531.083 C 138.000 531.322,139.167 532.752,140.594 534.259 C 142.325 536.087,143.191 537.327,143.194 537.981 C 143.198 538.527,143.741 539.521,144.422 540.223 C 146.272 542.132,145.804 543.351,142.861 544.290 C 140.331 545.098,139.856 546.744,141.614 548.614 C 142.046 549.075,142.400 549.980,142.400 550.626 C 142.400 551.411,142.997 552.560,144.200 554.093 L 146.000 556.385 146.000 563.193 L 146.000 570.000 152.600 570.000 L 159.200 570.000 159.201 558.300 C 159.203 545.327,159.229 545.185,161.976 543.154 L 163.200 542.250 163.200 527.325 L 163.200 512.400 165.749 512.400 L 168.298 512.400 168.589 519.601 C 168.779 524.293,169.041 526.905,169.340 527.097 C 169.593 527.259,173.580 527.483,178.200 527.596 L 186.600 527.800 187.390 529.500 L 188.179 531.200 190.415 531.200 C 192.377 531.200,192.791 531.053,193.800 530.000 C 194.479 529.292,195.370 528.795,195.975 528.787 C 196.539 528.780,197.331 528.524,197.735 528.217 C 198.341 527.759,200.430 527.701,209.537 527.890 C 222.958 528.169,221.549 529.134,221.691 519.570 L 221.800 512.200 229.235 512.000 L 236.669 511.800 238.135 510.512 L 239.600 509.224 239.600 493.559 L 239.600 477.894 238.200 476.574 L 236.800 475.254 236.800 469.877 C 236.800 462.848,236.972 462.000,238.401 462.000 C 239.007 462.000,239.726 461.730,240.000 461.400 C 240.428 460.884,242.825 460.800,257.049 460.800 L 273.600 460.800 273.600 463.957 C 273.600 467.544,273.650 467.600,276.847 467.600 C 278.460 467.600,278.993 467.413,279.714 466.597 C 280.201 466.046,281.635 464.544,282.900 463.260 C 285.410 460.713,285.602 460.244,284.400 459.600 C 283.092 458.900,283.369 457.185,285.000 455.883 C 286.049 455.046,286.400 454.460,286.400 453.548 C 286.400 452.569,286.629 452.244,287.574 451.887 C 289.018 451.342,289.216 450.760,289.542 446.104 C 289.779 442.702,289.744 442.427,289.100 442.631 C 288.441 442.841,288.400 441.879,288.400 426.201 L 288.400 409.548 289.600 408.539 L 290.800 407.529 290.800 379.564 C 290.800 352.902,290.766 351.600,290.080 351.600 C 288.640 351.600,288.400 350.790,288.400 345.920 L 288.400 341.200 287.100 341.176 C 286.385 341.163,284.990 340.756,284.000 340.271 L 282.200 339.390 282.091 332.095 L 281.982 324.800 279.944 324.800 C 277.987 324.800,277.914 324.761,278.098 323.800 C 278.321 322.634,277.241 322.387,276.392 323.410 C 275.781 324.146,275.487 323.961,275.833 323.057 C 276.046 322.503,276.770 322.400,280.443 322.400 C 284.939 322.400,285.363 322.233,284.000 321.000 C 282.626 319.756,284.005 317.600,286.174 317.600 C 288.323 317.600,288.825 314.487,286.800 313.722 C 286.026 313.430,285.600 312.990,285.600 312.481 C 285.600 311.527,284.604 311.213,281.560 311.205 C 280.329 311.202,277.955 311.085,276.287 310.944 L 273.253 310.687 272.854 309.244 C 272.564 308.191,272.476 310.235,272.528 316.800 C 272.568 321.750,272.388 328.654,272.128 332.141 C 271.640 338.706,271.702 339.600,272.643 339.600 C 273.280 339.600,273.499 373.368,272.864 373.761 C 272.679 373.875,272.400 379.240,272.245 385.684 C 271.977 396.793,271.325 405.358,270.630 406.900 C 270.338 407.548,269.226 407.600,255.583 407.600 C 238.643 407.600,238.806 407.626,238.786 404.910 C 238.778 403.859,238.514 402.550,238.200 402.000 C 237.886 401.450,237.622 400.443,237.614 399.762 C 237.594 397.965,236.581 397.266,233.794 397.123 L 231.400 397.000 231.279 394.656 C 231.174 392.628,230.999 392.179,229.979 391.321 L 228.800 390.329 228.800 382.764 L 228.800 375.200 225.458 375.200 C 222.466 375.200,222.006 375.098,221.058 374.219 L 220.000 373.238 220.000 362.468 C 220.000 352.993,220.079 351.633,220.653 351.156 C 221.244 350.665,221.216 350.589,220.353 350.347 C 219.829 350.200,221.515 350.062,224.100 350.040 L 228.800 350.000 228.800 348.812 C 228.800 347.956,229.135 347.376,230.000 346.737 C 231.011 345.990,231.200 345.577,231.200 344.125 L 231.200 342.400 233.705 342.400 C 236.321 342.400,241.765 339.661,239.900 339.283 C 238.999 339.101,238.801 324.000,239.700 324.000 C 240.087 324.001,240.174 322.177,240.083 315.900 C 239.925 305.060,239.483 306.000,244.738 306.000 C 250.133 306.000,250.800 305.541,250.800 301.829 L 250.800 299.510 255.300 295.055 C 257.775 292.605,260.340 290.389,261.000 290.130 C 262.068 289.713,261.817 289.658,258.724 289.630 C 256.409 289.610,255.141 289.433,254.928 289.100 C 254.613 288.608,254.683 256.513,255.000 256.000 C 255.151 255.756,258.366 254.952,260.200 254.700 C 260.962 254.595,261.005 254.244,261.109 247.295 L 261.218 240.000 259.809 240.000 C 259.034 240.000,258.400 239.820,258.400 239.600 C 258.400 239.380,258.720 239.200,259.111 239.200 C 259.502 239.200,260.230 238.914,260.728 238.565 L 261.634 237.931 260.162 237.181 C 259.040 236.609,258.504 236.530,257.904 236.851 C 257.472 237.083,256.787 237.185,256.382 237.079 C 255.963 236.970,255.345 237.219,254.947 237.659 C 254.440 238.219,253.945 238.364,253.140 238.187 C 252.530 238.053,251.737 238.107,251.379 238.308 C 250.707 238.684,251.705 239.270,253.800 239.731 C 254.240 239.828,253.906 239.928,253.058 239.954 L 251.516 240.000 251.635 260.100 C 251.746 278.763,251.703 280.322,251.030 281.910 C 250.511 283.133,250.354 284.287,250.475 285.966 L 250.645 288.313 248.622 288.576 C 247.510 288.720,245.070 288.996,243.200 289.189 C 241.330 289.382,238.935 289.706,237.878 289.909 C 235.644 290.340,209.116 290.042,208.365 289.578 C 207.764 289.207,207.756 288.147,208.306 281.600 C 208.744 276.383,208.491 275.200,206.938 275.200 C 205.894 275.200,206.415 274.097,207.568 273.866 C 208.261 273.728,208.841 273.301,208.995 272.816 C 209.218 272.114,209.475 272.035,210.821 272.250 C 211.940 272.429,212.675 272.312,213.394 271.841 L 214.400 271.182 214.377 255.891 C 214.350 237.900,214.316 237.581,212.394 236.923 C 210.351 236.223,206.609 236.266,206.004 236.996 C 205.732 237.323,205.369 237.505,205.198 237.399 C 204.117 236.731,203.460 239.547,202.962 246.984 C 202.361 255.956,202.653 254.633,201.157 255.155 C 199.968 255.569,199.925 255.661,200.157 257.294 C 200.291 258.232,200.512 261.610,200.650 264.800 C 200.907 270.748,201.042 271.182,202.643 271.194 C 203.380 271.199,203.518 271.509,203.743 273.659 C 204.101 277.083,204.066 278.088,203.600 277.800 C 203.380 277.664,203.200 276.663,203.200 275.576 C 203.200 272.982,201.980 271.572,200.293 272.219 C 199.830 272.397,199.801 272.737,200.142 274.013 C 200.529 275.463,200.477 275.676,199.481 276.716 C 198.886 277.336,198.400 278.057,198.400 278.318 C 198.400 278.580,198.040 279.018,197.600 279.293 C 197.103 279.603,196.800 280.226,196.800 280.937 C 196.800 282.076,196.808 282.072,198.798 280.041 C 201.809 276.965,203.817 277.532,203.568 281.387 C 203.525 282.054,203.622 282.911,203.784 283.292 C 203.947 283.673,204.141 286.193,204.217 288.892 C 204.292 291.591,204.474 296.648,204.620 300.128 C 204.874 306.145,204.847 306.499,204.070 307.328 C 203.257 308.195,203.257 308.213,204.013 310.400 C 204.881 312.911,205.233 338.400,204.400 338.400 C 204.180 338.400,203.999 338.625,203.998 338.900 C 203.991 340.358,203.107 342.400,202.481 342.403 C 202.107 342.404,201.371 343.035,200.847 343.805 C 200.270 344.653,199.402 345.332,198.647 345.528 C 197.705 345.772,197.338 346.138,197.147 347.025 C 196.916 348.102,196.891 348.068,196.847 346.611 L 196.800 345.022 195.940 345.882 C 195.468 346.355,194.613 347.610,194.040 348.671 C 193.139 350.342,192.813 350.617,191.600 350.729 C 190.830 350.799,190.029 351.024,189.820 351.229 C 188.099 352.911,184.042 351.321,182.605 348.400 C 182.226 347.630,180.909 345.969,179.679 344.709 L 177.443 342.418 178.122 340.996 C 178.985 339.186,178.987 339.200,177.803 339.200 C 177.240 339.200,176.590 339.548,176.307 340.000 C 175.683 340.999,175.402 340.998,173.994 339.996 L 172.865 339.192 172.409 340.574 C 172.156 341.339,171.740 341.882,171.476 341.790 C 169.455 341.081,168.975 346.097,170.726 349.636 C 171.357 350.911,171.457 351.525,171.160 352.306 C 170.826 353.184,170.941 353.460,172.014 354.360 C 174.008 356.033,173.675 359.403,171.400 360.575 C 169.286 361.665,168.442 364.020,168.418 368.900 L 168.400 372.400 166.200 372.400 L 164.000 372.400 163.986 365.300 C 163.975 359.899,163.835 357.961,163.400 357.200 C 162.965 356.439,162.825 354.495,162.814 349.057 L 162.800 341.913 161.783 342.169 C 160.786 342.419,160.778 342.405,161.406 341.446 C 162.006 340.532,161.998 340.453,161.287 340.228 C 158.863 339.458,157.493 334.344,158.667 330.445 C 158.960 329.470,159.200 327.790,159.200 326.710 C 159.200 325.631,159.363 324.444,159.561 324.072 C 159.995 323.261,158.870 317.110,158.347 317.433 C 158.156 317.551,158.000 320.086,158.000 323.066 C 158.000 330.802,156.208 339.200,154.557 339.200 C 153.020 339.200,152.800 338.422,152.800 332.986 C 152.800 324.836,150.629 325.525,150.147 333.829 C 149.833 339.238,149.592 339.600,146.295 339.600 C 143.985 339.600,143.920 339.629,144.153 340.554 C 144.304 341.158,144.173 341.690,143.796 342.003 C 143.287 342.425,143.200 344.691,143.200 357.457 L 143.200 372.415 147.400 374.382 L 151.600 376.348 151.600 391.550 C 151.600 407.206,151.645 407.632,153.225 406.787 C 153.891 406.430,154.213 406.468,154.765 406.968 C 155.199 407.361,156.206 407.602,157.431 407.606 C 158.514 407.609,160.120 407.871,161.000 408.188 C 161.880 408.505,163.885 408.773,165.456 408.782 C 170.343 408.812,169.989 407.465,170.023 426.154 C 170.043 436.946,169.914 442.246,169.626 442.534 C 169.366 442.794,169.200 445.082,169.200 448.391 C 169.200 454.779,168.887 455.600,166.452 455.600 C 165.305 455.600,164.678 455.884,163.800 456.800 C 163.162 457.466,162.233 458.000,161.711 458.000 C 161.195 458.000,160.304 458.306,159.733 458.681 C 158.115 459.741,142.027 459.694,139.999 458.624 C 136.828 456.951,136.800 456.944,136.800 457.800 C 136.800 459.251,135.308 460.000,132.414 460.000 C 128.869 460.000,128.786 459.853,128.847 453.726 C 128.874 451.068,129.012 449.525,129.164 450.200 C 129.432 451.393,129.436 451.395,129.931 450.500 C 130.328 449.780,130.778 449.600,132.171 449.600 C 134.185 449.600,134.400 449.287,134.400 446.367 L 134.400 444.400 132.500 444.394 C 131.455 444.391,130.335 444.220,130.011 444.015 C 129.622 443.769,129.317 443.805,129.117 444.121 C 128.930 444.414,128.810 444.212,128.806 443.600 C 128.802 442.939,128.320 442.217,127.383 441.469 L 125.966 440.338 126.094 433.269 C 126.169 429.158,126.418 425.698,126.689 425.000 C 126.946 424.340,127.449 422.270,127.807 420.400 C 128.165 418.530,128.753 415.933,129.114 414.628 C 129.612 412.828,129.653 412.218,129.285 412.095 C 129.018 412.006,128.800 411.678,128.800 411.367 C 128.800 410.590,126.250 410.617,125.600 411.400 C 125.326 411.730,124.768 412.000,124.359 412.000 C 123.874 412.000,123.530 412.382,123.370 413.100 C 122.796 415.681,122.809 415.665,121.465 415.377 C 119.756 415.012,119.822 415.151,119.657 411.516 L 119.511 408.296 120.855 408.563 C 121.595 408.710,123.391 408.812,124.847 408.791 C 126.776 408.762,127.667 408.924,128.131 409.389 C 128.665 409.922,128.904 409.943,129.597 409.513 C 130.537 408.930,131.554 406.088,130.973 405.669 C 129.998 404.966,129.518 403.848,129.186 401.506 C 128.988 400.104,128.370 397.927,127.813 396.667 C 126.477 393.647,126.514 392.589,128.000 391.339 L 129.200 390.329 129.200 382.776 L 129.200 375.224 128.000 374.337 L 126.800 373.450 126.800 365.948 C 126.800 357.361,126.523 357.937,130.766 357.707 C 132.435 357.617,134.295 357.354,134.900 357.123 L 136.000 356.703 135.987 348.651 C 135.977 341.870,135.891 340.710,135.443 341.300 C 134.765 342.193,131.137 342.242,128.000 341.400 C 126.790 341.075,124.582 340.807,123.094 340.805 C 119.856 340.799,118.804 339.702,118.801 336.329 C 118.799 333.692,119.428 333.200,122.796 333.200 C 126.293 333.200,126.800 332.992,126.800 331.557 L 126.800 330.400 123.826 330.400 C 122.190 330.400,120.390 330.224,119.826 330.010 L 118.800 329.620 118.800 318.634 C 118.800 311.557,118.654 307.557,118.390 307.394 C 118.164 307.254,116.949 307.047,115.690 306.932 C 114.430 306.818,111.645 306.163,109.500 305.477 L 105.600 304.230 105.600 301.545 C 105.600 299.014,105.670 298.808,106.834 297.930 C 111.755 294.221,113.217 292.356,113.648 289.242 C 113.896 287.450,114.229 286.797,115.611 285.389 C 117.376 283.591,118.398 280.189,118.400 276.114 C 118.400 273.715,120.583 272.966,130.351 272.012 C 136.450 271.416,137.199 271.009,137.202 268.290 C 137.208 262.987,139.044 261.527,141.088 265.198 C 141.516 265.967,142.508 266.934,143.291 267.346 C 144.074 267.759,144.917 268.538,145.163 269.078 C 145.409 269.617,146.182 270.771,146.881 271.640 C 148.038 273.081,148.174 273.549,148.403 276.911 C 148.553 279.115,148.920 281.106,149.316 281.858 C 149.679 282.550,150.084 283.900,150.214 284.858 C 150.620 287.847,150.798 288.400,151.359 288.400 C 152.295 288.400,152.896 289.529,153.222 291.905 L 153.538 294.200 153.360 291.800 C 153.262 290.480,153.098 287.420,152.995 285.000 L 152.807 280.600 153.730 283.203 C 154.237 284.635,155.147 286.885,155.751 288.203 C 157.299 291.581,158.000 295.785,158.000 301.700 C 158.000 304.505,158.135 306.794,158.300 306.787 C 158.876 306.763,160.011 304.854,159.601 304.600 C 159.380 304.464,159.198 302.698,159.195 300.676 C 159.193 298.654,158.950 296.098,158.657 294.996 C 158.189 293.241,158.211 292.619,158.829 289.996 C 159.719 286.218,159.880 281.928,159.219 279.600 C 158.907 278.502,158.793 276.765,158.927 275.148 L 159.145 272.497 157.617 271.808 C 156.727 271.407,155.735 271.230,155.244 271.386 C 154.389 271.657,154.052 271.062,154.800 270.600 C 155.336 270.269,155.323 259.378,154.786 258.374 C 154.471 257.786,153.942 257.600,152.586 257.600 L 150.800 257.600 150.800 255.814 C 150.800 253.321,150.417 253.200,142.503 253.200 C 133.481 253.200,134.235 252.402,134.058 262.133 L 133.916 269.930 123.743 270.065 C 112.419 270.215,112.817 270.108,112.806 273.015 C 112.801 274.420,112.540 274.886,110.800 276.600 C 108.911 278.461,108.800 278.685,108.800 280.642 C 108.800 282.885,108.502 283.200,106.381 283.200 C 105.067 283.200,104.400 284.116,104.400 285.921 C 104.400 286.994,104.258 287.114,102.752 287.316 C 100.175 287.661,100.212 287.516,100.074 297.765 C 99.921 309.074,99.607 308.400,105.029 308.400 L 108.800 308.400 108.800 323.600 L 108.800 338.800 89.900 338.796 C 79.505 338.793,70.325 338.680,69.500 338.543 L 68.000 338.295 68.000 334.023 C 68.000 327.804,68.285 328.000,59.230 328.000 L 52.091 328.000 51.914 326.798 C 51.668 325.122,51.245 325.200,60.587 325.200 C 66.628 325.200,69.177 325.063,69.520 324.720 C 69.861 324.379,70.000 321.951,70.000 316.342 L 70.000 308.443 82.233 308.322 C 93.804 308.207,94.496 308.158,95.033 307.424 C 95.500 306.783,95.600 303.788,95.600 290.359 L 95.600 274.071 93.874 273.236 C 92.730 272.682,91.347 272.397,89.774 272.390 C 88.468 272.385,86.590 272.177,85.600 271.928 C 84.342 271.612,76.647 271.501,60.055 271.559 C 38.157 271.636,36.251 271.589,35.555 270.959 C 34.697 270.183,34.366 241.193,35.190 239.026 C 35.644 237.831,35.479 237.796,33.200 238.600 C 31.339 239.257,18.651 239.474,17.692 238.865 C 17.301 238.617,17.209 236.482,17.292 229.572 L 17.400 220.600 24.200 220.470 C 28.060 220.397,32.430 220.545,34.308 220.813 C 38.181 221.366,38.793 221.099,38.813 218.851 C 38.820 218.053,39.090 217.051,39.413 216.624 C 39.736 216.196,40.000 215.454,40.000 214.973 C 40.000 214.492,40.270 213.874,40.600 213.600 C 40.930 213.326,41.200 212.764,41.200 212.351 C 41.200 211.894,41.482 211.600,41.920 211.600 C 42.842 211.600,43.600 210.842,43.600 209.920 C 43.600 209.524,43.841 209.200,44.136 209.200 C 44.430 209.200,44.877 208.750,45.127 208.200 C 45.791 206.743,47.200 206.845,47.200 208.350 C 47.200 209.316,47.398 209.540,48.441 209.748 C 50.200 210.100,50.400 209.842,50.400 207.230 C 50.400 205.514,50.609 204.643,51.200 203.891 C 51.762 203.176,52.000 202.268,52.000 200.837 L 52.000 198.800 53.780 198.800 C 54.831 198.800,55.691 198.583,55.880 198.269 C 56.265 197.632,59.611 196.396,61.712 196.115 C 62.869 195.961,63.365 195.642,63.822 194.757 C 64.308 193.818,64.682 193.600,65.810 193.600 L 67.200 193.600 67.214 190.700 C 67.223 188.944,67.454 187.406,67.800 186.800 C 68.114 186.250,68.378 184.753,68.386 183.474 C 68.394 182.194,68.609 180.754,68.865 180.274 C 69.286 179.484,69.267 179.453,68.665 179.949 C 68.173 180.355,68.000 181.155,68.000 183.030 C 68.000 186.174,67.412 187.600,66.116 187.600 C 65.435 187.600,64.017 188.761,61.173 191.647 C 55.470 197.434,56.006 197.239,45.100 197.495 L 36.000 197.709 36.000 199.836 L 36.000 201.964 37.500 202.204 C 40.540 202.691,42.217 205.127,40.803 207.000 C 40.637 207.220,40.371 208.294,40.213 209.388 C 40.054 210.481,39.489 212.236,38.956 213.288 L 37.987 215.200 27.607 215.200 C 15.028 215.200,16.400 216.547,16.400 204.200 C 16.400 192.018,15.499 193.200,24.781 193.200 C 34.023 193.200,33.600 193.336,33.600 190.365 C 33.600 187.702,33.470 187.793,37.800 187.419 C 46.996 186.623,46.486 186.903,46.318 182.737 L 46.200 179.800 43.984 179.683 C 42.765 179.618,41.640 179.693,41.484 179.849 M108.686 180.200 C 109.044 181.122,109.006 186.006,108.596 191.844 C 108.256 196.674,108.571 197.600,110.552 197.600 C 112.808 197.600,113.101 196.831,112.686 192.000 C 112.198 186.323,112.135 181.570,112.535 180.600 C 112.843 179.854,112.826 179.848,112.289 180.500 C 111.442 181.527,109.433 181.410,108.849 180.300 C 108.552 179.737,108.492 179.699,108.686 180.200 M375.467 182.267 C 375.061 182.672,375.148 186.000,375.565 186.000 C 375.766 186.000,376.051 185.280,376.200 184.400 C 376.349 183.520,376.645 182.800,376.859 182.800 C 377.072 182.800,377.136 182.620,377.000 182.400 C 376.718 181.944,375.863 181.870,375.467 182.267 M74.984 188.026 C 74.223 189.257,75.213 191.200,76.600 191.200 C 77.837 191.200,77.988 191.072,78.222 189.826 C 78.558 188.034,78.242 187.600,76.600 187.600 C 75.856 187.600,75.129 187.792,74.984 188.026 M126.267 188.267 C 125.933 188.600,125.913 196.107,126.243 196.967 C 126.570 197.820,128.516 197.778,129.307 196.900 C 129.830 196.320,129.899 195.495,129.711 192.100 L 129.484 188.000 128.009 188.000 C 127.197 188.000,126.413 188.120,126.267 188.267 M392.643 199.664 C 392.538 200.179,392.349 201.218,392.222 201.974 C 391.973 203.454,390.992 204.800,390.162 204.800 C 389.260 204.800,389.148 205.531,389.744 207.537 C 390.761 210.960,390.930 214.335,390.234 217.325 C 389.460 220.651,389.453 220.400,390.320 220.400 C 390.716 220.400,391.296 220.625,391.609 220.900 C 391.923 221.175,391.835 220.988,391.414 220.485 C 390.667 219.591,390.665 219.449,391.353 214.285 C 392.555 205.263,392.349 205.980,393.917 205.326 C 394.687 205.004,395.543 204.514,395.820 204.237 C 396.110 203.948,397.077 203.777,398.100 203.834 C 399.784 203.929,399.867 203.884,399.692 202.967 C 399.587 202.420,399.223 201.996,398.853 201.991 C 398.028 201.980,396.592 200.818,396.271 199.900 C 396.127 199.491,395.618 199.200,395.045 199.200 C 394.506 199.200,393.788 199.094,393.449 198.964 C 393.026 198.801,392.774 199.020,392.643 199.664 M126.243 202.633 C 126.109 202.981,126.000 204.586,126.000 206.200 C 126.000 209.962,126.183 210.401,127.743 210.394 C 129.823 210.384,130.144 209.973,129.570 208.056 C 129.173 206.734,129.175 206.062,129.576 204.723 C 130.256 202.454,127.077 200.460,126.243 202.633 M126.245 213.549 C 125.918 216.012,126.122 216.520,127.680 217.108 C 128.996 217.604,130.000 217.222,130.000 216.224 C 130.000 212.032,126.753 209.720,126.245 213.549 M16.606 221.700 C 16.727 222.195,16.776 226.110,16.713 230.400 L 16.600 238.200 15.600 238.200 L 14.600 238.200 14.491 230.241 C 14.396 223.257,14.465 222.191,15.053 221.541 C 15.937 220.565,16.337 220.606,16.606 221.700 M384.422 222.378 C 383.489 223.311,383.089 225.179,383.303 227.609 C 383.439 229.162,383.470 229.073,383.530 226.940 C 383.597 224.572,383.654 224.447,385.023 223.640 C 386.843 222.566,386.702 222.493,387.053 224.700 L 387.355 226.600 387.685 224.428 C 387.930 222.813,387.884 222.173,387.507 221.934 C 386.623 221.373,385.227 221.573,384.422 222.378 M392.120 223.600 C 392.120 224.810,392.195 225.305,392.287 224.700 C 392.378 224.095,392.378 223.105,392.287 222.500 C 392.195 221.895,392.120 222.390,392.120 223.600 M52.000 229.600 L 52.000 237.200 53.400 237.200 L 54.800 237.200 54.800 229.600 L 54.800 222.000 53.400 222.000 L 52.000 222.000 52.000 229.600 M322.400 222.800 C 322.400 223.244,322.133 223.600,321.800 223.600 C 321.470 223.600,321.200 223.525,321.200 223.433 C 321.200 223.341,321.091 222.981,320.957 222.633 C 320.783 222.179,320.953 222.000,321.557 222.000 C 322.133 222.000,322.400 222.253,322.400 222.800 M153.857 228.195 C 153.732 228.522,153.508 229.737,153.361 230.895 C 153.030 233.501,152.651 234.000,151.000 234.000 C 149.348 234.000,148.651 234.812,148.988 236.346 C 149.358 238.031,148.991 238.148,141.875 238.616 C 134.377 239.109,134.786 238.764,135.059 244.380 C 135.392 251.222,136.384 252.481,140.578 251.389 C 141.822 251.065,143.738 250.800,144.838 250.800 C 147.624 250.800,148.800 249.624,148.800 246.838 C 148.800 241.655,150.428 238.783,153.344 238.822 L 155.000 238.844 153.200 239.533 L 151.400 240.223 151.400 245.978 C 151.400 250.227,151.531 251.777,151.900 251.900 C 152.187 251.996,152.400 251.732,152.400 251.282 C 152.400 250.851,152.670 249.851,153.000 249.062 C 153.330 248.272,153.600 247.086,153.600 246.427 C 153.600 244.300,156.639 243.571,157.843 245.410 C 158.316 246.131,158.728 246.350,159.282 246.174 C 160.465 245.798,161.917 246.309,162.200 247.200 C 162.339 247.639,162.891 248.108,163.427 248.242 C 164.015 248.390,164.400 248.777,164.400 249.221 C 164.400 249.624,164.748 250.198,165.173 250.496 C 165.696 250.862,165.987 251.614,166.073 252.819 C 166.186 254.397,166.318 254.614,167.234 254.720 C 168.733 254.894,169.005 254.309,169.798 249.200 C 171.221 240.048,171.040 238.025,168.800 238.025 C 168.340 238.025,168.377 238.159,168.957 238.599 C 169.898 239.311,170.161 241.867,169.720 246.000 L 169.400 249.000 167.699 249.123 C 166.203 249.231,165.952 249.127,165.622 248.257 C 165.415 247.713,164.885 247.154,164.443 247.014 C 164.002 246.874,163.533 246.417,163.400 246.000 C 163.267 245.583,162.836 245.138,162.440 245.013 C 162.045 244.887,161.518 244.338,161.269 243.792 C 161.021 243.247,160.539 242.800,160.199 242.800 C 159.859 242.800,159.415 242.365,159.213 241.834 C 159.011 241.303,158.492 240.756,158.060 240.619 C 155.755 239.887,157.180 238.429,160.274 238.353 C 162.237 238.304,165.173 237.733,163.900 237.647 C 163.086 237.592,163.012 237.090,163.665 236.045 C 164.351 234.946,159.008 229.600,157.223 229.600 C 156.380 229.600,155.822 229.300,155.363 228.600 C 154.615 227.457,154.185 227.342,153.857 228.195 M85.804 234.393 C 85.671 234.609,85.670 235.374,85.803 236.093 C 86.330 238.942,86.133 238.994,74.732 239.047 L 64.600 239.094 64.491 247.017 C 64.422 252.036,64.221 255.133,63.942 255.469 C 63.384 256.143,39.616 256.251,38.374 255.586 C 37.651 255.199,37.600 254.674,37.594 247.686 C 37.588 239.923,37.369 238.630,36.226 239.579 C 35.662 240.046,35.602 241.830,35.695 255.353 L 35.800 270.600 59.800 270.671 C 73.672 270.712,86.163 270.935,89.400 271.201 C 98.787 271.972,100.576 272.036,101.200 271.625 C 101.892 271.170,102.512 239.446,101.848 238.496 C 101.654 238.219,101.590 237.291,101.705 236.433 C 101.823 235.551,101.724 234.684,101.477 234.437 C 100.912 233.872,86.152 233.831,85.804 234.393 M288.600 235.600 C 288.464 235.820,287.906 236.000,287.360 236.000 C 284.297 236.000,282.294 238.152,281.618 242.170 C 281.362 243.694,280.920 245.495,280.637 246.173 C 280.332 246.903,280.251 247.732,280.439 248.203 C 280.613 248.641,281.059 250.080,281.431 251.400 C 281.803 252.720,282.175 253.612,282.259 253.383 C 282.343 253.153,282.851 251.263,283.388 249.183 C 285.399 241.394,285.813 240.026,286.300 239.539 C 286.575 239.265,286.800 238.806,286.800 238.520 C 286.800 238.174,287.369 238.002,288.500 238.006 C 289.628 238.010,290.014 238.130,289.647 238.362 C 288.763 238.922,290.550 239.311,292.517 238.987 C 295.600 238.479,296.133 237.039,293.659 235.900 C 292.003 235.138,288.996 234.960,288.600 235.600 M292.800 236.800 C 292.800 237.020,292.271 237.200,291.624 237.200 C 290.977 237.200,290.336 237.020,290.200 236.800 C 290.053 236.562,290.529 236.400,291.376 236.400 C 292.159 236.400,292.800 236.580,292.800 236.800 M382.000 237.561 C 382.000 238.340,379.651 239.200,377.520 239.200 L 375.400 239.201 375.294 242.977 C 375.236 245.054,374.993 247.709,374.754 248.877 C 374.515 250.045,374.256 253.669,374.177 256.931 C 374.003 264.151,373.931 264.446,372.410 264.142 C 371.429 263.946,371.174 264.090,370.622 265.157 C 370.067 266.231,369.764 266.400,368.390 266.400 C 366.894 266.400,366.800 266.470,366.800 267.586 C 366.800 268.239,366.498 269.407,366.128 270.181 C 365.139 272.256,365.094 272.251,372.138 270.896 C 373.713 270.593,374.774 268.877,374.795 266.600 C 374.816 264.409,376.237 263.200,378.794 263.200 C 380.747 263.200,381.332 263.042,381.900 262.362 C 382.285 261.901,383.621 260.506,384.869 259.262 C 386.817 257.320,387.164 256.746,387.324 255.200 C 387.616 252.387,388.824 248.476,389.479 248.225 C 390.327 247.900,390.800 248.307,390.800 249.362 C 390.800 253.150,395.715 251.804,395.937 247.955 C 396.076 245.556,395.760 245.221,393.347 245.205 C 392.335 245.199,392.013 244.269,392.005 241.329 C 391.998 238.659,389.408 236.239,388.655 238.200 C 388.284 239.167,384.372 239.007,383.054 237.971 C 382.474 237.515,382.000 237.330,382.000 237.561 M338.800 238.000 C 338.470 238.213,336.533 238.391,334.496 238.394 C 332.458 238.397,329.059 238.679,326.941 239.020 C 324.823 239.360,322.597 239.531,321.996 239.399 C 320.493 239.069,320.371 239.510,319.994 246.600 C 319.582 254.365,319.466 254.659,316.659 255.010 C 313.393 255.418,311.299 254.950,310.630 253.663 C 310.019 252.486,307.739 250.638,307.474 251.104 C 307.381 251.267,307.087 252.075,306.822 252.900 C 306.114 255.093,302.358 255.241,301.742 253.100 C 301.408 251.938,301.211 251.799,299.884 251.787 C 298.164 251.772,298.134 251.899,299.200 254.704 C 300.146 257.192,300.216 260.161,299.400 263.200 C 298.558 266.337,298.607 270.113,299.500 270.869 C 303.561 274.311,306.625 273.536,306.502 269.099 C 306.399 265.411,308.584 263.815,311.584 265.386 C 313.138 266.200,317.155 266.647,319.523 266.270 C 322.650 265.772,322.860 265.944,322.719 268.895 L 322.600 271.400 319.903 271.518 C 316.557 271.665,316.740 271.063,316.887 281.400 L 317.000 289.400 319.736 289.729 C 323.414 290.172,324.000 289.680,324.000 286.152 C 324.000 284.155,324.146 283.551,324.700 283.260 C 325.284 282.952,336.966 282.136,339.329 282.238 C 339.986 282.267,340.041 281.986,339.878 279.435 C 339.544 274.204,339.207 273.616,336.539 273.606 C 330.006 273.582,325.134 271.500,324.732 268.559 C 324.584 267.482,324.293 265.340,324.086 263.800 C 323.878 262.260,323.477 259.974,323.195 258.720 C 322.756 256.770,322.768 256.307,323.278 255.520 C 323.605 255.014,323.998 254.093,324.151 253.473 C 324.480 252.139,325.594 252.137,326.180 253.468 C 326.670 254.581,327.866 254.800,333.442 254.800 C 340.784 254.800,341.193 255.104,342.194 261.300 C 342.327 262.125,342.662 262.800,342.937 262.800 C 344.408 262.800,346.400 265.799,346.403 268.017 C 346.406 270.207,348.983 272.923,349.801 271.599 C 349.936 271.379,350.577 271.200,351.224 271.200 C 352.392 271.200,352.400 271.183,352.400 268.855 C 352.400 267.565,352.567 265.630,352.770 264.555 C 353.563 260.368,353.445 255.592,352.532 254.862 C 351.867 254.331,351.688 253.695,351.629 251.651 C 351.583 250.069,351.305 248.721,350.896 248.097 C 350.388 247.323,350.263 246.326,350.352 243.765 C 350.515 239.045,350.394 238.803,347.873 238.787 C 346.688 238.780,345.467 238.523,345.024 238.187 C 343.650 237.148,340.983 237.734,339.622 239.374 C 339.219 239.859,338.373 239.985,335.851 239.934 L 332.600 239.868 335.641 239.634 C 338.447 239.418,340.000 238.819,340.000 237.951 C 340.000 237.496,339.552 237.514,338.800 238.000 M134.358 238.175 C 134.234 238.299,131.560 238.574,128.415 238.785 C 122.873 239.158,121.985 239.319,122.521 239.854 C 123.362 240.695,133.920 240.497,134.383 239.632 C 134.836 238.786,134.818 237.716,134.358 238.175 M0.188 263.800 C 0.188 277.440,0.238 283.078,0.300 276.329 C 0.361 269.580,0.361 258.420,0.300 251.529 C 0.238 244.638,0.188 250.160,0.188 263.800 M138.800 240.200 C 138.800 240.530,138.620 240.800,138.400 240.800 C 138.180 240.800,138.000 240.530,138.000 240.200 C 138.000 239.870,138.180 239.600,138.400 239.600 C 138.620 239.600,138.800 239.870,138.800 240.200 M228.243 249.433 C 228.109 249.781,228.000 250.703,228.000 251.482 C 228.000 252.696,227.914 252.827,227.399 252.399 C 226.384 251.557,225.033 255.142,225.380 257.760 C 225.528 258.882,225.730 260.520,225.829 261.400 C 226.297 265.593,226.953 268.400,227.464 268.400 C 227.788 268.400,228.000 268.856,228.000 269.551 C 228.000 270.795,228.898 271.834,229.599 271.401 C 229.837 271.253,229.920 270.779,229.783 270.347 C 229.637 269.887,229.830 269.112,230.247 268.480 C 230.986 267.362,231.417 265.396,231.975 260.600 C 232.154 259.060,232.437 257.382,232.604 256.871 C 232.823 256.203,232.669 255.619,232.054 254.788 C 231.584 254.152,231.200 253.281,231.200 252.852 C 231.200 251.076,228.715 248.202,228.243 249.433 M278.800 255.600 C 278.470 255.813,276.824 255.991,275.143 255.994 C 272.728 255.999,272.035 256.133,271.843 256.633 C 271.443 257.675,271.581 270.152,272.000 270.800 C 272.280 271.233,272.389 270.867,272.394 269.479 C 272.401 267.244,273.492 262.114,274.031 261.781 C 274.234 261.655,274.400 261.127,274.400 260.607 C 274.400 259.552,276.522 257.200,277.473 257.200 C 277.809 257.200,278.619 256.750,279.273 256.200 C 280.409 255.244,280.052 254.791,278.800 255.600 M208.710 262.998 C 208.835 270.723,208.806 270.800,205.724 270.800 L 204.000 270.800 204.000 266.394 C 204.000 262.528,204.305 260.434,205.443 256.476 C 205.541 256.132,206.113 255.994,207.097 256.076 L 208.600 256.200 208.710 262.998 M230.000 256.320 C 230.000 256.885,229.062 257.600,228.320 257.600 C 227.867 257.600,227.600 257.304,227.600 256.800 C 227.600 256.178,227.867 256.000,228.800 256.000 C 229.460 256.000,230.000 256.144,230.000 256.320 M231.600 256.400 C 231.600 256.620,231.330 256.800,231.000 256.800 C 230.670 256.800,230.400 256.620,230.400 256.400 C 230.400 256.180,230.670 256.000,231.000 256.000 C 231.330 256.000,231.600 256.180,231.600 256.400 M55.500 272.690 C 56.133 273.530,56.208 287.663,55.586 288.826 C 55.194 289.559,54.650 289.600,45.266 289.600 C 38.095 289.600,35.227 289.733,34.880 290.080 C 34.523 290.437,34.400 294.603,34.400 306.354 C 34.400 322.020,34.393 322.156,33.530 323.074 C 32.441 324.233,31.319 324.252,30.126 323.130 L 29.200 322.261 29.200 306.207 C 29.200 288.427,29.127 288.922,31.800 288.720 L 33.400 288.600 33.505 280.600 C 33.585 274.491,33.735 272.505,34.143 272.200 C 35.146 271.449,54.907 271.902,55.500 272.690 M379.415 273.021 C 377.674 274.900,377.924 278.573,379.925 280.527 C 381.884 282.440,382.000 282.266,382.000 277.413 C 382.000 274.794,382.170 273.190,382.480 272.880 C 382.853 272.507,382.816 272.400,382.313 272.400 C 381.957 272.400,381.388 272.293,381.048 272.163 C 380.672 272.019,380.033 272.354,379.415 273.021 M68.224 272.987 C 68.729 273.370,69.978 273.580,71.800 273.590 C 73.340 273.598,75.275 273.792,76.100 274.021 L 77.600 274.438 77.600 289.239 L 77.600 304.041 76.213 304.620 C 74.785 305.217,70.216 305.347,68.400 304.843 L 67.400 304.565 67.200 297.383 L 67.000 290.200 64.400 290.086 C 60.753 289.926,60.800 290.040,60.800 281.324 C 60.800 272.487,60.840 272.400,64.924 272.400 C 66.523 272.400,67.731 272.615,68.224 272.987 M103.029 273.029 C 102.042 274.016,102.160 278.560,103.200 279.600 C 104.255 280.655,104.622 280.611,105.481 279.326 C 105.877 278.736,107.055 277.431,108.100 276.425 C 110.204 274.401,110.335 274.027,109.269 273.062 C 108.274 272.162,103.919 272.138,103.029 273.029 M391.389 286.600 L 391.000 289.000 388.200 289.200 C 385.462 289.396,385.692 289.981,388.513 289.995 C 390.331 290.003,390.253 291.012,388.245 293.451 L 386.400 295.692 386.400 300.013 L 386.400 304.334 384.380 304.767 C 383.269 305.005,382.024 305.200,381.613 305.200 C 381.201 305.200,379.770 305.480,378.432 305.823 C 377.094 306.166,375.858 306.359,375.686 306.253 C 374.633 305.603,372.800 308.341,372.800 310.563 C 372.800 312.569,372.695 312.860,371.853 313.180 C 371.331 313.378,370.541 314.004,370.095 314.570 C 369.397 315.458,368.975 315.600,367.042 315.600 L 364.800 315.600 364.800 318.986 C 364.800 323.018,364.619 323.200,360.600 323.200 C 356.581 323.200,356.400 323.018,356.400 318.986 L 356.400 315.600 354.275 315.600 C 352.444 315.600,351.993 315.437,351.020 314.421 C 350.346 313.717,349.389 313.194,348.646 313.121 C 347.429 313.003,347.397 312.948,347.281 310.733 C 347.134 307.941,346.844 307.690,343.595 307.544 C 339.819 307.375,339.983 307.019,340.234 314.872 C 340.449 321.583,340.154 324.000,339.119 324.000 C 338.716 324.000,338.819 325.982,339.640 334.021 C 340.070 338.230,340.048 338.777,339.396 340.152 C 338.772 341.466,338.714 342.341,338.943 346.931 C 339.326 354.617,340.769 356.956,345.773 357.994 C 347.189 358.288,348.436 358.897,349.512 359.818 C 350.932 361.033,351.395 361.200,353.340 361.200 C 354.557 361.200,355.664 361.380,355.800 361.600 C 355.936 361.820,356.579 362.000,357.229 362.000 C 358.642 362.000,360.594 363.932,361.158 365.889 C 361.362 366.597,361.868 367.677,362.281 368.289 C 362.695 368.900,363.372 370.057,363.787 370.861 C 364.211 371.684,364.757 372.238,365.039 372.130 C 365.313 372.024,365.912 372.312,366.369 372.769 C 367.704 374.104,369.994 373.290,370.006 371.477 C 370.016 370.048,370.932 367.834,372.078 366.472 C 373.365 364.943,373.472 364.930,374.458 366.183 C 375.131 367.039,375.603 367.181,378.115 367.283 L 381.000 367.400 381.121 369.963 C 381.252 372.749,381.815 373.790,384.106 375.476 L 385.400 376.429 385.604 381.357 C 385.827 386.765,386.049 387.326,388.344 388.286 C 389.162 388.628,389.853 389.286,390.112 389.971 C 390.519 391.051,390.666 391.104,393.804 391.300 C 397.446 391.527,398.800 392.046,398.800 393.214 C 398.800 393.650,399.070 394.000,399.407 394.000 C 399.936 394.000,400.000 392.709,399.907 383.900 L 399.800 373.800 397.200 373.572 C 394.650 373.349,392.800 372.703,392.800 372.035 C 392.800 371.340,394.174 370.598,395.562 370.542 C 399.495 370.384,399.988 369.923,399.988 366.400 C 399.988 364.575,399.872 363.979,399.600 364.400 C 399.290 364.880,399.211 364.810,399.206 364.050 C 399.201 363.209,399.063 363.127,398.000 363.340 C 397.141 363.512,396.800 363.427,396.800 363.040 C 396.800 362.510,395.147 362.000,393.428 362.000 C 392.949 362.000,391.711 361.464,390.678 360.809 L 388.800 359.618 388.817 355.309 C 388.841 349.137,390.111 347.801,397.300 346.385 C 399.904 345.872,400.000 345.811,400.000 344.671 L 400.000 343.489 397.900 343.803 C 393.030 344.531,392.271 344.384,391.676 342.600 C 390.593 339.349,390.240 331.362,390.827 323.400 C 391.114 319.511,391.112 316.909,390.820 314.884 C 390.176 310.413,390.226 310.000,391.413 310.000 C 392.050 310.000,392.532 309.712,392.713 309.224 C 393.081 308.230,397.749 305.200,398.913 305.199 C 399.800 305.199,399.800 305.195,399.944 295.763 L 400.088 286.327 397.344 286.620 C 395.835 286.782,394.189 287.183,393.688 287.511 C 392.592 288.228,392.620 288.255,392.152 286.000 L 391.778 284.200 391.389 286.600 M179.202 289.595 C 178.961 290.047,178.800 294.711,178.799 301.274 C 178.799 312.315,178.464 316.023,177.019 320.992 C 176.554 322.594,176.503 323.917,176.777 327.336 C 177.254 333.294,177.633 333.587,178.566 328.714 C 178.885 327.045,179.646 324.717,180.256 323.540 C 181.783 320.596,182.049 317.890,182.256 303.213 C 182.406 292.575,182.529 290.520,183.053 289.941 C 183.622 289.313,183.605 289.274,182.849 289.471 C 182.396 289.590,181.480 289.497,180.815 289.265 C 179.782 288.905,179.546 288.954,179.202 289.595 M305.586 289.574 C 305.825 290.020,306.000 293.216,306.000 297.118 C 306.000 304.553,306.343 308.526,306.835 306.800 C 307.537 304.338,307.237 290.158,306.469 289.462 C 305.487 288.574,305.078 288.625,305.586 289.574 M206.145 292.600 C 206.344 293.119,208.407 293.200,221.345 293.200 C 232.971 293.200,236.349 293.312,236.470 293.700 C 236.555 293.975,236.560 295.505,236.480 297.100 L 236.334 300.000 221.367 300.000 L 206.400 300.000 206.400 298.085 C 206.400 296.980,206.072 295.526,205.626 294.650 C 204.899 293.226,204.887 292.000,205.600 292.000 C 205.773 292.000,206.018 292.270,206.145 292.600 M323.256 298.133 C 322.466 299.084,322.501 305.284,323.302 306.507 C 323.748 307.186,324.000 308.351,324.000 309.724 C 324.000 313.117,323.806 313.199,315.769 313.205 C 306.269 313.213,307.283 312.264,307.298 321.136 C 307.315 330.902,306.495 330.000,315.352 330.000 C 324.551 330.000,324.000 330.414,324.000 323.501 C 324.000 317.337,324.045 317.200,326.053 317.200 C 327.356 317.200,327.684 317.032,328.000 316.200 C 328.209 315.650,328.659 315.200,328.999 315.200 C 329.339 315.200,329.821 314.753,330.069 314.208 C 330.318 313.662,330.845 313.113,331.240 312.987 C 331.636 312.862,332.067 312.417,332.200 312.000 C 332.333 311.583,332.802 311.126,333.243 310.986 C 333.685 310.846,334.211 310.297,334.413 309.766 C 334.615 309.235,335.048 308.800,335.376 308.800 C 335.704 308.800,336.165 308.440,336.400 308.000 C 336.655 307.524,337.238 307.200,337.840 307.200 C 339.470 307.200,340.403 306.494,340.372 305.286 C 340.349 304.392,340.291 304.333,340.048 304.954 C 339.807 305.568,339.250 305.734,337.071 305.844 C 333.665 306.016,332.020 304.844,331.635 301.971 C 331.413 300.308,331.319 300.200,329.908 299.971 C 328.963 299.817,328.109 299.338,327.579 298.664 C 326.642 297.473,324.066 297.157,323.256 298.133 M236.000 323.400 L 236.000 338.400 225.100 338.402 C 219.105 338.403,212.455 338.520,210.323 338.661 L 206.446 338.918 206.316 324.359 C 206.245 316.351,206.035 309.485,205.850 309.100 C 205.533 308.440,206.379 308.400,220.757 308.400 L 236.000 308.400 236.000 323.400 M50.995 323.192 C 51.128 323.407,51.042 323.947,50.804 324.392 C 49.943 326.001,46.303 325.071,46.943 323.405 C 47.208 322.714,50.589 322.536,50.995 323.192 M377.734 327.500 C 378.082 328.765,378.660 330.880,379.019 332.200 C 379.497 333.956,380.112 335.054,381.311 336.292 C 383.246 338.288,383.254 338.273,379.576 339.260 C 375.697 340.300,375.509 340.069,375.790 334.600 C 376.298 324.722,376.633 323.497,377.734 327.500 M290.394 332.025 C 290.390 334.914,290.254 336.389,290.026 336.028 C 289.757 335.603,289.593 335.829,289.392 336.902 C 289.039 338.784,289.229 339.022,291.174 339.136 L 292.800 339.232 292.800 334.491 L 292.800 329.750 291.600 328.600 L 290.400 327.450 290.394 332.025 M110.016 340.475 C 111.503 341.574,111.606 342.517,110.200 342.164 L 109.200 341.913 109.200 349.157 L 109.200 356.400 110.200 356.400 C 111.133 356.400,111.200 356.533,111.200 358.400 C 111.200 360.210,111.114 360.400,110.296 360.400 C 109.799 360.400,109.168 360.760,108.893 361.200 C 108.618 361.640,108.120 362.000,107.787 362.000 C 107.453 362.000,107.011 362.445,106.804 362.989 C 105.675 365.958,102.246 364.378,102.079 360.812 C 101.941 357.881,101.555 357.200,100.031 357.200 C 98.115 357.200,98.000 356.753,98.000 349.315 C 98.000 344.478,97.849 342.142,97.500 341.570 C 96.203 339.446,107.310 338.475,110.016 340.475 M209.600 341.040 C 209.600 341.425,209.109 341.600,208.033 341.600 C 207.171 341.600,206.181 341.709,205.833 341.843 C 205.128 342.113,204.951 341.209,205.584 340.576 C 206.182 339.978,209.600 340.373,209.600 341.040 M363.023 340.992 C 363.879 341.072,364.644 341.331,364.723 341.569 C 364.813 341.838,366.351 342.000,368.833 342.000 C 372.477 342.000,372.800 342.062,372.800 342.767 C 372.800 344.046,372.353 344.800,371.597 344.800 C 371.198 344.800,370.505 345.434,370.036 346.229 C 368.970 348.036,368.070 347.908,366.976 345.795 C 365.852 343.624,364.488 343.374,364.722 345.382 C 364.849 346.467,364.742 346.800,364.267 346.800 C 363.198 346.800,363.140 347.470,363.825 351.931 L 364.491 356.272 366.940 356.636 C 369.703 357.047,370.733 358.335,369.665 360.044 C 369.388 360.488,369.270 361.190,369.402 361.605 C 369.533 362.020,369.362 362.900,369.021 363.560 C 368.679 364.220,368.386 365.354,368.369 366.080 C 368.290 369.495,366.158 372.318,364.734 370.894 C 364.149 370.309,363.509 367.609,363.564 365.954 C 363.592 365.100,363.363 364.302,363.006 364.005 C 362.573 363.646,362.400 362.722,362.400 360.775 C 362.400 357.773,362.359 357.715,359.606 356.800 L 357.800 356.200 357.858 354.000 C 357.926 351.381,358.279 342.111,358.350 341.065 C 358.393 340.439,358.627 340.368,359.933 340.589 C 360.776 340.731,362.167 340.913,363.023 340.992 M17.871 341.100 C 17.410 341.887,18.119 344.000,18.845 344.000 C 19.260 344.000,19.600 343.826,19.600 343.613 C 19.600 343.400,20.068 342.980,20.640 342.681 C 21.611 342.172,21.635 342.092,21.011 341.468 C 20.337 340.795,18.198 340.544,17.871 341.100 M190.800 357.245 C 190.800 357.532,191.274 357.600,192.145 357.437 C 193.942 357.100,194.490 357.821,194.356 360.347 C 194.298 361.442,194.450 362.578,194.693 362.871 C 194.936 363.164,195.260 363.898,195.411 364.502 C 195.563 365.106,195.847 365.600,196.043 365.600 C 196.744 365.600,196.385 366.479,195.600 366.684 C 194.534 366.963,194.578 367.229,196.100 369.694 C 198.083 372.906,198.001 375.462,195.905 375.816 L 194.400 376.070 194.400 383.175 L 194.400 390.280 198.824 390.548 C 201.258 390.696,203.446 390.695,203.686 390.547 C 203.933 390.394,204.010 390.459,203.864 390.696 C 203.721 390.927,203.896 391.228,204.253 391.365 C 204.946 391.631,204.856 394.108,203.991 398.600 C 203.779 399.700,203.542 401.050,203.465 401.600 C 203.260 403.067,201.306 403.191,200.018 401.819 C 199.372 401.132,198.637 400.800,197.759 400.800 C 196.848 400.800,196.223 400.501,195.671 399.800 C 194.978 398.919,194.580 398.800,192.319 398.800 C 187.798 398.800,187.461 397.834,187.569 385.168 C 187.658 374.745,187.973 375.527,183.400 374.819 C 180.510 374.371,177.600 373.184,177.600 372.452 C 177.600 372.297,178.513 371.277,179.629 370.185 C 180.744 369.093,181.887 367.660,182.168 367.000 C 182.857 365.380,184.738 363.200,185.445 363.200 C 186.186 363.200,186.800 361.567,186.800 359.597 C 186.800 358.447,187.030 357.884,187.689 357.423 C 188.713 356.706,190.800 356.586,190.800 357.245 M323.857 373.645 C 323.448 373.889,321.738 374.258,320.057 374.466 C 315.017 375.089,315.200 374.759,315.200 383.223 C 315.200 389.041,315.081 390.609,314.583 391.369 C 313.823 392.529,313.907 406.990,314.685 409.000 C 314.941 409.660,315.346 411.370,315.586 412.800 C 316.330 417.241,316.495 417.784,317.258 418.323 C 317.666 418.610,318.000 419.090,318.000 419.389 C 318.000 419.689,318.225 420.038,318.500 420.167 C 318.830 420.321,318.855 420.471,318.573 420.609 C 317.947 420.916,318.516 424.623,319.327 425.519 C 319.907 426.160,320.000 427.290,320.000 433.685 C 320.000 441.900,319.888 441.578,322.743 441.595 C 323.391 441.598,323.618 441.777,323.468 442.167 C 323.094 443.142,324.087 443.124,327.600 442.091 C 331.866 440.836,331.587 441.460,331.594 433.176 C 331.599 427.627,331.723 425.990,332.187 425.376 C 332.979 424.330,332.996 420.012,332.213 418.976 C 331.890 418.549,331.613 417.660,331.599 417.000 C 331.584 416.340,331.314 415.350,331.000 414.800 C 330.527 413.973,330.426 410.527,330.414 394.869 L 330.400 375.938 329.231 374.769 C 328.588 374.126,327.643 373.598,327.131 373.595 C 326.619 373.592,325.840 373.502,325.400 373.396 C 324.960 373.290,324.265 373.402,323.857 373.645 M369.400 386.878 C 367.242 387.623,362.059 393.117,361.387 395.373 C 360.435 398.571,360.573 406.986,361.600 408.291 C 362.040 408.850,362.400 409.801,362.400 410.404 C 362.400 411.006,362.670 412.265,363.000 413.200 C 363.330 414.135,363.600 415.845,363.600 416.998 C 363.600 419.127,366.482 426.353,366.869 425.193 C 367.001 424.797,367.218 424.805,367.900 425.230 C 369.060 425.955,369.135 425.824,369.783 421.956 C 370.957 414.947,370.979 413.689,369.964 411.524 C 368.935 409.327,369.180 408.818,371.267 408.806 C 371.854 408.803,372.601 408.698,372.926 408.573 C 373.418 408.384,373.566 409.139,373.804 413.073 C 373.961 415.673,374.209 418.880,374.356 420.200 L 374.622 422.600 375.098 420.200 C 375.360 418.880,375.715 416.000,375.887 413.800 L 376.200 409.800 377.731 409.674 C 378.713 409.593,379.892 409.066,381.023 408.204 C 381.991 407.464,383.148 406.744,383.592 406.603 C 384.345 406.364,384.400 406.011,384.400 401.417 C 384.400 395.882,384.078 395.060,381.593 394.243 C 380.570 393.906,380.167 393.492,379.916 392.518 C 379.571 391.174,378.285 390.000,377.159 390.000 C 376.795 390.000,375.833 389.190,375.021 388.200 C 373.427 386.255,372.105 385.944,369.400 386.878 M0.683 392.495 C 0.587 392.993,0.505 392.680,0.501 391.800 C 0.496 390.920,0.575 390.513,0.675 390.895 C 0.775 391.278,0.779 391.998,0.683 392.495 M88.918 408.200 C 88.798 432.084,88.484 441.545,87.777 442.554 C 87.460 443.007,87.200 443.754,87.200 444.213 C 87.200 445.397,86.165 446.709,85.638 446.191 C 84.934 445.499,84.643 410.629,85.336 410.053 C 85.771 409.692,85.809 409.150,85.515 407.534 C 85.274 406.204,85.293 403.809,85.571 400.769 C 85.807 398.180,86.000 395.047,86.000 393.807 L 86.000 391.552 87.500 391.676 L 89.000 391.800 88.918 408.200 M32.523 393.115 C 33.406 394.091,34.434 396.639,34.203 397.278 C 34.099 397.565,33.844 401.348,33.636 405.685 C 33.154 415.744,32.669 416.980,29.973 415.021 C 29.218 414.472,27.930 413.569,27.111 413.014 C 26.293 412.459,25.351 411.478,25.018 410.834 C 24.614 410.054,23.649 409.315,22.117 408.614 C 17.790 406.632,16.589 402.459,19.898 400.901 C 20.830 400.462,21.698 399.627,22.198 398.687 C 22.664 397.810,23.586 396.889,24.400 396.489 C 25.170 396.110,26.073 395.260,26.407 394.600 C 27.489 392.461,27.582 392.400,29.762 392.400 C 31.284 392.400,32.057 392.600,32.523 393.115 M57.000 433.600 L 57.000 441.400 50.900 441.510 L 44.800 441.621 44.800 434.243 C 44.800 424.632,44.114 425.557,51.147 425.690 L 57.000 425.800 57.000 433.600 M32.161 434.700 C 34.041 443.905,32.197 445.744,24.672 442.170 C 20.615 440.244,20.627 440.394,24.241 436.758 L 27.381 433.600 29.659 433.600 C 31.822 433.600,31.948 433.655,32.161 434.700 M392.000 437.967 C 392.000 439.898,392.128 440.400,392.620 440.400 C 393.121 440.400,393.217 439.965,393.120 438.132 C 392.948 434.875,392.000 434.735,392.000 437.967 M38.531 444.019 L 40.861 444.469 40.623 452.135 C 40.492 456.351,40.296 462.950,40.187 466.800 C 40.079 470.650,39.907 474.174,39.805 474.631 C 39.403 476.435,35.221 477.020,32.890 475.599 C 32.002 475.057,30.875 474.800,29.390 474.800 L 27.200 474.800 27.200 467.400 L 27.200 460.000 29.469 460.000 C 33.187 460.000,33.200 459.970,33.200 451.358 C 33.200 443.475,33.335 442.988,35.400 443.407 C 35.840 443.496,37.249 443.771,38.531 444.019 M250.326 445.968 C 250.559 449.218,250.292 449.600,247.792 449.600 L 245.600 449.600 245.600 446.780 L 245.600 443.960 247.900 444.080 L 250.200 444.200 250.326 445.968 M87.410 450.183 C 88.202 453.480,88.204 453.582,87.477 454.579 C 86.155 456.394,85.084 455.951,85.349 453.700 C 85.472 452.655,85.687 450.675,85.826 449.300 C 86.160 445.992,86.441 446.148,87.410 450.183 M368.490 450.690 C 367.769 450.779,365.930 451.560,364.402 452.426 C 361.538 454.049,360.800 454.290,360.800 453.600 C 360.800 452.799,342.624 453.087,341.899 453.900 C 340.081 455.937,339.827 462.920,341.306 470.200 L 342.200 474.600 357.353 474.705 C 367.388 474.774,372.675 474.669,373.007 474.395 C 373.297 474.154,373.704 472.009,373.977 469.290 C 374.236 466.710,374.620 462.919,374.830 460.865 C 375.224 457.006,374.697 451.770,373.959 452.225 C 373.762 452.347,373.600 452.707,373.600 453.024 C 373.600 454.422,370.948 453.182,370.605 451.624 C 370.457 450.951,370.216 450.429,370.068 450.464 C 369.921 450.499,369.210 450.601,368.490 450.690 M373.920 456.128 C 374.870 458.757,373.954 459.350,369.573 458.943 C 366.718 458.677,365.439 457.600,367.980 457.600 C 368.858 457.600,369.432 457.242,370.227 456.200 C 371.688 454.285,373.242 454.255,373.920 456.128 M87.043 457.029 C 87.343 458.223,86.647 459.207,85.978 458.538 C 85.510 458.070,85.883 456.000,86.436 456.000 C 86.628 456.000,86.901 456.463,87.043 457.029 M282.629 457.429 C 282.481 458.015,282.271 458.404,282.161 458.294 C 282.051 458.184,282.081 457.615,282.229 457.029 C 282.376 456.442,282.586 456.053,282.696 456.163 C 282.806 456.273,282.776 456.842,282.629 457.429 M176.340 460.039 L 177.600 460.478 177.600 476.364 L 177.600 492.250 176.454 493.348 C 174.836 494.899,171.108 494.798,170.988 493.200 C 170.498 486.688,170.396 460.249,170.859 459.955 C 171.625 459.469,174.848 459.519,176.340 460.039 M50.567 460.243 C 51.317 460.531,51.538 474.144,50.800 474.600 C 50.577 474.738,50.400 476.607,50.400 478.834 C 50.400 482.744,50.381 482.827,49.374 483.210 C 47.474 483.932,46.440 483.704,46.152 482.500 C 46.008 481.895,45.757 481.220,45.594 481.000 C 45.431 480.780,45.165 480.150,45.002 479.600 C 44.839 479.050,44.463 478.323,44.168 477.985 C 43.286 476.977,43.901 475.600,45.233 475.600 C 46.990 475.600,47.200 474.709,47.200 467.254 C 47.200 460.522,47.209 460.454,48.100 460.282 C 49.593 459.995,49.908 459.990,50.567 460.243 M98.083 476.915 L 96.400 478.630 96.400 494.086 L 96.400 509.542 97.609 510.488 L 98.818 511.435 98.709 519.017 L 98.600 526.600 97.361 527.001 C 94.803 527.827,94.800 527.837,94.800 535.274 C 94.800 542.585,95.463 546.292,96.686 545.822 C 97.005 545.700,98.318 545.600,99.604 545.600 C 102.722 545.600,103.200 545.091,103.200 541.771 C 103.200 540.158,103.365 539.200,103.643 539.200 C 103.911 539.200,103.969 538.924,103.789 538.500 C 103.257 537.243,102.723 534.256,102.523 531.411 C 102.393 529.560,102.070 528.261,101.564 527.549 C 100.543 526.116,100.416 511.541,101.413 510.224 C 102.432 508.876,102.252 479.194,101.211 476.900 C 100.257 474.800,100.159 474.800,98.083 476.915 M153.100 477.059 L 156.800 477.310 156.800 484.800 L 156.800 492.290 153.900 492.534 C 145.921 493.208,137.124 493.324,136.767 492.760 C 136.271 491.976,136.310 478.689,136.812 477.367 L 137.225 476.283 143.312 476.545 C 146.661 476.690,151.065 476.921,153.100 477.059 M392.700 478.032 C 391.330 478.830,391.729 482.912,393.300 484.170 C 395.241 485.726,395.310 485.794,396.517 487.355 C 397.263 488.320,397.961 488.800,398.617 488.800 L 399.600 488.800 399.600 483.200 L 399.600 477.600 396.500 477.612 C 394.795 477.619,393.085 477.808,392.700 478.032 M149.757 510.233 C 150.277 511.588,150.031 512.222,149.357 511.260 L 148.715 510.343 148.157 511.417 C 147.742 512.218,147.600 514.309,147.600 519.638 L 147.600 526.785 146.571 527.043 C 146.004 527.185,145.095 527.098,144.549 526.849 L 143.557 526.397 143.613 518.499 C 143.652 512.993,143.538 510.630,143.235 510.700 C 142.996 510.755,142.800 510.530,142.800 510.200 C 142.800 509.293,149.408 509.324,149.757 510.233 M256.600 509.885 C 255.266 510.206,255.008 510.726,254.800 513.519 C 254.613 516.020,254.533 516.208,253.600 516.312 C 251.506 516.546,250.846 516.826,250.606 517.580 C 250.470 518.009,250.036 518.462,249.640 518.587 C 249.245 518.713,248.718 519.262,248.469 519.808 C 248.221 520.353,247.772 520.800,247.473 520.800 C 247.173 520.800,246.730 521.234,246.489 521.765 C 246.247 522.296,245.678 522.848,245.224 522.992 C 244.771 523.136,244.400 523.516,244.400 523.836 C 244.400 524.155,243.953 524.621,243.408 524.869 C 242.862 525.118,242.310 525.654,242.181 526.061 C 242.014 526.585,241.558 526.800,240.616 526.800 C 238.818 526.800,238.800 526.887,238.800 535.756 C 238.800 543.997,238.940 544.633,240.800 544.872 L 241.800 545.000 241.909 552.724 L 242.017 560.448 243.471 561.056 C 244.271 561.390,245.662 561.789,246.563 561.942 L 248.200 562.220 248.314 566.110 L 248.429 570.000 253.214 570.000 L 258.000 570.000 258.000 557.629 C 258.000 544.869,257.895 544.000,256.353 544.000 C 256.127 544.000,256.013 542.867,256.082 541.300 L 256.200 538.600 257.591 538.468 C 259.048 538.330,259.080 538.302,266.383 530.955 C 268.306 529.021,268.509 528.667,268.083 527.985 C 267.747 527.447,267.600 524.764,267.600 519.179 C 267.600 508.930,267.981 509.588,262.086 509.646 C 259.509 509.672,257.040 509.779,256.600 509.885 M264.700 510.995 C 265.594 511.252,265.600 511.310,265.600 519.013 C 265.600 527.852,265.831 527.302,261.928 527.775 C 258.781 528.157,258.758 528.089,258.891 518.910 L 259.000 511.400 260.800 510.936 C 262.575 510.479,262.922 510.484,264.700 510.995 M307.200 510.903 L 306.200 511.430 306.337 527.414 C 306.436 538.934,306.604 543.486,306.937 543.713 C 307.650 544.196,311.714 543.604,312.500 542.901 C 312.935 542.513,313.200 542.451,313.200 542.738 C 313.200 542.997,313.800 543.200,314.567 543.200 C 317.287 543.200,317.200 543.451,317.200 535.591 L 317.200 528.467 318.300 527.653 L 319.400 526.840 318.400 527.024 C 317.850 527.126,317.625 527.102,317.900 526.971 C 318.273 526.794,318.400 524.876,318.400 519.416 C 318.400 510.919,318.645 511.409,314.200 511.041 C 312.440 510.896,310.370 510.687,309.600 510.576 C 308.819 510.465,307.758 510.609,307.200 510.903 M314.100 510.687 C 314.705 510.778,315.695 510.778,316.300 510.687 C 316.905 510.595,316.410 510.520,315.200 510.520 C 313.990 510.520,313.495 510.595,314.100 510.687 M286.305 511.083 C 286.802 511.179,287.522 511.175,287.905 511.075 C 288.287 510.975,287.880 510.896,287.000 510.901 C 286.120 510.905,285.807 510.987,286.305 511.083 M284.300 511.429 C 283.654 512.085,284.056 513.504,285.200 514.600 C 285.875 515.247,286.400 516.166,286.400 516.701 C 286.400 517.807,288.406 517.893,288.700 516.800 C 288.843 516.267,288.813 516.267,288.429 516.800 C 287.823 517.641,285.077 514.379,284.800 512.490 C 284.690 511.739,284.465 511.261,284.300 511.429 M312.200 519.000 L 312.200 526.600 310.000 526.600 L 307.800 526.600 307.691 519.229 C 307.568 510.966,307.513 511.129,310.400 511.296 L 312.200 511.400 312.200 519.000 M360.128 519.954 C 360.005 520.425,359.676 520.640,359.251 520.529 C 358.776 520.405,358.344 520.809,357.816 521.876 C 357.251 523.014,357.019 523.219,356.898 522.687 C 356.386 520.428,350.537 534.445,349.607 540.160 C 349.216 542.560,349.658 544.400,350.626 544.400 C 351.137 544.400,351.488 548.313,351.700 556.381 L 351.800 560.162 350.120 560.501 C 348.453 560.836,348.446 560.846,349.220 561.620 C 350.199 562.599,350.196 562.899,349.200 563.800 C 348.760 564.198,348.400 564.946,348.400 565.462 C 348.400 566.541,348.111 566.610,347.024 565.787 C 345.991 565.006,344.800 565.040,344.800 565.850 C 344.800 566.354,344.539 566.448,343.642 566.268 C 342.385 566.017,342.017 566.609,342.005 568.900 L 342.000 570.000 347.950 570.000 C 355.667 570.000,356.400 569.855,356.400 568.326 C 356.400 566.745,357.182 567.286,357.264 568.924 C 357.299 569.626,357.454 567.680,357.609 564.600 C 357.764 561.520,358.028 556.799,358.196 554.108 L 358.502 549.217 366.151 549.108 L 373.800 549.000 373.930 547.405 C 374.079 545.571,374.447 545.033,376.394 543.803 C 377.167 543.315,380.157 540.550,383.037 537.658 C 387.685 532.992,388.428 532.399,389.637 532.387 C 390.943 532.375,390.967 532.349,390.200 531.762 C 389.620 531.318,388.922 531.220,387.657 531.406 C 386.675 531.550,386.010 531.507,386.134 531.307 C 386.342 530.971,382.353 531.043,380.573 531.409 C 380.119 531.502,379.501 532.038,379.200 532.600 C 378.080 534.692,375.687 534.147,372.501 531.074 C 371.567 530.173,369.407 528.708,367.701 527.818 L 364.600 526.200 364.349 524.200 C 363.839 520.134,360.864 517.141,360.128 519.954 M152.400 529.800 C 152.400 530.570,152.220 531.200,152.000 531.200 C 151.780 531.200,151.600 530.570,151.600 529.800 C 151.600 529.030,151.780 528.400,152.000 528.400 C 152.220 528.400,152.400 529.030,152.400 529.800 M153.089 532.100 C 153.001 532.815,152.928 532.230,152.928 530.800 C 152.928 529.370,153.001 528.785,153.089 529.500 C 153.178 530.215,153.178 531.385,153.089 532.100 M391.004 533.400 C 392.119 536.846,392.084 543.905,390.904 554.000 L 390.600 556.600 383.018 556.709 C 374.736 556.828,374.816 556.803,374.806 559.254 C 374.801 560.367,375.034 560.861,375.800 561.363 C 376.749 561.985,376.800 562.210,376.800 565.763 C 376.800 569.307,376.848 569.520,377.700 569.748 C 379.351 570.190,381.589 570.040,381.397 569.500 C 381.299 569.225,381.142 567.830,381.048 566.400 C 380.954 564.970,380.756 563.499,380.608 563.131 C 380.098 561.866,381.736 561.534,388.368 561.554 C 391.833 561.565,395.012 561.685,395.434 561.820 C 396.180 562.059,396.179 562.048,395.424 561.433 C 394.993 561.082,394.868 560.800,395.142 560.800 C 395.414 560.800,396.055 561.218,396.566 561.730 C 397.449 562.612,397.518 562.622,397.951 561.930 C 398.202 561.528,398.765 561.200,399.203 561.200 C 399.977 561.200,399.999 560.930,399.972 551.900 C 399.955 546.334,399.806 542.921,399.600 543.400 C 399.322 544.046,399.251 544.071,399.228 543.528 C 399.212 543.147,398.810 542.800,398.301 542.728 C 397.578 542.625,397.283 542.155,396.801 540.340 C 396.196 538.064,395.092 536.400,394.187 536.400 C 393.918 536.400,393.467 536.121,393.184 535.781 C 392.774 535.287,392.604 535.267,392.341 535.681 C 392.105 536.054,392.007 535.976,391.992 535.400 C 391.981 534.960,391.696 534.150,391.358 533.600 C 390.931 532.904,390.824 532.844,391.004 533.400 M134.400 535.320 C 134.400 535.606,134.585 536.025,134.810 536.250 C 135.236 536.676,136.084 543.008,135.954 544.786 C 135.821 546.593,135.994 549.739,136.214 549.519 C 136.505 549.228,137.156 535.950,136.910 535.310 C 136.650 534.632,134.400 534.641,134.400 535.320 M361.394 539.580 C 361.530 540.008,362.002 540.474,362.443 540.614 C 363.086 540.818,363.220 541.157,363.122 542.334 L 363.000 543.800 360.700 543.920 L 358.400 544.040 358.400 541.420 L 358.400 538.800 359.773 538.800 C 360.783 538.800,361.212 539.006,361.394 539.580 M269.600 552.925 L 269.600 560.250 268.400 561.400 C 267.235 562.516,267.200 562.658,267.200 566.275 L 267.200 570.000 268.400 570.000 L 269.600 570.000 269.600 566.208 C 269.600 562.496,269.621 562.410,270.600 562.164 C 271.746 561.877,271.854 561.509,271.000 560.800 C 270.506 560.390,270.400 558.997,270.400 552.951 C 270.400 548.317,270.252 545.600,270.000 545.600 C 269.748 545.600,269.600 548.308,269.600 552.925 M303.475 546.258 C 302.674 547.059,303.187 569.200,304.006 569.200 C 304.798 569.200,304.810 568.998,304.706 557.733 C 304.605 546.838,304.440 545.294,303.475 546.258 M135.750 556.200 C 135.751 558.620,135.816 559.558,135.896 558.285 C 135.976 557.012,135.975 555.032,135.894 553.885 C 135.814 552.738,135.749 553.780,135.750 556.200 \\\" stroke=\\\"none\\\" fill=\\\"#f4d468\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path1\\\" d=\\\"M187.390 0.224 C 187.164 0.325,187.048 1.127,187.132 2.007 C 187.556 6.451,186.960 6.800,178.945 6.800 C 171.401 6.800,171.098 6.895,170.217 9.550 C 168.798 13.821,169.933 31.305,171.747 33.119 C 173.264 34.635,179.525 32.400,181.322 29.700 C 182.442 28.016,182.476 28.000,184.839 28.000 C 187.906 28.000,189.658 27.246,191.758 25.023 C 192.687 24.039,194.362 22.810,195.479 22.293 C 200.054 20.173,202.117 14.953,199.391 12.392 C 198.469 11.525,198.400 11.192,198.400 7.592 C 198.400 3.173,198.032 2.508,195.489 2.337 C 192.779 2.154,193.464 0.800,196.267 0.800 C 197.513 0.800,198.458 0.734,198.367 0.652 C 198.105 0.420,187.848 0.020,187.390 0.224 M149.900 0.665 C 150.473 0.896,150.592 3.600,150.029 3.600 C 149.238 3.600,148.400 4.916,148.400 6.159 C 148.400 7.030,148.069 7.771,147.400 8.400 C 146.850 8.917,146.400 9.748,146.400 10.247 C 146.400 10.746,146.061 11.750,145.646 12.477 C 144.370 14.716,144.263 18.131,145.433 19.231 C 146.082 19.841,146.400 20.580,146.400 21.477 C 146.400 22.999,151.164 28.253,152.187 27.860 C 153.229 27.461,153.503 19.760,153.070 3.100 L 153.000 0.400 151.200 0.432 C 150.210 0.449,149.625 0.554,149.900 0.665 M333.518 7.867 L 333.635 15.334 332.001 16.999 C 329.241 19.812,329.286 20.513,332.427 23.654 C 334.368 25.595,335.161 26.699,335.310 27.666 C 335.890 31.426,337.342 33.404,338.838 32.469 C 339.734 31.909,340.251 32.070,339.816 32.773 C 339.671 33.008,338.940 33.200,338.190 33.200 C 336.570 33.200,335.891 34.154,336.246 35.931 C 336.378 36.590,336.264 37.801,335.992 38.624 C 335.460 40.235,335.019 42.990,334.414 48.476 C 333.829 53.778,331.773 57.226,329.525 56.677 C 325.415 55.672,324.230 54.914,323.734 52.970 C 323.118 50.553,323.139 50.563,318.339 50.465 C 313.229 50.361,312.400 50.773,312.400 53.418 C 312.400 54.949,312.549 55.285,313.400 55.673 C 314.498 56.173,314.596 56.486,314.005 57.590 C 313.726 58.113,313.780 58.656,314.192 59.449 C 314.511 60.065,314.673 60.968,314.550 61.456 C 314.236 62.708,314.706 63.916,315.620 64.206 C 316.189 64.387,316.400 64.817,316.400 65.795 C 316.400 66.953,316.560 67.172,317.572 67.394 C 319.353 67.785,319.708 68.526,319.833 72.113 C 320.302 85.535,320.123 85.144,325.974 85.557 C 329.539 85.809,331.200 86.529,331.200 87.823 C 331.200 88.566,333.418 89.200,336.017 89.200 C 338.602 89.200,338.800 88.991,338.800 86.264 L 338.800 84.594 337.077 84.731 C 334.511 84.935,334.345 84.544,334.360 78.327 C 334.373 73.045,334.367 73.008,333.615 73.909 C 332.251 75.545,329.600 74.778,329.600 72.749 C 329.600 71.218,328.734 70.538,328.265 71.700 C 328.154 71.975,328.049 71.660,328.032 71.000 C 328.004 69.961,328.147 69.794,329.100 69.753 C 329.705 69.727,330.920 69.419,331.800 69.070 L 333.400 68.435 331.687 68.418 C 329.693 68.397,329.263 67.778,330.003 65.993 C 330.893 63.844,334.999 64.195,337.116 66.600 C 338.885 68.609,339.200 68.761,339.200 67.600 C 339.200 67.160,339.380 66.800,339.600 66.800 C 339.820 66.800,340.000 66.528,340.000 66.195 C 340.000 65.862,340.162 65.277,340.360 64.895 C 341.125 63.416,341.700 56.526,342.002 45.200 C 342.366 31.575,342.208 33.200,343.167 33.200 C 345.049 33.200,345.200 32.899,345.200 29.143 C 345.200 25.286,344.578 23.600,343.154 23.600 C 342.496 23.600,342.400 23.282,342.399 21.100 C 342.397 19.362,342.169 18.225,341.647 17.370 C 340.722 15.852,340.475 14.216,340.023 6.600 C 339.827 3.300,339.652 0.555,339.634 0.500 C 339.615 0.445,338.205 0.400,336.500 0.400 L 333.400 0.399 333.518 7.867 M317.200 13.400 C 316.305 14.353,316.045 14.400,311.730 14.400 L 307.200 14.400 307.200 15.400 C 307.200 16.395,307.217 16.400,310.938 16.400 C 314.168 16.400,314.774 16.509,315.400 17.200 C 315.848 17.696,316.632 18.000,317.459 18.000 C 318.438 18.000,319.079 18.320,319.863 19.200 C 322.088 21.698,323.356 20.541,323.369 16.000 C 323.379 12.614,323.207 12.400,320.482 12.400 C 318.500 12.400,317.995 12.554,317.200 13.400 M179.316 14.233 C 180.531 14.647,182.149 14.820,183.988 14.733 C 186.760 14.602,186.802 14.615,186.795 15.600 C 186.789 16.397,186.708 16.478,186.394 16.000 C 185.849 15.170,185.215 16.141,185.206 17.817 C 185.199 19.268,182.544 22.096,180.130 23.222 C 178.900 23.795,178.777 23.942,179.501 23.968 C 180.548 24.005,178.479 26.112,176.200 27.328 C 175.015 27.960,175.013 27.968,176.000 27.985 C 176.998 28.003,176.998 28.005,175.800 28.744 C 175.140 29.152,174.257 29.871,173.838 30.343 C 172.786 31.526,172.009 31.426,171.955 30.100 C 171.931 29.495,171.798 28.370,171.659 27.600 C 171.304 25.616,171.339 16.017,171.708 14.700 C 172.082 13.362,176.046 13.119,179.316 14.233 M286.797 22.900 L 286.795 27.800 285.597 28.481 C 284.525 29.091,284.400 29.366,284.400 31.105 C 284.400 34.817,285.837 35.269,292.800 33.744 L 296.200 33.000 296.069 30.400 C 295.986 28.744,295.587 27.020,294.969 25.652 C 294.246 24.048,294.000 22.806,294.000 20.752 L 294.000 18.000 290.400 18.000 L 286.800 18.000 286.797 22.900 M154.662 45.131 C 153.644 46.256,153.699 54.004,154.731 54.938 C 155.808 55.913,158.489 55.808,159.438 54.754 C 159.857 54.289,160.605 53.753,161.100 53.564 C 162.346 53.088,162.291 51.483,161.000 50.637 C 160.267 50.156,160.000 49.628,160.000 48.658 C 160.000 47.657,159.757 47.205,159.003 46.801 C 158.454 46.508,157.730 45.847,157.393 45.334 C 156.659 44.213,155.566 44.132,154.662 45.131 M306.000 47.786 C 306.000 49.600,306.144 50.049,306.843 50.423 C 307.971 51.027,308.634 50.385,308.037 49.269 C 307.797 48.820,307.600 47.920,307.600 47.269 C 307.600 46.263,307.031 45.600,306.167 45.600 C 306.075 45.600,306.000 46.584,306.000 47.786 M274.400 49.963 C 274.400 50.769,274.332 50.755,281.692 51.439 L 284.385 51.689 284.492 60.545 L 284.600 69.400 285.845 69.767 L 287.090 70.135 287.317 73.926 C 287.465 76.414,287.723 77.829,288.068 78.042 C 288.416 78.257,288.631 79.482,288.706 81.683 C 288.857 86.063,289.795 88.949,291.490 90.242 C 292.709 91.171,292.800 91.405,292.800 93.598 C 292.800 96.739,294.187 98.679,295.550 97.445 C 296.284 96.781,296.389 96.159,296.488 91.849 L 296.600 87.000 297.800 86.867 C 300.328 86.585,300.400 86.322,300.400 77.418 C 300.400 68.271,300.357 68.400,303.433 68.400 C 305.779 68.400,305.989 68.104,305.989 64.800 C 305.989 60.984,306.533 61.231,297.862 61.108 L 290.213 61.000 289.872 59.400 C 289.685 58.520,289.408 56.090,289.257 54.000 C 288.882 48.824,289.500 49.200,281.376 49.200 C 274.779 49.200,274.400 49.242,274.400 49.963 M302.600 49.600 C 302.231 50.198,302.745 50.800,303.624 50.800 C 304.133 50.800,304.400 50.525,304.400 50.000 C 304.400 49.152,303.061 48.854,302.600 49.600 M90.031 63.836 C 87.478 65.984,88.755 68.037,92.287 67.463 C 94.172 67.157,94.740 66.594,94.076 65.689 C 93.798 65.310,93.358 64.505,93.098 63.900 C 92.506 62.525,91.611 62.506,90.031 63.836 M112.552 66.981 C 112.248 67.774,112.698 68.400,113.575 68.400 C 114.456 68.400,115.368 67.395,115.011 66.818 C 114.625 66.193,112.808 66.314,112.552 66.981 M236.164 68.770 C 235.280 69.148,235.205 72.850,236.050 74.474 C 236.242 74.844,236.400 75.789,236.400 76.574 C 236.400 77.520,236.703 78.302,237.300 78.898 C 237.795 79.391,238.432 80.695,238.716 81.794 C 239.905 86.395,240.800 85.175,240.800 78.953 C 240.800 76.149,240.956 74.049,241.155 74.172 C 241.634 74.468,241.988 73.005,241.995 70.700 C 242.000 68.894,241.946 68.800,240.900 68.796 C 240.295 68.793,239.170 68.706,238.400 68.602 C 237.630 68.498,236.624 68.574,236.164 68.770 M236.643 85.833 C 236.060 87.352,236.379 100.000,237.000 100.000 C 237.512 100.000,237.600 98.911,237.600 92.600 C 237.600 85.904,237.335 84.029,236.643 85.833 M236.673 101.860 C 236.267 102.267,236.342 105.600,236.758 105.600 C 236.955 105.600,237.198 104.835,237.298 103.900 C 237.478 102.221,237.205 101.329,236.673 101.860 M29.838 102.523 C 28.832 103.258,29.043 117.324,30.095 119.700 C 31.198 122.191,36.007 121.466,36.555 118.726 C 37.031 116.344,36.805 108.645,36.200 106.652 C 35.875 105.580,35.717 104.275,35.848 103.752 C 36.060 102.905,35.952 102.800,34.867 102.800 C 34.196 102.800,33.536 102.620,33.400 102.400 C 33.045 101.825,30.680 101.907,29.838 102.523 M187.896 102.500 C 187.761 102.858,188.304 103.009,189.814 103.031 C 191.410 103.054,191.872 102.932,191.718 102.531 C 191.453 101.839,188.156 101.813,187.896 102.500 M335.200 102.701 C 333.323 103.638,332.970 107.612,334.466 110.968 C 334.964 112.086,335.467 114.170,335.585 115.600 L 335.800 118.200 337.384 118.329 C 339.674 118.516,339.999 117.859,340.006 113.024 C 340.010 110.811,340.266 107.922,340.576 106.604 C 341.160 104.121,341.059 103.698,339.600 102.513 C 338.736 101.811,336.818 101.893,335.200 102.701 M352.928 102.752 C 352.775 103.339,352.212 103.563,350.366 103.772 C 347.651 104.079,347.495 104.409,349.300 106.026 C 350.015 106.667,351.095 107.632,351.700 108.170 C 352.761 109.114,352.800 109.291,352.800 113.126 C 352.800 117.706,352.854 117.794,356.352 118.886 C 360.181 120.082,360.743 119.716,359.945 116.546 C 359.587 115.127,359.604 114.539,360.025 113.752 C 360.470 112.921,360.469 112.544,360.019 111.478 C 359.722 110.775,359.410 109.300,359.325 108.200 C 359.087 105.114,358.879 104.508,357.608 103.208 C 356.158 101.725,353.271 101.443,352.928 102.752 M367.894 103.300 C 367.769 103.625,368.086 103.800,368.800 103.800 C 369.514 103.800,369.831 103.625,369.706 103.300 C 369.601 103.025,369.193 102.800,368.800 102.800 C 368.407 102.800,367.999 103.025,367.894 103.300 M193.248 108.287 C 192.816 109.859,192.647 110.085,192.296 109.552 C 191.938 109.008,191.715 109.215,190.899 110.852 C 190.365 111.923,189.777 112.800,189.593 112.800 C 188.966 112.800,188.000 111.546,187.954 110.671 C 187.911 109.878,187.889 109.870,187.708 110.584 C 187.536 111.263,187.443 111.209,187.015 110.184 C 186.582 109.146,186.520 109.555,186.512 113.513 C 186.501 119.053,186.174 118.800,193.341 118.800 C 200.872 118.800,201.416 118.417,198.200 115.380 C 196.244 113.531,196.092 113.154,197.000 112.400 C 197.690 111.827,197.815 110.000,197.164 110.000 C 196.571 110.000,194.400 107.967,194.053 107.087 C 193.844 106.555,193.640 106.859,193.248 108.287 M102.427 109.100 C 82.692 109.230,84.400 108.722,84.400 114.462 L 84.400 118.400 76.600 118.400 L 68.800 118.400 68.800 116.773 C 68.800 115.269,68.732 115.168,67.902 115.431 C 66.490 115.879,66.026 116.823,66.013 119.276 C 66.006 120.528,65.817 121.666,65.592 121.805 C 63.272 123.239,62.136 134.050,63.987 137.086 C 64.735 138.313,64.740 138.441,64.101 139.886 C 63.574 141.076,63.398 143.003,63.278 148.900 C 63.125 156.387,63.124 156.400,62.216 156.400 C 59.601 156.400,56.800 161.474,56.800 166.212 L 56.800 169.134 54.840 169.554 C 53.440 169.854,52.268 169.846,50.740 169.527 C 48.818 169.125,48.428 169.167,46.916 169.940 C 45.990 170.413,44.964 170.800,44.636 170.800 C 44.308 170.800,43.131 170.995,42.020 171.233 L 40.000 171.666 40.009 174.733 C 40.021 178.842,40.542 179.523,43.800 179.683 L 46.200 179.800 46.318 182.737 C 46.486 186.903,46.996 186.623,37.800 187.419 C 33.470 187.793,33.600 187.702,33.600 190.365 C 33.600 193.336,34.023 193.200,24.781 193.200 C 15.499 193.200,16.400 192.018,16.400 204.200 C 16.400 216.547,15.028 215.200,27.607 215.200 L 37.987 215.200 38.956 213.288 C 39.489 212.236,40.054 210.481,40.213 209.388 C 40.371 208.294,40.637 207.220,40.803 207.000 C 42.217 205.127,40.540 202.691,37.500 202.204 L 36.000 201.964 36.000 199.836 L 36.000 197.709 45.100 197.495 C 56.006 197.239,55.470 197.434,61.173 191.647 C 64.017 188.761,65.435 187.600,66.116 187.600 C 67.409 187.600,68.000 186.176,68.000 183.061 C 68.000 179.360,66.819 179.600,85.033 179.600 L 101.105 179.600 101.545 177.854 C 101.787 176.893,102.105 174.807,102.253 173.218 C 102.539 170.144,102.859 169.727,104.601 170.164 C 105.511 170.393,105.600 170.606,105.600 172.559 C 105.600 175.056,106.425 177.266,108.047 179.114 C 108.681 179.837,109.200 180.602,109.200 180.814 C 109.200 182.005,111.846 181.106,113.000 179.523 C 115.097 176.644,115.561 175.499,115.581 173.149 C 115.610 169.760,115.918 169.622,122.000 170.277 C 124.985 170.598,125.000 170.606,125.033 171.800 C 125.097 174.133,125.210 174.424,126.200 174.800 C 126.750 175.009,127.200 175.448,127.200 175.776 C 127.200 176.104,127.601 176.587,128.092 176.849 C 128.582 177.112,129.225 177.568,129.520 177.863 C 129.816 178.158,130.773 178.400,131.648 178.400 C 132.830 178.400,133.476 178.656,134.165 179.400 C 135.416 180.749,135.600 180.671,135.600 178.786 C 135.600 177.898,135.891 176.727,136.247 176.184 C 136.748 175.419,136.789 175.069,136.428 174.634 C 136.109 174.249,136.094 173.989,136.381 173.812 C 136.611 173.669,136.800 173.032,136.800 172.395 C 136.800 170.173,144.670 170.384,147.400 172.679 C 148.060 173.234,148.403 173.585,148.162 173.459 C 147.922 173.333,146.842 173.575,145.762 173.996 C 144.233 174.593,144.028 174.767,144.830 174.781 C 145.426 174.792,146.270 175.255,146.830 175.880 L 147.800 176.959 146.798 176.335 C 145.860 175.750,144.552 175.722,142.084 176.233 C 140.464 176.569,141.579 177.200,143.793 177.200 C 145.498 177.200,146.183 177.405,147.127 178.200 C 148.051 178.978,148.764 179.200,150.334 179.200 C 151.444 179.200,152.464 179.380,152.600 179.600 C 153.402 180.898,155.413 178.923,156.062 176.200 C 156.219 175.540,156.567 174.272,156.835 173.381 C 157.440 171.369,156.733 169.559,155.200 169.199 C 154.469 169.027,154.200 168.700,154.200 167.982 C 154.200 166.285,158.904 166.490,159.199 168.200 C 159.391 169.316,159.549 169.414,161.469 169.608 C 164.706 169.934,165.549 171.129,166.402 176.600 C 166.997 180.416,168.911 185.900,169.899 186.623 C 170.272 186.896,170.648 187.922,170.776 189.018 C 170.978 190.747,172.000 192.124,172.000 190.667 C 172.000 190.337,172.488 189.711,173.084 189.277 C 174.067 188.561,174.123 188.389,173.684 187.425 C 172.939 185.790,173.043 176.746,173.828 174.887 C 174.272 173.834,174.382 172.795,174.203 171.329 C 174.019 169.827,174.122 168.925,174.575 168.049 C 174.919 167.384,175.200 165.871,175.200 164.687 C 175.200 163.502,175.328 162.405,175.485 162.248 C 176.195 161.538,177.021 158.528,176.760 157.600 C 175.748 153.993,176.929 152.648,180.326 153.540 C 182.597 154.137,183.196 154.849,183.214 156.976 C 183.222 157.869,183.486 159.050,183.800 159.600 C 184.114 160.150,184.378 161.064,184.386 161.630 C 184.445 165.916,197.195 165.695,197.668 161.400 C 197.798 160.214,197.831 160.199,200.464 160.083 C 203.502 159.949,203.499 159.952,203.867 156.233 C 204.210 152.757,205.673 151.555,208.026 152.814 C 208.963 153.315,209.244 168.996,208.333 169.907 C 207.858 170.382,207.853 170.378,209.810 170.991 C 211.673 171.576,208.292 175.816,205.621 176.243 L 204.000 176.502 204.022 178.751 C 204.049 181.641,204.626 187.160,204.933 187.466 C 205.063 187.596,206.211 187.814,207.485 187.951 L 209.800 188.200 209.907 198.382 C 210.026 209.671,210.203 210.400,212.826 210.400 L 213.912 210.400 214.198 215.170 C 214.564 221.263,215.073 220.722,208.300 221.449 L 206.000 221.696 206.000 223.215 C 206.000 226.103,205.727 226.000,213.379 226.000 L 220.272 226.000 220.736 224.981 C 221.030 224.336,221.200 221.469,221.200 217.155 C 221.200 213.411,221.375 210.021,221.588 209.623 C 221.812 209.203,222.023 202.675,222.088 194.149 L 222.200 179.400 223.577 179.269 C 224.554 179.176,225.400 178.678,226.490 177.555 L 228.026 175.973 227.567 173.486 C 226.856 169.635,226.553 169.236,226.731 172.385 C 226.883 175.072,226.823 175.332,225.810 176.390 C 224.792 177.452,222.000 178.280,222.000 177.520 C 222.000 177.344,222.509 177.200,223.130 177.200 C 225.024 177.200,226.002 175.756,225.991 172.974 L 225.982 170.600 225.200 171.600 C 224.752 172.173,224.414 173.230,224.409 174.076 C 224.400 175.491,224.338 175.557,222.900 175.676 C 221.446 175.796,221.393 175.855,221.175 177.600 L 220.951 179.400 220.775 177.800 C 220.539 175.645,217.249 175.156,216.606 177.180 C 216.470 177.609,216.017 178.067,215.600 178.200 C 215.183 178.333,214.732 178.783,214.599 179.202 C 214.275 180.223,212.495 181.028,210.900 180.875 C 209.408 180.731,209.110 179.725,210.500 179.528 C 211.065 179.448,211.446 179.079,211.523 178.538 C 211.597 178.021,212.026 177.580,212.595 177.437 C 213.180 177.290,213.594 176.853,213.672 176.299 C 213.754 175.722,214.122 175.354,214.699 175.272 C 215.260 175.193,215.690 174.779,215.843 174.172 C 215.994 173.571,216.376 173.200,216.843 173.200 C 218.422 173.200,216.929 170.453,215.300 170.360 C 214.833 170.334,214.933 170.214,215.600 170.000 C 216.590 169.683,216.588 169.679,215.400 169.593 C 214.679 169.542,214.480 169.434,214.900 169.324 C 215.497 169.168,215.600 168.644,215.600 165.762 C 215.600 162.562,215.652 162.359,216.582 161.935 C 217.447 161.541,217.579 161.194,217.682 159.044 C 217.790 156.800,217.874 156.603,218.700 156.632 C 219.391 156.656,219.600 156.442,219.600 155.708 C 219.600 155.183,219.756 154.849,219.947 154.967 C 221.055 155.652,221.393 148.995,220.530 143.485 L 220.293 141.970 216.863 142.085 L 213.433 142.200 212.417 144.277 C 211.444 146.263,211.330 146.354,209.770 146.377 C 208.567 146.394,207.893 146.662,207.200 147.400 C 205.462 149.250,204.953 148.587,203.967 143.200 C 203.344 139.789,204.063 140.055,195.200 139.967 L 187.400 139.889 186.878 140.945 C 186.445 141.820,186.086 142.000,184.770 142.000 C 183.475 142.000,183.101 142.180,182.737 142.978 C 182.178 144.206,181.400 144.523,180.780 143.776 C 179.692 142.466,174.341 143.853,173.894 145.561 C 173.734 146.176,173.357 146.400,172.485 146.400 L 171.295 146.400 171.030 143.100 C 170.885 141.285,170.802 138.944,170.848 137.898 C 170.935 135.876,170.576 134.986,170.180 136.243 C 170.049 136.659,169.775 137.313,169.571 137.695 C 169.367 138.077,169.200 140.433,169.200 142.931 C 169.200 145.808,168.982 148.193,168.604 149.436 C 168.277 150.516,168.007 152.255,168.004 153.300 L 168.000 155.200 166.400 155.200 C 164.893 155.200,164.800 155.131,164.800 154.014 C 164.800 152.300,163.886 152.000,158.654 152.000 C 154.209 152.000,154.049 151.970,153.864 151.100 C 153.736 150.496,153.694 150.594,153.737 151.400 C 153.800 152.594,153.815 152.601,156.800 152.879 C 161.662 153.332,162.984 153.698,163.118 154.627 C 163.221 155.342,163.059 155.423,161.818 155.278 C 160.987 155.181,160.400 154.892,160.400 154.580 C 160.400 153.718,159.567 153.412,156.641 153.200 C 153.722 152.988,153.489 152.823,152.965 150.600 L 152.683 149.400 152.283 150.700 C 151.873 152.037,150.000 152.662,150.000 151.462 C 150.000 151.166,149.640 150.598,149.200 150.200 C 148.416 149.491,148.400 149.501,148.400 150.724 C 148.400 152.139,149.267 152.800,151.125 152.800 C 151.772 152.800,152.521 153.064,152.789 153.387 C 153.057 153.710,153.394 153.959,153.538 153.940 C 156.526 153.545,159.200 154.069,159.200 155.049 C 159.200 155.927,159.104 156.018,158.612 155.610 C 158.262 155.319,157.207 155.178,156.011 155.261 C 154.232 155.384,153.994 155.308,153.952 154.600 C 153.921 154.067,153.803 154.201,153.600 155.000 C 153.311 156.137,153.292 156.147,153.247 155.180 C 153.185 153.835,152.496 153.200,151.100 153.200 C 149.511 153.200,147.600 152.129,147.600 151.239 C 147.600 149.598,146.460 149.451,146.310 151.072 C 146.191 152.345,146.109 152.467,145.816 151.800 C 145.622 151.360,145.134 150.571,144.732 150.046 L 144.000 149.092 144.000 150.550 C 144.000 151.921,144.133 152.074,146.200 153.088 C 147.685 153.816,148.400 154.407,148.400 154.907 C 148.400 155.314,148.220 155.536,148.000 155.400 C 147.780 155.264,147.600 154.924,147.600 154.645 C 147.600 154.365,146.727 153.728,145.661 153.228 C 144.067 152.482,143.648 152.060,143.311 150.860 L 142.901 149.400 142.851 150.900 C 142.791 152.671,143.884 154.000,145.400 154.000 C 146.220 154.000,146.400 154.195,146.400 155.080 C 146.400 155.920,146.293 156.053,145.920 155.680 C 145.656 155.416,145.068 155.200,144.614 155.200 C 143.772 155.200,142.407 152.801,142.394 151.297 C 142.391 150.914,142.213 150.330,142.000 150.000 C 141.675 149.497,141.611 149.524,141.606 150.162 C 141.600 150.892,141.567 150.894,140.822 150.220 C 139.437 148.966,139.626 164.694,141.016 166.346 C 142.319 167.895,142.270 168.127,140.466 168.923 C 136.539 170.655,136.077 168.994,136.623 155.101 C 136.885 148.416,136.870 148.222,136.160 148.901 C 135.617 149.420,135.385 150.358,135.268 152.501 C 135.182 154.096,134.908 155.650,134.659 155.957 C 134.388 156.291,134.149 158.809,134.060 162.257 L 133.911 168.000 118.951 168.000 L 103.990 168.000 104.095 153.100 L 104.200 138.200 119.300 138.095 C 130.977 138.014,134.401 137.878,134.402 137.495 C 134.404 137.223,134.665 136.502,134.983 135.892 C 135.301 135.283,135.750 133.573,135.981 132.092 C 136.727 127.313,137.040 125.782,137.385 125.224 C 137.614 124.854,137.574 124.769,137.262 124.962 C 136.641 125.345,136.670 125.159,137.600 122.800 C 138.040 121.684,138.400 119.877,138.400 118.785 L 138.400 116.800 145.353 116.800 C 151.901 116.800,152.319 116.845,152.510 117.577 C 152.789 118.643,152.521 118.809,150.633 118.740 L 149.000 118.680 150.800 118.399 C 151.790 118.245,150.080 118.207,147.000 118.314 C 140.338 118.547,140.126 118.626,139.940 120.964 C 139.783 122.941,140.637 122.684,141.717 120.430 C 141.986 119.869,142.565 119.363,143.003 119.305 C 143.683 119.216,143.668 119.257,142.900 119.588 C 142.189 119.893,142.003 120.292,142.013 121.487 L 142.027 123.000 142.813 122.056 C 143.246 121.536,143.600 120.880,143.600 120.598 C 143.600 120.288,144.275 120.013,145.300 119.906 C 147.467 119.680,147.530 119.752,145.858 120.546 C 144.691 121.099,144.000 121.884,144.000 122.655 C 144.000 122.760,144.400 122.565,144.889 122.223 C 145.378 121.880,146.115 121.600,146.526 121.600 C 146.938 121.600,147.369 121.240,147.484 120.800 C 147.834 119.460,148.498 119.908,148.328 121.369 C 148.188 122.563,148.256 122.691,148.857 122.370 C 149.812 121.858,150.220 120.396,149.543 119.912 C 149.136 119.622,149.184 119.584,149.733 119.762 C 150.136 119.893,150.796 120.000,151.201 120.000 C 151.692 120.000,152.024 120.397,152.199 121.195 C 152.565 122.862,153.066 123.027,152.878 121.419 C 152.793 120.691,152.904 119.983,153.124 119.847 C 153.361 119.701,153.443 119.914,153.325 120.367 C 153.214 120.789,153.315 121.464,153.550 121.867 C 153.915 122.495,153.977 122.414,153.988 121.300 C 154.003 119.717,156.123 119.298,156.516 120.800 C 156.642 121.284,157.062 121.600,157.577 121.600 C 158.045 121.600,158.872 121.891,159.414 122.246 C 160.786 123.145,160.646 122.551,159.158 121.160 L 157.915 120.000 160.311 120.000 C 162.370 120.000,162.736 120.112,162.916 120.800 C 163.042 121.284,163.462 121.600,163.977 121.600 C 164.445 121.600,165.299 121.908,165.874 122.285 C 166.898 122.956,166.910 122.953,166.476 122.142 C 166.055 121.356,164.507 120.120,163.200 119.528 C 162.700 119.302,162.713 119.252,163.276 119.228 C 163.648 119.213,164.064 119.380,164.200 119.600 C 164.336 119.820,165.247 120.000,166.224 120.000 C 167.463 120.000,168.000 120.166,168.000 120.549 C 168.000 120.851,168.392 121.976,168.872 123.049 C 169.351 124.122,169.885 125.630,170.058 126.400 C 170.319 127.559,170.336 127.490,170.156 126.000 C 170.036 125.010,169.940 123.840,169.942 123.400 C 169.945 122.960,169.858 121.669,169.749 120.531 L 169.550 118.462 162.173 118.418 C 153.945 118.368,153.600 118.310,153.600 116.957 C 153.600 114.645,152.720 114.400,144.427 114.400 C 136.042 114.400,136.788 114.147,136.182 117.200 C 136.029 117.970,135.634 119.127,135.305 119.771 C 134.975 120.415,134.592 122.215,134.453 123.771 L 134.200 126.600 118.600 126.600 L 103.000 126.600 102.884 123.322 L 102.768 120.044 111.365 119.922 C 121.574 119.777,120.951 120.093,121.139 114.959 C 121.291 110.832,120.775 108.731,119.651 108.895 C 119.293 108.948,111.542 109.040,102.427 109.100 M366.453 110.694 C 366.424 111.186,366.181 112.408,365.913 113.409 C 365.530 114.840,365.530 115.397,365.913 116.009 C 367.049 117.828,366.027 119.267,363.382 119.576 C 360.827 119.874,360.741 120.535,363.070 121.959 C 364.132 122.608,365.720 123.586,366.600 124.133 C 367.577 124.741,368.979 125.186,370.200 125.278 C 371.300 125.360,372.441 125.577,372.735 125.759 C 373.699 126.356,374.200 125.234,374.200 122.480 C 374.200 119.863,374.171 119.787,372.950 119.249 C 371.712 118.704,371.702 118.676,371.886 116.249 C 372.014 114.557,371.880 113.367,371.451 112.400 C 370.887 111.126,370.829 111.090,370.801 112.000 L 370.772 113.000 370.200 112.000 C 369.636 111.013,369.628 111.011,369.614 111.900 C 369.604 112.529,369.359 112.800,368.800 112.800 C 368.241 112.800,367.996 112.529,367.988 111.900 C 367.976 111.022,367.964 111.019,367.495 111.800 C 367.049 112.542,366.996 112.498,366.760 111.200 C 366.604 110.341,366.485 110.145,366.453 110.694 M2.900 119.612 C 2.136 119.920,2.000 120.274,2.000 121.964 C 2.000 123.058,1.820 124.064,1.600 124.200 C 1.379 124.336,1.221 125.917,1.246 127.724 C 1.272 129.526,1.380 130.659,1.487 130.242 C 1.643 129.633,1.750 129.594,2.034 130.042 C 2.308 130.475,2.393 130.420,2.412 129.800 C 2.431 129.177,2.557 129.265,2.986 130.200 C 3.429 131.169,3.547 131.246,3.596 130.600 L 3.656 129.800 4.000 130.600 C 4.318 131.340,4.349 131.325,4.418 130.400 C 4.477 129.610,4.534 129.559,4.687 130.158 C 4.842 130.763,4.950 130.804,5.225 130.360 C 5.504 129.908,5.681 129.953,6.171 130.602 C 6.761 131.382,6.775 131.378,6.793 130.400 C 6.820 128.967,7.586 130.224,7.594 131.714 C 7.599 132.704,7.689 132.780,8.400 132.400 C 9.131 132.009,9.200 132.096,9.200 133.413 C 9.200 134.672,9.099 134.822,8.400 134.600 C 7.910 134.444,7.600 134.528,7.600 134.816 C 7.600 135.090,7.322 135.179,6.932 135.029 C 6.564 134.888,6.115 135.004,5.932 135.286 C 5.712 135.627,5.499 135.661,5.300 135.387 C 4.941 134.892,4.400 134.886,3.638 135.368 C 3.229 135.627,3.164 135.581,3.400 135.200 C 3.636 134.819,3.571 134.773,3.162 135.032 C 2.853 135.228,2.060 135.390,1.400 135.394 L 0.200 135.400 0.096 152.400 C -0.024 171.946,-0.187 170.519,2.080 169.863 L 3.800 169.366 4.103 160.983 C 4.269 156.372,4.502 149.337,4.619 145.350 L 4.833 138.100 7.313 137.819 C 10.124 137.501,10.949 137.037,10.443 136.058 C 10.256 135.696,9.974 131.980,9.817 127.800 C 9.659 123.591,9.347 119.977,9.117 119.700 C 8.635 119.119,4.280 119.058,2.900 119.612 M35.113 121.476 C 34.704 121.582,34.350 122.168,34.238 122.927 C 33.633 127.014,33.199 131.267,33.199 133.092 C 33.200 135.002,33.113 135.203,32.200 135.392 C 31.650 135.507,30.750 135.693,30.200 135.808 L 29.200 136.015 29.200 144.131 C 29.200 153.522,29.260 153.724,32.000 153.527 L 33.772 153.400 33.651 144.554 L 33.530 135.709 35.552 135.514 C 38.676 135.214,38.801 134.995,38.791 129.851 C 38.779 124.099,37.370 120.891,35.113 121.476 M255.067 135.467 C 254.548 135.985,254.809 139.241,255.446 140.214 C 257.051 142.663,259.485 139.649,258.201 136.802 C 257.503 135.253,255.944 134.589,255.067 135.467 M94.500 136.625 L 97.200 136.868 97.206 144.534 C 97.213 153.202,97.235 153.276,99.872 153.579 L 101.800 153.800 101.918 156.036 C 102.077 159.051,102.177 159.018,93.300 158.883 L 85.600 158.767 85.600 156.453 C 85.600 153.407,84.722 152.501,81.600 152.324 L 79.400 152.200 79.400 144.600 L 79.400 137.000 82.268 136.800 C 83.845 136.690,85.283 136.453,85.462 136.272 C 85.769 135.964,88.239 136.060,94.500 136.625 M314.116 136.706 C 313.244 136.849,313.231 136.957,313.116 144.647 C 312.984 153.508,312.871 153.200,316.247 153.200 C 320.255 153.200,320.000 153.718,320.000 145.583 C 320.000 135.920,319.889 135.753,314.116 136.706 M354.400 137.318 L 353.400 137.824 353.400 145.212 L 353.400 152.600 354.898 152.724 C 356.686 152.872,356.616 152.649,357.127 159.899 C 357.588 166.434,357.564 166.400,361.711 166.400 C 364.522 166.400,365.089 166.275,366.236 165.400 C 367.367 164.537,367.961 164.400,370.573 164.400 C 374.918 164.400,375.200 164.047,375.200 158.614 C 375.200 155.911,375.001 153.961,374.639 153.114 C 374.330 152.391,373.925 151.080,373.739 150.200 C 373.458 148.876,373.219 148.579,372.349 148.478 C 371.771 148.411,370.885 147.916,370.380 147.378 C 369.874 146.840,369.055 146.400,368.559 146.400 C 367.578 146.400,366.399 145.129,365.607 143.216 C 365.132 142.071,364.976 142.000,362.912 142.000 C 360.715 142.000,356.831 139.010,356.807 137.300 C 356.798 136.661,355.683 136.669,354.400 137.318 M387.300 137.065 C 386.930 137.214,386.799 138.896,386.798 143.533 C 386.796 148.412,386.658 150.063,386.175 150.989 C 385.310 152.648,386.156 153.199,389.576 153.203 C 391.019 153.204,393.415 153.320,394.900 153.461 C 397.567 153.713,397.600 153.704,397.600 152.737 C 397.600 151.471,394.610 148.400,393.378 148.400 C 392.619 148.400,392.451 148.138,392.290 146.700 C 392.184 145.765,391.814 144.280,391.467 143.400 C 391.119 142.520,390.827 140.675,390.818 139.300 L 390.800 136.800 389.300 136.832 C 388.475 136.849,387.575 136.954,387.300 137.065 M399.328 151.200 C 399.328 152.630,399.401 153.215,399.489 152.500 C 399.578 151.785,399.578 150.615,399.489 149.900 C 399.401 149.185,399.328 149.770,399.328 151.200 M141.883 154.895 C 141.787 155.393,141.705 155.080,141.701 154.200 C 141.696 153.320,141.775 152.913,141.875 153.295 C 141.975 153.678,141.979 154.398,141.883 154.895 M13.709 153.524 C 13.355 153.749,13.187 156.005,13.109 161.615 L 13.000 169.393 11.500 170.364 C 9.440 171.696,9.474 172.988,11.629 175.231 C 13.743 177.430,15.605 177.215,17.083 174.600 C 18.149 172.713,18.526 154.686,17.520 153.680 C 16.984 153.144,14.469 153.041,13.709 153.524 M152.000 154.600 C 152.000 154.973,151.622 155.200,151.000 155.200 C 150.378 155.200,150.000 154.973,150.000 154.600 C 150.000 154.227,150.378 154.000,151.000 154.000 C 151.622 154.000,152.000 154.227,152.000 154.600 M269.266 166.900 C 268.956 167.495,268.763 170.921,268.698 177.000 L 268.600 186.200 266.672 186.421 C 264.034 186.725,264.013 186.797,264.006 195.486 C 263.999 204.613,263.718 204.160,269.400 204.184 L 273.000 204.200 273.200 201.400 L 273.400 198.600 280.884 198.491 L 288.367 198.382 288.573 197.091 C 289.412 191.833,289.573 189.506,289.348 185.907 C 289.043 181.047,288.788 180.400,287.177 180.400 C 286.294 180.400,285.865 180.142,285.531 179.408 C 285.282 178.862,284.755 178.313,284.360 178.187 C 283.964 178.062,283.533 177.617,283.400 177.200 C 283.267 176.783,282.798 176.326,282.357 176.186 C 281.915 176.046,281.389 175.497,281.187 174.966 C 280.985 174.435,280.541 174.000,280.201 174.000 C 279.861 174.000,279.379 173.553,279.131 173.008 C 278.882 172.462,278.346 171.910,277.939 171.781 C 277.533 171.652,277.200 171.391,277.200 171.202 C 277.200 169.925,273.276 168.907,272.596 170.007 C 272.155 170.720,271.694 170.058,271.200 168.001 C 270.683 165.846,270.014 165.465,269.266 166.900 M289.633 168.564 C 288.667 169.099,288.667 169.101,289.507 169.550 C 291.375 170.550,294.894 169.643,293.396 168.547 C 292.456 167.860,290.891 167.867,289.633 168.564 M319.500 168.988 C 318.855 169.875,318.800 171.566,318.800 190.575 L 318.800 211.200 319.730 211.200 C 320.770 211.200,321.982 210.042,322.953 208.120 C 323.971 206.106,323.924 172.196,322.900 169.706 C 322.069 167.685,320.663 167.388,319.500 168.988 M184.400 168.554 C 184.400 169.271,186.477 169.980,187.012 169.445 C 187.899 168.558,187.747 168.400,186.000 168.400 C 185.120 168.400,184.400 168.469,184.400 168.554 M386.592 170.145 C 384.802 170.651,384.556 171.752,386.142 172.150 C 386.651 172.277,387.332 172.987,387.713 173.788 C 388.811 176.088,391.551 175.460,391.587 172.900 C 391.594 172.405,391.801 172.000,392.047 172.000 C 392.296 172.000,392.401 171.647,392.284 171.200 C 392.101 170.501,392.272 170.400,393.637 170.400 C 394.497 170.400,395.200 170.265,395.199 170.100 C 395.197 169.614,388.343 169.650,386.592 170.145 M216.000 171.180 C 216.000 171.389,215.756 171.704,215.458 171.880 C 215.161 172.056,214.711 172.593,214.459 173.073 C 214.207 173.553,213.641 174.060,213.200 174.200 C 212.760 174.340,212.400 174.716,212.400 175.036 C 212.400 175.355,211.953 175.821,211.408 176.069 C 210.862 176.318,210.313 176.845,210.187 177.240 C 210.062 177.636,209.636 178.062,209.240 178.187 C 208.845 178.313,208.318 178.862,208.069 179.408 C 207.342 181.005,206.123 180.720,206.324 179.000 C 206.470 177.750,206.615 177.600,207.679 177.600 C 208.631 177.600,208.959 177.363,209.316 176.417 C 209.578 175.723,210.101 175.186,210.581 175.117 C 211.182 175.031,211.433 174.654,211.525 173.701 C 211.624 172.675,211.875 172.346,212.721 172.134 C 213.310 171.986,214.032 171.625,214.325 171.333 C 214.940 170.718,216.000 170.621,216.000 171.180 M220.800 172.811 C 220.800 174.704,222.765 175.561,223.586 174.026 C 224.452 172.408,224.121 171.782,222.400 171.782 C 220.948 171.782,220.800 171.877,220.800 172.811 M0.299 177.400 C -0.040 179.267,-0.001 220.297,0.378 261.200 L 0.643 289.800 0.721 264.553 L 0.800 239.305 2.486 239.079 C 5.348 238.695,5.200 240.131,5.200 212.729 L 5.200 188.010 6.800 187.000 C 8.555 185.892,8.758 185.120,7.835 183.060 C 7.524 182.367,7.157 181.127,7.018 180.305 C 6.707 178.462,5.912 178.000,3.053 178.000 C 0.952 178.000,0.847 177.951,0.721 176.900 C 0.607 175.943,0.552 176.009,0.299 177.400 M220.400 179.000 C 220.400 180.368,220.364 180.400,218.787 180.400 C 217.726 180.400,217.097 180.604,216.946 180.998 C 216.647 181.775,216.000 181.369,216.000 180.404 C 216.000 179.932,216.333 179.608,216.900 179.528 C 217.478 179.446,217.846 179.078,217.928 178.500 C 218.169 176.801,220.400 177.252,220.400 179.000 M229.742 180.894 C 229.574 181.166,229.486 181.965,229.547 182.669 C 229.640 183.751,229.462 184.051,228.405 184.598 C 227.342 185.147,227.171 185.438,227.276 186.523 L 227.400 187.800 231.776 187.914 C 236.939 188.049,237.200 188.201,237.200 191.069 C 237.200 192.340,237.481 193.770,237.878 194.520 C 238.267 195.253,238.651 197.167,238.778 199.000 L 239.000 202.200 240.400 202.200 L 241.800 202.200 241.909 195.291 C 242.028 187.837,241.817 186.800,240.186 186.800 C 239.318 186.800,239.200 186.625,239.200 185.335 C 239.200 184.488,238.771 183.139,238.183 182.135 L 237.166 180.400 233.607 180.400 C 231.213 180.400,229.947 180.562,229.742 180.894 M395.815 204.242 C 395.541 204.516,394.687 205.004,393.917 205.326 C 392.350 205.980,392.554 205.270,391.358 214.248 L 390.659 219.495 391.558 220.637 C 392.408 221.717,392.441 222.009,392.178 226.064 C 391.837 231.320,392.049 232.400,393.421 232.400 C 394.408 232.400,397.200 234.737,397.200 235.564 C 397.200 236.055,398.805 237.200,399.493 237.200 C 399.907 237.200,399.988 233.924,399.904 220.556 L 399.800 203.912 398.057 203.828 C 397.088 203.781,396.092 203.965,395.815 204.242 M252.300 206.032 C 251.674 206.396,251.600 207.204,251.600 213.620 L 251.600 220.800 249.614 220.800 C 247.234 220.800,246.800 221.356,246.800 224.400 C 246.800 227.444,247.234 228.000,249.614 228.000 C 251.547 228.000,251.600 228.032,251.600 229.181 C 251.600 231.035,252.375 232.342,253.554 232.479 C 254.492 232.587,254.612 232.790,254.720 234.443 C 254.865 236.687,256.088 237.653,257.797 236.874 L 258.800 236.417 258.800 221.255 L 258.800 206.093 257.900 205.852 C 256.485 205.473,253.071 205.583,252.300 206.032 M15.053 221.541 C 14.465 222.191,14.396 223.257,14.491 230.241 L 14.600 238.200 15.600 238.200 L 16.600 238.200 16.713 230.400 C 16.854 220.725,16.672 219.752,15.053 221.541 M307.008 224.277 C 306.714 226.625,307.208 227.600,308.691 227.600 C 309.107 227.600,309.130 227.783,308.793 228.413 C 308.378 229.189,308.978 231.947,309.580 232.031 C 309.701 232.047,310.115 232.122,310.500 232.195 C 310.885 232.269,311.200 232.159,311.200 231.951 C 311.200 231.718,311.486 231.725,311.939 231.967 C 312.452 232.242,312.836 232.215,313.197 231.881 C 313.607 231.502,313.653 231.513,313.415 231.933 C 313.180 232.345,313.506 232.450,314.856 232.396 C 315.815 232.357,316.780 232.364,317.000 232.410 C 317.220 232.457,317.529 232.476,317.686 232.452 C 317.843 232.429,317.854 232.722,317.711 233.105 C 317.483 233.713,317.535 233.731,318.125 233.251 C 318.721 232.766,318.800 232.807,318.800 233.600 C 318.800 234.353,318.897 234.417,319.400 234.000 C 319.730 233.726,320.000 233.200,320.000 232.831 C 320.000 232.462,320.220 231.940,320.490 231.670 C 320.877 231.283,320.877 231.015,320.490 230.395 C 319.605 228.978,319.892 228.098,321.400 227.600 C 323.893 226.777,322.815 225.600,319.568 225.600 C 317.985 225.600,316.624 225.292,315.079 224.585 C 313.860 224.026,311.948 223.461,310.831 223.329 C 309.503 223.172,308.800 222.900,308.800 222.544 C 308.800 220.682,307.272 222.160,307.008 224.277 M320.957 222.633 C 321.091 222.981,321.200 223.341,321.200 223.433 C 321.200 223.525,321.470 223.600,321.800 223.600 C 322.133 223.600,322.400 223.244,322.400 222.800 C 322.400 222.253,322.133 222.000,321.557 222.000 C 320.953 222.000,320.783 222.179,320.957 222.633 M384.900 223.670 C 383.712 224.405,383.600 224.647,383.600 226.489 C 383.600 227.597,383.217 229.903,382.748 231.612 C 381.304 236.880,382.256 238.800,386.309 238.800 C 389.681 238.800,390.516 234.481,388.211 228.964 C 387.897 228.213,387.427 226.518,387.168 225.199 C 386.641 222.522,386.697 222.559,384.900 223.670 M290.200 236.800 C 290.336 237.020,290.977 237.200,291.624 237.200 C 292.271 237.200,292.800 237.020,292.800 236.800 C 292.800 236.580,292.159 236.400,291.376 236.400 C 290.529 236.400,290.053 236.562,290.200 236.800 M160.200 238.363 C 156.685 238.715,155.887 239.673,158.222 240.737 C 158.760 240.982,159.200 241.461,159.200 241.801 C 159.200 242.141,159.635 242.585,160.166 242.787 C 160.697 242.989,161.246 243.515,161.386 243.957 C 161.526 244.398,161.983 244.867,162.400 245.000 C 162.817 245.133,163.267 245.583,163.400 246.000 C 163.533 246.417,164.002 246.874,164.443 247.014 C 164.885 247.154,165.415 247.713,165.622 248.257 C 165.952 249.127,166.203 249.231,167.699 249.123 L 169.400 249.000 169.720 246.000 C 170.572 238.018,169.802 237.400,160.200 238.363 M286.800 238.600 C 286.800 238.978,287.181 239.200,287.829 239.200 C 288.394 239.200,289.127 238.930,289.457 238.600 C 289.990 238.067,289.876 238.000,288.429 238.000 C 287.248 238.000,286.800 238.165,286.800 238.600 M333.482 255.578 C 339.636 255.818,339.763 255.866,340.612 258.250 L 341.165 259.800 341.182 257.964 C 341.207 255.404,340.567 255.181,333.481 255.278 L 327.800 255.357 333.482 255.578 M227.600 256.800 C 227.600 257.702,228.747 257.893,229.520 257.120 C 230.298 256.342,230.078 256.000,228.800 256.000 C 227.867 256.000,227.600 256.178,227.600 256.800 M230.400 256.400 C 230.400 256.620,230.670 256.800,231.000 256.800 C 231.330 256.800,231.600 256.620,231.600 256.400 C 231.600 256.180,231.330 256.000,231.000 256.000 C 230.670 256.000,230.400 256.180,230.400 256.400 M137.621 264.700 C 137.392 265.525,137.203 267.140,137.202 268.290 C 137.199 271.009,136.450 271.416,130.351 272.012 C 120.583 272.966,118.400 273.715,118.400 276.114 C 118.398 280.189,117.376 283.591,115.611 285.389 C 114.229 286.797,113.896 287.450,113.648 289.242 C 113.217 292.356,111.755 294.221,106.834 297.930 C 105.670 298.808,105.600 299.014,105.600 301.545 L 105.600 304.230 109.500 305.477 C 111.645 306.163,114.430 306.818,115.690 306.932 C 116.949 307.047,118.164 307.254,118.390 307.394 C 118.654 307.557,118.800 311.557,118.800 318.634 L 118.800 329.620 119.826 330.010 C 120.390 330.224,122.190 330.400,123.826 330.400 L 126.800 330.400 126.800 331.754 C 126.800 333.761,127.965 334.343,132.261 334.484 L 135.800 334.600 135.928 336.399 C 136.100 338.826,137.659 340.554,138.261 338.985 C 138.391 338.647,138.224 338.062,137.890 337.685 C 136.929 336.601,135.874 332.250,136.153 330.523 C 136.498 328.388,136.500 328.422,135.871 326.200 C 135.533 325.004,135.188 320.985,135.012 316.200 C 134.680 307.158,134.885 307.621,131.200 307.590 C 129.770 307.578,126.980 307.207,125.000 306.765 C 123.020 306.324,120.860 305.910,120.200 305.846 C 119.540 305.782,117.605 305.397,115.900 304.992 L 112.800 304.254 112.800 302.012 C 112.800 299.851,112.872 299.699,114.800 297.800 C 116.733 295.896,116.800 295.754,116.800 293.564 C 116.800 291.473,117.567 289.834,118.234 290.501 C 118.557 290.824,120.599 288.671,120.481 288.130 C 120.425 287.872,120.564 287.546,120.789 287.407 C 121.015 287.267,121.200 286.212,121.200 285.063 C 121.200 283.061,121.293 282.881,123.382 280.818 C 125.444 278.781,125.571 278.541,125.682 276.446 C 125.821 273.840,125.348 274.040,133.820 273.000 C 141.051 272.112,142.801 272.806,142.799 276.562 C 142.798 277.766,143.116 279.255,143.575 280.200 C 145.638 284.450,147.200 288.152,147.200 288.791 C 147.200 289.358,147.558 289.506,149.000 289.535 C 150.168 289.558,150.797 289.400,150.792 289.085 C 150.762 287.258,149.883 282.938,149.325 281.877 C 148.920 281.105,148.555 279.142,148.403 276.911 C 148.174 273.549,148.038 273.081,146.881 271.640 C 146.182 270.771,145.409 269.617,145.163 269.078 C 144.917 268.538,144.074 267.759,143.291 267.346 C 142.508 266.934,141.516 265.967,141.088 265.198 C 139.673 262.656,138.246 262.451,137.621 264.700 M34.143 272.200 C 33.735 272.505,33.585 274.491,33.505 280.600 L 33.400 288.600 31.800 288.720 C 29.127 288.922,29.200 288.427,29.200 306.207 L 29.200 322.261 30.126 323.130 C 31.319 324.252,32.441 324.233,33.530 323.074 C 34.393 322.156,34.400 322.020,34.400 306.354 C 34.400 294.603,34.523 290.437,34.880 290.080 C 35.227 289.733,38.095 289.600,45.266 289.600 C 54.650 289.600,55.194 289.559,55.586 288.826 C 56.208 287.663,56.133 273.530,55.500 272.690 C 54.907 271.902,35.146 271.449,34.143 272.200 M68.900 273.865 C 68.527 274.016,68.399 275.856,68.398 281.133 C 68.396 286.620,68.261 288.456,67.798 289.346 C 67.014 290.848,66.916 304.177,67.685 304.653 C 68.731 305.299,74.568 305.308,76.105 304.666 L 77.600 304.041 77.600 289.239 L 77.600 274.438 76.100 274.021 C 74.579 273.599,69.816 273.495,68.900 273.865 M198.854 279.983 L 196.913 281.966 196.445 280.939 C 196.083 280.144,195.777 279.966,195.089 280.151 C 194.600 280.282,193.710 280.392,193.110 280.395 C 192.321 280.398,191.859 280.713,191.434 281.534 C 190.958 282.454,190.635 282.638,189.724 282.506 C 187.862 282.238,186.800 283.585,186.800 286.216 C 186.800 288.344,186.771 288.400,185.675 288.400 C 184.968 288.400,184.156 288.811,183.491 289.505 L 182.433 290.609 182.256 303.205 C 182.050 317.845,181.781 320.600,180.275 323.503 C 179.023 325.916,177.600 332.058,177.311 336.300 L 177.113 339.200 178.713 339.200 C 180.725 339.200,180.800 339.006,180.800 333.811 C 180.800 330.122,182.290 323.832,182.414 327.000 C 182.474 328.555,184.907 321.367,185.088 319.100 L 185.271 316.800 186.607 316.800 C 187.342 316.800,188.224 316.519,188.568 316.175 C 189.135 315.608,189.276 315.608,190.086 316.175 C 190.576 316.519,191.568 316.800,192.289 316.800 L 193.600 316.800 193.600 318.914 C 193.600 320.946,193.685 321.111,195.800 323.200 C 197.943 325.317,198.000 325.430,198.000 327.601 C 198.000 329.746,198.075 329.904,200.000 331.800 C 202.596 334.357,203.013 337.969,200.800 338.740 C 199.820 339.082,199.600 339.382,199.600 340.379 C 199.600 341.051,199.401 341.600,199.157 341.600 C 198.914 341.600,198.822 341.880,198.953 342.222 C 199.121 342.659,198.836 342.969,197.996 343.261 C 196.849 343.661,196.802 343.772,196.847 345.939 C 196.883 347.620,196.959 347.899,197.147 347.025 C 197.338 346.138,197.705 345.772,198.647 345.528 C 199.402 345.332,200.270 344.653,200.847 343.805 C 201.371 343.035,202.107 342.404,202.481 342.403 C 203.107 342.400,203.991 340.358,203.998 338.900 C 203.999 338.625,204.180 338.400,204.400 338.400 C 205.233 338.400,204.881 312.911,204.013 310.400 C 203.257 308.213,203.257 308.195,204.070 307.328 C 204.847 306.499,204.874 306.145,204.620 300.128 C 204.474 296.648,204.292 291.591,204.217 288.892 C 204.141 286.193,203.947 283.673,203.784 283.292 C 203.622 282.911,203.525 282.054,203.568 281.387 C 203.815 277.563,201.809 276.966,198.854 279.983 M152.995 285.000 C 153.098 287.420,153.293 290.436,153.428 291.702 C 153.625 293.540,153.566 293.962,153.134 293.796 C 152.827 293.678,152.424 293.979,152.197 294.495 C 151.893 295.188,151.519 295.376,150.600 295.297 L 149.400 295.193 150.300 295.846 C 151.383 296.630,151.605 299.200,150.591 299.200 C 150.053 299.200,150.050 299.305,150.565 300.100 C 150.886 300.595,151.202 302.116,151.268 303.480 C 151.372 305.652,151.496 305.987,152.267 306.181 C 152.751 306.302,153.261 306.761,153.400 307.201 C 153.540 307.640,153.991 308.000,154.403 308.000 C 155.431 308.000,155.501 308.251,155.234 311.000 C 155.043 312.961,154.872 313.390,154.300 313.344 C 153.799 313.305,153.596 313.589,153.587 314.344 C 153.575 315.330,153.538 315.351,153.021 314.669 C 152.537 314.031,152.462 314.486,152.432 318.246 C 152.393 323.117,152.272 323.324,149.700 322.954 C 148.187 322.736,148.000 322.797,148.000 323.506 C 148.000 323.944,147.730 324.526,147.400 324.800 C 146.996 325.135,146.800 326.038,146.800 327.564 C 146.800 329.754,146.733 329.896,144.800 331.800 C 142.857 333.713,142.800 333.836,142.800 336.085 L 142.800 338.400 141.000 338.400 C 139.667 338.400,139.200 338.556,139.200 339.000 C 139.200 339.500,139.993 339.600,143.938 339.600 C 149.920 339.600,149.806 339.706,150.147 333.829 C 150.629 325.525,152.800 324.836,152.800 332.986 C 152.800 338.422,153.020 339.200,154.557 339.200 C 156.141 339.200,158.000 330.806,158.000 323.650 C 158.000 318.495,158.470 314.457,159.514 310.647 L 160.158 308.295 159.079 307.367 C 158.016 306.452,158.000 306.367,158.000 301.519 C 158.000 295.776,157.287 291.554,155.751 288.203 C 155.147 286.885,154.237 284.635,153.730 283.203 L 152.807 280.600 152.995 285.000 M356.400 317.911 C 356.400 323.159,356.432 323.200,360.600 323.200 C 364.774 323.200,364.802 323.164,364.787 317.886 L 364.775 313.400 363.807 314.500 C 362.413 316.084,359.162 316.097,357.522 314.525 L 356.400 313.450 356.400 317.911 M275.833 323.057 C 275.487 323.961,275.781 324.146,276.392 323.410 C 277.241 322.387,278.321 322.634,278.098 323.800 C 277.914 324.761,277.987 324.800,279.944 324.800 L 281.982 324.800 282.091 332.095 L 282.200 339.390 284.000 340.271 C 284.990 340.756,286.385 341.163,287.100 341.176 L 288.400 341.200 288.400 343.767 C 288.400 346.861,288.643 347.600,289.657 347.600 C 290.308 347.600,290.360 347.474,289.994 346.788 C 289.078 345.078,289.667 341.864,291.000 341.289 C 291.660 341.005,292.650 340.514,293.200 340.199 C 293.750 339.884,294.785 339.317,295.500 338.939 C 297.416 337.926,297.465 334.178,295.581 332.704 C 294.744 332.049,294.130 331.007,293.618 329.375 L 292.873 327.000 292.836 333.116 L 292.800 339.232 291.174 339.136 C 289.229 339.022,289.039 338.784,289.392 336.902 C 289.593 335.829,289.757 335.603,290.026 336.028 C 290.251 336.384,290.385 334.334,290.380 330.600 C 290.372 325.197,290.315 324.699,289.800 325.600 L 289.228 326.600 289.214 325.380 C 289.198 323.988,288.577 323.200,287.496 323.200 C 287.087 323.200,286.864 323.020,287.000 322.800 C 287.160 322.541,285.285 322.400,281.666 322.400 C 276.859 322.400,276.051 322.491,275.833 323.057 M46.943 323.405 C 46.303 325.071,49.943 326.001,50.804 324.392 C 51.439 323.205,50.970 322.800,48.964 322.800 C 47.736 322.800,47.102 322.990,46.943 323.405 M338.786 333.574 C 339.014 333.999,339.203 335.664,339.206 337.274 C 339.210 339.311,339.330 340.018,339.600 339.600 C 340.486 338.228,339.845 332.800,338.796 332.800 C 338.501 332.800,338.498 333.035,338.786 333.574 M271.825 340.891 C 272.329 342.372,272.409 345.225,272.313 358.496 C 272.223 371.130,272.301 374.249,272.700 373.917 C 273.310 373.411,273.441 339.600,272.833 339.600 C 272.631 339.600,272.186 339.493,271.844 339.361 C 271.284 339.147,271.282 339.298,271.825 340.891 M0.362 348.303 C 0.261 349.239,0.293 350.949,0.433 352.103 C 0.573 353.256,0.713 353.725,0.744 353.143 C 0.784 352.382,1.072 352.019,1.773 351.842 C 3.619 351.379,3.661 348.000,1.822 348.000 C 1.231 348.000,0.798 347.729,0.702 347.300 C 0.616 346.915,0.463 347.366,0.362 348.303 M392.941 347.597 C 392.468 347.788,391.939 348.182,391.764 348.472 C 391.518 348.881,391.576 348.900,392.023 348.554 C 392.340 348.308,393.140 347.917,393.800 347.685 C 394.460 347.453,394.730 347.260,394.400 347.257 C 394.070 347.254,393.413 347.407,392.941 347.597 M220.353 350.347 C 221.216 350.589,221.244 350.665,220.653 351.156 C 220.079 351.633,220.000 352.993,220.000 362.468 L 220.000 373.238 221.058 374.219 C 222.049 375.137,222.400 375.200,226.533 375.200 L 230.950 375.200 229.875 374.078 L 228.800 372.956 228.800 362.600 L 228.800 352.244 229.875 351.122 L 230.950 350.000 225.175 350.040 C 221.999 350.062,219.829 350.200,220.353 350.347 M187.689 357.423 C 186.921 357.961,186.807 358.382,186.854 360.523 C 186.884 361.885,186.997 362.550,187.104 362.000 C 187.287 361.067,187.321 361.053,187.622 361.800 C 187.927 362.559,187.945 362.554,187.972 361.700 C 188.033 359.749,190.424 361.169,190.862 363.417 C 190.952 363.879,191.339 364.200,191.807 364.200 C 193.004 364.200,193.600 364.740,193.600 365.824 C 193.600 366.637,193.796 366.800,194.776 366.800 C 195.994 366.800,196.803 366.103,196.105 365.655 C 195.887 365.515,195.572 364.950,195.405 364.400 C 195.238 363.850,194.910 363.161,194.676 362.869 C 194.442 362.577,194.298 361.442,194.356 360.347 C 194.490 357.821,193.942 357.100,192.145 357.437 C 191.274 357.600,190.800 357.532,190.800 357.245 C 190.800 356.586,188.713 356.706,187.689 357.423 M394.906 361.725 C 394.992 361.986,395.454 362.258,395.931 362.328 C 396.409 362.398,396.800 362.709,396.800 363.018 C 396.800 363.426,397.120 363.516,397.967 363.347 C 398.965 363.147,399.156 363.249,399.294 364.057 C 399.451 364.972,399.465 364.967,399.776 363.881 C 400.154 362.561,400.059 362.428,398.549 362.165 C 397.917 362.055,396.804 361.804,396.075 361.608 C 395.102 361.345,394.792 361.377,394.906 361.725 M319.600 374.000 C 318.291 374.276,318.335 374.298,320.276 374.347 C 321.418 374.376,322.464 374.220,322.600 374.000 C 322.877 373.552,321.727 373.552,319.600 374.000 M193.476 375.661 C 193.078 375.884,191.605 376.006,190.203 375.933 L 187.653 375.800 187.522 384.400 C 187.325 397.373,187.800 398.800,192.319 398.800 C 194.580 398.800,194.978 398.919,195.671 399.800 C 196.223 400.501,196.848 400.800,197.759 400.800 C 198.637 400.800,199.372 401.132,200.018 401.819 C 201.306 403.191,203.260 403.067,203.465 401.600 C 203.542 401.050,203.779 399.700,203.991 398.600 C 204.856 394.108,204.946 391.631,204.253 391.365 C 203.896 391.228,203.721 390.927,203.864 390.696 C 204.010 390.459,203.933 390.394,203.686 390.547 C 203.446 390.695,201.261 390.696,198.833 390.549 L 194.417 390.281 194.308 382.768 C 194.206 375.654,194.162 375.277,193.476 375.661 M330.911 391.600 C 330.881 400.510,330.979 408.109,331.128 408.488 C 331.378 409.120,331.342 387.341,331.079 379.000 C 331.017 377.020,330.941 382.690,330.911 391.600 M0.501 391.800 C 0.505 392.680,0.587 392.993,0.683 392.495 C 0.779 391.998,0.775 391.278,0.675 390.895 C 0.575 390.513,0.496 390.920,0.501 391.800 M392.900 391.476 C 393.285 391.576,393.915 391.576,394.300 391.476 C 394.685 391.375,394.370 391.293,393.600 391.293 C 392.830 391.293,392.515 391.375,392.900 391.476 M288.880 412.080 C 287.943 413.017,288.221 438.276,289.174 438.786 C 290.483 439.487,290.987 439.269,290.162 438.358 C 289.193 437.287,288.971 414.151,289.914 412.500 C 290.498 411.478,289.776 411.184,288.880 412.080 M289.849 416.615 C 289.712 416.973,289.633 418.916,289.672 420.933 L 289.745 424.600 289.977 420.400 C 290.229 415.843,290.222 415.645,289.849 416.615 M315.469 417.400 C 315.606 418.060,315.871 419.017,316.059 419.526 C 316.579 420.938,316.497 424.754,315.963 424.000 C 315.644 423.550,315.611 423.701,315.831 424.600 C 315.992 425.260,316.231 429.107,316.362 433.150 L 316.600 440.500 317.900 441.501 C 318.615 442.052,319.200 442.293,319.200 442.037 C 319.200 441.718,319.420 441.689,319.900 441.946 C 321.048 442.559,323.314 442.656,323.500 442.100 C 323.601 441.796,323.301 441.598,322.733 441.595 C 319.890 441.578,320.000 441.897,320.000 433.685 C 320.000 427.290,319.907 426.160,319.327 425.519 C 318.518 424.626,317.943 420.903,318.573 420.639 C 318.875 420.513,318.874 420.364,318.571 420.130 C 318.335 419.949,318.019 419.468,317.869 419.062 C 317.719 418.656,317.257 418.236,316.844 418.127 C 316.430 418.019,315.896 417.541,315.656 417.065 C 315.273 416.303,315.251 416.343,315.469 417.400 M289.083 427.295 C 288.987 427.793,288.905 427.480,288.901 426.600 C 288.896 425.720,288.975 425.313,289.075 425.695 C 289.175 426.078,289.179 426.798,289.083 427.295 M93.051 426.212 C 92.913 426.571,92.800 429.976,92.800 433.778 C 92.800 437.580,92.637 441.570,92.438 442.645 C 92.239 443.720,91.975 447.120,91.852 450.200 L 91.628 455.800 92.238 453.400 C 92.573 452.080,92.984 449.321,93.151 447.269 C 93.318 445.216,93.640 443.416,93.866 443.269 C 95.112 442.457,95.322 425.868,94.089 425.679 C 93.644 425.610,93.193 425.842,93.051 426.212 M315.765 433.400 C 315.766 437.360,315.826 438.926,315.898 436.880 C 315.971 434.834,315.971 431.594,315.898 429.680 C 315.824 427.766,315.765 429.440,315.765 433.400 M289.660 431.076 C 289.627 432.658,289.735 434.036,289.900 434.139 C 290.065 434.241,290.149 433.397,290.086 432.262 C 289.882 428.584,289.721 428.137,289.660 431.076 M398.032 433.976 C 398.001 434.922,397.981 434.928,397.413 434.176 C 396.852 433.435,396.825 433.452,396.813 434.549 C 396.802 435.540,396.715 435.627,396.181 435.184 C 395.631 434.728,395.575 434.994,395.681 437.597 C 395.811 440.796,396.292 441.207,399.500 440.855 C 400.119 440.787,400.218 434.800,399.600 434.800 C 399.380 434.800,399.197 434.395,399.194 433.900 C 399.189 433.239,399.096 433.145,398.842 433.545 C 398.551 434.006,398.463 434.006,398.280 433.545 C 398.161 433.245,398.049 433.439,398.032 433.976 M394.924 438.200 C 394.926 439.520,395.001 440.012,395.090 439.293 C 395.179 438.574,395.177 437.494,395.086 436.893 C 394.995 436.292,394.922 436.880,394.924 438.200 M128.806 443.106 C 128.810 443.944,128.946 444.390,129.117 444.121 C 129.317 443.805,129.622 443.769,130.011 444.015 C 130.335 444.220,131.455 444.391,132.500 444.394 L 134.400 444.400 134.400 446.367 C 134.400 449.287,134.185 449.600,132.171 449.600 C 130.778 449.600,130.328 449.780,129.931 450.500 C 129.436 451.395,129.432 451.393,129.164 450.200 C 129.012 449.523,128.874 451.042,128.847 453.686 C 128.791 459.230,128.850 459.305,133.108 459.118 L 135.800 459.000 135.881 456.800 C 135.926 455.590,135.866 454.825,135.748 455.100 C 135.284 456.180,134.800 455.510,134.800 453.787 C 134.800 452.545,134.989 451.902,135.400 451.745 C 135.873 451.563,136.000 450.737,136.000 447.838 L 136.000 444.161 134.672 443.680 C 133.941 443.416,132.906 443.199,132.372 443.199 C 131.837 443.198,130.815 442.840,130.100 442.404 L 128.800 441.612 128.806 443.106 M146.538 458.894 C 146.792 459.056,148.350 459.188,150.000 459.188 C 151.650 459.188,153.208 459.056,153.462 458.894 C 153.716 458.732,152.158 458.600,150.000 458.600 C 147.842 458.600,146.284 458.732,146.538 458.894 M170.859 459.955 C 170.396 460.249,170.498 486.688,170.988 493.200 C 171.108 494.798,174.836 494.899,176.454 493.348 L 177.600 492.250 177.600 476.364 L 177.600 460.478 176.340 460.039 C 174.848 459.519,171.625 459.469,170.859 459.955 M142.800 510.200 C 142.800 510.530,142.996 510.755,143.235 510.700 C 143.538 510.630,143.652 512.993,143.613 518.499 L 143.557 526.397 144.549 526.849 C 145.095 527.098,146.004 527.185,146.571 527.043 L 147.600 526.785 147.600 519.638 C 147.600 514.309,147.742 512.218,148.157 511.417 L 148.715 510.343 149.357 511.260 C 150.031 512.222,150.277 511.588,149.757 510.233 C 149.408 509.324,142.800 509.293,142.800 510.200 M31.800 510.280 C 30.494 510.586,29.998 511.620,30.028 513.976 C 30.048 515.588,30.151 515.980,30.400 515.400 C 30.737 514.615,30.744 514.615,30.772 515.386 C 30.821 516.753,31.991 515.177,32.268 513.372 C 32.400 512.508,32.754 511.515,33.055 511.168 C 33.550 510.595,33.418 509.930,32.833 510.046 C 32.705 510.072,32.240 510.177,31.800 510.280 M101.334 523.600 C 101.334 525.250,101.405 525.925,101.491 525.100 C 101.578 524.275,101.578 522.925,101.491 522.100 C 101.405 521.275,101.334 521.950,101.334 523.600 M151.600 529.800 C 151.600 530.570,151.780 531.200,152.000 531.200 C 152.220 531.200,152.400 530.570,152.400 529.800 C 152.400 529.030,152.220 528.400,152.000 528.400 C 151.780 528.400,151.600 529.030,151.600 529.800 M152.928 530.800 C 152.928 532.230,153.001 532.815,153.089 532.100 C 153.178 531.385,153.178 530.215,153.089 529.500 C 153.001 528.785,152.928 529.370,152.928 530.800 M75.500 554.282 C 76.547 554.484,76.642 554.901,75.800 555.600 C 75.406 555.927,75.200 556.819,75.200 558.196 L 75.200 560.295 73.567 560.514 C 71.388 560.806,71.449 560.681,71.267 565.220 L 71.107 569.200 69.853 569.206 C 68.897 569.211,68.742 569.304,69.200 569.600 C 69.970 570.098,86.000 570.130,86.000 569.633 C 86.000 569.432,85.846 569.207,85.659 569.133 C 85.471 569.060,85.203 568.010,85.063 566.800 C 84.812 564.642,84.819 564.623,85.410 565.800 C 85.741 566.460,85.919 566.670,85.806 566.267 C 85.693 565.864,85.600 564.649,85.600 563.567 C 85.600 562.133,85.383 561.383,84.800 560.800 C 83.445 559.445,83.693 556.668,85.300 555.206 L 86.600 554.023 80.600 554.066 C 77.300 554.090,75.005 554.187,75.500 554.282 \\\" stroke=\\\"none\\\" fill=\\\"#fcd36b\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path2\\\" d=\\\"M9.600 8.117 L 9.600 16.250 8.409 17.130 L 7.218 18.011 7.109 25.305 L 7.000 32.600 3.500 32.716 L -0.000 32.831 -0.000 58.632 L 0.000 84.432 3.300 84.316 L 6.600 84.200 6.718 81.952 C 6.901 78.485,7.843 77.800,12.214 77.951 L 15.600 78.068 15.613 76.934 C 15.620 76.310,15.890 75.451,16.213 75.024 C 16.546 74.583,16.804 73.371,16.809 72.224 C 16.814 71.076,17.162 69.441,17.613 68.448 L 18.408 66.696 20.104 66.976 C 21.037 67.131,22.970 67.305,24.400 67.363 C 33.672 67.738,35.600 68.538,35.600 72.009 C 35.600 75.512,36.713 75.420,36.881 71.904 C 36.992 69.568,37.077 69.372,38.200 68.854 C 40.945 67.587,41.882 66.194,42.088 63.071 C 42.202 61.339,42.619 59.455,43.138 58.322 C 43.612 57.289,44.000 55.754,44.000 54.911 C 44.000 53.243,44.905 51.600,45.823 51.600 C 46.528 51.600,46.603 50.806,45.900 50.784 C 45.625 50.775,45.895 50.499,46.500 50.171 C 47.105 49.843,47.855 48.964,48.167 48.217 C 48.594 47.195,49.014 46.827,49.867 46.730 C 50.757 46.628,51.026 46.371,51.124 45.529 C 51.470 42.535,53.423 43.148,53.796 46.368 C 54.028 48.366,54.282 48.966,55.233 49.766 C 55.959 50.377,56.204 50.804,55.894 50.916 C 55.616 51.017,55.885 51.323,56.510 51.616 C 57.630 52.142,57.770 52.465,58.171 55.448 C 58.293 56.355,58.751 57.885,59.188 58.848 C 59.720 60.022,59.985 61.476,59.991 63.253 C 60.000 65.977,61.925 68.800,63.773 68.800 C 64.991 68.800,65.600 70.010,65.600 72.429 C 65.600 73.743,65.778 74.800,66.000 74.800 C 66.222 74.800,66.400 73.738,66.400 72.414 C 66.400 69.424,66.582 69.312,72.291 68.779 C 76.786 68.360,77.485 68.229,79.300 67.467 C 80.117 67.123,80.458 66.644,80.624 65.602 C 81.268 61.571,81.733 60.309,83.046 59.034 C 83.791 58.311,84.400 57.429,84.400 57.075 C 84.400 56.720,84.770 55.441,85.223 54.231 C 85.885 52.460,85.955 51.864,85.583 51.168 C 85.272 50.587,85.224 49.563,85.436 48.052 C 85.612 46.792,85.818 46.197,85.903 46.700 C 85.987 47.195,86.223 47.600,86.428 47.600 C 86.633 47.600,86.803 47.915,86.806 48.300 C 86.811 48.887,86.872 48.905,87.184 48.412 C 87.389 48.088,87.625 47.908,87.710 48.012 C 87.794 48.115,88.360 48.868,88.967 49.684 C 89.574 50.501,90.418 51.279,90.841 51.413 C 91.265 51.548,91.509 51.824,91.384 52.026 C 90.963 52.707,94.462 56.767,95.251 56.513 C 95.587 56.405,98.532 62.918,99.223 65.300 C 99.721 67.014,101.200 68.137,101.200 66.800 C 101.200 66.580,101.020 66.400,100.800 66.400 C 100.580 66.400,100.400 66.130,100.400 65.800 C 100.400 65.470,100.580 65.200,100.800 65.200 C 101.020 65.200,101.200 64.930,101.200 64.600 C 101.200 64.270,101.374 64.000,101.587 64.000 C 101.801 64.000,101.860 63.700,101.719 63.334 C 101.572 62.950,101.628 62.770,101.852 62.909 C 102.065 63.040,102.485 62.755,102.784 62.274 C 103.299 61.447,103.288 61.432,102.564 61.993 C 101.812 62.577,101.812 62.572,102.562 61.693 C 103.354 60.765,104.210 60.622,106.382 61.056 C 107.144 61.209,107.475 61.430,107.197 61.602 C 106.939 61.761,108.391 62.021,110.423 62.180 C 114.063 62.465,116.822 63.081,115.000 63.203 C 114.560 63.232,115.047 63.516,116.082 63.835 C 118.050 64.440,119.200 65.607,119.200 67.000 C 119.200 67.452,119.459 68.192,119.776 68.644 C 120.211 69.265,120.409 71.471,120.584 77.633 C 121.284 102.298,121.164 100.352,122.017 100.809 C 122.448 101.040,122.800 101.142,122.800 101.036 C 122.800 100.930,124.055 101.464,125.589 102.222 C 128.909 103.863,128.830 103.858,131.539 102.596 C 132.715 102.049,133.821 101.689,133.995 101.797 C 135.100 102.480,135.749 99.682,136.080 92.805 C 136.266 88.952,136.572 85.440,136.761 85.000 C 136.949 84.560,137.359 83.300,137.672 82.200 L 138.239 80.200 153.128 80.095 L 168.016 79.990 168.440 81.095 C 168.674 81.703,169.107 83.550,169.404 85.200 C 170.264 89.988,171.150 92.961,171.877 93.500 C 172.895 94.253,185.455 94.169,186.800 93.400 C 187.563 92.964,189.522 92.825,195.069 92.814 L 202.338 92.800 202.753 94.100 C 202.981 94.815,203.264 96.390,203.381 97.600 C 203.499 98.810,203.696 100.790,203.820 102.000 C 203.944 103.210,204.096 111.312,204.157 120.004 C 204.236 131.059,204.409 136.069,204.735 136.678 C 204.991 137.156,205.200 137.932,205.200 138.403 C 205.200 139.509,206.532 139.328,206.729 138.195 C 206.805 137.758,207.157 137.175,207.510 136.900 C 207.864 136.625,207.988 136.400,207.787 136.400 C 207.586 136.400,207.837 136.110,208.344 135.755 C 209.545 134.913,212.400 128.831,212.400 127.113 C 212.400 126.379,212.641 125.423,212.936 124.989 C 214.442 122.773,215.039 119.961,214.156 119.246 C 213.466 118.687,213.416 118.488,213.862 118.071 C 214.199 117.756,214.400 116.656,214.400 115.131 C 214.400 113.355,214.627 112.327,215.239 111.337 C 215.700 110.591,216.317 109.073,216.609 107.965 C 217.707 103.803,220.280 102.288,221.175 105.276 C 221.427 106.114,222.087 107.296,222.643 107.900 C 224.947 110.408,226.474 113.674,226.901 117.000 C 227.144 118.899,227.717 121.011,228.310 122.195 C 229.067 123.705,229.386 125.165,229.622 128.195 C 230.007 133.132,230.365 134.906,231.062 135.320 C 231.442 135.546,231.612 136.664,231.640 139.120 C 231.662 141.034,231.801 143.035,231.950 143.567 L 232.220 144.534 232.853 143.567 C 233.200 143.035,233.605 142.219,233.753 141.753 C 234.293 140.044,235.600 139.286,235.600 140.683 C 235.600 141.735,235.721 141.866,236.544 141.709 C 237.412 141.543,237.509 141.695,237.763 143.604 C 238.075 145.961,239.046 148.712,239.879 149.600 C 240.911 150.701,244.000 146.955,244.000 144.603 C 244.000 143.590,244.280 142.219,244.622 141.557 C 245.335 140.180,245.559 137.288,244.986 136.877 C 244.423 136.473,244.315 132.906,244.837 131.932 C 245.082 131.473,245.433 129.455,245.615 127.449 C 245.814 125.272,246.380 122.589,247.020 120.800 C 247.609 119.150,248.215 116.540,248.365 115.000 C 248.535 113.260,248.960 111.670,249.487 110.800 C 249.954 110.030,250.547 108.590,250.804 107.600 C 252.463 101.231,258.047 101.208,259.848 107.563 C 260.197 108.793,260.776 110.250,261.135 110.800 C 261.494 111.350,261.919 113.150,262.080 114.800 C 262.241 116.450,262.409 118.013,262.453 118.273 C 262.497 118.533,263.134 119.070,263.869 119.465 C 264.604 119.861,265.317 120.548,265.455 120.992 C 265.592 121.436,266.023 122.252,266.411 122.804 C 266.800 123.356,267.335 124.615,267.600 125.601 C 267.866 126.588,268.425 128.064,268.842 128.882 C 270.245 131.633,269.900 133.941,267.774 136.017 C 265.725 138.018,265.697 138.300,267.191 142.000 C 268.594 145.473,269.363 146.934,269.874 147.098 C 270.832 147.404,272.192 140.324,271.830 136.917 C 271.022 129.307,270.930 130.106,272.845 128.154 L 274.567 126.400 282.509 126.400 L 290.452 126.400 291.461 127.600 C 292.126 128.390,292.842 128.800,293.556 128.800 C 294.152 128.800,294.851 129.011,295.108 129.268 C 295.465 129.625,295.657 129.515,295.920 128.804 L 296.265 127.872 296.932 128.825 C 297.347 129.417,297.600 130.563,297.600 131.851 C 297.600 133.880,297.638 133.946,299.371 134.962 C 303.292 137.260,305.998 135.907,306.002 131.646 C 306.006 128.247,307.565 123.528,308.897 122.887 C 309.483 122.605,310.307 121.936,310.728 121.400 C 311.766 120.081,314.787 119.528,314.827 120.649 C 314.851 121.302,314.911 121.282,315.288 120.500 C 315.527 120.005,315.900 119.600,316.118 119.600 C 321.456 119.600,322.800 117.432,322.800 108.820 L 322.800 103.252 321.173 102.126 C 317.867 99.838,317.931 99.929,317.637 97.095 C 317.374 94.548,316.834 93.016,316.770 94.633 C 316.748 95.174,316.601 95.047,316.270 94.200 C 314.910 90.725,313.558 90.044,313.157 92.631 C 312.928 94.104,312.910 94.066,312.851 92.000 C 312.781 89.575,312.235 89.826,311.785 92.489 C 311.611 93.520,311.163 94.257,310.365 94.825 C 309.453 95.474,309.194 95.975,309.172 97.127 C 309.140 98.803,308.690 100.184,308.160 100.234 C 307.962 100.253,306.990 100.654,306.000 101.125 C 305.010 101.597,303.446 101.986,302.524 101.991 C 301.602 101.996,300.736 102.180,300.600 102.400 C 300.464 102.620,299.478 102.800,298.409 102.800 C 296.211 102.800,295.100 103.114,295.426 103.642 C 295.548 103.839,295.457 104.000,295.224 104.000 C 294.654 104.000,294.670 108.672,295.240 109.025 C 295.486 109.177,295.582 109.790,295.457 110.414 C 295.313 111.133,295.441 111.702,295.817 112.014 C 296.207 112.337,296.400 113.278,296.400 114.849 L 296.400 117.200 297.800 117.200 C 299.754 117.200,299.676 118.246,297.700 118.538 C 296.875 118.660,295.210 118.960,294.000 119.205 C 291.337 119.745,284.800 120.182,284.800 119.820 C 284.800 118.650,286.134 117.200,287.210 117.200 C 288.382 117.200,288.400 117.168,288.400 115.049 C 288.400 113.625,288.603 112.730,289.000 112.400 C 289.342 112.116,289.600 111.244,289.600 110.375 C 289.600 109.535,289.780 108.736,290.000 108.600 C 291.272 107.814,290.069 103.134,288.400 102.377 C 285.767 101.182,285.365 100.897,284.879 99.886 C 284.592 99.290,284.310 97.194,284.252 95.230 C 284.137 91.329,283.816 90.623,281.989 90.258 C 281.089 90.078,280.640 89.649,280.160 88.510 C 278.354 84.225,278.341 84.209,276.362 84.081 C 274.165 83.938,272.703 85.421,272.220 88.283 C 272.064 89.202,271.682 90.166,271.369 90.426 C 270.997 90.735,270.800 91.700,270.800 93.216 C 270.800 97.146,272.281 96.802,255.457 96.787 C 238.162 96.772,239.229 97.023,239.139 92.956 C 239.088 90.689,239.028 90.981,238.800 94.600 C 238.534 98.806,237.727 105.534,237.335 106.797 C 237.119 107.495,235.624 105.803,235.609 104.844 C 235.604 104.538,235.365 104.088,235.078 103.844 C 234.659 103.487,234.615 101.095,234.856 91.600 C 235.022 85.030,235.000 79.268,234.805 78.600 C 234.613 77.940,234.341 76.590,234.200 75.600 C 234.059 74.610,233.793 73.260,233.609 72.600 C 232.724 69.428,232.764 68.847,233.911 68.206 L 235.000 67.597 233.800 67.807 C 232.678 68.003,232.659 67.986,233.500 67.547 C 234.547 67.001,234.645 66.579,233.800 66.255 C 232.858 65.894,233.075 63.489,234.282 60.911 C 234.877 59.640,235.462 58.060,235.582 57.400 C 235.746 56.496,236.047 56.168,236.800 56.069 C 237.350 55.998,238.101 55.553,238.468 55.082 C 239.070 54.308,239.457 54.236,242.411 54.348 C 245.573 54.468,245.731 54.431,246.944 53.282 C 248.553 51.757,250.644 51.390,250.979 52.573 C 251.195 53.338,251.244 53.348,251.626 52.700 C 252.171 51.778,254.231 51.778,254.768 52.700 C 255.143 53.343,255.177 53.335,255.187 52.600 C 255.198 51.838,255.427 51.806,259.999 51.924 C 263.099 52.003,264.800 51.901,264.800 51.636 C 264.800 51.410,265.025 51.294,265.300 51.379 C 265.575 51.464,266.835 51.640,268.100 51.770 C 270.585 52.026,271.288 51.456,269.014 51.029 C 267.080 50.666,266.710 48.400,268.585 48.400 C 269.904 48.400,271.852 42.604,272.149 37.800 C 272.341 34.688,272.495 34.097,273.285 33.442 C 273.895 32.936,274.033 32.626,273.700 32.509 C 273.109 32.301,273.018 30.400,273.600 30.400 C 273.820 30.400,274.003 29.545,274.006 28.500 C 274.013 26.291,274.457 25.383,275.361 25.730 C 275.853 25.919,276.376 25.234,277.602 22.797 C 279.995 18.036,279.781 17.200,276.167 17.200 L 274.400 17.200 274.400 15.600 C 274.400 14.029,274.426 14.000,275.842 14.000 C 276.797 14.000,277.686 13.662,278.473 13.000 C 280.049 11.674,282.000 12.322,282.000 14.171 C 282.000 14.927,283.099 16.000,283.872 16.000 C 284.385 16.000,284.462 15.499,284.336 13.000 C 284.185 10.002,284.185 10.000,285.217 10.000 C 286.803 10.000,288.450 11.971,288.697 14.163 C 288.964 16.529,289.260 16.730,293.220 17.226 C 297.215 17.727,297.198 17.718,297.206 19.324 C 297.209 20.026,297.569 22.565,298.006 24.968 C 298.443 27.370,298.800 30.034,298.800 30.887 C 298.800 32.640,300.826 33.973,303.516 33.991 C 306.323 34.010,308.000 35.363,308.000 37.608 C 308.000 39.466,308.067 39.600,309.000 39.600 C 309.550 39.600,310.372 39.972,310.826 40.426 C 312.303 41.903,316.000 41.151,316.000 39.374 C 316.000 38.542,316.252 37.899,316.669 37.665 C 317.263 37.333,317.211 37.172,316.211 36.245 C 315.591 35.670,315.289 35.200,315.542 35.200 C 315.794 35.200,316.000 34.733,316.000 34.162 C 316.000 33.001,317.144 31.160,318.903 29.489 C 319.964 28.482,320.060 28.176,319.936 26.189 C 319.838 24.605,319.942 23.999,320.312 23.999 C 320.644 24.000,320.513 23.579,319.937 22.800 C 319.434 22.121,318.680 21.600,318.198 21.600 C 317.730 21.600,316.809 21.015,316.151 20.300 C 313.772 17.715,312.185 16.948,309.000 16.841 C 305.152 16.713,305.641 14.280,309.604 13.831 C 311.342 13.635,312.345 13.247,313.609 12.285 C 316.386 10.169,318.139 9.214,319.256 9.207 C 319.837 9.203,321.089 8.852,322.039 8.427 C 324.204 7.458,324.400 7.591,324.400 10.024 C 324.400 11.111,324.558 12.000,324.751 12.000 C 325.702 12.000,326.048 10.514,326.277 5.440 L 326.523 0.000 316.924 0.000 L 307.325 0.000 306.884 3.118 C 306.228 7.756,305.904 8.400,304.228 8.400 C 301.333 8.400,296.000 5.078,296.000 3.274 C 296.000 2.935,295.784 2.059,295.520 1.328 L 295.039 -0.000 283.129 -0.000 L 271.218 0.000 271.448 7.700 C 271.574 11.935,271.827 15.990,272.009 16.711 C 272.434 18.389,271.511 26.904,270.694 28.848 C 269.929 30.666,267.185 32.746,267.855 31.000 C 268.192 30.122,267.503 30.265,265.959 31.394 C 262.790 33.711,257.248 35.282,255.514 34.354 C 255.018 34.089,253.358 33.632,251.825 33.340 C 248.384 32.685,248.217 32.517,246.412 27.923 C 245.217 24.883,244.697 24.039,243.574 23.325 C 240.617 21.442,240.377 21.117,239.909 18.370 C 239.411 15.446,239.884 9.563,240.636 9.318 C 240.876 9.240,242.178 10.163,243.529 11.369 C 245.195 12.855,246.472 13.651,247.493 13.840 C 248.322 13.994,249.973 14.453,251.163 14.860 C 254.086 15.860,255.995 15.793,258.218 14.611 C 259.242 14.067,260.708 13.503,261.477 13.359 C 262.532 13.161,263.205 12.642,264.216 11.248 C 264.954 10.232,266.169 8.919,266.918 8.331 C 268.744 6.897,269.600 4.953,269.600 2.240 L 269.600 0.000 265.200 0.000 L 260.800 0.000 260.800 1.052 C 260.800 1.666,260.260 2.720,259.500 3.589 C 258.785 4.406,257.887 5.463,257.504 5.937 C 255.500 8.421,248.800 4.883,248.800 1.342 L 248.800 0.000 227.180 0.000 L 205.560 0.000 205.634 8.900 C 205.702 16.990,205.321 24.536,204.907 23.312 C 204.802 23.002,204.423 23.188,203.871 23.821 C 203.302 24.472,201.989 25.102,200.087 25.636 C 192.733 27.700,188.119 33.172,192.855 34.212 C 194.416 34.555,194.806 35.565,193.670 36.320 C 192.997 36.767,192.800 37.294,192.800 38.649 C 192.800 40.290,192.675 40.491,190.827 41.819 C 189.742 42.598,188.797 43.397,188.727 43.594 C 188.657 43.791,186.800 44.118,184.600 44.321 L 180.600 44.689 183.600 44.773 L 186.600 44.857 185.000 45.575 C 183.223 46.374,182.233 47.346,181.820 48.700 C 181.670 49.195,181.378 49.600,181.173 49.600 C 180.968 49.600,180.800 49.870,180.800 50.200 C 180.800 50.643,180.336 50.800,179.024 50.800 C 177.344 50.800,176.250 51.350,177.261 51.687 C 178.997 52.266,177.127 54.000,174.766 54.000 C 171.541 54.000,171.070 54.324,169.381 57.707 C 168.586 59.298,168.167 60.375,168.448 60.100 C 169.380 59.190,169.630 59.581,168.962 60.900 C 167.920 62.957,167.171 63.600,165.818 63.600 C 165.126 63.600,164.360 63.800,164.115 64.045 C 163.581 64.579,162.800 64.181,162.800 63.376 C 162.800 63.059,162.575 62.794,162.300 62.787 C 162.025 62.779,162.209 62.432,162.709 62.016 C 163.973 60.961,163.452 60.779,158.425 60.514 L 154.065 60.284 152.992 57.342 C 152.402 55.724,151.757 54.400,151.559 54.400 C 151.357 54.400,151.200 50.374,151.200 45.200 C 151.200 36.169,151.185 36.000,150.374 36.000 C 149.254 36.000,147.923 35.248,148.212 34.780 C 148.342 34.571,148.027 34.400,147.513 34.400 C 146.999 34.400,146.167 34.112,145.664 33.760 C 145.161 33.408,144.402 33.211,143.975 33.322 C 143.549 33.434,143.100 33.362,142.977 33.162 C 142.854 32.963,141.795 32.800,140.625 32.800 C 137.550 32.800,137.202 31.598,136.977 20.200 C 136.928 17.688,136.623 14.856,136.266 13.600 C 135.195 9.828,135.260 8.598,136.604 7.195 C 137.657 6.097,137.803 5.634,137.937 2.981 L 138.087 0.000 133.244 0.000 C 129.542 0.000,128.400 0.122,128.400 0.519 C 128.400 0.804,127.710 1.711,126.867 2.535 L 125.333 4.032 122.767 3.716 L 120.200 3.400 120.077 1.700 L 119.954 -0.000 111.211 -0.000 L 102.468 0.000 102.186 3.016 C 101.704 8.158,98.644 9.491,97.200 5.188 C 96.870 4.204,96.375 3.007,96.100 2.526 C 95.825 2.046,95.600 1.281,95.600 0.826 C 95.600 0.044,95.377 0.000,91.450 0.000 L 87.300 0.000 87.060 1.200 C 86.821 2.397,86.812 2.400,84.010 2.400 L 81.200 2.400 81.200 1.193 L 81.200 -0.015 63.400 0.008 L 45.600 0.031 45.600 1.180 C 45.600 2.397,47.211 4.096,48.863 4.620 C 49.341 4.772,50.707 5.864,51.901 7.048 C 53.094 8.231,54.220 9.200,54.404 9.200 C 54.588 9.200,55.299 9.672,55.984 10.248 C 57.082 11.172,57.312 11.229,57.915 10.731 C 58.292 10.420,59.135 9.903,59.789 9.583 C 60.443 9.262,62.139 7.850,63.559 6.444 C 67.543 2.499,68.908 5.439,68.843 17.829 C 68.802 25.613,69.350 28.678,71.114 30.519 C 72.272 31.728,71.946 32.381,70.179 32.394 C 69.727 32.397,68.577 32.974,67.623 33.676 L 65.889 34.951 64.944 33.853 C 64.425 33.249,64.000 32.491,64.000 32.168 C 64.000 31.447,61.515 26.500,60.600 25.400 C 60.047 24.735,59.972 24.718,60.155 25.300 C 60.519 26.457,59.753 26.094,58.477 24.503 L 57.276 23.007 56.395 23.803 C 55.910 24.242,55.074 25.410,54.537 26.400 C 50.889 33.127,50.230 33.714,45.800 34.187 C 42.845 34.502,41.147 33.289,40.431 30.349 C 40.196 29.387,38.924 26.418,37.602 23.751 C 36.281 21.084,35.200 18.631,35.200 18.300 C 35.200 17.969,34.930 17.474,34.600 17.200 C 33.018 15.887,35.445 10.000,37.568 10.000 C 37.724 10.000,38.735 8.830,39.815 7.400 C 40.895 5.970,41.970 4.800,42.203 4.800 C 42.880 4.800,44.000 2.590,44.000 1.254 L 44.000 0.032 26.800 0.008 L 9.600 -0.015 9.600 8.117 M346.800 2.924 C 346.800 4.875,346.995 6.105,347.387 6.624 C 347.710 7.051,347.980 7.739,347.987 8.153 C 347.994 8.567,348.630 9.500,349.400 10.226 C 350.350 11.122,350.802 11.908,350.806 12.673 C 350.816 14.513,353.878 16.792,356.360 16.806 C 357.192 16.811,357.280 16.894,356.800 17.218 C 356.358 17.517,356.499 17.555,357.335 17.360 C 357.960 17.215,359.166 17.077,360.015 17.055 C 361.270 17.022,361.603 16.844,361.788 16.107 C 361.941 15.496,362.313 15.200,362.928 15.200 C 363.429 15.200,364.033 15.007,364.269 14.771 C 365.141 13.899,367.400 14.497,367.400 15.600 C 367.400 16.481,367.138 16.663,365.200 17.131 C 362.223 17.851,362.169 17.962,363.512 20.651 C 364.980 23.590,365.230 24.570,365.591 28.800 L 365.882 32.200 365.968 28.400 C 366.037 25.340,366.139 24.775,366.488 25.500 C 366.727 25.995,367.137 26.400,367.399 26.400 C 368.239 26.400,369.105 27.750,369.393 29.508 C 370.047 33.498,373.265 32.905,376.200 28.252 C 376.554 27.691,376.902 27.765,379.200 28.883 C 380.630 29.578,382.533 30.429,383.428 30.774 C 388.019 32.539,393.225 40.363,389.841 40.412 C 389.078 40.423,389.065 40.462,389.700 40.832 C 390.233 41.142,390.400 41.767,390.400 43.446 C 390.400 44.660,390.604 46.034,390.853 46.499 C 391.136 47.028,391.343 50.318,391.404 55.267 C 391.484 61.788,391.616 63.364,392.150 64.180 C 393.372 66.046,392.864 66.462,387.922 67.642 C 379.382 69.682,373.600 68.294,373.600 64.204 C 373.600 62.054,373.070 61.600,370.561 61.600 C 369.079 61.600,367.982 61.314,366.741 60.605 L 365.000 59.610 366.600 59.593 C 368.577 59.572,367.805 59.022,365.200 58.596 C 360.749 57.869,357.430 55.378,356.955 52.409 C 356.705 50.843,356.649 50.792,355.447 51.018 C 352.643 51.544,351.184 48.332,350.805 40.800 L 350.553 35.800 350.420 40.600 C 350.276 45.799,349.726 44.188,349.640 38.314 C 349.574 33.855,344.551 33.246,344.360 37.674 C 344.321 38.584,344.316 38.583,344.037 37.600 C 343.541 35.849,342.861 40.889,342.859 46.329 C 342.858 49.040,342.667 52.820,342.433 54.729 C 341.827 59.690,341.085 68.356,341.126 70.000 C 341.146 70.770,341.353 75.720,341.587 81.000 C 341.821 86.280,341.972 90.870,341.923 91.200 C 341.875 91.530,341.982 92.475,342.162 93.300 L 342.489 94.800 351.565 94.800 C 358.224 94.800,360.771 94.931,361.133 95.293 C 361.524 95.684,361.675 95.599,361.862 94.885 C 362.022 94.273,362.243 94.103,362.549 94.356 C 362.797 94.561,363.540 94.790,364.200 94.865 C 365.376 94.997,365.402 95.050,365.519 97.500 L 365.638 100.000 368.963 100.000 C 372.287 100.000,372.287 100.000,374.157 101.646 L 376.027 103.292 376.058 111.146 C 376.103 122.569,376.290 124.800,377.200 124.800 C 378.367 124.800,379.200 125.238,379.200 125.851 C 379.200 126.163,379.630 126.613,380.156 126.853 C 380.682 127.092,381.308 127.718,381.547 128.244 C 381.787 128.770,382.228 129.200,382.527 129.200 C 382.827 129.200,383.270 129.634,383.511 130.165 C 383.753 130.696,384.322 131.248,384.776 131.392 C 385.229 131.536,385.600 131.905,385.600 132.213 C 385.600 133.549,388.817 134.347,395.500 134.668 L 400.000 134.885 400.000 82.042 L 400.000 29.200 398.787 29.200 C 397.412 29.200,394.087 27.633,392.000 26.001 C 391.230 25.399,390.175 24.774,389.656 24.612 C 389.136 24.450,388.019 23.692,387.172 22.927 C 385.364 21.294,381.571 20.008,378.549 20.003 C 374.934 19.998,374.536 17.843,377.995 17.001 C 379.188 16.711,379.816 16.308,380.047 15.685 C 380.229 15.192,380.818 14.621,381.355 14.417 C 381.892 14.213,382.443 13.695,382.579 13.266 C 382.715 12.837,383.194 12.390,383.643 12.273 C 384.092 12.155,384.555 11.692,384.673 11.243 C 384.790 10.794,385.237 10.315,385.666 10.179 C 386.095 10.043,386.601 9.522,386.792 9.022 C 386.998 8.479,387.594 8.019,388.269 7.879 C 389.563 7.613,394.964 2.316,395.386 0.900 L 395.654 0.000 371.227 0.000 L 346.800 0.000 346.800 2.924 M88.347 11.344 C 91.399 14.593,91.467 18.503,88.529 21.829 C 85.266 25.522,83.873 25.513,80.188 21.773 C 76.029 17.552,76.939 12.645,82.038 11.799 C 83.007 11.638,84.250 11.265,84.800 10.970 C 86.282 10.173,87.354 10.286,88.347 11.344 M114.600 13.212 C 116.107 14.585,117.358 14.588,118.913 13.222 L 120.325 11.983 121.863 12.856 C 124.903 14.583,125.203 15.974,122.800 17.200 C 121.920 17.649,121.200 18.108,121.200 18.221 C 121.200 18.995,122.507 21.193,123.551 22.175 C 124.691 23.248,124.800 23.567,124.800 25.852 C 124.800 27.677,125.028 28.740,125.642 29.782 C 126.190 30.710,126.399 31.550,126.239 32.185 C 126.098 32.751,126.270 33.740,126.650 34.536 C 127.573 36.472,127.145 38.401,125.598 39.281 C 124.488 39.913,124.400 40.130,124.400 42.233 C 124.400 44.251,124.250 44.670,123.046 46.002 C 122.038 47.118,121.741 47.760,121.886 48.515 C 122.031 49.273,121.855 49.650,121.189 50.006 C 119.937 50.676,118.229 49.897,118.519 48.789 C 118.827 47.612,118.347 47.521,114.593 48.047 C 112.064 48.400,111.216 48.664,111.364 49.050 C 111.716 49.967,110.770 50.244,104.489 51.060 C 102.760 51.285,101.600 52.538,101.600 54.180 C 101.600 54.521,101.330 54.800,101.000 54.800 C 100.670 54.800,100.400 54.551,100.400 54.246 C 100.400 53.941,100.131 53.176,99.802 52.546 C 99.474 51.916,99.204 51.096,99.202 50.724 C 99.201 50.353,98.481 49.218,97.603 48.203 C 95.545 45.826,95.065 44.915,94.964 43.200 C 94.919 42.430,94.606 40.569,94.269 39.065 C 93.150 34.074,94.640 29.113,97.801 27.314 C 98.681 26.813,99.356 26.226,99.303 26.009 C 99.249 25.792,99.546 24.937,99.963 24.108 C 100.380 23.278,100.952 21.659,101.234 20.509 C 101.973 17.495,103.465 16.000,105.735 16.000 C 107.638 16.000,109.614 14.647,110.142 12.981 C 110.469 11.954,113.384 12.105,114.600 13.212 M236.461 35.100 C 236.740 36.366,236.342 41.600,235.967 41.600 C 235.765 41.600,235.600 40.608,235.600 39.395 C 235.600 38.182,235.386 36.846,235.124 36.427 C 234.751 35.829,234.761 35.528,235.173 35.032 C 235.856 34.210,236.270 34.232,236.461 35.100 M323.839 37.500 C 324.163 40.842,324.320 41.017,326.247 40.183 C 327.101 39.813,327.575 39.426,327.300 39.322 C 326.995 39.207,326.800 38.381,326.800 37.209 C 326.800 35.167,326.459 34.800,324.556 34.800 C 323.589 34.800,323.581 34.831,323.839 37.500 M225.191 44.520 C 225.196 45.136,225.481 46.183,225.824 46.846 C 226.924 48.973,226.115 60.130,224.594 63.800 C 224.321 64.460,224.024 65.244,223.935 65.542 C 223.591 66.689,216.182 68.093,214.049 67.415 C 211.909 66.736,213.110 44.812,215.317 44.256 C 215.803 44.133,216.380 43.621,216.600 43.117 C 217.734 40.519,225.169 41.733,225.191 44.520 M346.400 66.000 C 346.400 66.660,346.220 67.200,346.000 67.200 C 345.780 67.200,345.600 66.660,345.600 66.000 C 345.600 65.340,345.780 64.800,346.000 64.800 C 346.220 64.800,346.400 65.340,346.400 66.000 M31.300 67.482 C 30.805 67.578,29.995 67.578,29.500 67.482 C 29.005 67.387,29.410 67.309,30.400 67.309 C 31.390 67.309,31.795 67.387,31.300 67.482 M187.131 70.143 C 187.203 70.772,187.044 71.811,186.778 72.452 L 186.295 73.618 179.262 73.509 L 172.229 73.400 171.873 71.891 C 171.305 69.486,171.757 69.245,177.139 69.090 C 186.726 68.814,186.982 68.841,187.131 70.143 M118.000 81.800 C 118.000 83.010,118.180 84.000,118.400 84.000 C 118.620 84.000,118.800 83.010,118.800 81.800 C 118.800 80.590,118.620 79.600,118.400 79.600 C 118.180 79.600,118.000 80.590,118.000 81.800 M227.909 93.100 L 227.800 100.200 224.900 100.200 L 222.000 100.200 222.000 93.100 L 222.000 86.000 225.009 86.000 L 228.018 86.000 227.909 93.100 M46.317 86.945 C 43.796 87.730,41.777 92.714,41.041 99.970 C 40.920 101.163,40.598 102.278,40.325 102.446 C 39.533 102.936,39.435 107.860,40.162 110.658 C 40.513 112.009,40.800 114.225,40.800 115.581 C 40.800 116.938,40.961 117.948,41.158 117.826 C 41.355 117.704,41.623 117.883,41.754 118.223 C 41.889 118.577,41.822 118.737,41.595 118.597 C 41.378 118.463,41.200 118.436,41.200 118.537 C 41.200 118.638,41.760 119.076,42.444 119.509 C 43.911 120.438,45.062 123.323,45.433 127.000 C 45.567 128.320,45.941 129.994,46.266 130.720 C 46.591 131.447,46.956 132.654,47.078 133.403 C 47.422 135.525,48.376 136.134,51.008 135.916 C 54.243 135.648,55.433 133.887,56.495 127.800 C 57.239 123.538,58.428 120.013,59.275 119.560 C 60.411 118.952,61.200 116.770,61.200 114.239 C 61.200 113.036,61.400 111.545,61.644 110.926 C 62.869 107.815,62.796 104.434,61.460 102.458 C 60.376 100.855,60.170 100.132,59.960 97.188 C 59.628 92.525,57.200 84.661,57.200 88.249 C 57.200 88.759,57.080 88.799,56.642 88.435 C 56.336 88.181,55.121 87.867,53.942 87.739 C 52.764 87.610,51.401 87.256,50.914 86.952 C 49.876 86.305,48.382 86.303,46.317 86.945 M50.443 101.202 C 51.340 104.429,50.706 116.118,49.645 115.913 C 47.999 115.596,47.080 104.877,48.408 101.490 C 49.077 99.783,50.011 99.651,50.443 101.202 M-0.000 106.953 L 0.000 112.800 5.400 112.800 C 10.330 112.800,10.800 112.737,10.800 112.081 C 10.800 111.686,11.520 110.659,12.400 109.800 C 14.311 107.934,14.364 107.514,12.825 106.418 C 12.018 105.843,11.610 105.176,11.525 104.290 C 11.419 103.193,11.256 103.016,10.439 103.106 C 9.911 103.164,8.560 102.868,7.438 102.448 C 6.315 102.028,4.182 101.555,2.698 101.396 L -0.000 101.107 -0.000 106.953 M171.359 103.007 C 170.752 103.933,170.748 104.399,171.307 108.831 C 171.989 114.231,172.069 114.423,173.204 113.396 C 174.138 112.551,176.475 108.400,176.017 108.400 C 175.849 108.400,175.892 107.608,176.114 106.640 C 176.894 103.232,173.107 100.339,171.359 103.007 M341.759 119.906 C 341.516 120.068,340.999 121.190,340.610 122.400 C 340.220 123.610,339.542 125.455,339.102 126.500 L 338.301 128.400 335.613 128.400 C 332.246 128.400,331.600 128.967,331.600 131.917 C 331.600 134.450,332.106 134.800,335.764 134.800 C 339.979 134.800,339.782 133.944,339.894 152.782 C 340.016 173.309,339.738 172.318,345.259 171.918 C 349.291 171.627,349.052 172.671,349.397 153.813 L 349.694 137.592 350.831 136.635 C 351.944 135.699,352.367 135.596,359.957 134.417 C 361.363 134.199,362.610 133.924,362.727 133.806 C 363.073 133.460,360.706 131.177,359.400 130.598 C 358.740 130.305,358.425 130.051,358.700 130.033 C 358.975 130.015,359.200 129.804,359.200 129.565 C 359.200 129.281,358.662 129.221,357.657 129.390 L 356.114 129.651 355.237 127.490 C 354.283 125.140,352.649 123.904,350.154 123.646 C 349.909 123.621,349.190 122.835,348.556 121.900 C 347.033 119.655,346.955 119.612,344.400 119.612 C 343.190 119.612,342.002 119.744,341.759 119.906 M187.022 124.700 C 186.894 125.085,186.218 125.670,185.519 126.000 C 181.464 127.916,181.253 135.351,185.231 136.146 C 185.919 136.284,186.689 136.267,186.941 136.108 C 187.193 135.949,188.660 135.785,190.200 135.742 C 194.983 135.610,196.257 134.668,195.057 132.150 C 194.204 130.362,194.174 128.628,195.000 128.945 C 195.719 129.221,195.732 129.074,195.149 127.228 C 194.059 123.777,194.371 124.000,190.636 124.000 C 187.770 124.000,187.218 124.107,187.022 124.700 M361.419 130.572 C 361.993 131.449,364.000 133.064,364.000 132.649 C 364.000 132.428,361.172 129.600,360.951 129.600 C 360.858 129.600,361.068 130.037,361.419 130.572 M375.839 137.043 C 375.484 137.968,376.348 140.883,376.922 140.697 C 377.814 140.407,378.686 137.226,377.994 136.788 C 377.086 136.213,376.113 136.329,375.839 137.043 M36.000 140.619 L 36.000 143.238 38.500 143.119 L 41.000 143.000 41.119 140.500 L 41.238 138.000 38.619 138.000 L 36.000 138.000 36.000 140.619 M252.073 156.949 C 251.562 157.197,251.047 157.883,250.928 158.474 C 250.808 159.065,250.460 159.645,250.155 159.762 C 249.793 159.901,249.600 160.613,249.600 161.807 C 249.600 162.815,249.356 164.126,249.057 164.720 C 247.453 167.911,248.094 169.558,251.575 171.188 C 253.371 172.029,253.794 172.091,254.943 171.675 C 255.666 171.414,256.606 171.200,257.034 171.200 C 257.461 171.200,258.762 170.559,259.925 169.776 C 262.229 168.225,262.250 168.116,260.803 165.200 C 260.421 164.430,259.877 163.080,259.593 162.200 C 258.893 160.023,258.043 158.800,257.229 158.800 C 256.855 158.800,256.032 158.260,255.400 157.600 C 254.187 156.334,253.582 156.215,252.073 156.949 M365.867 172.267 C 365.720 172.413,365.600 173.471,365.600 174.618 C 365.600 176.925,365.237 177.411,363.315 177.678 C 362.423 177.802,361.961 177.675,361.802 177.262 C 361.628 176.808,361.463 176.777,361.107 177.133 C 360.779 177.461,357.961 177.600,351.620 177.600 L 342.600 177.600 341.480 179.004 C 340.445 180.301,340.360 180.673,340.363 183.904 C 340.369 191.039,339.167 209.379,338.595 210.868 C 338.277 211.698,334.404 212.076,334.108 211.306 C 333.977 210.963,333.717 211.050,333.259 211.592 C 332.897 212.021,331.610 212.693,330.401 213.086 C 328.296 213.769,328.169 213.891,327.451 215.900 C 327.038 217.055,326.474 218.000,326.199 218.000 C 325.188 218.000,324.559 219.235,325.296 219.773 C 325.722 220.085,325.880 220.574,325.734 221.132 C 325.139 223.407,328.255 224.800,333.938 224.800 L 338.307 224.800 339.731 226.376 C 340.612 227.352,341.249 228.533,341.402 229.476 C 342.397 235.625,343.705 236.469,345.774 232.297 C 346.019 231.804,346.860 231.055,347.642 230.633 C 348.425 230.211,349.411 229.232,349.833 228.458 C 350.255 227.684,351.140 226.756,351.800 226.396 C 352.460 226.035,353.507 224.989,354.126 224.071 C 354.831 223.025,355.652 222.320,356.326 222.181 C 356.917 222.059,357.940 221.807,358.600 221.621 L 359.800 221.282 358.500 221.241 C 357.785 221.218,357.200 221.103,357.200 220.984 C 357.200 220.532,360.267 217.696,361.015 217.456 C 361.447 217.318,362.160 216.531,362.600 215.707 C 363.040 214.883,363.861 213.988,364.425 213.718 C 366.394 212.777,366.966 211.731,367.134 208.771 L 367.290 206.000 369.845 206.000 L 372.400 206.000 372.400 208.042 C 372.400 209.166,372.648 211.101,372.952 212.342 C 373.255 213.584,373.723 216.220,373.990 218.200 C 374.258 220.180,374.628 222.160,374.813 222.600 C 374.998 223.040,375.257 223.785,375.388 224.256 C 375.801 225.741,379.750 225.818,380.216 224.351 C 380.349 223.931,380.613 223.684,380.803 223.802 C 380.993 223.919,381.255 223.157,381.385 222.108 C 381.516 221.058,381.986 219.570,382.430 218.800 C 382.875 218.030,383.527 216.725,383.880 215.900 C 384.233 215.075,384.764 214.400,385.061 214.400 C 385.357 214.400,385.600 214.203,385.600 213.961 C 385.600 212.191,389.115 205.411,390.480 204.549 C 391.634 203.821,392.015 203.282,392.204 202.107 C 392.705 198.992,392.813 198.719,393.449 198.964 C 393.788 199.094,394.506 199.200,395.045 199.200 C 395.618 199.200,396.127 199.491,396.271 199.900 C 396.628 200.921,398.063 201.981,399.100 201.991 C 400.422 202.004,400.518 193.829,399.200 193.484 C 398.680 193.348,398.400 193.472,398.400 193.837 C 398.400 194.527,397.922 194.562,397.280 193.920 C 396.623 193.263,396.678 192.883,397.454 192.729 C 397.948 192.632,397.678 192.169,396.354 190.846 C 395.055 189.547,394.567 189.258,394.473 189.732 C 394.368 190.262,394.212 190.290,393.573 189.890 C 392.643 189.309,392.517 188.206,393.421 188.553 C 393.777 188.689,393.937 188.622,393.797 188.395 C 393.449 187.833,392.105 187.905,391.865 188.500 C 391.754 188.775,391.655 188.820,391.644 188.600 C 391.606 187.782,392.675 186.865,393.819 186.734 C 394.688 186.636,395.034 186.362,395.128 185.700 C 395.256 184.796,395.132 184.728,393.218 184.643 C 392.425 184.608,392.167 184.308,391.874 183.080 C 391.336 180.827,390.184 180.242,386.892 180.551 C 385.412 180.690,383.949 180.641,383.642 180.443 C 382.772 179.879,383.443 178.804,384.687 178.768 L 385.800 178.737 384.800 178.401 C 384.250 178.217,383.125 177.953,382.300 177.815 C 381.144 177.621,380.800 177.378,380.800 176.755 C 380.800 176.161,380.611 176.006,380.087 176.172 C 379.481 176.365,379.362 176.125,379.294 174.573 C 379.251 173.569,379.111 172.580,378.984 172.374 C 378.724 171.953,366.282 171.851,365.867 172.267 M380.909 174.000 C 380.909 174.990,380.987 175.395,381.082 174.900 C 381.178 174.405,381.178 173.595,381.082 173.100 C 380.987 172.605,380.909 173.010,380.909 174.000 M377.000 182.400 C 377.136 182.620,377.072 182.800,376.859 182.800 C 376.645 182.800,376.349 183.520,376.200 184.400 C 376.051 185.280,375.766 186.000,375.565 186.000 C 375.148 186.000,375.061 182.672,375.467 182.267 C 375.863 181.870,376.718 181.944,377.000 182.400 M68.800 203.224 C 68.800 203.677,68.639 203.948,68.442 203.826 C 68.245 203.704,67.981 203.874,67.854 204.202 C 67.708 204.583,67.075 204.805,66.113 204.814 C 64.557 204.829,60.401 205.705,59.632 206.180 C 59.350 206.354,59.200 208.802,59.200 213.232 L 59.200 220.017 60.300 220.486 C 62.822 221.561,62.800 221.485,62.800 229.118 C 62.800 235.310,62.880 236.173,63.500 236.643 C 64.804 237.633,67.932 237.096,69.954 235.536 C 70.575 235.057,71.576 234.800,72.822 234.800 C 73.874 234.800,75.785 234.545,77.068 234.234 C 80.653 233.363,84.546 233.040,84.173 233.644 C 83.947 234.010,84.065 234.042,84.634 233.768 C 86.450 232.896,100.744 233.100,102.232 234.020 C 103.397 234.740,103.941 234.827,105.707 234.578 C 106.858 234.416,107.574 234.204,107.298 234.107 C 106.468 233.818,107.169 233.200,108.327 233.200 C 108.921 233.200,110.215 232.775,111.203 232.256 C 112.536 231.555,113.968 231.240,116.747 231.038 C 119.753 230.818,120.957 230.531,122.835 229.582 C 124.123 228.932,125.518 228.400,125.935 228.400 C 126.351 228.400,127.150 228.040,127.709 227.600 C 128.269 227.160,128.899 226.800,129.109 226.800 C 129.320 226.800,129.954 226.437,130.518 225.993 C 131.089 225.544,131.648 225.355,131.779 225.566 C 131.919 225.792,132.455 225.715,133.107 225.375 C 134.457 224.671,135.191 224.645,135.228 225.300 C 135.244 225.575,135.398 225.440,135.571 225.000 C 135.841 224.316,135.928 224.402,136.174 225.600 C 136.331 226.370,136.726 228.170,137.050 229.600 C 137.375 231.030,137.725 232.605,137.828 233.100 C 138.197 234.872,139.541 234.128,143.791 229.800 C 147.170 226.359,148.127 225.600,149.088 225.600 C 149.940 225.600,150.581 225.216,151.430 224.197 C 153.055 222.249,152.930 221.846,150.600 221.520 C 149.500 221.365,147.790 221.095,146.800 220.920 L 145.000 220.600 144.891 213.300 L 144.782 206.000 141.447 206.000 L 138.113 206.000 137.655 210.030 C 137.095 214.953,136.995 215.149,134.334 216.521 C 132.244 217.599,132.196 217.605,132.000 216.802 C 131.800 215.983,131.799 215.983,130.264 216.766 C 128.511 217.661,127.192 217.337,125.854 215.681 C 125.444 215.173,125.010 214.856,124.890 214.977 C 124.571 215.296,121.636 210.342,121.586 209.400 L 121.544 208.600 121.218 209.400 C 120.916 210.141,120.871 210.122,120.611 209.135 C 120.298 207.945,118.662 207.285,117.801 207.999 C 117.421 208.314,117.235 208.304,117.120 207.960 C 116.916 207.348,114.005 209.155,113.099 210.456 C 112.541 211.258,112.439 211.291,112.421 210.676 C 112.409 210.278,112.234 210.055,112.031 210.181 C 111.828 210.307,111.018 210.029,110.231 209.565 C 109.444 209.101,108.800 208.858,108.800 209.026 C 108.800 209.193,108.087 208.335,107.216 207.118 C 106.328 205.879,105.027 204.619,104.256 204.253 C 102.802 203.563,101.821 203.372,102.748 203.959 C 103.322 204.323,100.320 204.263,90.633 203.715 C 86.768 203.496,85.014 203.247,84.899 202.900 C 84.632 202.093,83.874 202.319,82.710 203.552 C 80.642 205.743,72.554 205.739,70.485 203.546 C 69.201 202.187,68.800 202.110,68.800 203.224 M162.400 204.800 C 161.650 205.550,161.600 206.133,161.600 214.191 L 161.600 222.782 162.600 223.437 C 163.328 223.914,163.600 224.446,163.600 225.397 C 163.600 226.970,164.151 227.492,165.998 227.667 C 167.585 227.818,168.954 229.845,169.264 232.500 C 169.420 233.834,169.374 233.907,168.631 233.510 C 167.851 233.092,167.848 233.108,168.515 234.126 C 168.892 234.701,169.200 235.478,169.200 235.853 C 169.200 236.227,169.319 236.414,169.464 236.269 C 169.782 235.951,170.791 237.313,170.985 238.323 C 171.062 238.720,171.255 242.647,171.414 247.050 C 171.794 257.534,170.439 256.464,183.158 256.319 C 192.069 256.217,193.601 256.285,193.600 256.780 C 193.600 257.231,193.707 257.253,194.080 256.880 C 194.344 256.616,195.457 256.400,196.554 256.400 C 198.176 256.400,201.281 255.407,202.358 254.544 C 202.445 254.474,202.731 251.031,202.994 246.892 C 203.461 239.540,204.114 236.729,205.198 237.399 C 205.369 237.505,205.732 237.323,206.004 236.996 C 206.609 236.266,210.352 236.223,212.392 236.923 C 214.345 237.593,214.428 238.434,214.305 256.273 L 214.200 271.399 212.800 272.069 C 212.030 272.438,210.275 273.068,208.900 273.470 C 206.676 274.119,205.467 275.200,206.964 275.200 C 207.275 275.200,207.983 275.740,208.539 276.400 C 209.429 277.459,209.801 277.600,211.694 277.600 C 212.874 277.600,214.050 277.810,214.307 278.067 C 214.663 278.423,214.825 278.399,214.990 277.967 C 215.153 277.542,215.812 277.434,217.619 277.536 C 219.113 277.621,220.253 277.488,220.615 277.187 C 221.119 276.769,221.210 277.138,221.270 279.851 C 221.311 281.688,221.396 282.250,221.475 281.200 C 221.726 277.872,221.872 277.600,223.400 277.600 C 224.928 277.600,225.074 277.872,225.325 281.200 C 225.403 282.234,225.490 281.646,225.530 279.820 C 225.584 277.347,225.707 276.747,226.080 277.120 C 226.344 277.384,227.028 277.600,227.600 277.600 C 229.153 277.600,229.600 278.319,229.600 280.818 C 229.600 283.856,230.221 284.400,233.689 284.400 C 236.709 284.400,236.800 284.299,236.800 280.954 C 236.800 279.401,237.098 278.185,237.836 276.728 C 238.711 275.003,238.798 274.544,238.394 273.789 C 238.127 273.289,238.041 272.500,238.201 271.998 C 238.395 271.386,238.344 271.187,238.043 271.374 C 237.799 271.524,237.600 271.455,237.600 271.220 C 237.600 270.693,234.231 270.918,233.507 271.493 C 233.228 271.715,232.280 272.016,231.400 272.163 C 230.253 272.354,229.970 272.314,230.400 272.021 C 230.882 271.692,230.800 271.611,229.980 271.606 C 228.653 271.598,228.000 270.910,228.000 269.520 C 228.000 268.851,227.784 268.400,227.464 268.400 C 226.953 268.400,226.297 265.593,225.829 261.400 C 225.730 260.520,225.528 258.882,225.380 257.760 C 225.033 255.142,226.384 251.557,227.399 252.399 C 227.916 252.828,228.000 252.680,228.000 251.338 C 228.000 250.480,228.242 249.423,228.537 248.989 C 229.580 247.459,229.975 245.718,229.445 244.993 C 228.861 244.196,229.234 240.322,229.916 240.095 C 230.157 240.014,231.001 239.435,231.791 238.807 C 232.581 238.179,233.986 237.540,234.914 237.386 C 235.841 237.233,236.915 236.942,237.300 236.739 C 237.775 236.490,238.000 236.521,238.000 236.835 C 238.000 237.170,238.166 237.160,238.600 236.800 C 239.461 236.086,239.339 233.885,238.371 232.654 L 237.542 231.600 229.871 231.687 L 222.200 231.774 230.000 231.987 L 237.800 232.200 237.935 233.388 L 238.070 234.575 237.335 233.669 C 236.613 232.778,236.471 232.765,229.299 232.881 C 224.686 232.956,221.946 232.853,221.854 232.600 C 221.774 232.380,221.381 232.875,220.980 233.700 L 220.252 235.200 213.334 235.200 L 206.415 235.200 206.146 234.100 C 205.998 233.495,205.715 232.893,205.517 232.763 C 204.908 232.362,204.278 227.640,204.161 222.600 C 204.012 216.126,203.258 206.808,202.794 205.700 C 202.359 204.662,200.909 204.533,197.224 205.206 C 196.001 205.429,194.010 205.745,192.800 205.908 L 190.600 206.204 190.400 208.601 C 190.207 210.908,190.144 211.025,188.702 211.701 C 187.878 212.088,186.980 212.763,186.706 213.202 C 185.967 214.386,185.720 214.193,185.421 212.200 C 185.126 210.231,183.897 209.633,183.395 211.215 C 182.837 212.975,179.323 214.512,178.400 213.400 C 177.663 212.512,177.200 212.670,177.200 213.810 C 177.200 214.813,176.572 215.244,174.282 215.813 C 173.439 216.023,171.600 213.163,171.600 211.643 C 171.600 211.000,170.581 211.100,170.000 211.800 C 169.039 212.958,168.800 212.369,168.800 208.833 C 168.800 203.962,168.824 204.000,165.757 204.000 C 163.733 204.000,163.033 204.167,162.400 204.800 M157.365 213.000 C 157.366 216.960,157.426 218.526,157.498 216.480 C 157.571 214.434,157.571 211.194,157.498 209.280 C 157.424 207.366,157.365 209.040,157.365 213.000 M148.965 213.200 C 148.965 217.050,149.025 218.625,149.098 216.700 C 149.171 214.775,149.171 211.625,149.098 209.700 C 149.025 207.775,148.965 209.350,148.965 213.200 M103.830 218.977 C 104.089 220.009,103.805 220.800,103.176 220.800 C 102.969 220.800,102.800 220.170,102.800 219.400 C 102.800 217.796,103.465 217.523,103.830 218.977 M88.398 218.900 C 88.392 220.361,86.633 221.645,85.285 221.172 C 84.452 220.880,82.913 220.808,81.085 220.975 C 79.498 221.120,77.120 221.334,75.800 221.451 C 73.933 221.616,73.192 221.883,72.463 222.654 C 70.573 224.653,68.609 221.958,69.764 218.951 C 70.059 218.180,88.401 218.130,88.398 218.900 M150.500 220.676 C 150.885 220.776,151.515 220.776,151.900 220.676 C 152.285 220.575,151.970 220.493,151.200 220.493 C 150.430 220.493,150.115 220.575,150.500 220.676 M155.333 221.831 C 155.195 222.190,155.407 222.751,155.823 223.131 C 156.511 223.759,156.524 223.758,156.033 223.105 C 155.746 222.723,155.615 222.138,155.743 221.805 C 155.870 221.472,155.885 221.200,155.775 221.200 C 155.665 221.200,155.466 221.484,155.333 221.831 M290.400 223.200 C 290.400 224.747,292.187 224.904,293.530 223.474 C 294.767 222.158,294.646 222.000,292.400 222.000 C 290.444 222.000,290.400 222.027,290.400 223.200 M140.100 237.495 C 138.601 237.600,138.000 237.808,138.000 238.221 C 138.000 239.077,141.034 238.587,142.180 237.545 C 142.389 237.355,142.479 237.233,142.380 237.274 C 142.281 237.315,141.255 237.414,140.100 237.495 M272.494 238.815 C 271.248 239.315,272.143 245.276,273.782 247.400 L 274.400 248.200 275.044 247.400 C 278.966 242.525,277.291 236.887,272.494 238.815 M138.000 240.200 C 138.000 240.530,138.180 240.800,138.400 240.800 C 138.620 240.800,138.800 240.530,138.800 240.200 C 138.800 239.870,138.620 239.600,138.400 239.600 C 138.180 239.600,138.000 239.870,138.000 240.200 M163.676 268.055 L 163.600 270.309 161.801 270.579 C 158.876 271.018,157.875 275.573,159.566 280.752 C 160.025 282.156,160.400 284.064,160.400 284.992 C 160.400 285.921,160.596 287.292,160.835 288.040 C 161.075 288.788,161.354 289.665,161.457 289.989 C 161.605 290.458,161.708 290.472,161.965 290.057 C 162.171 289.723,162.365 290.125,162.507 291.183 C 162.629 292.089,163.169 293.408,163.707 294.115 C 165.741 296.783,166.800 299.452,166.800 301.906 C 166.800 304.343,168.248 305.694,170.099 304.983 C 170.839 304.699,171.127 305.900,171.589 311.200 C 171.771 313.290,171.938 315.135,171.960 315.300 C 172.056 316.019,172.704 315.491,173.326 314.186 C 173.929 312.921,174.000 310.746,174.000 293.478 L 174.000 274.183 172.977 273.192 C 170.258 270.557,169.630 269.796,168.977 268.349 C 168.033 266.255,165.662 266.904,165.028 269.429 C 164.602 271.130,164.045 270.476,163.896 268.100 L 163.751 265.800 163.676 268.055 M395.400 306.855 C 394.080 307.730,392.871 308.796,392.713 309.223 C 392.532 309.712,392.050 310.000,391.413 310.000 C 390.183 310.000,390.174 310.152,391.017 316.416 C 391.745 321.829,392.123 322.945,393.433 323.542 C 394.452 324.006,394.822 324.685,395.560 327.446 C 396.190 329.804,397.406 331.200,398.829 331.200 L 400.000 331.200 400.000 318.200 L 400.000 305.200 398.900 305.231 C 398.295 305.248,396.720 305.979,395.400 306.855 M167.331 328.900 C 166.750 329.819,165.646 334.580,165.623 336.267 C 165.588 338.822,165.322 339.200,163.557 339.200 C 162.332 339.200,162.000 339.351,162.000 339.911 C 162.000 340.302,161.715 341.029,161.366 341.527 C 160.750 342.407,160.761 342.425,161.766 342.173 L 162.800 341.913 162.814 349.057 C 162.825 354.495,162.965 356.439,163.400 357.200 C 163.835 357.961,163.975 359.899,163.986 365.300 L 164.000 372.400 166.200 372.400 L 168.400 372.400 168.418 368.900 C 168.442 364.020,169.286 361.665,171.400 360.575 C 173.675 359.403,174.008 356.033,172.014 354.360 C 170.941 353.460,170.826 353.184,171.160 352.306 C 171.456 351.527,171.358 350.915,170.740 349.665 C 169.790 347.745,169.200 343.086,168.957 335.600 C 168.732 328.631,168.390 327.225,167.331 328.900 M360.400 341.355 L 358.200 341.835 358.300 344.377 C 358.355 345.775,358.602 347.162,358.849 347.459 C 359.488 348.229,363.045 348.182,363.345 347.400 C 363.471 347.070,363.870 346.800,364.231 346.800 C 364.747 346.800,364.852 346.497,364.722 345.382 C 364.488 343.374,365.852 343.624,366.976 345.795 C 368.070 347.908,368.970 348.036,370.036 346.229 C 370.505 345.434,371.198 344.800,371.597 344.800 C 372.353 344.800,372.800 344.046,372.800 342.767 C 372.800 342.062,372.477 342.000,368.833 342.000 C 366.652 342.000,364.807 341.833,364.733 341.630 C 364.499 340.977,362.663 340.861,360.400 341.355 M56.000 343.237 C 56.000 344.132,55.782 344.532,55.212 344.681 C 54.358 344.904,55.098 347.200,56.024 347.200 C 56.763 347.200,55.593 348.823,54.576 349.209 C 53.692 349.545,53.600 349.805,53.600 351.966 C 53.600 354.879,53.040 355.362,51.639 353.657 C 49.995 351.656,46.800 352.671,46.800 355.195 C 46.800 356.482,47.472 356.745,51.000 356.841 C 55.182 356.954,56.128 357.196,55.426 357.971 C 54.905 358.547,54.800 359.915,54.800 366.124 L 54.800 373.585 53.801 373.836 C 53.251 373.973,52.525 373.980,52.186 373.850 C 51.845 373.719,51.475 373.861,51.357 374.167 C 51.034 375.010,49.955 375.193,42.800 375.621 C 34.286 376.130,34.800 375.922,34.800 378.858 C 34.800 382.373,33.521 383.600,29.857 383.600 L 27.253 383.600 26.112 385.300 C 25.485 386.235,24.479 387.236,23.878 387.525 C 21.903 388.475,21.248 389.960,22.420 390.831 C 22.959 391.231,23.677 391.800,24.015 392.094 C 24.396 392.426,25.003 392.525,25.615 392.354 C 27.091 391.943,32.427 391.949,33.874 392.364 C 34.835 392.639,35.193 392.595,35.352 392.181 C 35.515 391.755,37.175 391.599,42.881 391.473 C 46.906 391.385,50.830 391.189,51.600 391.039 C 52.370 390.888,53.597 390.672,54.328 390.559 L 55.655 390.353 55.566 382.638 C 55.468 374.123,55.508 373.922,57.215 374.263 C 59.479 374.716,59.600 374.295,59.600 365.941 L 59.600 358.380 60.608 357.997 C 61.162 357.786,62.995 357.523,64.682 357.413 C 66.369 357.302,67.882 357.074,68.046 356.906 C 68.733 356.200,67.919 348.304,67.139 348.100 C 66.604 347.960,66.400 347.533,66.400 346.553 C 66.400 344.600,65.292 344.726,65.109 346.700 L 64.970 348.200 64.510 347.139 C 63.879 345.684,63.296 345.413,62.136 346.034 C 60.756 346.773,59.832 346.100,59.675 344.240 C 59.472 341.849,56.000 340.902,56.000 343.237 M399.600 369.555 C 399.600 369.963,397.654 370.434,395.562 370.532 C 394.171 370.598,392.800 371.344,392.800 372.035 C 392.800 372.703,394.652 373.340,397.300 373.583 L 400.000 373.831 400.000 371.515 C 400.000 370.242,399.910 369.200,399.800 369.200 C 399.690 369.200,399.600 369.360,399.600 369.555 M14.374 391.941 C 13.520 392.632,13.416 393.039,13.409 395.726 C 13.400 398.642,13.376 398.715,12.648 398.068 C 12.043 397.530,12.101 397.805,12.945 399.481 C 14.597 402.758,17.976 402.972,17.970 399.800 C 17.965 396.888,17.336 392.148,17.201 394.000 L 17.070 395.800 16.835 393.603 C 16.569 391.113,15.929 390.681,14.374 391.941 M27.331 392.900 C 27.157 393.175,26.741 393.940,26.407 394.600 C 26.073 395.260,25.170 396.110,24.400 396.489 C 23.586 396.889,22.664 397.810,22.198 398.687 C 21.698 399.627,20.830 400.462,19.898 400.901 C 16.589 402.459,17.790 406.632,22.117 408.614 C 23.649 409.315,24.614 410.054,25.018 410.834 C 25.351 411.478,26.293 412.459,27.111 413.014 C 27.930 413.569,29.218 414.472,29.973 415.021 C 32.669 416.980,33.154 415.744,33.636 405.685 C 33.844 401.348,34.099 397.565,34.203 397.278 C 34.434 396.639,33.406 394.091,32.523 393.115 C 31.746 392.256,27.841 392.095,27.331 392.900 M85.454 409.940 C 84.681 410.794,84.831 445.391,85.612 446.172 C 87.404 447.964,88.000 442.886,88.000 425.813 C 88.000 408.247,87.847 407.296,85.454 409.940 M48.578 460.514 C 48.469 460.797,48.430 464.169,48.490 468.009 C 48.606 475.399,48.870 476.236,50.619 474.784 C 51.519 474.037,51.471 460.590,50.567 460.243 C 49.557 459.855,48.790 459.960,48.578 460.514 M59.500 478.268 C 58.583 478.518,58.395 508.400,59.311 508.400 C 59.592 508.400,60.267 508.713,60.811 509.095 L 61.800 509.789 60.633 509.995 C 59.279 510.233,58.725 511.200,59.943 511.200 C 60.388 511.200,60.864 511.380,61.000 511.600 C 61.446 512.322,63.260 512.057,63.474 511.238 C 63.605 510.737,64.270 510.326,65.419 510.037 C 67.933 509.404,67.871 510.429,66.892 485.600 L 66.600 478.200 63.400 478.139 C 61.640 478.105,59.885 478.164,59.500 478.268 \\\" stroke=\\\"none\\\" fill=\\\"#f4cf5c\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path3\\\" d=\\\"M171.708 14.700 C 171.339 16.017,171.304 25.616,171.659 27.600 C 171.798 28.370,171.931 29.495,171.955 30.100 C 172.009 31.426,172.786 31.526,173.838 30.343 C 174.257 29.871,175.140 29.152,175.800 28.744 C 176.998 28.005,176.998 28.003,176.000 27.985 C 175.013 27.968,175.015 27.960,176.200 27.328 C 178.479 26.112,180.548 24.005,179.501 23.968 C 178.777 23.942,178.900 23.795,180.130 23.222 C 182.544 22.096,185.199 19.268,185.206 17.817 C 185.215 16.141,185.849 15.170,186.394 16.000 C 186.708 16.478,186.789 16.397,186.795 15.600 C 186.802 14.615,186.760 14.602,183.988 14.733 C 182.149 14.820,180.531 14.647,179.316 14.233 C 176.046 13.119,172.082 13.362,171.708 14.700 M336.600 68.784 C 336.160 68.964,334.977 69.020,333.972 68.908 C 332.701 68.767,331.740 68.914,330.825 69.387 C 330.100 69.762,329.168 69.980,328.753 69.872 C 328.129 69.709,328.005 69.891,328.032 70.937 C 328.049 71.632,328.154 71.975,328.265 71.700 C 328.734 70.538,329.600 71.218,329.600 72.749 C 329.600 74.691,332.368 75.594,333.476 74.013 C 334.313 72.818,335.366 73.018,336.573 74.600 C 338.166 76.689,338.400 76.381,338.400 72.200 C 338.400 68.228,338.321 68.079,336.600 68.784 M187.094 103.507 C 186.469 103.895,186.078 104.426,186.195 104.731 C 186.309 105.027,186.501 106.019,186.622 106.935 C 187.165 111.047,187.275 111.451,187.620 110.600 C 187.932 109.830,187.945 109.832,187.972 110.671 C 188.000 111.542,188.958 112.800,189.593 112.800 C 189.777 112.800,190.365 111.923,190.899 110.852 C 191.709 109.226,191.938 109.011,192.284 109.552 C 192.634 110.100,194.400 105.705,194.400 104.285 C 194.400 103.205,188.581 102.585,187.094 103.507 M367.320 103.880 C 366.485 104.042,366.446 104.220,366.570 107.325 C 366.798 113.053,366.735 112.719,367.413 111.824 C 367.987 111.065,368.000 111.067,368.000 111.924 C 368.000 113.172,369.589 113.149,369.627 111.900 L 369.654 111.000 370.089 111.901 C 370.927 113.640,372.178 108.804,371.536 106.303 C 370.910 103.857,370.033 103.353,367.320 103.880 M138.400 118.785 C 138.400 119.877,138.040 121.684,137.600 122.800 C 136.670 125.159,136.641 125.345,137.262 124.962 C 137.574 124.769,137.614 124.854,137.385 125.224 C 137.040 125.782,136.727 127.313,135.981 132.092 C 135.750 133.573,135.301 135.283,134.983 135.892 C 134.665 136.502,134.404 137.223,134.402 137.495 C 134.401 137.878,130.977 138.014,119.300 138.095 L 104.200 138.200 104.095 153.100 L 103.990 168.000 118.951 168.000 L 133.911 168.000 134.060 162.257 C 134.149 158.809,134.388 156.291,134.659 155.957 C 134.908 155.650,135.182 154.094,135.269 152.498 C 135.442 149.313,136.622 147.262,137.676 148.316 C 137.942 148.582,138.429 148.800,138.758 148.800 C 139.087 148.800,139.861 149.284,140.478 149.875 C 141.486 150.841,141.601 150.871,141.606 150.175 C 141.611 149.528,141.676 149.499,142.000 150.000 C 142.213 150.330,142.391 150.914,142.394 151.297 C 142.407 152.801,143.772 155.200,144.614 155.200 C 145.068 155.200,145.656 155.416,145.920 155.680 C 146.293 156.053,146.400 155.920,146.400 155.080 C 146.400 154.195,146.220 154.000,145.400 154.000 C 143.884 154.000,142.791 152.671,142.851 150.900 L 142.901 149.400 143.311 150.860 C 143.648 152.060,144.067 152.482,145.661 153.228 C 146.727 153.728,147.600 154.365,147.600 154.645 C 147.600 154.924,147.780 155.264,148.000 155.400 C 148.220 155.536,148.400 155.314,148.400 154.907 C 148.400 154.407,147.685 153.816,146.200 153.088 C 144.133 152.074,144.000 151.921,144.000 150.550 L 144.000 149.092 144.732 150.046 C 145.134 150.571,145.622 151.360,145.816 151.800 C 146.109 152.467,146.191 152.345,146.310 151.072 C 146.460 149.451,147.600 149.598,147.600 151.239 C 147.600 152.129,149.511 153.200,151.100 153.200 C 152.496 153.200,153.185 153.835,153.247 155.180 C 153.292 156.147,153.311 156.137,153.600 155.000 C 153.803 154.201,153.921 154.067,153.952 154.600 C 153.994 155.308,154.232 155.384,156.011 155.261 C 157.207 155.178,158.262 155.319,158.612 155.610 C 159.104 156.018,159.200 155.927,159.200 155.049 C 159.200 154.069,156.526 153.545,153.538 153.940 C 153.394 153.959,153.057 153.710,152.789 153.387 C 152.521 153.064,151.772 152.800,151.125 152.800 C 149.267 152.800,148.400 152.139,148.400 150.724 C 148.400 149.501,148.416 149.491,149.200 150.200 C 149.640 150.598,150.000 151.166,150.000 151.462 C 150.000 152.662,151.873 152.037,152.283 150.700 L 152.683 149.400 152.965 150.600 C 153.489 152.823,153.722 152.988,156.641 153.200 C 159.567 153.412,160.400 153.718,160.400 154.580 C 160.400 154.892,160.987 155.181,161.818 155.278 C 163.059 155.423,163.221 155.342,163.118 154.627 C 162.984 153.698,161.662 153.332,156.800 152.879 C 153.815 152.601,153.800 152.594,153.737 151.400 C 153.694 150.594,153.736 150.496,153.864 151.100 C 154.049 151.970,154.209 152.000,158.654 152.000 C 163.886 152.000,164.800 152.300,164.800 154.014 C 164.800 155.131,164.893 155.200,166.400 155.200 L 168.000 155.200 168.004 153.300 C 168.007 152.255,168.277 150.516,168.604 149.436 C 168.982 148.193,169.200 145.808,169.200 142.931 C 169.200 140.433,169.360 138.077,169.556 137.695 C 171.442 134.010,171.385 134.444,170.597 129.750 C 170.195 127.358,169.447 124.433,168.933 123.250 C 168.420 122.068,168.000 120.853,168.000 120.550 C 168.000 120.166,167.465 120.000,166.224 120.000 C 165.247 120.000,164.336 119.820,164.200 119.600 C 164.064 119.380,163.648 119.213,163.276 119.228 C 162.713 119.252,162.700 119.302,163.200 119.528 C 164.507 120.120,166.055 121.356,166.476 122.142 C 166.910 122.953,166.898 122.956,165.874 122.285 C 165.299 121.908,164.445 121.600,163.977 121.600 C 163.462 121.600,163.042 121.284,162.916 120.800 C 162.736 120.112,162.370 120.000,160.311 120.000 L 157.915 120.000 159.158 121.160 C 160.646 122.551,160.786 123.145,159.414 122.246 C 158.872 121.891,158.045 121.600,157.577 121.600 C 157.062 121.600,156.642 121.284,156.516 120.800 C 156.123 119.298,154.003 119.717,153.988 121.300 C 153.977 122.414,153.915 122.495,153.550 121.867 C 153.315 121.464,153.214 120.789,153.325 120.367 C 153.443 119.914,153.361 119.701,153.124 119.847 C 152.904 119.983,152.793 120.691,152.878 121.419 C 153.066 123.027,152.565 122.862,152.199 121.195 C 152.024 120.397,151.692 120.000,151.201 120.000 C 150.796 120.000,150.136 119.893,149.733 119.762 C 149.184 119.584,149.136 119.622,149.543 119.912 C 150.220 120.396,149.812 121.858,148.857 122.370 C 148.256 122.691,148.188 122.563,148.328 121.369 C 148.498 119.908,147.834 119.460,147.484 120.800 C 147.369 121.240,146.938 121.600,146.526 121.600 C 146.115 121.600,145.346 121.902,144.819 122.272 C 143.913 122.906,143.874 122.905,144.130 122.239 C 144.278 121.852,144.400 121.468,144.400 121.386 C 144.400 121.304,145.036 120.936,145.814 120.566 C 147.532 119.751,147.476 119.679,145.300 119.906 C 144.275 120.013,143.600 120.288,143.600 120.598 C 143.600 120.880,143.246 121.536,142.813 122.056 L 142.027 123.000 142.013 121.487 C 142.003 120.292,142.189 119.893,142.900 119.588 C 143.668 119.257,143.683 119.216,143.003 119.305 C 142.565 119.363,141.986 119.869,141.717 120.430 C 140.637 122.684,139.783 122.941,139.940 120.964 C 140.126 118.626,140.338 118.547,147.000 118.314 C 150.080 118.207,151.790 118.245,150.800 118.399 L 149.000 118.680 150.633 118.740 C 152.521 118.809,152.789 118.643,152.510 117.577 C 152.319 116.845,151.901 116.800,145.353 116.800 L 138.400 116.800 138.400 118.785 M2.412 129.800 C 2.393 130.415,2.307 130.472,2.037 130.047 C 1.780 129.640,1.614 129.825,1.412 130.747 C 1.260 131.436,0.881 132.000,0.568 132.000 C -0.456 132.000,-0.162 134.654,0.900 135.000 C 2.345 135.470,2.568 135.472,3.177 135.025 C 3.633 134.689,3.680 134.726,3.400 135.200 C 3.086 135.733,3.128 135.733,3.785 135.200 C 4.625 134.517,4.776 134.523,5.255 135.266 C 5.534 135.698,5.664 135.702,5.932 135.286 C 6.115 135.004,6.564 134.888,6.932 135.029 C 7.322 135.179,7.600 135.090,7.600 134.816 C 7.600 134.528,7.910 134.444,8.400 134.600 C 9.099 134.822,9.200 134.672,9.200 133.413 C 9.200 132.096,9.131 132.009,8.400 132.400 C 7.689 132.780,7.599 132.704,7.594 131.714 C 7.586 130.224,6.820 128.967,6.793 130.400 C 6.775 131.378,6.761 131.382,6.171 130.602 C 5.681 129.953,5.504 129.908,5.225 130.360 C 4.950 130.804,4.842 130.763,4.687 130.158 C 4.534 129.559,4.477 129.610,4.418 130.400 C 4.349 131.325,4.318 131.340,4.000 130.600 L 3.656 129.800 3.596 130.600 C 3.547 131.246,3.429 131.169,2.986 130.200 C 2.557 129.265,2.431 129.177,2.412 129.800 M152.525 130.949 C 154.284 135.533,152.869 137.493,148.769 136.152 C 146.277 135.337,145.999 134.884,147.335 133.819 C 147.921 133.352,148.400 132.672,148.400 132.308 C 148.400 130.847,152.028 129.652,152.525 130.949 M141.701 154.200 C 141.705 155.080,141.787 155.393,141.883 154.895 C 141.979 154.398,141.975 153.678,141.875 153.295 C 141.775 152.913,141.696 153.320,141.701 154.200 M150.000 154.600 C 150.000 154.973,150.378 155.200,151.000 155.200 C 151.622 155.200,152.000 154.973,152.000 154.600 C 152.000 154.227,151.622 154.000,151.000 154.000 C 150.378 154.000,150.000 154.227,150.000 154.600 M219.600 155.708 C 219.600 156.442,219.391 156.656,218.700 156.632 C 217.874 156.603,217.790 156.800,217.682 159.044 C 217.579 161.194,217.447 161.541,216.582 161.935 C 215.652 162.359,215.600 162.562,215.600 165.762 C 215.600 168.644,215.497 169.168,214.900 169.324 C 214.480 169.434,214.679 169.542,215.400 169.593 C 216.588 169.679,216.590 169.683,215.600 170.000 C 214.933 170.214,214.833 170.334,215.300 170.360 C 216.929 170.453,218.422 173.200,216.843 173.200 C 216.376 173.200,215.994 173.571,215.843 174.172 C 215.690 174.779,215.260 175.193,214.699 175.272 C 214.122 175.354,213.754 175.722,213.672 176.299 C 213.594 176.853,213.180 177.290,212.595 177.437 C 212.026 177.580,211.597 178.021,211.523 178.538 C 211.446 179.079,211.065 179.448,210.500 179.528 C 209.110 179.725,209.408 180.731,210.900 180.875 C 212.495 181.028,214.275 180.223,214.599 179.202 C 214.732 178.783,215.183 178.333,215.600 178.200 C 216.017 178.067,216.470 177.609,216.606 177.180 C 217.249 175.156,220.539 175.645,220.775 177.800 L 220.951 179.400 221.175 177.600 C 221.393 175.855,221.446 175.796,222.900 175.676 C 224.338 175.557,224.400 175.491,224.409 174.076 C 224.414 173.230,224.752 172.173,225.200 171.600 L 225.982 170.600 225.991 173.030 C 226.001 175.799,225.021 177.200,223.074 177.200 C 222.483 177.200,222.000 177.349,222.000 177.531 C 222.000 178.223,224.650 177.461,225.743 176.454 L 226.885 175.400 226.615 171.002 C 226.308 166.015,225.581 164.286,223.408 163.378 C 222.191 162.869,220.400 158.402,220.400 155.875 C 220.400 155.530,220.220 155.136,220.000 155.000 C 219.776 154.862,219.600 155.173,219.600 155.708 M391.670 158.526 C 390.986 159.253,390.800 159.941,390.800 161.736 C 390.800 163.792,390.702 164.057,389.819 164.393 C 388.861 164.757,387.591 166.645,387.609 167.680 C 387.614 167.966,387.965 167.435,388.389 166.500 C 389.216 164.679,390.172 164.285,390.522 165.622 C 390.681 166.231,390.486 166.539,389.768 166.812 C 388.597 167.257,388.492 168.000,389.600 168.000 C 390.040 168.000,390.400 168.157,390.400 168.349 C 390.400 169.009,393.464 169.206,395.049 168.648 C 396.849 168.015,396.922 167.327,395.580 163.685 C 395.151 162.522,394.800 161.208,394.800 160.765 C 394.800 158.231,393.093 157.010,391.670 158.526 M186.035 170.291 C 185.393 170.412,185.235 170.574,185.562 170.777 C 185.892 170.981,185.650 171.248,184.827 171.589 C 182.897 172.388,183.357 178.808,185.523 181.307 C 186.192 182.078,186.591 186.400,185.994 186.400 C 184.382 186.400,183.607 189.562,184.851 191.062 C 185.926 192.357,188.000 190.941,188.000 188.911 C 188.000 188.410,188.236 188.000,188.525 188.000 C 189.108 188.000,191.200 185.963,191.200 185.395 C 191.200 185.196,191.871 184.347,192.690 183.508 C 194.094 182.070,194.196 181.792,194.453 178.691 C 194.602 176.881,194.855 174.635,195.014 173.700 C 195.243 172.346,195.184 172.000,194.720 172.000 C 194.400 172.000,193.030 171.550,191.677 171.000 C 189.318 170.041,188.142 169.894,186.035 170.291 M137.500 171.085 C 137.047 171.198,136.800 171.643,136.800 172.349 C 136.800 172.949,136.635 173.611,136.433 173.820 C 136.207 174.054,136.477 174.680,137.133 175.446 L 138.200 176.692 142.000 176.206 C 145.307 175.783,145.930 175.800,146.800 176.340 L 147.800 176.959 146.830 175.880 C 146.270 175.255,145.426 174.792,144.830 174.781 C 144.028 174.767,144.233 174.593,145.762 173.996 C 146.842 173.575,147.922 173.333,148.162 173.459 C 148.403 173.585,148.060 173.233,147.400 172.677 C 145.775 171.308,140.212 170.414,137.500 171.085 M214.325 171.333 C 214.032 171.625,213.310 171.986,212.721 172.134 C 211.875 172.346,211.624 172.675,211.525 173.701 C 211.433 174.654,211.182 175.031,210.581 175.117 C 210.101 175.186,209.578 175.723,209.316 176.417 C 208.959 177.363,208.631 177.600,207.679 177.600 C 206.615 177.600,206.470 177.750,206.324 179.000 C 206.123 180.720,207.342 181.005,208.069 179.408 C 208.318 178.862,208.845 178.313,209.240 178.187 C 209.636 178.062,210.062 177.636,210.187 177.240 C 210.313 176.845,210.862 176.318,211.408 176.069 C 211.953 175.821,212.400 175.355,212.400 175.036 C 212.400 174.716,212.760 174.340,213.200 174.200 C 213.641 174.060,214.207 173.553,214.459 173.073 C 214.711 172.593,215.161 172.056,215.458 171.880 C 215.756 171.704,216.000 171.389,216.000 171.180 C 216.000 170.621,214.940 170.718,214.325 171.333 M224.000 172.517 C 224.000 174.394,222.409 175.449,221.280 174.320 C 220.101 173.141,220.700 171.782,222.400 171.782 C 223.686 171.782,224.000 171.926,224.000 172.517 M217.928 178.500 C 217.846 179.078,217.478 179.446,216.900 179.528 C 216.333 179.608,216.000 179.932,216.000 180.404 C 216.000 181.369,216.647 181.775,216.946 180.998 C 217.097 180.604,217.726 180.400,218.787 180.400 C 220.364 180.400,220.400 180.368,220.400 179.000 C 220.400 177.252,218.169 176.801,217.928 178.500 M311.200 231.951 C 311.200 232.159,310.889 232.284,310.510 232.228 C 309.631 232.099,308.800 233.671,308.800 235.462 C 308.800 236.216,308.435 237.326,307.988 237.930 C 305.934 240.709,306.650 250.297,309.029 251.856 C 309.585 252.220,310.316 253.052,310.653 253.703 C 311.190 254.742,311.421 254.857,312.533 254.644 C 313.439 254.470,313.629 254.513,313.200 254.794 C 312.769 255.077,313.218 255.188,314.800 255.188 C 316.351 255.188,316.823 255.075,316.400 254.805 C 315.988 254.542,316.266 254.498,317.291 254.662 C 319.312 254.987,319.573 254.213,320.073 246.400 C 320.771 235.505,320.594 232.766,319.277 234.083 C 318.908 234.452,318.800 234.351,318.800 233.631 C 318.800 232.809,318.722 232.765,318.125 233.251 C 317.535 233.731,317.483 233.713,317.711 233.105 C 317.854 232.722,317.843 232.429,317.686 232.452 C 317.529 232.476,317.220 232.457,317.000 232.410 C 316.780 232.364,315.815 232.357,314.856 232.396 C 313.506 232.450,313.180 232.345,313.415 231.933 C 313.653 231.513,313.607 231.502,313.197 231.881 C 312.836 232.215,312.452 232.242,311.939 231.967 C 311.486 231.725,311.200 231.718,311.200 231.951 M315.226 235.214 C 316.589 235.943,316.002 237.600,314.381 237.600 C 313.841 237.600,313.111 236.010,313.357 235.369 C 313.615 234.694,314.170 234.649,315.226 235.214 M288.000 239.095 C 285.804 239.349,286.117 238.655,283.283 249.570 C 282.491 252.622,281.848 254.310,281.349 254.653 C 275.333 258.778,272.427 263.421,272.406 268.942 C 272.403 269.791,272.152 271.501,271.848 272.742 C 271.500 274.167,271.287 277.420,271.272 281.556 C 271.244 289.195,271.440 288.831,267.116 289.243 C 260.582 289.865,260.605 289.853,255.447 294.945 L 250.800 299.532 250.800 301.896 C 250.800 305.536,250.111 306.000,244.701 306.000 C 239.373 306.000,239.840 304.172,240.200 323.621 L 240.495 339.515 238.353 340.957 C 236.459 342.233,235.920 342.400,233.705 342.400 L 231.200 342.400 231.200 344.125 C 231.200 345.577,231.011 345.990,230.000 346.737 C 228.347 347.959,228.268 350.000,229.875 350.000 L 230.950 350.000 229.875 351.122 L 228.800 352.244 228.800 362.600 L 228.800 372.956 229.875 374.078 L 230.950 375.200 229.875 375.200 L 228.800 375.200 228.800 382.764 L 228.800 390.329 229.979 391.321 C 230.999 392.179,231.174 392.628,231.279 394.656 L 231.400 397.000 233.794 397.123 C 236.581 397.266,237.594 397.965,237.614 399.762 C 237.622 400.443,237.886 401.450,238.200 402.000 C 238.514 402.550,238.778 403.859,238.786 404.910 C 238.806 407.626,238.643 407.600,255.583 407.600 C 269.225 407.600,270.338 407.548,270.632 406.900 C 272.103 403.662,273.201 344.929,271.864 341.007 C 271.526 340.013,271.373 339.199,271.524 339.199 C 271.676 339.198,271.857 336.993,271.926 334.299 C 271.995 331.604,272.234 328.230,272.458 326.800 C 272.707 325.204,272.757 321.097,272.585 316.161 C 272.210 305.339,271.367 306.308,281.011 306.470 C 290.049 306.622,290.206 306.680,288.885 309.400 C 288.404 310.390,287.828 311.200,287.605 311.200 C 287.081 311.200,287.077 312.677,287.600 313.000 C 288.937 313.826,287.767 317.600,286.174 317.600 C 285.180 317.600,283.194 319.028,283.213 319.729 C 283.238 320.683,285.162 322.400,286.204 322.400 C 286.798 322.400,287.141 322.572,287.000 322.800 C 286.864 323.020,287.087 323.200,287.496 323.200 C 288.577 323.200,289.198 323.988,289.214 325.380 L 289.228 326.600 289.800 325.600 L 290.372 324.600 290.386 326.025 C 290.396 327.075,290.716 327.753,291.600 328.600 L 292.800 329.750 292.836 328.375 C 292.870 327.130,292.943 327.224,293.618 329.375 C 294.130 331.007,294.744 332.049,295.581 332.704 C 297.465 334.178,297.416 337.926,295.500 338.939 C 294.785 339.317,293.750 339.884,293.200 340.199 C 292.650 340.514,291.660 341.005,291.000 341.289 C 289.667 341.864,289.078 345.078,289.994 346.788 C 290.361 347.475,290.308 347.600,289.647 347.600 C 289.218 347.600,288.776 347.375,288.665 347.100 C 288.554 346.825,288.449 347.509,288.432 348.620 C 288.398 350.738,288.876 351.600,290.080 351.600 C 290.766 351.600,290.800 352.902,290.800 379.564 L 290.800 407.529 289.600 408.539 C 288.658 409.331,288.400 409.872,288.400 411.054 C 288.400 412.225,288.507 412.453,288.880 412.080 C 289.776 411.184,290.498 411.478,289.914 412.500 C 288.971 414.151,289.193 437.287,290.162 438.358 C 290.987 439.269,290.483 439.487,289.174 438.786 C 288.452 438.399,288.400 438.521,288.400 440.613 C 288.400 442.565,288.490 442.825,289.100 442.631 C 289.744 442.427,289.779 442.702,289.542 446.104 C 289.216 450.760,289.018 451.342,287.574 451.887 C 286.629 452.244,286.400 452.569,286.400 453.548 C 286.400 454.460,286.049 455.046,285.000 455.883 C 283.369 457.185,283.092 458.900,284.400 459.600 C 285.602 460.244,285.410 460.713,282.900 463.260 C 281.635 464.544,280.201 466.046,279.714 466.597 C 278.993 467.413,278.460 467.600,276.847 467.600 C 273.650 467.600,273.600 467.544,273.600 463.957 L 273.600 460.800 257.049 460.800 C 242.825 460.800,240.428 460.884,240.000 461.400 C 239.726 461.730,239.007 462.000,238.401 462.000 C 236.972 462.000,236.800 462.848,236.800 469.877 L 236.800 475.254 238.200 476.574 L 239.600 477.894 239.600 493.559 L 239.600 509.224 238.135 510.512 L 236.669 511.800 229.235 512.000 L 221.800 512.200 221.691 519.570 C 221.549 529.134,222.958 528.169,209.537 527.890 C 200.430 527.701,198.341 527.759,197.735 528.217 C 197.331 528.524,196.539 528.780,195.975 528.787 C 195.370 528.795,194.479 529.292,193.800 530.000 C 192.791 531.053,192.377 531.200,190.415 531.200 L 188.179 531.200 187.390 529.500 L 186.600 527.800 178.200 527.596 C 173.580 527.483,169.593 527.259,169.340 527.097 C 169.041 526.905,168.779 524.293,168.589 519.601 L 168.298 512.400 165.749 512.400 L 163.200 512.400 163.200 527.325 L 163.200 542.250 161.976 543.154 C 159.229 545.185,159.203 545.327,159.201 558.300 L 159.200 570.000 203.814 570.000 L 248.429 570.000 248.314 566.110 L 248.200 562.220 246.563 561.942 C 245.662 561.789,244.271 561.390,243.471 561.056 L 242.017 560.448 241.909 552.724 L 241.800 545.000 240.800 544.872 C 238.940 544.633,238.800 543.997,238.800 535.756 C 238.800 526.887,238.818 526.800,240.616 526.800 C 241.558 526.800,242.014 526.585,242.181 526.061 C 242.310 525.654,242.862 525.118,243.408 524.869 C 243.953 524.621,244.400 524.155,244.400 523.836 C 244.400 523.516,244.771 523.136,245.224 522.992 C 245.678 522.848,246.247 522.296,246.489 521.765 C 246.730 521.234,247.173 520.800,247.473 520.800 C 247.772 520.800,248.221 520.353,248.469 519.808 C 248.718 519.262,249.245 518.713,249.640 518.587 C 250.036 518.462,250.470 518.009,250.606 517.580 C 250.846 516.826,251.506 516.546,253.600 516.312 C 254.533 516.208,254.613 516.020,254.800 513.519 C 255.074 509.847,255.111 509.825,261.294 509.658 C 268.090 509.474,267.600 508.742,267.600 519.082 C 267.600 524.743,267.747 527.446,268.083 527.985 C 268.509 528.667,268.306 529.021,266.383 530.955 C 259.080 538.302,259.048 538.330,257.591 538.468 L 256.200 538.600 256.082 541.300 C 256.013 542.867,256.127 544.000,256.353 544.000 C 257.895 544.000,258.000 544.869,258.000 557.629 L 258.000 570.000 262.600 570.000 L 267.200 570.000 267.200 566.275 C 267.200 562.658,267.235 562.516,268.400 561.400 L 269.600 560.250 269.600 552.925 C 269.600 548.308,269.748 545.600,270.000 545.600 C 270.252 545.600,270.400 548.290,270.400 552.869 C 270.400 559.230,270.487 560.233,271.100 560.909 C 271.650 561.516,271.829 562.575,271.936 565.841 L 272.073 570.000 287.630 570.000 L 303.188 570.000 303.294 558.100 C 303.385 547.836,303.482 546.200,304.000 546.200 C 304.518 546.200,304.615 547.836,304.706 558.100 L 304.812 570.000 322.406 570.000 L 340.000 570.000 340.000 566.592 C 340.000 561.698,341.184 560.072,346.500 557.669 C 346.665 557.594,346.800 557.818,346.800 558.167 C 346.800 559.401,349.272 558.439,349.955 556.939 C 350.921 554.820,351.001 545.961,350.071 544.139 C 348.759 541.568,349.262 539.123,353.098 529.400 C 355.448 523.443,356.606 521.398,356.898 522.687 C 357.019 523.219,357.251 523.014,357.816 521.876 C 358.344 520.809,358.776 520.405,359.251 520.529 C 359.676 520.640,360.005 520.425,360.128 519.954 C 360.800 517.383,363.086 519.380,364.496 523.769 C 365.051 525.498,366.000 526.169,366.000 524.833 C 366.000 523.640,366.485 523.808,367.354 525.303 C 367.880 526.207,368.162 526.418,368.286 526.000 C 368.383 525.670,368.539 525.161,368.631 524.869 C 368.742 524.517,369.148 524.753,369.835 525.569 C 370.660 526.549,371.210 526.813,372.536 526.863 L 374.200 526.926 372.200 527.200 C 370.749 527.399,370.530 527.499,371.400 527.565 C 372.415 527.642,372.478 527.704,371.809 527.965 C 371.057 528.259,371.067 528.300,372.009 528.784 C 372.554 529.064,373.288 529.655,373.640 530.097 C 374.265 530.882,374.286 530.871,374.535 529.623 L 374.791 528.345 375.770 529.472 C 376.644 530.479,376.841 530.544,377.606 530.077 C 378.388 529.600,378.450 529.632,378.331 530.454 C 378.237 531.097,377.802 531.458,376.800 531.724 C 375.451 532.082,375.433 532.111,376.310 532.514 C 377.024 532.841,377.586 532.752,378.910 532.104 C 380.660 531.247,386.556 530.625,386.111 531.344 C 385.978 531.559,386.494 531.596,387.360 531.434 C 389.841 530.968,391.983 532.836,392.006 535.484 C 392.011 536.013,392.098 536.065,392.341 535.681 C 392.604 535.267,392.774 535.287,393.184 535.781 C 393.467 536.121,393.918 536.400,394.187 536.400 C 395.092 536.400,396.196 538.064,396.800 540.340 C 397.360 542.451,397.486 542.608,398.700 542.725 L 400.000 542.851 400.000 530.825 C 400.000 523.075,399.858 518.800,399.600 518.800 C 399.380 518.800,399.184 518.485,399.164 518.100 C 399.144 517.715,398.967 517.955,398.770 518.633 C 398.164 520.718,397.145 521.328,394.613 521.118 C 392.682 520.958,392.400 521.026,392.400 521.653 C 392.400 522.956,390.964 523.336,387.840 522.861 C 386.278 522.623,382.971 522.336,380.490 522.223 C 375.332 521.988,374.645 521.734,373.945 519.800 C 373.667 519.030,373.233 518.400,372.982 518.400 C 371.927 518.400,371.200 516.918,371.199 514.769 C 371.199 512.499,369.228 510.456,366.958 510.372 C 366.243 510.345,366.245 510.324,367.000 510.000 C 367.619 509.734,367.393 509.641,366.000 509.588 C 365.010 509.551,362.400 509.389,360.200 509.229 C 358.000 509.069,355.162 509.107,353.894 509.313 C 350.515 509.862,350.400 509.687,350.400 504.021 C 350.400 498.305,350.834 497.600,354.352 497.600 C 356.194 497.600,356.576 497.453,357.461 496.400 L 358.471 495.200 365.387 495.200 C 371.046 495.200,372.393 495.309,372.800 495.800 C 373.554 496.708,373.999 496.523,374.006 495.300 C 374.018 493.230,374.476 492.974,376.814 493.729 C 377.957 494.098,379.067 494.400,379.282 494.400 C 380.038 494.400,381.174 496.215,381.187 497.445 C 381.231 501.637,381.946 503.253,383.896 503.568 L 385.400 503.811 385.600 507.539 C 385.870 512.563,387.354 513.561,391.656 511.609 C 393.510 510.768,398.156 510.482,398.589 511.183 C 399.939 513.367,400.000 511.859,400.000 476.024 L 400.000 440.933 398.700 440.890 C 395.810 440.794,395.811 440.795,395.681 437.598 C 395.575 434.994,395.631 434.728,396.181 435.184 C 396.715 435.627,396.802 435.540,396.813 434.549 C 396.825 433.452,396.852 433.435,397.413 434.176 C 397.981 434.928,398.000 434.921,398.006 433.976 C 398.011 433.273,398.109 433.152,398.358 433.545 C 398.649 434.006,398.737 434.006,398.920 433.545 C 399.045 433.231,399.150 433.382,399.168 433.900 C 399.186 434.395,399.380 434.800,399.600 434.800 C 399.849 434.800,400.000 432.467,400.000 428.600 C 400.000 424.733,399.849 422.400,399.600 422.400 C 399.380 422.400,399.175 421.815,399.146 421.100 C 399.100 420.012,399.061 419.962,398.906 420.791 C 398.583 422.516,396.802 417.569,396.411 413.860 C 395.819 408.248,396.326 407.164,399.700 406.830 C 400.321 406.768,400.050 394.000,399.428 394.000 C 399.113 394.000,398.798 393.595,398.728 393.100 C 398.647 392.533,398.343 392.220,397.904 392.255 C 397.522 392.285,397.307 392.150,397.428 391.955 C 397.549 391.760,397.376 391.600,397.043 391.600 C 396.711 391.600,396.256 391.915,396.032 392.300 C 395.670 392.921,395.623 392.895,395.612 392.073 C 395.602 391.332,395.440 391.197,394.805 391.398 C 393.060 391.952,390.578 391.206,390.118 389.989 C 389.853 389.286,389.171 388.631,388.344 388.286 C 386.049 387.326,385.827 386.765,385.604 381.357 L 385.400 376.429 384.106 375.476 C 381.815 373.790,381.252 372.749,381.121 369.963 L 381.000 367.400 378.115 367.283 C 375.603 367.181,375.131 367.039,374.458 366.183 C 372.990 364.316,370.935 366.654,370.059 371.187 C 369.440 374.387,365.646 374.458,364.021 371.301 C 363.483 370.255,362.702 368.900,362.286 368.289 C 361.870 367.677,361.362 366.597,361.158 365.889 C 360.594 363.932,358.642 362.000,357.229 362.000 C 356.579 362.000,355.936 361.820,355.800 361.600 C 355.664 361.380,354.557 361.200,353.340 361.200 C 351.395 361.200,350.932 361.033,349.512 359.818 C 348.436 358.897,347.189 358.288,345.773 357.994 C 340.772 356.956,339.326 354.616,338.943 346.943 C 338.799 344.052,338.817 341.352,338.984 340.943 C 339.414 339.887,339.224 334.392,338.725 333.460 C 338.373 332.802,338.416 332.720,338.994 332.942 C 339.604 333.177,339.652 332.994,339.421 331.303 C 338.874 327.290,338.740 324.000,339.124 324.000 C 339.339 324.000,339.622 323.721,339.753 323.379 C 339.884 323.038,339.839 322.852,339.653 322.967 C 339.468 323.082,339.408 322.691,339.521 322.099 C 339.708 321.122,339.757 321.095,340.053 321.811 C 340.233 322.245,340.299 319.323,340.201 315.317 C 339.996 306.970,339.819 307.375,343.595 307.544 C 346.844 307.690,347.134 307.941,347.281 310.733 C 347.397 312.948,347.429 313.003,348.646 313.121 C 349.389 313.194,350.346 313.717,351.020 314.421 C 352.663 316.136,356.400 316.208,356.400 314.525 L 356.400 313.450 357.522 314.525 C 359.162 316.097,362.413 316.084,363.807 314.500 L 364.775 313.400 364.787 314.500 C 364.806 316.126,368.829 316.179,370.095 314.570 C 370.541 314.004,371.331 313.378,371.853 313.180 C 372.695 312.860,372.800 312.569,372.800 310.563 C 372.800 307.091,375.708 305.200,381.047 305.200 C 381.770 305.200,383.269 305.005,384.380 304.767 L 386.400 304.334 386.400 300.013 L 386.400 295.692 388.245 293.451 C 390.216 291.057,390.330 290.000,388.618 290.000 C 387.528 290.000,384.350 289.310,382.900 288.759 C 382.080 288.448,382.000 288.157,382.000 285.492 L 382.000 282.567 380.200 280.800 C 377.197 277.853,378.065 271.142,381.305 272.257 C 381.797 272.427,384.128 272.545,386.485 272.520 C 391.511 272.466,391.055 271.919,391.395 278.400 C 391.640 283.074,392.353 288.000,392.784 288.000 C 392.915 288.000,393.377 287.754,393.811 287.453 C 394.245 287.153,395.815 286.778,397.300 286.621 L 400.000 286.336 400.000 265.968 L 400.000 245.600 398.822 245.600 C 397.700 245.600,397.638 245.691,397.522 247.500 C 397.275 251.355,390.800 253.081,390.800 249.292 C 390.800 248.302,390.310 247.906,389.479 248.225 C 388.824 248.476,387.616 252.387,387.324 255.200 C 387.164 256.746,386.817 257.320,384.869 259.262 C 383.621 260.506,382.285 261.901,381.900 262.362 C 381.332 263.042,380.747 263.200,378.794 263.200 C 376.237 263.200,374.816 264.409,374.795 266.600 C 374.791 267.040,374.538 268.120,374.232 269.000 C 373.614 270.777,374.087 270.596,366.816 271.837 C 362.745 272.533,361.165 273.002,361.244 273.491 C 361.272 273.661,361.273 277.085,361.247 281.100 L 361.200 288.400 356.400 288.400 L 351.600 288.400 351.553 281.100 C 351.527 277.085,351.528 273.603,351.556 273.362 C 351.584 273.120,350.435 272.329,349.003 271.602 L 346.400 270.280 346.400 268.021 C 346.400 265.756,344.419 262.800,342.901 262.800 C 342.646 262.800,342.327 262.125,342.194 261.300 C 342.061 260.475,341.801 259.170,341.617 258.400 L 341.283 257.000 341.224 258.400 L 341.165 259.800 340.597 258.205 C 339.729 255.767,339.298 255.610,333.224 255.518 L 327.800 255.436 333.200 255.200 L 338.600 254.964 333.750 254.882 C 327.779 254.781,326.667 254.573,326.180 253.468 C 325.594 252.137,324.480 252.139,324.151 253.473 C 323.998 254.093,323.612 255.004,323.293 255.497 C 322.717 256.386,323.337 261.810,323.970 261.419 C 324.096 261.340,324.221 262.294,324.247 263.538 C 324.339 267.930,324.914 270.453,326.008 271.268 C 327.112 272.090,333.895 273.596,336.539 273.606 C 339.390 273.617,339.392 273.623,340.253 283.000 C 340.576 286.520,340.932 290.300,341.043 291.400 C 341.154 292.500,340.982 295.743,340.660 298.606 C 340.338 301.469,340.174 304.332,340.296 304.968 C 340.558 306.340,339.649 307.200,337.938 307.200 C 337.238 307.200,336.670 307.495,336.400 308.000 C 336.165 308.440,335.704 308.800,335.376 308.800 C 335.048 308.800,334.615 309.235,334.413 309.766 C 334.211 310.297,333.685 310.846,333.243 310.986 C 332.802 311.126,332.333 311.583,332.200 312.000 C 332.067 312.417,331.636 312.862,331.240 312.987 C 330.845 313.113,330.318 313.662,330.069 314.208 C 329.821 314.753,329.339 315.200,328.999 315.200 C 328.659 315.200,328.209 315.650,328.000 316.200 C 327.684 317.032,327.356 317.200,326.053 317.200 C 324.042 317.200,324.000 317.331,324.000 323.571 C 324.000 330.404,324.548 330.000,315.283 330.000 C 306.510 330.000,307.320 330.891,307.280 321.200 C 307.264 317.130,307.034 312.090,306.769 310.000 C 306.505 307.910,306.179 302.501,306.044 297.980 C 305.838 291.025,305.690 289.592,305.084 288.669 C 304.460 287.719,304.374 286.696,304.419 280.744 C 304.477 273.157,304.774 274.034,301.552 272.252 C 298.562 270.597,298.023 268.331,299.400 263.200 C 300.223 260.133,300.144 257.215,299.167 254.603 C 298.365 252.459,298.358 252.296,298.998 250.261 C 299.737 247.913,298.776 244.928,297.144 244.501 C 296.311 244.283,296.062 243.632,295.939 241.350 L 295.850 239.701 293.158 239.451 C 291.678 239.313,290.227 239.140,289.934 239.067 C 289.640 238.993,288.770 239.006,288.000 239.095 M289.170 266.745 C 289.389 267.154,289.518 268.369,289.456 269.445 L 289.343 271.400 286.581 271.708 C 283.004 272.107,282.693 271.975,283.028 270.193 C 283.616 267.055,288.015 264.586,289.170 266.745 M133.200 273.011 C 130.890 273.318,128.280 273.719,127.400 273.901 L 125.800 274.233 125.682 276.448 C 125.571 278.541,125.444 278.781,123.382 280.818 C 121.308 282.866,121.200 283.073,121.200 285.006 C 121.200 286.125,120.985 287.255,120.723 287.517 C 120.353 287.887,120.499 288.260,121.374 289.172 L 122.502 290.350 121.551 291.553 C 120.390 293.021,119.697 293.106,119.215 291.839 C 118.260 289.327,116.800 290.370,116.800 293.564 C 116.800 295.754,116.733 295.896,114.800 297.800 C 112.872 299.699,112.800 299.851,112.800 302.012 L 112.800 304.254 115.900 304.992 C 117.605 305.397,119.540 305.782,120.200 305.846 C 120.860 305.910,123.020 306.324,125.000 306.765 C 126.980 307.207,129.770 307.578,131.200 307.590 C 134.885 307.621,134.680 307.158,135.012 316.200 C 135.188 320.985,135.533 325.004,135.871 326.200 C 136.499 328.419,136.498 328.392,136.156 330.502 C 135.879 332.210,137.007 336.942,137.859 337.649 C 138.157 337.896,138.400 338.335,138.400 338.625 C 138.400 339.401,137.644 339.734,137.034 339.228 C 136.200 338.536,136.000 340.422,136.000 349.001 L 136.000 356.703 134.900 357.123 C 134.295 357.354,132.435 357.617,130.766 357.707 C 126.523 357.937,126.800 357.361,126.800 365.948 L 126.800 373.450 128.000 374.337 L 129.200 375.224 129.200 382.776 L 129.200 390.329 128.000 391.339 C 126.514 392.589,126.477 393.647,127.813 396.667 C 128.370 397.927,128.988 400.104,129.186 401.506 C 129.521 403.869,129.998 404.968,131.000 405.687 C 131.255 405.870,131.074 406.912,130.500 408.562 C 130.005 409.985,129.600 411.550,129.600 412.040 C 129.600 412.529,129.341 413.846,129.025 414.965 C 128.708 416.084,128.159 418.530,127.803 420.400 C 127.447 422.270,126.946 424.340,126.689 425.000 C 126.418 425.697,126.169 429.153,126.094 433.250 L 125.966 440.300 127.268 441.396 C 127.984 441.998,128.633 442.300,128.711 442.067 C 128.797 441.810,129.352 441.948,130.126 442.420 C 130.827 442.847,131.837 443.198,132.372 443.199 C 132.906 443.199,133.941 443.416,134.672 443.680 L 136.000 444.161 136.000 447.838 C 136.000 450.737,135.873 451.563,135.400 451.745 C 134.989 451.902,134.800 452.545,134.800 453.787 C 134.800 455.510,135.284 456.180,135.748 455.100 C 135.866 454.825,135.926 455.590,135.881 456.800 L 135.800 459.000 133.108 459.118 C 131.627 459.183,130.038 459.034,129.577 458.788 C 128.809 458.377,128.776 458.409,129.184 459.170 C 130.236 461.135,136.800 459.954,136.800 457.800 C 136.800 456.944,136.828 456.951,139.999 458.624 C 142.027 459.694,158.115 459.741,159.733 458.681 C 160.304 458.306,161.195 458.000,161.711 458.000 C 162.233 458.000,163.162 457.466,163.800 456.800 C 164.678 455.884,165.305 455.600,166.452 455.600 C 168.887 455.600,169.200 454.779,169.200 448.391 C 169.200 445.082,169.366 442.794,169.626 442.534 C 169.914 442.246,170.043 436.946,170.023 426.154 C 169.989 407.465,170.343 408.812,165.456 408.782 C 163.885 408.773,161.880 408.505,161.000 408.188 C 160.120 407.871,158.514 407.609,157.431 407.606 C 156.206 407.602,155.199 407.361,154.765 406.968 C 154.213 406.468,153.891 406.430,153.225 406.787 C 151.645 407.632,151.600 407.206,151.600 391.550 L 151.600 376.348 147.400 374.382 L 143.200 372.415 143.200 357.539 C 143.200 345.049,143.294 342.559,143.785 342.017 C 145.064 340.604,144.137 339.600,141.553 339.600 C 139.728 339.600,139.200 339.465,139.200 339.000 C 139.200 338.556,139.667 338.400,141.000 338.400 L 142.800 338.400 142.800 336.085 C 142.800 333.836,142.857 333.713,144.800 331.800 C 146.733 329.896,146.800 329.754,146.800 327.564 C 146.800 326.038,146.996 325.135,147.400 324.800 C 147.730 324.526,148.000 323.716,148.000 323.000 C 148.000 322.284,148.264 321.479,148.587 321.210 C 148.911 320.942,149.385 319.653,149.643 318.345 C 150.343 314.785,151.867 313.151,153.043 314.700 C 153.528 315.339,153.576 315.307,153.587 314.344 C 153.596 313.589,153.799 313.305,154.300 313.344 C 154.872 313.390,155.043 312.961,155.234 311.000 C 155.501 308.251,155.431 308.000,154.403 308.000 C 153.991 308.000,153.540 307.640,153.400 307.201 C 153.261 306.761,152.751 306.302,152.267 306.181 C 151.496 305.987,151.372 305.652,151.268 303.480 C 151.202 302.116,150.886 300.595,150.565 300.100 C 150.050 299.305,150.053 299.200,150.591 299.200 C 151.919 299.200,151.337 296.550,149.799 295.600 C 148.943 295.070,148.316 294.319,148.185 293.667 C 148.068 293.080,147.798 292.047,147.586 291.372 C 147.374 290.696,147.200 289.680,147.200 289.113 C 147.200 288.217,146.105 285.516,143.667 280.400 C 143.300 279.630,142.910 277.938,142.800 276.640 C 142.464 272.680,140.698 272.012,133.200 273.011 M278.167 272.643 C 278.714 272.853,278.800 273.934,278.800 280.600 C 278.800 289.240,278.964 288.800,275.755 288.800 C 273.454 288.800,273.510 289.051,273.883 280.368 L 274.200 273.000 275.800 272.757 C 276.680 272.623,277.430 272.488,277.467 272.457 C 277.504 272.426,277.819 272.509,278.167 272.643 M122.739 292.778 C 121.783 293.845,120.865 294.737,120.700 294.759 C 119.555 294.915,122.163 290.859,123.533 290.354 C 124.789 289.890,124.479 290.836,122.739 292.778 M188.484 316.215 C 188.201 316.537,187.362 316.800,186.620 316.800 L 185.271 316.800 185.088 319.100 C 184.907 321.367,182.474 328.555,182.414 327.000 C 182.290 323.832,180.800 330.122,180.800 333.811 C 180.800 338.413,180.627 339.200,179.618 339.200 C 179.191 339.200,178.639 339.826,178.192 340.819 L 177.462 342.437 179.689 344.719 C 180.913 345.973,182.226 347.630,182.605 348.400 C 184.042 351.321,188.099 352.911,189.820 351.229 C 190.029 351.024,190.830 350.799,191.600 350.729 C 192.807 350.618,193.140 350.341,194.017 348.714 C 194.576 347.677,195.431 346.406,195.917 345.888 C 196.403 345.371,196.800 344.663,196.800 344.313 C 196.800 343.964,197.338 343.491,197.996 343.261 C 198.836 342.969,199.121 342.659,198.953 342.222 C 198.822 341.880,198.914 341.600,199.157 341.600 C 199.401 341.600,199.600 341.051,199.600 340.379 C 199.600 339.382,199.820 339.082,200.800 338.740 C 203.013 337.969,202.596 334.357,200.000 331.800 C 198.075 329.904,198.000 329.746,198.000 327.601 C 198.000 325.430,197.943 325.317,195.800 323.200 C 193.685 321.111,193.600 320.946,193.600 318.914 L 193.600 316.800 192.276 316.800 C 191.549 316.800,190.604 316.536,190.176 316.213 C 189.219 315.488,189.125 315.488,188.484 316.215 M376.232 327.900 C 375.174 339.993,375.296 340.408,379.576 339.260 C 383.254 338.273,383.246 338.288,381.311 336.292 C 380.112 335.054,379.497 333.956,379.019 332.200 C 378.660 330.880,378.082 328.765,377.734 327.500 C 376.907 324.494,376.521 324.596,376.232 327.900 M396.273 346.554 C 395.195 346.810,394.490 347.168,394.673 347.365 C 394.858 347.565,394.611 347.622,394.099 347.496 C 393.520 347.354,393.293 347.427,393.462 347.700 C 393.632 347.976,393.406 348.043,392.822 347.890 C 392.117 347.705,391.577 348.021,390.364 349.327 L 388.810 351.000 388.805 355.309 L 388.800 359.618 390.678 360.809 C 392.472 361.946,394.800 362.411,394.800 361.632 C 394.800 361.412,395.321 361.405,396.100 361.616 C 396.815 361.809,397.985 362.067,398.700 362.189 L 400.000 362.411 400.000 354.206 L 400.000 346.000 399.100 346.048 C 398.605 346.074,397.333 346.301,396.273 346.554 M187.972 361.700 C 187.945 362.559,187.928 362.563,187.600 361.800 C 187.283 361.063,187.252 361.078,187.200 362.000 C 187.148 362.922,187.117 362.937,186.800 362.200 C 186.501 361.503,186.453 361.491,186.428 362.110 C 186.413 362.500,185.956 362.989,185.413 363.195 C 184.418 363.573,182.000 366.534,182.000 367.374 C 182.000 367.623,181.010 368.805,179.800 370.000 C 178.590 371.195,177.600 372.299,177.600 372.454 C 177.600 373.184,180.513 374.372,183.400 374.819 C 185.160 375.091,186.780 375.443,187.000 375.600 C 187.652 376.066,192.686 376.089,193.544 375.630 C 194.105 375.330,194.377 375.332,194.479 375.638 C 194.569 375.906,195.152 375.970,196.017 375.808 C 197.993 375.437,198.029 372.819,196.100 369.694 C 195.385 368.536,194.800 367.411,194.800 367.194 C 194.800 366.977,194.530 366.800,194.200 366.800 C 193.831 366.800,193.600 366.425,193.600 365.824 C 193.600 364.740,193.004 364.200,191.807 364.200 C 191.339 364.200,190.952 363.879,190.862 363.417 C 190.424 361.169,188.033 359.749,187.972 361.700 M327.131 373.595 C 327.643 373.598,328.588 374.126,329.231 374.769 L 330.400 375.938 330.414 394.869 C 330.426 410.527,330.527 413.973,331.000 414.800 C 331.314 415.350,331.584 416.340,331.599 417.000 C 331.613 417.660,331.890 418.549,332.213 418.976 C 332.996 420.012,332.979 424.330,332.187 425.376 C 331.723 425.990,331.599 427.627,331.594 433.176 C 331.587 441.458,331.864 440.838,327.617 442.082 C 324.175 443.091,323.790 443.087,320.300 442.009 C 319.587 441.789,319.200 441.816,319.200 442.086 C 319.200 442.315,318.615 442.052,317.900 441.501 L 316.600 440.500 316.362 433.150 C 316.231 429.107,315.992 425.260,315.831 424.600 C 315.611 423.701,315.644 423.550,315.963 424.000 C 316.497 424.754,316.579 420.938,316.059 419.526 C 315.871 419.017,315.599 418.060,315.455 417.400 L 315.193 416.200 315.813 417.200 L 316.433 418.200 316.232 416.800 C 315.689 413.027,315.105 410.085,314.685 409.000 C 313.907 406.990,313.823 392.529,314.583 391.369 C 315.081 390.610,315.200 389.042,315.200 383.237 C 315.200 375.354,315.378 374.800,317.913 374.800 C 318.427 374.800,318.750 374.643,318.631 374.451 C 318.381 374.046,322.236 373.451,322.810 373.806 C 323.021 373.937,323.510 373.854,323.897 373.623 C 324.284 373.392,324.960 373.290,325.400 373.396 C 325.840 373.502,326.619 373.592,327.131 373.595 M331.296 395.888 C 331.353 403.196,331.278 408.866,331.128 408.488 C 330.979 408.109,330.881 400.510,330.911 391.600 C 330.941 382.690,331.017 377.020,331.079 379.000 C 331.142 380.980,331.240 388.579,331.296 395.888 M346.700 385.327 C 347.195 386.055,347.600 386.840,347.600 387.074 C 347.600 387.520,350.340 390.068,352.204 391.356 C 353.240 392.071,353.282 392.221,352.988 394.156 C 352.817 395.280,352.660 396.995,352.639 397.966 C 352.617 398.941,352.387 399.804,352.125 399.891 C 351.793 400.002,351.714 400.853,351.862 402.725 C 352.092 405.624,350.781 409.615,349.429 410.134 C 348.984 410.304,348.800 410.910,348.800 412.206 C 348.800 413.852,348.672 414.106,347.534 414.719 C 346.838 415.093,345.601 415.985,344.785 416.700 C 343.970 417.415,343.113 418.000,342.880 418.000 C 342.297 418.000,341.201 414.057,341.195 411.938 C 341.188 409.799,340.823 408.339,340.366 408.621 C 338.467 409.795,339.919 389.727,342.076 384.993 C 342.813 383.375,345.504 383.570,346.700 385.327 M375.021 388.200 C 375.833 389.190,376.795 390.000,377.159 390.000 C 378.285 390.000,379.571 391.174,379.916 392.518 C 380.167 393.492,380.570 393.906,381.593 394.243 C 384.078 395.060,384.400 395.882,384.400 401.417 C 384.400 406.011,384.345 406.364,383.592 406.603 C 383.148 406.744,381.991 407.464,381.023 408.204 C 379.892 409.066,378.713 409.593,377.731 409.674 L 376.200 409.800 375.873 414.000 C 375.693 416.310,375.175 419.820,374.723 421.800 C 374.270 423.780,373.841 426.543,373.770 427.940 C 373.637 430.530,372.827 432.400,371.840 432.400 C 370.970 432.400,370.373 431.389,370.472 430.087 C 370.577 428.716,369.832 427.600,368.813 427.600 C 367.164 427.600,363.600 420.350,363.600 416.995 C 363.600 415.843,363.330 414.135,363.000 413.200 C 362.670 412.265,362.400 411.006,362.400 410.404 C 362.400 409.801,362.040 408.850,361.600 408.291 C 360.573 406.986,360.435 398.571,361.387 395.373 C 363.300 388.952,371.921 384.416,375.021 388.200 M97.300 409.834 L 96.000 410.402 96.000 417.352 C 96.000 422.869,95.883 424.399,95.432 424.774 C 94.982 425.147,94.854 426.763,94.819 432.523 C 94.772 440.214,94.540 442.829,93.866 443.269 C 93.640 443.416,93.318 445.216,93.151 447.269 C 92.850 450.971,91.744 456.535,91.614 455.000 C 91.574 454.527,91.328 454.900,91.012 455.911 C 90.143 458.695,89.380 459.562,87.539 459.856 C 86.602 460.006,85.347 460.598,84.629 461.228 C 83.935 461.837,82.354 462.784,81.117 463.331 C 77.971 464.722,77.504 465.602,77.284 470.552 C 77.102 474.644,77.770 477.316,79.194 478.196 C 79.463 478.363,79.600 489.277,79.600 510.545 L 79.600 542.643 80.900 543.873 C 81.615 544.550,83.145 545.410,84.300 545.784 C 86.975 546.651,87.367 548.924,85.200 551.000 C 83.524 552.606,83.570 553.996,85.300 554.012 L 86.600 554.023 85.300 555.206 C 83.693 556.668,83.445 559.445,84.800 560.800 C 85.383 561.383,85.600 562.133,85.600 563.567 C 85.600 564.649,85.693 565.864,85.806 566.267 C 85.919 566.670,85.741 566.460,85.410 565.800 C 84.819 564.624,84.813 564.643,85.068 566.792 C 85.479 570.258,83.440 570.000,110.371 570.000 L 134.400 570.000 134.400 566.380 C 134.400 563.960,134.597 562.379,134.994 561.611 C 135.618 560.405,136.254 542.001,135.672 542.000 C 135.522 541.999,135.394 540.874,135.386 539.500 C 135.372 536.971,134.473 534.800,133.440 534.800 C 133.183 534.800,132.034 533.849,130.886 532.687 L 128.800 530.575 128.800 521.079 C 128.800 511.612,128.803 511.582,129.700 511.198 C 131.438 510.454,138.554 509.200,141.038 509.200 C 145.735 509.200,147.580 506.414,144.426 504.082 C 143.624 503.489,143.212 502.800,143.126 501.907 L 143.000 500.600 140.509 500.481 C 137.448 500.335,136.800 499.637,136.800 496.485 C 136.800 495.309,136.626 494.023,136.414 493.627 C 136.196 493.219,135.952 486.364,135.852 477.819 C 135.676 462.802,135.671 462.727,134.768 461.766 L 133.861 460.800 118.979 460.800 L 104.097 460.800 103.675 459.700 C 102.912 457.709,102.625 449.668,102.612 429.870 C 102.600 411.007,102.573 410.320,101.824 409.770 C 100.858 409.061,99.006 409.088,97.300 409.834 M289.977 420.400 L 289.745 424.600 289.672 420.933 C 289.633 418.916,289.712 416.973,289.849 416.615 C 290.222 415.645,290.229 415.843,289.977 420.400 M288.901 426.600 C 288.905 427.480,288.987 427.793,289.083 427.295 C 289.179 426.798,289.175 426.078,289.075 425.695 C 288.975 425.313,288.896 425.720,288.901 426.600 M305.657 429.200 C 305.446 434.247,304.291 435.189,301.611 432.500 C 297.020 427.892,298.072 425.519,304.600 425.756 L 305.800 425.800 305.657 429.200 M315.898 436.880 C 315.826 438.926,315.766 437.360,315.765 433.400 C 315.765 429.440,315.824 427.766,315.898 429.680 C 315.971 431.594,315.971 434.834,315.898 436.880 M290.086 432.262 C 290.149 433.397,290.065 434.241,289.900 434.139 C 289.735 434.036,289.627 432.658,289.660 431.076 C 289.721 428.137,289.882 428.584,290.086 432.262 M24.241 436.758 C 20.627 440.394,20.615 440.244,24.672 442.170 C 31.040 445.194,33.641 443.986,32.785 438.401 C 31.992 433.230,32.233 433.600,29.659 433.600 L 27.381 433.600 24.241 436.758 M393.120 438.132 C 393.217 439.965,393.121 440.400,392.620 440.400 C 392.128 440.400,392.000 439.898,392.000 437.967 C 392.000 434.735,392.948 434.875,393.120 438.132 M395.090 439.293 C 395.001 440.012,394.926 439.520,394.924 438.200 C 394.922 436.880,394.995 436.292,395.086 436.893 C 395.177 437.494,395.179 438.574,395.090 439.293 M33.900 443.642 C 33.273 443.998,33.200 444.806,33.200 451.358 C 33.200 459.970,33.187 460.000,29.469 460.000 L 27.200 460.000 27.200 467.400 L 27.200 474.800 29.390 474.800 C 30.875 474.800,32.002 475.057,32.890 475.599 C 35.221 477.020,39.403 476.435,39.805 474.631 C 39.907 474.174,40.079 470.650,40.187 466.800 C 40.296 462.950,40.492 456.351,40.623 452.135 L 40.861 444.469 38.531 444.019 C 37.249 443.771,35.840 443.496,35.400 443.407 C 34.960 443.317,34.285 443.423,33.900 443.642 M372.683 449.848 C 375.209 450.525,375.480 456.058,373.752 471.693 C 373.387 474.995,374.328 474.822,357.353 474.705 L 342.200 474.600 341.306 470.200 C 339.827 462.920,340.081 455.937,341.899 453.900 C 342.624 453.087,360.800 452.799,360.800 453.600 C 360.800 454.291,361.540 454.048,364.448 452.400 C 366.001 451.520,367.751 450.794,368.336 450.786 C 368.921 450.778,369.850 450.514,370.400 450.200 C 371.564 449.535,371.533 449.539,372.683 449.848 M282.229 457.029 C 282.081 457.615,282.051 458.184,282.161 458.294 C 282.271 458.404,282.481 458.015,282.629 457.429 C 282.776 456.842,282.806 456.273,282.696 456.163 C 282.586 456.053,282.376 456.442,282.229 457.029 M153.462 458.894 C 153.208 459.056,151.650 459.188,150.000 459.188 C 148.350 459.188,146.792 459.056,146.538 458.894 C 146.284 458.732,147.842 458.600,150.000 458.600 C 152.158 458.600,153.716 458.732,153.462 458.894 M101.211 476.900 C 102.252 479.194,102.432 508.876,101.413 510.224 C 100.416 511.541,100.543 526.116,101.564 527.549 C 102.070 528.261,102.393 529.560,102.523 531.411 C 102.753 534.678,103.282 537.384,103.976 538.838 C 104.336 539.591,104.380 540.741,104.136 543.038 L 103.800 546.200 100.019 546.200 L 96.238 546.200 95.521 544.200 C 94.937 542.573,94.803 540.924,94.802 535.349 C 94.800 527.829,94.800 527.828,97.361 527.001 L 98.600 526.600 98.709 519.017 L 98.818 511.435 97.609 510.488 L 96.400 509.542 96.400 494.086 L 96.400 478.630 98.083 476.915 C 100.159 474.800,100.257 474.800,101.211 476.900 M399.600 483.200 L 399.600 488.800 398.617 488.800 C 397.961 488.800,397.263 488.320,396.517 487.355 C 395.310 485.794,395.241 485.726,393.300 484.170 C 392.100 483.209,392.000 482.949,392.000 480.784 C 392.000 477.869,392.341 477.628,396.500 477.612 L 399.600 477.600 399.600 483.200 M349.338 509.313 C 351.636 511.287,349.438 523.620,346.005 528.014 C 345.398 528.791,344.425 530.366,343.844 531.514 C 343.262 532.661,342.630 533.600,342.438 533.600 C 341.404 533.600,339.604 522.696,339.602 516.419 L 339.600 511.838 340.878 510.519 C 342.020 509.341,342.395 509.199,344.378 509.194 C 345.600 509.191,346.870 509.013,347.200 508.800 C 348.036 508.259,348.141 508.285,349.338 509.313 M381.487 509.046 C 381.134 509.399,384.024 512.032,384.465 511.760 C 384.960 511.454,384.472 509.920,383.683 509.300 C 383.006 508.768,381.894 508.639,381.487 509.046 M34.000 510.000 C 33.450 510.176,33.163 510.338,33.362 510.360 C 33.561 510.382,33.450 510.715,33.116 511.100 C 32.782 511.485,32.400 512.508,32.268 513.372 C 31.991 515.177,30.821 516.753,30.772 515.386 C 30.744 514.615,30.737 514.615,30.400 515.400 L 30.056 516.200 29.988 515.400 C 29.847 513.743,29.280 516.556,29.240 519.113 C 29.218 520.495,28.903 522.295,28.540 523.113 C 28.177 523.931,27.772 525.410,27.640 526.400 C 27.408 528.141,27.351 528.204,25.900 528.324 C 25.056 528.394,24.400 528.661,24.400 528.935 C 24.400 529.203,24.097 529.855,23.726 530.385 C 23.355 530.914,23.030 531.809,23.004 532.374 C 22.977 532.938,22.921 534.525,22.878 535.900 L 22.800 538.400 20.400 538.400 L 18.000 538.400 17.975 535.900 C 17.961 534.525,17.916 532.144,17.875 530.610 C 17.803 527.915,17.838 527.801,18.926 527.276 C 20.709 526.414,20.636 525.781,18.464 523.274 C 16.589 521.110,16.435 520.772,16.322 518.571 L 16.200 516.200 8.100 516.092 L -0.000 515.983 -0.000 542.992 L 0.000 570.000 8.600 570.000 L 17.200 570.000 17.200 565.987 C 17.200 561.682,17.493 561.086,19.169 561.983 C 19.921 562.386,20.000 562.790,20.000 566.214 L 20.000 570.000 25.386 570.000 L 30.771 570.000 30.886 566.100 L 31.000 562.200 32.100 562.073 L 33.200 561.947 33.200 565.973 L 33.200 570.000 39.200 570.000 L 45.200 570.000 45.200 566.227 C 45.200 562.492,45.212 562.446,46.400 561.600 L 47.600 560.746 47.600 536.622 L 47.600 512.499 45.700 511.688 C 41.172 509.757,36.751 509.119,34.000 510.000 M314.200 511.041 C 318.645 511.409,318.400 510.919,318.400 519.416 C 318.400 524.876,318.273 526.794,317.900 526.971 C 317.625 527.102,317.850 527.126,318.400 527.024 L 319.400 526.840 318.300 527.653 L 317.200 528.467 317.200 535.591 C 317.200 543.451,317.287 543.200,314.567 543.200 C 313.800 543.200,313.200 542.997,313.200 542.738 C 313.200 542.451,312.935 542.513,312.500 542.901 C 311.714 543.604,307.650 544.196,306.937 543.713 C 306.604 543.486,306.436 538.934,306.337 527.414 L 306.200 511.430 307.200 510.903 C 307.758 510.609,308.819 510.465,309.600 510.576 C 310.370 510.687,312.440 510.896,314.200 511.041 M316.300 510.687 C 315.695 510.778,314.705 510.778,314.100 510.687 C 313.495 510.595,313.990 510.520,315.200 510.520 C 316.410 510.520,316.905 510.595,316.300 510.687 M288.600 514.200 C 288.600 517.394,288.598 517.400,287.500 517.527 C 286.573 517.633,286.400 517.504,286.400 516.701 C 286.400 516.166,285.875 515.247,285.200 514.600 C 282.998 512.490,283.959 510.721,287.200 510.916 L 288.600 511.000 288.600 514.200 M101.491 525.100 C 101.405 525.925,101.334 525.250,101.334 523.600 C 101.334 521.950,101.405 521.275,101.491 522.100 C 101.578 522.925,101.578 524.275,101.491 525.100 M373.033 525.200 C 373.345 525.200,373.600 525.470,373.600 525.800 C 373.600 526.219,373.178 526.400,372.200 526.400 C 370.689 526.400,370.676 526.388,371.052 525.410 C 371.193 525.042,371.558 524.852,371.884 524.977 C 372.204 525.100,372.721 525.200,373.033 525.200 M343.911 545.423 C 345.021 546.200,345.023 546.720,343.920 548.989 C 342.886 551.119,342.244 551.274,341.639 549.540 C 340.434 546.085,341.667 543.851,343.911 545.423 M395.332 561.300 C 395.894 561.710,395.281 561.787,391.908 561.727 C 389.199 561.678,388.209 561.764,389.000 561.979 C 389.660 562.159,390.875 562.327,391.700 562.353 L 393.200 562.400 393.200 566.200 L 393.200 570.000 395.100 569.995 C 398.804 569.984,399.569 569.195,398.200 566.800 C 397.886 566.250,397.622 565.117,397.614 564.282 C 397.600 562.740,396.222 560.800,395.142 560.800 C 394.850 560.800,394.929 561.005,395.332 561.300 M356.400 568.349 C 356.400 569.271,356.194 569.584,355.500 569.718 C 354.849 569.843,354.960 569.906,355.900 569.946 C 357.226 570.001,357.905 568.083,356.800 567.400 C 356.567 567.256,356.400 567.653,356.400 568.349 \\\" stroke=\\\"none\\\" fill=\\\"#f4d374\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path4\\\" d=\\\"M3.315 0.296 C 4.588 0.376,6.568 0.375,7.715 0.294 C 8.862 0.214,7.820 0.149,5.400 0.150 C 2.980 0.151,2.042 0.216,3.315 0.296 M137.937 2.981 C 137.803 5.634,137.657 6.097,136.604 7.195 C 135.260 8.598,135.195 9.828,136.266 13.600 C 136.623 14.856,136.928 17.688,136.977 20.200 C 137.201 31.561,137.556 32.800,140.582 32.800 C 141.729 32.800,142.777 32.911,142.913 33.046 C 143.544 33.677,146.360 33.507,147.000 32.800 C 147.914 31.790,147.637 29.904,146.500 29.405 C 145.847 29.119,145.600 28.672,145.600 27.780 C 145.600 26.935,145.224 26.189,144.400 25.400 C 143.475 24.514,143.200 23.899,143.200 22.717 C 143.200 21.469,143.014 21.098,142.200 20.727 C 140.888 20.129,140.864 18.455,142.151 17.246 C 142.971 16.476,143.127 15.886,143.280 12.973 C 143.437 9.980,143.580 9.465,144.528 8.475 C 145.203 7.771,145.600 6.912,145.600 6.158 C 145.600 5.499,145.750 4.789,145.934 4.580 C 146.118 4.371,146.578 3.356,146.958 2.324 C 147.510 0.823,147.862 0.416,148.724 0.284 C 149.316 0.194,147.165 0.093,143.944 0.060 L 138.087 0.000 137.937 2.981 M161.500 0.300 C 166.175 0.364,173.825 0.364,178.500 0.300 C 183.175 0.236,179.350 0.183,170.000 0.183 C 160.650 0.183,156.825 0.236,161.500 0.300 M200.203 3.100 C 200.058 4.805,199.705 7.498,199.420 9.084 C 198.931 11.808,198.946 12.008,199.694 12.684 C 200.345 13.272,200.447 13.736,200.265 15.280 C 200.015 17.388,200.564 17.875,202.610 17.362 C 203.599 17.113,203.666 17.170,203.417 18.046 C 202.511 21.236,202.589 21.175,198.600 21.839 C 196.267 22.227,195.979 22.572,197.800 22.800 C 200.194 23.099,200.272 25.400,197.889 25.400 C 196.391 25.400,195.619 25.996,195.606 27.162 C 195.601 27.622,195.726 27.612,196.300 27.105 C 196.685 26.764,198.350 26.111,200.000 25.652 C 201.987 25.100,203.294 24.482,203.871 23.821 C 204.429 23.181,204.804 22.999,204.916 23.312 C 205.395 24.651,205.811 15.710,205.690 6.700 L 205.600 0.000 203.034 0.000 L 200.468 0.000 200.203 3.100 M248.800 1.342 C 248.800 4.883,255.500 8.421,257.504 5.937 C 257.887 5.463,258.785 4.406,259.500 3.589 C 260.260 2.720,260.800 1.666,260.800 1.052 L 260.800 0.000 254.800 0.000 L 248.800 0.000 248.800 1.342 M327.305 0.287 C 327.914 0.379,328.814 0.377,329.305 0.282 C 329.797 0.187,329.300 0.111,328.200 0.114 C 327.100 0.117,326.697 0.195,327.305 0.287 M340.339 0.354 C 340.722 0.597,340.870 1.612,340.848 3.848 C 340.801 8.729,340.965 9.186,342.728 9.085 C 344.192 9.000,344.200 9.008,344.204 10.600 C 344.208 12.398,344.580 13.200,345.411 13.200 C 345.879 13.200,345.932 14.077,345.725 18.400 L 345.476 23.600 347.714 23.600 L 349.951 23.600 350.201 25.300 C 350.339 26.235,350.395 28.166,350.326 29.592 C 350.185 32.495,350.136 32.536,346.305 33.012 C 343.899 33.311,343.198 34.015,343.206 36.129 C 343.211 37.355,343.315 37.640,343.600 37.200 C 343.909 36.721,343.997 36.802,344.035 37.600 C 344.077 38.498,344.112 38.474,344.377 37.365 C 344.809 35.557,345.085 35.258,346.572 34.979 C 348.952 34.532,349.594 35.230,349.640 38.314 C 349.726 44.209,350.276 45.800,350.429 40.600 L 350.570 35.800 350.684 40.200 C 350.861 47.056,351.373 47.391,351.600 40.800 L 351.800 35.000 353.066 34.877 C 354.680 34.721,354.677 34.710,354.986 42.400 C 355.290 49.978,355.429 50.800,356.414 50.800 C 357.211 50.800,357.334 50.367,357.820 45.837 C 358.295 41.411,358.239 41.407,362.969 46.200 L 366.720 50.000 370.570 50.000 L 374.420 50.000 374.651 48.846 L 374.882 47.692 381.541 47.425 C 391.902 47.009,391.173 47.096,390.761 46.326 C 390.562 45.956,390.400 44.660,390.400 43.446 C 390.400 41.767,390.233 41.142,389.700 40.832 C 389.065 40.462,389.078 40.423,389.841 40.412 C 393.225 40.363,388.019 32.539,383.428 30.774 C 382.533 30.429,380.630 29.578,379.200 28.883 C 376.902 27.765,376.554 27.691,376.200 28.252 C 373.265 32.905,370.047 33.498,369.393 29.508 C 369.105 27.750,368.239 26.400,367.399 26.400 C 367.137 26.400,366.727 25.995,366.488 25.500 C 366.139 24.775,366.037 25.340,365.968 28.400 L 365.882 32.200 365.596 28.800 C 365.010 21.839,364.239 20.998,363.946 27.000 C 363.806 29.860,363.561 32.785,363.400 33.500 L 363.109 34.800 360.562 34.800 C 357.507 34.800,357.819 35.665,357.243 25.600 C 356.874 19.145,356.897 18.142,357.422 17.747 C 358.096 17.240,357.448 16.800,356.027 16.800 C 353.853 16.800,350.816 14.399,350.806 12.673 C 350.802 11.908,350.350 11.122,349.400 10.226 C 348.630 9.500,347.994 8.567,347.987 8.153 C 347.980 7.739,347.710 7.051,347.387 6.624 C 346.995 6.105,346.800 4.875,346.800 2.924 L 346.800 0.000 343.300 0.006 C 341.207 0.010,340.017 0.150,340.339 0.354 M0.092 16.516 L 0.000 32.831 3.500 32.716 L 7.000 32.600 7.110 25.430 C 7.178 20.968,7.385 18.059,7.658 17.730 C 8.018 17.296,7.399 17.200,4.257 17.200 L 0.416 17.200 0.300 8.700 C 0.236 4.025,0.142 7.542,0.092 16.516 M183.500 4.521 C 181.344 5.125,181.653 5.600,184.200 5.600 C 186.133 5.600,186.400 5.503,186.400 4.800 C 186.400 3.910,185.865 3.859,183.500 4.521 M84.800 10.970 C 84.250 11.265,83.007 11.638,82.038 11.799 C 76.939 12.645,76.029 17.552,80.188 21.773 C 83.873 25.513,85.266 25.522,88.529 21.829 C 91.129 18.886,91.339 17.828,90.017 14.348 C 88.651 10.753,87.087 9.740,84.800 10.970 M168.626 11.477 C 168.483 11.849,168.391 16.934,168.422 22.777 L 168.479 33.400 166.550 33.526 C 164.009 33.691,163.470 34.171,163.799 35.974 C 164.112 37.689,166.583 40.400,167.832 40.400 C 169.514 40.400,170.187 43.642,170.540 53.453 C 170.597 55.014,170.644 55.075,171.389 54.553 C 171.856 54.225,173.199 54.000,174.681 54.000 C 177.120 54.000,179.038 52.279,177.261 51.687 C 176.250 51.350,177.344 50.800,179.024 50.800 C 180.336 50.800,180.800 50.643,180.800 50.200 C 180.800 49.870,180.968 49.600,181.173 49.600 C 181.378 49.600,181.670 49.195,181.820 48.700 C 182.233 47.346,183.223 46.374,185.000 45.575 L 186.600 44.857 183.600 44.761 C 181.950 44.708,181.320 44.606,182.200 44.533 C 183.080 44.460,184.565 44.299,185.500 44.175 L 187.200 43.951 187.200 41.424 C 187.200 38.293,186.853 37.964,183.304 37.731 C 178.039 37.385,177.018 36.402,181.100 35.611 C 184.528 34.946,185.104 34.596,186.037 32.610 C 186.507 31.612,187.433 30.339,188.095 29.781 C 188.758 29.223,189.178 28.644,189.028 28.494 C 188.558 28.025,186.658 29.358,185.726 30.810 C 185.235 31.575,184.601 32.526,184.317 32.925 C 183.431 34.167,177.523 36.000,174.405 36.000 L 171.667 36.000 170.334 34.315 L 169.000 32.629 169.000 21.714 C 169.000 15.711,168.974 10.800,168.943 10.800 C 168.911 10.800,168.769 11.105,168.626 11.477 M277.826 13.557 C 277.676 13.801,276.843 14.000,275.976 14.000 C 274.404 14.000,274.400 14.004,274.400 15.600 L 274.400 17.200 276.167 17.200 C 279.781 17.200,279.995 18.036,277.602 22.797 C 276.376 25.234,275.853 25.919,275.361 25.730 C 274.457 25.383,274.013 26.291,274.006 28.500 C 274.003 29.545,273.820 30.400,273.600 30.400 C 273.019 30.400,273.108 32.298,273.700 32.525 C 274.035 32.654,273.903 32.936,273.300 33.381 C 271.478 34.726,272.148 35.038,276.224 34.740 C 282.104 34.310,282.040 34.392,281.781 27.693 C 281.401 17.861,281.305 17.275,279.967 16.583 C 279.213 16.193,278.798 15.665,278.794 15.090 C 278.786 13.904,278.193 12.965,277.826 13.557 M87.000 15.600 C 87.000 15.924,86.685 16.250,86.300 16.324 C 85.809 16.418,85.600 16.202,85.600 15.600 C 85.600 14.998,85.809 14.782,86.300 14.876 C 86.685 14.950,87.000 15.276,87.000 15.600 M350.394 18.300 C 350.375 19.210,349.599 19.798,349.206 19.200 C 348.616 18.301,348.714 18.000,349.600 18.000 C 350.040 18.000,350.397 18.135,350.394 18.300 M327.067 20.267 C 326.920 20.413,326.800 20.932,326.800 21.420 C 326.800 22.506,325.910 22.787,322.451 22.795 C 320.231 22.799,319.966 22.877,320.400 23.400 C 320.801 23.884,320.792 24.000,320.349 23.999 C 319.934 23.999,319.833 24.533,319.936 26.189 C 320.060 28.176,319.964 28.482,318.903 29.489 C 317.144 31.160,316.000 33.001,316.000 34.162 C 316.000 34.733,315.794 35.200,315.542 35.200 C 315.289 35.200,315.591 35.670,316.211 36.245 C 317.211 37.172,317.263 37.333,316.669 37.665 C 316.245 37.902,316.000 38.545,316.000 39.420 C 316.000 40.394,315.819 40.800,315.386 40.800 C 314.896 40.800,314.858 40.961,315.200 41.600 C 315.435 42.040,315.967 42.400,316.381 42.400 C 317.675 42.400,318.409 42.856,319.022 44.043 C 319.348 44.673,320.061 45.301,320.607 45.438 C 321.809 45.739,321.848 46.052,320.800 47.000 C 319.413 48.255,319.726 50.000,321.338 50.000 C 322.916 50.000,324.000 51.017,324.000 52.499 C 324.000 54.065,324.402 54.800,325.259 54.800 C 325.684 54.800,326.738 55.160,327.600 55.600 C 331.430 57.554,333.212 55.766,333.781 49.400 C 333.939 47.640,334.345 44.400,334.684 42.200 C 335.023 40.000,335.357 37.316,335.426 36.235 C 335.509 34.937,335.821 34.002,336.344 33.478 C 336.874 32.949,337.029 32.474,336.814 32.043 C 336.636 31.689,336.080 30.455,335.577 29.300 C 334.870 27.674,334.463 27.200,333.778 27.200 C 333.269 27.200,332.607 26.765,332.223 26.179 C 331.613 25.248,331.392 25.182,329.723 25.432 L 327.892 25.707 328.094 23.554 C 328.205 22.369,328.428 21.085,328.591 20.700 C 328.889 19.992,327.684 19.649,327.067 20.267 M235.173 35.032 C 234.761 35.528,234.751 35.829,235.124 36.427 C 235.386 36.846,235.600 38.182,235.600 39.395 C 235.600 42.644,236.311 42.079,236.475 38.700 C 236.678 34.501,236.360 33.603,235.173 35.032 M289.512 40.484 C 289.418 46.581,289.437 47.212,289.901 53.400 L 290.200 57.400 297.989 57.445 L 305.778 57.489 306.213 58.645 C 306.518 59.452,306.534 61.124,306.266 64.200 C 306.056 66.620,305.865 72.406,305.842 77.058 C 305.793 86.874,305.687 87.200,302.522 87.200 L 300.768 87.200 300.884 90.500 L 301.000 93.800 302.528 93.926 C 303.368 93.995,304.318 93.834,304.638 93.569 C 305.515 92.840,305.667 93.250,305.900 96.988 C 306.118 100.481,306.425 101.209,307.354 100.438 C 307.640 100.201,307.987 100.120,308.126 100.259 C 308.505 100.638,309.200 98.531,309.200 97.001 C 309.200 95.970,309.473 95.460,310.365 94.825 C 311.163 94.257,311.611 93.520,311.785 92.489 C 312.235 89.826,312.781 89.575,312.851 92.000 C 312.910 94.066,312.928 94.104,313.157 92.631 C 313.558 90.044,314.910 90.725,316.270 94.200 C 316.601 95.047,316.748 95.174,316.770 94.633 C 316.834 93.016,317.374 94.548,317.637 97.095 C 317.931 99.929,317.867 99.838,321.173 102.126 L 322.800 103.252 322.800 108.820 C 322.800 117.432,321.456 119.600,316.118 119.600 C 315.900 119.600,315.527 120.005,315.288 120.500 C 314.911 121.282,314.851 121.302,314.827 120.649 C 314.787 119.528,311.766 120.081,310.728 121.400 C 310.307 121.936,309.483 122.605,308.897 122.887 C 307.565 123.528,306.006 128.247,306.002 131.646 C 305.998 135.907,303.292 137.260,299.371 134.962 C 297.638 133.946,297.600 133.880,297.600 131.851 C 297.600 130.563,297.347 129.417,296.932 128.825 L 296.265 127.872 295.920 128.804 C 295.657 129.515,295.465 129.625,295.108 129.268 C 294.851 129.011,294.172 128.800,293.600 128.800 C 293.028 128.800,292.344 128.584,292.080 128.320 C 291.707 127.947,291.600 128.499,291.600 130.807 C 291.600 132.582,291.339 134.458,290.949 135.479 L 290.298 137.184 282.249 137.292 L 274.200 137.400 273.773 144.260 C 273.278 152.194,273.068 152.729,269.882 154.163 C 265.882 155.963,265.121 157.224,264.739 162.687 C 264.394 167.607,263.773 171.046,263.160 171.425 C 262.478 171.846,262.711 186.400,263.400 186.400 C 263.910 186.400,264.001 185.365,264.004 179.500 C 264.007 174.012,264.178 171.823,264.839 168.800 C 265.296 166.710,265.764 163.694,265.879 162.098 C 266.148 158.353,268.679 155.600,271.853 155.600 C 274.186 155.600,274.400 156.208,274.400 162.826 L 274.400 168.000 281.400 168.000 L 288.400 168.000 288.400 160.387 C 288.400 151.604,288.318 151.774,291.968 153.031 L 294.200 153.800 294.308 160.800 C 294.410 167.416,294.463 167.836,295.271 168.449 L 296.126 169.099 295.086 169.781 C 294.209 170.355,293.217 170.442,288.774 170.331 L 283.503 170.200 282.709 171.252 C 281.657 172.647,282.035 174.693,283.409 175.038 C 283.974 175.180,284.404 175.622,284.477 176.138 C 284.580 176.862,284.905 177.020,286.500 177.122 C 288.186 177.230,288.400 177.348,288.400 178.173 C 288.400 178.684,288.670 179.749,289.000 180.538 C 289.795 182.442,289.798 190.574,289.005 195.400 C 288.228 200.131,288.230 203.579,289.009 204.692 C 289.568 205.490,289.554 205.597,288.836 205.981 C 287.548 206.670,274.773 206.505,273.824 205.787 C 273.396 205.464,272.676 205.212,272.224 205.227 C 271.439 205.253,271.443 205.275,272.309 205.692 C 273.210 206.126,273.217 206.195,273.109 213.159 L 273.000 220.187 271.600 220.399 C 270.830 220.516,269.065 220.547,267.678 220.469 L 265.156 220.327 265.227 212.663 C 265.294 205.415,265.258 205.000,264.549 205.000 C 263.848 205.000,263.787 205.521,263.600 213.068 C 263.391 221.514,263.322 221.897,262.134 221.289 C 261.730 221.082,260.811 220.801,260.092 220.665 L 258.783 220.417 258.892 228.508 L 259.000 236.600 260.323 237.261 L 261.647 237.922 260.734 238.561 C 260.233 238.912,259.502 239.200,259.111 239.200 C 258.720 239.200,258.400 239.380,258.400 239.600 C 258.400 239.820,259.034 240.000,259.809 240.000 L 261.218 240.000 261.109 247.295 C 261.005 254.244,260.962 254.595,260.200 254.700 C 258.366 254.952,255.151 255.756,255.000 256.000 C 254.619 256.617,254.619 288.778,255.000 289.150 C 255.883 290.011,269.894 289.466,270.826 288.534 C 271.272 288.088,271.636 276.741,271.569 265.335 C 271.511 255.527,271.345 256.000,274.852 256.000 C 277.767 256.000,281.535 255.034,281.853 254.205 C 282.007 253.804,281.717 252.547,280.374 247.800 C 280.311 247.580,280.550 246.410,280.903 245.200 C 281.257 243.990,281.665 242.190,281.811 241.200 C 282.253 238.205,284.607 236.000,287.360 236.000 C 287.906 236.000,288.464 235.820,288.600 235.600 C 289.324 234.428,295.167 235.865,295.190 237.220 C 295.204 238.109,294.387 238.800,293.320 238.800 C 292.814 238.800,292.400 238.980,292.400 239.200 C 292.400 239.420,293.175 239.600,294.122 239.600 L 295.844 239.600 295.936 241.300 C 296.062 243.642,296.307 244.282,297.159 244.505 C 298.393 244.828,299.831 248.175,299.267 249.412 C 298.428 251.254,298.650 251.925,300.076 251.859 C 301.190 251.807,301.400 251.964,301.734 253.100 C 302.102 254.354,302.190 254.400,304.226 254.400 L 306.336 254.400 306.993 252.421 C 307.472 250.979,307.539 250.233,307.239 249.673 C 306.470 248.236,307.046 239.205,307.988 237.930 C 308.472 237.275,308.800 236.212,308.800 235.296 C 308.800 234.451,309.008 233.552,309.261 233.299 C 309.610 232.950,309.559 232.407,309.051 231.078 C 308.682 230.111,308.493 229.022,308.632 228.660 C 308.796 228.233,308.680 228.000,308.305 228.000 C 307.088 228.000,306.400 226.609,306.400 224.149 C 306.400 221.002,306.621 220.836,310.439 221.098 L 313.600 221.314 313.600 219.135 C 313.600 216.846,315.432 214.000,316.905 214.000 C 317.597 214.000,318.630 212.896,318.273 212.539 C 318.140 212.406,317.135 212.591,316.040 212.949 C 312.357 214.154,312.189 213.975,312.999 209.737 C 313.891 205.078,313.879 173.291,312.985 170.756 C 312.204 168.543,312.773 168.000,315.876 168.000 L 318.000 168.000 318.000 161.000 L 318.000 154.000 315.629 154.000 C 311.777 154.000,311.600 153.587,311.600 144.595 C 311.600 136.330,311.488 136.627,314.840 135.994 C 318.568 135.290,318.400 135.457,318.398 132.473 C 318.396 131.003,318.126 128.016,317.798 125.835 C 316.890 119.811,316.797 120.125,319.572 119.803 C 323.826 119.309,323.600 118.849,323.600 127.998 C 323.600 134.868,323.510 136.033,322.936 136.607 C 322.186 137.356,322.085 152.068,322.827 152.333 C 323.040 152.409,323.200 155.788,323.200 160.207 C 323.200 168.139,323.422 169.602,324.826 170.910 C 326.033 172.034,326.029 205.528,324.822 207.062 C 323.799 208.364,324.137 209.233,325.556 208.949 C 326.610 208.738,326.654 208.806,327.167 211.384 C 327.499 213.054,327.861 213.964,328.147 213.842 C 328.396 213.735,329.543 213.355,330.696 212.997 C 331.850 212.638,333.042 211.989,333.347 211.555 C 333.744 210.987,333.957 210.910,334.099 211.282 C 334.403 212.074,338.269 211.718,338.595 210.868 C 339.167 209.379,340.369 191.039,340.363 183.904 C 340.360 180.673,340.445 180.301,341.480 179.004 L 342.600 177.600 351.620 177.600 C 357.961 177.600,360.779 177.461,361.107 177.133 C 361.463 176.777,361.627 176.805,361.798 177.251 C 362.618 179.388,365.514 177.250,365.676 174.388 L 365.800 172.200 372.169 172.089 C 379.285 171.966,379.179 171.930,379.292 174.525 C 379.362 176.122,379.479 176.365,380.087 176.172 C 380.611 176.006,380.800 176.161,380.800 176.755 C 380.800 177.378,381.144 177.621,382.300 177.815 C 383.125 177.953,384.250 178.217,384.800 178.401 L 385.800 178.737 384.687 178.768 C 383.443 178.804,382.772 179.879,383.642 180.443 C 383.949 180.641,385.412 180.690,386.892 180.551 C 390.184 180.242,391.336 180.827,391.874 183.080 C 392.167 184.308,392.425 184.608,393.218 184.643 C 395.132 184.728,395.256 184.796,395.128 185.700 C 395.034 186.362,394.688 186.636,393.819 186.734 C 392.675 186.865,391.606 187.782,391.644 188.600 C 391.655 188.820,391.754 188.775,391.865 188.500 C 392.105 187.905,393.449 187.833,393.797 188.395 C 393.937 188.622,393.777 188.689,393.421 188.553 C 392.517 188.206,392.643 189.309,393.573 189.890 C 394.212 190.290,394.368 190.262,394.473 189.732 C 394.567 189.258,395.055 189.547,396.354 190.846 C 397.678 192.169,397.948 192.632,397.454 192.729 C 396.678 192.883,396.623 193.263,397.280 193.920 C 397.922 194.562,398.400 194.527,398.400 193.837 C 398.400 193.472,398.680 193.348,399.200 193.484 C 399.993 193.691,400.000 193.506,399.960 172.747 C 399.938 161.226,399.776 152.250,399.600 152.800 C 399.293 153.759,399.278 153.763,399.240 152.900 C 399.187 151.712,397.600 151.616,397.600 152.802 C 397.600 153.790,387.759 153.579,386.118 152.556 C 385.472 152.152,384.959 152.112,384.192 152.403 C 382.224 153.151,380.760 152.923,380.967 151.900 C 381.067 151.405,381.252 149.969,381.377 148.708 C 381.502 147.448,381.964 145.506,382.402 144.394 C 382.848 143.263,383.200 141.425,383.200 140.228 C 383.200 138.130,383.231 138.073,384.700 137.463 C 386.561 136.691,385.567 136.633,383.444 137.390 C 382.106 137.867,381.807 137.864,381.315 137.372 C 380.047 136.105,378.647 136.656,378.000 138.678 C 377.670 139.709,377.185 140.620,376.922 140.702 C 376.431 140.856,375.362 137.705,375.768 137.298 C 376.189 136.878,373.440 135.200,372.330 135.200 C 371.440 135.200,371.166 134.978,370.970 134.100 C 370.482 131.907,370.347 131.637,369.619 131.406 C 369.212 131.277,368.768 130.728,368.632 130.186 C 368.480 129.581,368.098 129.200,367.642 129.200 C 367.131 129.200,366.822 128.812,366.651 127.954 C 366.406 126.732,366.369 126.714,364.626 126.975 C 363.106 127.203,362.789 127.127,362.425 126.447 C 361.764 125.212,361.913 124.400,362.800 124.400 C 363.946 124.400,363.789 123.263,362.602 122.965 C 362.053 122.827,360.838 122.105,359.902 121.361 C 358.966 120.617,357.930 120.006,357.600 120.004 C 356.275 119.995,352.542 118.260,351.158 117.010 C 350.350 116.280,349.264 115.552,348.744 115.394 C 346.716 114.774,346.456 114.207,347.049 111.688 C 347.929 107.948,347.785 103.775,346.750 103.050 C 345.798 102.383,346.279 102.225,351.200 101.589 C 352.835 101.378,351.935 101.291,347.691 101.252 C 342.031 101.200,341.979 101.192,341.533 100.212 C 340.597 98.159,341.304 97.971,349.513 98.091 C 357.584 98.210,358.689 98.534,357.083 100.308 C 356.196 101.289,356.221 101.600,357.187 101.600 C 357.703 101.600,357.900 101.796,357.757 102.168 C 357.637 102.480,357.868 103.237,358.270 103.850 C 358.685 104.483,359.105 106.094,359.244 107.582 C 359.378 109.022,359.733 110.789,360.035 111.509 C 360.438 112.474,360.468 112.999,360.148 113.512 C 359.618 114.361,360.374 117.267,361.429 118.432 C 363.237 120.430,366.212 118.689,365.792 115.879 C 365.654 114.955,365.740 113.680,365.982 113.043 C 366.225 112.407,366.444 110.112,366.469 107.943 C 366.505 104.869,366.638 104.000,367.070 104.000 C 367.375 104.000,367.729 103.730,367.855 103.400 C 369.013 100.383,372.677 106.671,371.560 109.759 C 371.134 110.938,371.133 111.460,371.555 112.626 C 371.839 113.410,372.010 115.075,371.935 116.326 C 371.803 118.548,371.825 118.603,372.900 118.727 C 373.505 118.796,374.000 119.021,374.000 119.227 C 374.000 119.432,374.437 119.600,374.971 119.600 L 375.942 119.600 375.983 111.445 L 376.025 103.290 374.156 101.645 C 372.288 100.000,372.287 100.000,368.963 100.000 L 365.638 100.000 365.519 97.500 C 365.402 95.050,365.376 94.997,364.200 94.865 C 363.540 94.790,362.797 94.561,362.549 94.356 C 362.243 94.103,362.022 94.273,361.862 94.885 C 361.675 95.599,361.524 95.684,361.133 95.293 C 360.771 94.931,358.224 94.800,351.565 94.800 L 342.489 94.800 342.162 93.300 C 341.982 92.475,341.875 91.530,341.923 91.200 C 341.972 90.870,341.815 86.354,341.574 81.165 C 341.333 75.975,341.126 70.720,341.115 69.487 C 341.102 67.974,340.917 67.177,340.548 67.035 C 340.246 66.920,340.000 67.010,340.000 67.236 C 340.000 67.462,339.820 67.536,339.600 67.400 C 339.380 67.264,339.200 67.433,339.200 67.776 C 339.200 68.119,339.020 68.400,338.800 68.400 C 338.561 68.400,338.400 69.933,338.400 72.200 C 338.400 76.381,338.166 76.689,336.573 74.600 C 334.819 72.301,334.405 72.695,334.363 76.700 C 334.279 84.602,334.395 84.945,337.077 84.731 C 338.506 84.618,338.800 84.714,338.800 85.297 C 338.800 85.684,339.070 86.000,339.400 86.000 C 339.823 86.000,340.000 86.427,340.000 87.447 C 340.000 88.696,339.891 88.865,339.200 88.684 C 338.760 88.569,338.400 88.658,338.400 88.881 C 338.400 89.146,337.323 89.186,335.300 88.996 C 333.595 88.836,330.355 88.731,328.100 88.763 L 324.000 88.820 323.982 87.510 C 323.966 86.334,323.752 86.098,321.897 85.200 L 319.829 84.200 319.777 76.412 L 319.724 68.624 318.162 67.923 C 317.303 67.537,316.192 67.216,315.694 67.210 C 314.462 67.196,313.203 65.051,313.201 62.961 C 313.199 59.974,311.522 57.425,309.136 56.783 C 307.620 56.375,307.600 56.343,307.600 54.414 C 307.600 52.481,305.710 49.871,305.268 51.195 C 305.128 51.617,297.540 51.436,296.083 50.975 C 294.521 50.482,296.445 49.200,298.747 49.200 C 301.467 49.200,301.516 49.169,301.286 47.602 C 301.115 46.437,301.044 46.400,298.955 46.400 C 296.359 46.400,296.725 47.245,296.440 40.600 L 296.200 35.000 292.900 34.884 L 289.600 34.768 289.512 40.484 M326.167 35.043 C 326.623 35.218,326.800 35.824,326.800 37.209 C 326.800 38.381,326.995 39.207,327.300 39.322 C 327.575 39.426,327.101 39.813,326.247 40.183 C 324.320 41.017,324.163 40.842,323.839 37.500 C 323.561 34.628,323.968 34.199,326.167 35.043 M373.418 35.475 C 373.972 36.029,374.061 36.725,373.919 39.375 C 373.659 44.196,373.447 44.400,368.718 44.400 C 364.025 44.400,364.000 44.374,364.000 39.438 L 364.000 36.024 365.900 35.440 C 368.624 34.602,372.563 34.621,373.418 35.475 M51.702 44.083 C 51.468 44.367,51.214 45.050,51.138 45.600 C 51.033 46.359,50.727 46.631,49.867 46.730 C 49.014 46.827,48.594 47.195,48.167 48.217 C 47.855 48.964,47.105 49.843,46.500 50.171 C 45.895 50.499,45.625 50.775,45.900 50.784 C 46.603 50.806,46.528 51.600,45.823 51.600 C 44.905 51.600,44.000 53.243,44.000 54.911 C 44.000 55.754,43.612 57.289,43.138 58.322 C 42.615 59.464,42.202 61.341,42.085 63.113 C 41.897 65.962,41.854 66.060,40.147 67.563 C 38.484 69.027,38.400 69.206,38.400 71.293 C 38.400 72.499,38.201 75.866,37.957 78.776 L 37.514 84.067 38.557 85.155 C 39.945 86.604,39.963 88.294,38.595 88.637 C 38.042 88.776,37.457 89.106,37.295 89.370 C 37.133 89.634,36.370 90.026,35.600 90.240 C 33.682 90.773,33.079 92.199,32.874 96.691 L 32.705 100.381 31.453 100.579 C 30.764 100.688,27.680 100.967,24.600 101.199 C 18.370 101.668,17.098 102.168,16.875 104.240 C 16.724 105.645,15.831 106.400,14.320 106.400 C 13.297 106.400,13.239 106.473,13.688 107.192 C 14.124 107.890,13.982 108.188,12.491 109.707 C 11.561 110.655,10.800 111.738,10.800 112.115 C 10.800 112.728,10.231 112.800,5.400 112.800 L 0.000 112.800 0.000 122.400 C 0.000 130.667,0.083 132.000,0.600 132.000 C 1.197 132.000,1.329 130.352,1.400 122.026 C 1.422 119.410,2.271 118.844,6.200 118.824 C 9.893 118.806,9.729 118.423,9.884 127.415 C 9.959 131.747,10.188 135.603,10.392 135.984 C 10.631 136.431,10.609 136.831,10.331 137.109 C 10.048 137.392,9.924 140.020,9.972 144.716 L 10.045 151.892 7.635 152.164 C 4.501 152.519,4.631 152.148,4.400 161.357 C 4.180 170.112,4.299 169.749,1.500 170.197 L 0.000 170.436 0.028 173.918 C 0.047 176.235,0.171 177.132,0.400 176.600 C 0.694 175.916,0.748 175.901,0.772 176.500 C 0.796 177.095,1.207 177.200,3.520 177.200 C 6.648 177.200,7.200 176.838,7.200 174.784 C 7.200 173.620,7.400 173.237,8.200 172.873 C 8.750 172.622,9.200 172.157,9.200 171.839 C 9.200 171.520,9.965 170.838,10.900 170.323 L 12.600 169.385 12.705 161.593 C 12.796 154.839,12.899 153.733,13.481 153.300 C 14.391 152.623,16.474 152.669,17.424 153.387 C 18.306 154.055,22.647 154.211,23.600 153.609 C 24.567 152.999,24.701 139.414,23.764 136.962 C 22.838 134.537,23.274 134.153,26.023 134.970 C 28.462 135.694,28.800 135.729,28.800 135.258 C 28.800 135.070,28.215 134.749,27.500 134.544 C 25.423 133.951,25.308 129.768,27.327 128.229 C 28.974 126.972,29.633 123.177,28.575 121.039 C 28.259 120.400,27.997 119.410,27.994 118.839 C 27.985 117.329,27.564 116.881,26.012 116.733 C 24.229 116.561,24.091 116.042,24.040 109.329 C 23.994 103.273,24.032 103.191,27.300 102.256 C 31.005 101.196,32.168 101.110,34.229 101.742 C 39.340 103.310,40.739 102.946,41.041 99.970 C 41.454 95.895,43.371 89.133,44.488 87.812 C 45.464 86.658,49.562 86.109,50.914 86.952 C 51.401 87.256,52.764 87.610,53.942 87.739 C 55.121 87.867,56.336 88.181,56.642 88.435 C 57.080 88.799,57.200 88.759,57.200 88.249 C 57.200 84.662,59.669 92.628,59.913 97.000 C 60.036 99.211,60.331 100.597,60.868 101.484 L 61.645 102.768 63.423 101.904 C 64.608 101.328,65.067 100.907,64.800 100.640 C 63.617 99.457,64.656 92.200,66.008 92.200 C 67.714 92.200,68.868 99.854,67.300 100.768 C 66.666 101.137,66.681 101.177,67.451 101.188 C 69.057 101.211,69.338 102.112,69.044 106.294 L 68.772 110.166 69.712 109.283 C 70.605 108.443,70.988 108.400,77.502 108.400 C 81.638 108.400,84.451 108.241,84.600 108.000 C 84.758 107.744,90.804 107.600,101.424 107.600 L 118.000 107.600 118.044 106.100 C 118.068 105.275,118.155 103.970,118.238 103.200 C 118.538 100.393,118.591 84.000,118.300 84.000 C 118.135 84.000,118.000 83.010,118.000 81.800 C 118.000 80.356,118.165 79.600,118.480 79.600 C 119.675 79.600,117.992 78.873,115.833 78.456 C 113.006 77.911,102.846 77.857,102.014 78.383 C 101.619 78.632,101.377 79.672,101.269 81.577 L 101.110 84.400 98.788 84.400 C 94.972 84.400,95.201 83.921,95.196 91.943 C 95.193 95.824,95.080 99.675,94.943 100.500 L 94.695 102.000 92.571 102.000 C 91.403 102.000,90.336 102.180,90.200 102.400 C 90.064 102.620,88.714 102.800,87.200 102.800 C 85.686 102.800,84.336 102.620,84.200 102.400 C 84.051 102.158,81.201 102.000,76.990 102.000 C 68.800 102.000,69.210 102.256,69.182 97.126 C 69.157 92.245,67.834 89.200,65.738 89.200 C 64.585 89.200,64.799 90.646,64.249 79.129 L 63.779 69.258 61.889 67.595 L 60.000 65.932 59.991 63.266 C 59.985 61.476,59.721 60.024,59.188 58.848 C 58.751 57.885,58.293 56.355,58.171 55.448 C 57.770 52.465,57.630 52.142,56.510 51.616 C 55.896 51.328,55.618 51.016,55.888 50.918 C 56.196 50.807,55.973 50.395,55.288 49.808 C 54.441 49.081,54.111 48.313,53.800 46.342 C 53.392 43.761,52.635 42.947,51.702 44.083 M85.436 48.052 C 85.224 49.563,85.272 50.587,85.583 51.168 C 85.955 51.864,85.885 52.460,85.223 54.231 C 84.770 55.441,84.400 56.720,84.400 57.075 C 84.400 57.429,83.791 58.311,83.046 59.034 C 81.734 60.308,81.279 61.540,80.621 65.600 C 80.401 66.960,79.144 68.000,77.720 68.000 C 75.796 68.000,77.767 68.731,80.260 68.941 C 85.781 69.408,89.200 69.277,89.200 68.600 C 89.200 68.270,88.851 68.000,88.424 68.000 C 86.759 68.000,86.660 65.758,88.240 63.879 C 88.768 63.252,89.200 62.280,89.200 61.719 C 89.200 60.812,89.325 60.725,90.342 60.928 C 91.021 61.064,91.806 60.931,92.279 60.599 C 93.864 59.490,94.919 60.270,94.657 62.358 C 94.376 64.596,95.559 68.419,96.667 68.855 C 99.155 69.835,103.200 68.836,103.200 67.241 C 103.200 66.754,103.711 66.373,104.808 66.045 C 106.544 65.525,107.382 65.749,107.040 66.640 C 106.922 66.948,106.903 67.200,106.999 67.200 C 107.397 67.200,110.250 65.791,110.853 65.296 C 111.212 65.002,112.832 64.646,114.453 64.504 L 117.400 64.247 115.800 63.754 C 114.856 63.463,114.528 63.238,115.000 63.205 C 116.809 63.079,114.074 62.466,110.423 62.180 C 108.391 62.021,106.939 61.761,107.197 61.602 C 107.475 61.430,107.144 61.209,106.382 61.056 C 104.210 60.622,103.354 60.765,102.562 61.693 C 101.812 62.572,101.812 62.577,102.564 61.993 C 103.288 61.432,103.299 61.447,102.784 62.274 C 102.485 62.755,102.065 63.040,101.852 62.909 C 101.628 62.770,101.572 62.950,101.719 63.334 C 101.860 63.700,101.801 64.000,101.587 64.000 C 101.374 64.000,101.200 64.270,101.200 64.600 C 101.200 64.930,101.020 65.200,100.800 65.200 C 100.580 65.200,100.400 65.470,100.400 65.800 C 100.400 66.130,100.580 66.400,100.800 66.400 C 101.020 66.400,101.200 66.580,101.200 66.800 C 101.200 68.137,99.721 67.014,99.223 65.300 C 98.532 62.918,95.587 56.405,95.251 56.513 C 94.462 56.767,90.963 52.707,91.384 52.026 C 91.509 51.824,91.265 51.548,90.841 51.413 C 90.418 51.279,89.574 50.501,88.967 49.684 C 88.360 48.868,87.794 48.115,87.710 48.012 C 87.625 47.908,87.389 48.088,87.184 48.412 C 86.872 48.905,86.811 48.887,86.806 48.300 C 86.803 47.915,86.633 47.600,86.428 47.600 C 86.223 47.600,85.987 47.195,85.903 46.700 C 85.818 46.197,85.612 46.792,85.436 48.052 M270.668 51.389 C 270.198 51.859,269.545 51.914,267.439 51.661 C 265.946 51.481,264.800 51.496,264.800 51.695 C 264.800 51.889,262.640 51.991,259.999 51.924 C 255.427 51.806,255.198 51.838,255.187 52.600 C 255.177 53.335,255.143 53.343,254.768 52.700 C 254.528 52.288,253.883 52.000,253.200 52.000 C 252.519 52.000,251.869 52.289,251.626 52.700 C 251.244 53.348,251.195 53.338,250.979 52.573 C 250.644 51.390,248.553 51.757,246.944 53.282 C 245.731 54.431,245.573 54.468,242.411 54.348 C 239.457 54.236,239.070 54.308,238.468 55.082 C 238.101 55.553,237.350 55.998,236.800 56.069 C 236.047 56.168,235.746 56.496,235.582 57.400 C 235.462 58.060,234.877 59.640,234.282 60.911 C 233.075 63.489,232.858 65.894,233.800 66.255 C 234.646 66.580,234.546 67.013,233.519 67.471 L 232.637 67.864 233.519 68.095 C 234.004 68.222,234.316 68.188,234.212 68.020 C 233.994 67.667,237.764 67.830,240.400 68.287 C 242.490 68.650,243.121 70.527,242.302 73.942 C 242.057 74.960,241.986 77.372,242.130 79.742 C 242.407 84.308,242.346 84.494,240.400 85.046 L 239.000 85.442 239.138 90.604 C 239.319 97.425,237.596 96.772,255.457 96.787 C 272.281 96.802,270.800 97.146,270.800 93.216 C 270.800 91.700,270.997 90.735,271.369 90.426 C 271.682 90.166,272.064 89.202,272.220 88.283 C 272.715 85.353,274.179 83.907,276.491 84.066 C 278.740 84.221,278.639 84.410,278.970 79.400 C 279.370 73.349,279.706 70.000,279.912 70.000 C 280.026 70.000,280.740 70.640,281.500 71.422 C 283.117 73.086,284.200 73.107,284.200 71.473 C 284.200 70.451,283.971 70.279,281.504 69.449 C 278.199 68.337,278.176 68.314,279.019 67.027 C 279.586 66.162,279.658 65.426,279.440 62.692 C 279.296 60.882,279.071 57.780,278.939 55.800 C 278.671 51.771,278.558 51.615,275.924 51.606 C 274.892 51.603,273.936 51.420,273.800 51.200 C 273.426 50.595,271.336 50.721,270.668 51.389 M369.000 57.223 C 368.120 57.405,366.230 57.567,364.800 57.583 C 361.891 57.616,362.111 58.175,365.200 58.600 C 367.777 58.954,368.661 59.585,366.600 59.599 L 365.000 59.610 366.741 60.605 C 367.982 61.314,369.079 61.600,370.561 61.600 C 373.070 61.600,373.600 62.054,373.600 64.204 C 373.600 67.408,375.265 68.400,380.639 68.400 C 387.559 68.400,388.108 67.824,381.400 67.600 L 375.400 67.400 375.287 62.625 C 375.141 56.482,374.644 56.055,369.000 57.223 M168.149 57.518 C 167.462 57.587,166.485 58.084,165.980 58.622 C 165.444 59.192,164.609 59.600,163.979 59.600 C 162.503 59.600,161.650 60.615,162.860 60.932 L 163.737 61.161 162.768 61.967 C 162.236 62.411,162.025 62.779,162.300 62.787 C 162.575 62.794,162.800 63.059,162.800 63.376 C 162.800 64.181,163.581 64.579,164.115 64.045 C 164.360 63.800,165.126 63.600,165.818 63.600 C 167.171 63.600,167.920 62.957,168.962 60.900 C 169.636 59.569,169.388 59.208,168.413 60.100 C 168.112 60.375,168.264 59.902,168.749 59.050 C 169.235 58.197,169.580 57.475,169.516 57.446 C 169.452 57.417,168.837 57.449,168.149 57.518 M330.003 65.993 C 329.314 67.656,329.712 68.400,331.290 68.400 C 332.013 68.400,333.232 68.580,333.998 68.799 C 335.459 69.218,337.810 68.738,338.600 67.858 C 338.820 67.614,338.851 67.530,338.668 67.672 C 338.485 67.815,337.699 67.227,336.921 66.366 C 334.959 64.194,330.840 63.972,330.003 65.993 M22.600 67.549 C 22.011 67.800,22.537 67.958,24.600 68.147 C 26.140 68.289,28.349 68.511,29.509 68.641 C 30.669 68.772,31.929 68.736,32.309 68.562 C 33.463 68.033,23.822 67.027,22.600 67.549 M29.500 67.482 C 29.995 67.578,30.805 67.578,31.300 67.482 C 31.795 67.387,31.390 67.309,30.400 67.309 C 29.410 67.309,29.005 67.387,29.500 67.482 M254.722 70.990 C 254.857 73.578,254.262 74.750,253.497 73.400 C 252.932 72.402,252.860 68.860,253.400 68.634 C 254.310 68.254,254.606 68.782,254.722 70.990 M137.993 81.018 C 137.780 81.577,137.501 82.522,137.372 83.118 C 137.243 83.713,136.976 84.560,136.778 85.000 C 136.580 85.440,136.266 88.952,136.080 92.805 C 135.749 99.682,135.100 102.480,133.995 101.797 C 133.821 101.689,132.715 102.049,131.539 102.596 C 128.840 103.853,128.903 103.856,125.689 102.287 C 121.551 100.267,120.897 100.918,121.383 106.572 C 121.516 108.127,121.613 111.470,121.599 114.000 C 121.563 120.142,121.107 119.761,128.778 120.000 L 135.188 120.200 135.567 119.200 C 135.940 118.216,136.084 117.687,136.570 115.500 L 136.815 114.400 144.408 114.400 C 152.722 114.400,153.600 114.644,153.600 116.957 C 153.600 118.310,153.945 118.368,162.173 118.418 L 169.550 118.462 169.749 120.531 C 169.858 121.669,169.950 122.960,169.953 123.400 C 169.956 123.840,170.180 125.910,170.449 128.000 C 170.719 130.090,170.893 134.301,170.835 137.357 L 170.731 142.914 172.065 142.652 C 172.799 142.507,173.618 142.097,173.883 141.741 C 174.254 141.244,174.743 141.153,175.975 141.350 C 177.453 141.586,177.603 141.526,177.835 140.603 C 177.998 139.954,178.367 139.600,178.881 139.600 C 179.326 139.600,179.763 139.264,179.875 138.836 C 179.985 138.415,180.913 137.650,181.937 137.136 C 182.962 136.621,183.865 136.165,183.944 136.123 C 184.023 136.081,183.687 135.484,183.197 134.796 C 181.347 132.198,182.622 127.369,185.519 126.000 C 186.218 125.670,186.894 125.085,187.022 124.700 C 187.329 123.773,193.758 123.647,194.280 124.558 C 194.622 125.156,198.368 126.400,199.824 126.400 C 200.307 126.400,200.926 126.670,201.200 127.000 C 201.474 127.330,201.856 127.600,202.049 127.600 C 202.242 127.600,202.400 127.330,202.400 127.000 C 202.400 126.670,202.555 126.400,202.744 126.400 C 203.150 126.400,203.592 129.698,203.597 132.767 C 203.598 133.958,203.735 134.797,203.900 134.631 C 204.629 133.896,204.241 118.000,203.500 118.234 C 202.491 118.551,202.448 113.821,203.457 113.433 C 204.460 113.049,203.900 97.699,202.753 94.100 L 202.338 92.800 195.069 92.814 C 189.522 92.825,187.563 92.964,186.800 93.400 C 185.455 94.169,172.895 94.253,171.877 93.500 C 171.150 92.961,170.264 89.988,169.404 85.200 C 169.107 83.550,168.675 81.705,168.442 81.100 L 168.020 80.000 153.200 80.000 L 138.380 80.000 137.993 81.018 M36.800 93.000 C 36.800 93.622,36.573 94.000,36.200 94.000 C 35.827 94.000,35.600 93.622,35.600 93.000 C 35.600 92.378,35.827 92.000,36.200 92.000 C 36.573 92.000,36.800 92.378,36.800 93.000 M342.000 101.800 C 342.541 102.451,342.411 102.533,341.433 102.157 C 341.085 102.024,340.800 101.754,340.800 101.557 C 340.800 101.004,341.448 101.135,342.000 101.800 M174.713 102.804 C 176.379 103.819,176.613 104.459,176.114 106.640 C 175.892 107.608,175.849 108.400,176.017 108.400 C 176.475 108.400,174.138 112.551,173.204 113.396 C 172.069 114.423,171.989 114.231,171.307 108.831 C 170.484 102.308,171.359 100.759,174.713 102.804 M191.785 102.752 C 191.920 103.178,192.543 103.609,193.218 103.744 C 194.367 103.973,194.402 104.045,194.151 105.616 C 193.884 107.287,195.682 109.951,197.100 109.987 C 197.375 109.994,197.600 110.360,197.600 110.800 C 197.600 111.316,197.867 111.600,198.351 111.600 C 198.764 111.600,199.326 111.870,199.600 112.200 C 199.874 112.530,200.616 112.800,201.249 112.800 C 202.343 112.800,202.398 112.885,202.360 114.500 C 202.248 119.278,201.401 119.701,192.986 119.175 C 189.474 118.955,184.237 118.799,181.348 118.827 C 175.171 118.887,174.868 118.688,177.412 116.250 C 179.086 114.646,179.378 114.511,180.529 114.806 C 182.638 115.346,186.399 115.680,186.413 115.329 C 186.678 108.468,186.674 106.557,186.394 105.578 C 185.682 103.097,191.008 100.305,191.785 102.752 M339.643 102.500 C 340.979 103.621,341.187 104.213,340.772 105.715 C 340.505 106.684,340.499 108.452,340.756 110.960 C 341.399 117.251,340.593 118.968,337.110 118.716 C 334.001 118.491,333.854 118.284,334.517 115.058 C 335.021 112.606,335.005 112.251,334.317 110.715 C 332.972 107.711,333.427 103.587,335.200 102.701 C 336.840 101.881,338.800 101.793,339.643 102.500 M252.069 104.500 C 251.631 105.215,251.062 106.610,250.804 107.600 C 250.547 108.590,249.954 110.030,249.487 110.800 C 248.960 111.670,248.535 113.260,248.365 115.000 C 248.215 116.540,247.609 119.150,247.020 120.800 C 246.380 122.589,245.814 125.272,245.615 127.449 C 245.433 129.455,245.082 131.473,244.837 131.932 C 244.315 132.906,244.423 136.473,244.986 136.877 C 245.559 137.288,245.335 140.180,244.622 141.557 C 244.280 142.219,244.000 143.583,244.000 144.589 C 244.000 146.178,243.782 146.654,242.338 148.221 C 240.450 150.269,240.062 150.289,239.149 148.385 L 238.499 147.028 238.209 149.134 C 237.710 152.763,237.021 151.411,236.800 146.368 C 236.653 143.010,236.468 141.826,236.100 141.900 C 235.785 141.963,235.600 141.534,235.600 140.738 C 235.600 139.291,234.306 140.002,233.753 141.753 C 233.605 142.219,233.200 143.035,232.853 143.567 L 232.220 144.534 231.950 143.567 C 231.801 143.035,231.662 141.034,231.640 139.120 C 231.612 136.664,231.442 135.546,231.062 135.320 C 230.365 134.906,230.007 133.132,229.622 128.195 C 229.386 125.165,229.067 123.705,228.310 122.195 C 227.717 121.011,227.144 118.899,226.901 117.000 C 226.474 113.674,224.947 110.408,222.643 107.900 C 222.087 107.296,221.427 106.114,221.175 105.276 C 220.280 102.288,217.707 103.803,216.609 107.965 C 216.317 109.073,215.700 110.591,215.239 111.337 C 214.627 112.327,214.400 113.355,214.400 115.131 C 214.400 116.656,214.199 117.756,213.862 118.071 C 213.416 118.488,213.466 118.687,214.156 119.246 C 215.039 119.961,214.442 122.773,212.936 124.989 C 212.641 125.423,212.400 126.379,212.400 127.113 C 212.400 128.789,209.558 134.904,208.403 135.713 C 207.391 136.422,207.613 136.611,209.900 136.989 L 211.600 137.270 211.600 139.435 C 211.600 141.093,211.741 141.600,212.200 141.600 C 212.651 141.600,212.800 141.118,212.800 139.662 C 212.800 136.856,214.628 135.563,217.286 136.490 C 218.184 136.803,218.717 136.795,219.253 136.460 C 219.658 136.207,220.055 136.000,220.135 136.000 C 220.672 136.000,221.091 151.458,220.625 154.106 C 220.074 157.237,221.700 162.664,223.401 163.375 C 224.940 164.018,226.400 166.235,226.400 167.928 C 226.400 168.607,226.560 169.576,226.755 170.081 C 226.950 170.587,227.315 172.119,227.567 173.486 L 228.026 175.973 226.490 177.555 C 225.400 178.678,224.554 179.176,223.577 179.269 L 222.200 179.400 222.081 183.700 L 221.962 188.000 224.701 188.000 L 227.439 188.000 227.280 186.631 C 227.139 185.427,227.273 185.183,228.388 184.606 C 229.463 184.050,229.640 183.754,229.547 182.669 C 229.367 180.585,229.699 180.400,233.607 180.400 L 237.166 180.400 238.183 182.135 C 238.771 183.139,239.200 184.488,239.200 185.335 C 239.200 186.636,239.313 186.800,240.213 186.800 C 240.769 186.800,241.329 187.070,241.455 187.400 C 242.086 189.044,244.800 187.238,244.800 185.174 C 244.800 183.186,245.558 182.054,246.253 183.004 C 246.885 183.869,247.071 203.385,246.451 203.768 C 246.260 203.887,244.638 204.148,242.848 204.348 C 238.700 204.812,237.837 205.381,237.021 208.188 L 236.378 210.400 229.423 210.400 L 222.468 210.400 222.334 212.900 C 222.082 217.597,221.433 217.200,229.364 217.200 L 236.272 217.200 236.736 216.181 C 236.991 215.621,237.200 214.268,237.200 213.175 C 237.200 207.547,238.680 205.200,242.227 205.200 C 245.599 205.200,245.562 205.115,245.690 213.196 C 245.770 218.245,245.934 220.179,246.291 220.298 C 246.667 220.422,246.809 218.588,246.891 212.547 L 247.000 204.632 248.400 204.286 C 249.170 204.096,252.351 203.914,255.470 203.883 C 258.588 203.851,261.052 203.684,260.946 203.512 C 260.840 203.341,258.232 203.200,255.150 203.200 C 247.265 203.200,248.000 204.352,248.000 191.986 C 248.000 185.511,248.147 181.600,248.390 181.600 C 248.604 181.600,249.048 181.081,249.376 180.447 C 249.717 179.787,250.436 179.177,251.058 179.021 C 254.176 178.239,257.284 171.313,254.257 171.891 C 253.101 172.112,249.487 170.345,248.649 169.149 C 247.987 168.204,248.140 166.545,249.057 164.720 C 249.356 164.126,249.600 162.815,249.600 161.807 C 249.600 160.613,249.793 159.901,250.155 159.762 C 250.460 159.645,250.809 159.065,250.929 158.474 C 251.211 157.088,253.339 156.045,254.459 156.744 C 255.097 157.142,255.204 157.081,255.230 156.303 C 255.305 154.077,256.208 152.664,257.921 152.093 C 258.955 151.748,260.173 150.872,261.133 149.782 L 262.679 148.025 262.945 143.313 C 263.092 140.721,263.394 137.472,263.616 136.092 C 263.908 134.278,263.893 133.348,263.562 132.728 C 263.310 132.258,263.011 130.326,262.898 128.436 C 262.678 124.736,262.257 123.543,260.638 122.030 C 259.111 120.604,259.335 120.139,261.700 119.822 C 263.413 119.594,263.689 119.455,263.200 119.069 C 262.430 118.463,262.305 117.990,262.022 114.600 C 261.893 113.060,261.494 111.350,261.135 110.800 C 260.776 110.250,260.197 108.793,259.848 107.563 C 258.549 102.977,254.079 101.218,252.069 104.500 M39.854 114.420 C 39.505 119.008,39.673 119.600,41.319 119.600 C 42.504 119.600,42.522 119.575,41.776 118.970 C 41.349 118.624,41.223 118.453,41.495 118.591 C 41.821 118.756,41.909 118.630,41.754 118.223 C 41.623 117.883,41.355 117.704,41.158 117.826 C 40.961 117.948,40.782 116.822,40.760 115.324 C 40.692 110.672,40.177 110.159,39.854 114.420 M61.262 113.913 C 61.228 115.295,60.939 117.050,60.620 117.813 C 60.149 118.941,60.140 119.200,60.571 119.200 C 61.641 119.200,61.875 118.199,61.599 114.800 C 61.332 111.496,61.322 111.471,61.262 113.913 M223.161 115.660 C 223.869 117.691,223.730 118.400,222.624 118.400 C 221.354 118.400,221.208 118.105,221.480 116.082 C 221.749 114.077,222.540 113.879,223.161 115.660 M171.586 117.949 C 171.598 118.748,171.505 118.819,171.000 118.400 C 170.662 118.120,170.406 117.268,170.414 116.451 L 170.428 115.000 171.000 116.000 C 171.314 116.550,171.578 117.427,171.586 117.949 M175.144 115.810 C 175.480 116.147,173.551 117.580,172.747 117.591 C 172.070 117.600,171.463 116.145,171.870 115.486 C 172.105 115.106,174.696 115.362,175.144 115.810 M349.100 117.500 C 349.198 117.793,348.922 118.000,348.433 118.000 C 347.942 118.000,347.600 117.742,347.600 117.371 C 347.600 116.636,348.848 116.743,349.100 117.500 M347.001 119.906 C 347.222 120.068,347.921 120.965,348.556 121.900 C 349.190 122.835,349.909 123.621,350.154 123.646 C 351.135 123.748,351.457 123.857,352.864 124.571 C 353.670 124.980,354.499 125.693,354.708 126.157 C 355.019 126.849,355.180 126.480,355.607 124.100 C 356.200 120.798,356.423 120.685,358.513 122.628 C 360.057 124.064,360.151 124.800,358.790 124.800 C 357.734 124.800,357.188 126.015,357.468 127.744 C 357.642 128.815,357.902 129.200,358.452 129.200 C 359.274 129.200,359.506 129.980,358.700 130.033 C 358.425 130.051,358.740 130.305,359.400 130.598 C 360.748 131.196,363.069 133.464,362.705 133.828 C 362.575 133.958,361.193 134.262,359.634 134.503 C 356.900 134.927,355.879 135.783,357.162 136.577 C 357.362 136.700,357.448 137.116,357.354 137.500 C 356.957 139.125,360.485 142.000,362.877 142.000 L 365.041 142.000 365.936 143.844 C 366.733 145.483,366.951 145.664,367.908 145.482 C 368.605 145.348,369.374 145.554,370.093 146.066 C 370.733 146.522,371.669 146.802,372.302 146.728 C 373.343 146.607,373.428 146.726,373.943 149.000 C 374.999 153.664,375.758 154.848,377.511 154.568 L 379.027 154.325 378.691 158.663 C 378.506 161.048,378.411 164.395,378.480 166.100 L 378.606 169.200 376.503 169.200 L 374.400 169.200 374.400 167.787 C 374.400 166.157,374.424 166.170,370.204 165.437 C 367.204 164.916,366.943 164.929,365.942 165.641 C 364.540 166.640,358.787 166.748,357.992 165.790 C 357.688 165.425,357.308 162.824,357.041 159.290 L 356.596 153.400 354.831 153.515 C 352.424 153.671,352.413 153.636,352.406 145.380 C 352.402 140.223,352.260 138.020,351.910 137.670 C 351.523 137.283,351.527 137.008,351.928 136.366 C 352.384 135.637,352.362 135.592,351.714 135.939 C 349.656 137.040,349.702 136.689,349.390 153.919 C 349.051 172.659,349.288 171.627,345.259 171.918 C 339.738 172.318,340.016 173.309,339.894 152.782 C 339.782 133.944,339.979 134.800,335.764 134.800 C 332.106 134.800,331.600 134.450,331.600 131.917 C 331.600 128.967,332.246 128.400,335.613 128.400 L 338.301 128.400 339.102 126.500 C 339.542 125.455,340.220 123.610,340.610 122.400 C 341.469 119.729,341.629 119.612,344.400 119.612 C 345.610 119.612,346.781 119.744,347.001 119.906 M259.487 123.286 L 261.600 125.373 261.600 129.806 C 261.600 132.733,261.764 134.404,262.082 134.722 C 262.709 135.349,262.704 140.321,262.076 141.474 C 261.814 141.954,261.600 143.299,261.600 144.461 C 261.600 146.473,261.499 146.677,259.514 148.687 C 255.904 152.343,254.686 151.203,255.691 145.109 C 256.281 141.535,256.274 141.360,255.514 140.285 C 254.921 139.448,254.759 138.678,254.862 137.185 C 254.959 135.790,254.851 135.200,254.500 135.200 C 254.145 135.200,254.000 134.341,254.000 132.235 C 254.000 130.605,253.732 127.869,253.404 126.156 C 252.365 120.723,255.428 119.277,259.487 123.286 M39.200 123.351 C 39.200 123.874,39.470 124.526,39.800 124.800 C 40.748 125.587,40.665 133.812,39.703 134.350 C 38.560 134.990,39.329 135.208,40.960 134.708 C 42.431 134.256,42.470 134.197,42.202 132.821 C 42.050 132.039,41.800 129.960,41.648 128.200 C 41.302 124.195,39.200 120.032,39.200 123.351 M61.208 123.984 C 60.624 125.128,60.400 126.348,60.400 128.376 C 60.400 131.065,59.508 134.400,58.790 134.400 C 58.282 134.400,57.600 130.619,57.600 127.804 C 57.600 126.398,57.420 125.136,57.200 125.000 C 56.965 124.855,56.796 125.298,56.790 126.076 C 56.758 130.632,54.404 135.463,52.033 135.840 L 50.600 136.068 50.738 138.934 C 50.813 140.510,50.666 143.101,50.410 144.692 L 49.944 147.584 44.960 152.492 C 42.218 155.191,39.611 157.760,39.166 158.200 C 38.722 158.640,37.921 159.540,37.386 160.200 C 36.130 161.752,35.615 161.101,35.606 157.950 C 35.599 155.340,35.233 153.200,34.794 153.200 C 34.309 153.200,34.804 160.018,35.431 161.971 C 35.744 162.945,36.000 164.700,36.000 165.871 L 36.000 168.000 38.145 168.000 L 40.289 168.000 40.498 164.328 C 40.732 160.225,41.126 159.600,43.476 159.600 C 44.687 159.600,44.800 159.495,44.800 158.374 C 44.800 156.518,45.456 155.600,46.781 155.600 C 48.778 155.600,49.200 155.243,49.200 153.557 C 49.200 151.697,49.973 151.478,50.705 153.130 C 51.140 154.112,50.897 163.029,50.284 168.562 C 50.163 169.661,52.095 170.103,54.700 169.572 L 56.800 169.143 56.800 166.156 C 56.800 163.882,57.006 162.766,57.663 161.484 C 58.673 159.515,58.689 157.536,57.740 152.265 C 57.265 149.624,57.213 148.489,57.536 147.781 C 57.774 147.259,58.087 145.934,58.233 144.837 L 58.498 142.841 60.149 142.721 C 61.762 142.603,61.803 142.564,61.930 141.005 C 62.001 140.128,62.248 139.183,62.479 138.905 C 62.776 138.547,62.741 138.211,62.359 137.751 C 61.332 136.513,61.332 126.728,62.359 125.066 C 63.154 123.779,63.158 122.400,62.365 122.400 C 62.173 122.400,61.653 123.113,61.208 123.984 M44.667 127.400 C 44.512 129.380,44.283 131.917,44.158 133.037 C 43.897 135.383,44.679 136.634,46.160 136.237 C 46.622 136.112,47.343 136.008,47.762 136.005 C 48.454 136.001,48.468 135.936,47.913 135.300 C 47.576 134.915,47.188 133.970,47.049 133.200 C 46.909 132.430,46.527 131.284,46.198 130.654 C 45.869 130.024,45.579 128.764,45.553 127.854 C 45.442 124.001,44.953 123.750,44.667 127.400 M362.560 131.040 C 363.352 131.832,364.000 132.556,364.000 132.649 C 364.000 133.064,361.993 131.449,361.419 130.572 C 360.530 129.216,360.879 129.359,362.560 131.040 M390.932 135.032 C 390.813 135.344,390.850 135.915,391.017 136.300 C 391.183 136.685,391.278 138.171,391.228 139.603 C 391.174 141.162,391.388 142.927,391.763 144.003 C 392.107 144.991,392.391 146.385,392.394 147.100 C 392.399 148.182,392.552 148.400,393.304 148.400 C 393.801 148.400,394.701 148.857,395.304 149.416 C 395.907 149.975,396.400 150.245,396.400 150.016 C 396.400 149.787,397.030 149.600,397.800 149.600 C 398.650 149.600,399.202 149.404,399.206 149.100 C 399.210 148.767,399.342 148.800,399.600 149.200 C 399.858 149.599,399.990 147.290,399.994 142.300 L 400.000 134.800 396.300 134.769 C 394.265 134.753,392.274 134.677,391.875 134.601 C 391.477 134.525,391.052 134.719,390.932 135.032 M85.462 136.272 C 85.283 136.453,83.845 136.690,82.268 136.800 L 79.400 137.000 79.400 144.600 L 79.400 152.200 81.600 152.324 C 84.722 152.501,85.600 153.407,85.600 156.453 L 85.600 158.767 93.300 158.883 C 102.177 159.018,102.077 159.051,101.918 156.036 L 101.800 153.800 99.872 153.579 C 97.235 153.276,97.213 153.202,97.206 144.534 L 97.200 136.868 94.500 136.625 C 88.239 136.060,85.769 135.964,85.462 136.272 M179.120 136.880 C 179.947 137.707,179.654 138.000,178.000 138.000 C 176.310 138.000,175.933 137.512,177.100 136.832 C 178.031 136.290,178.542 136.302,179.120 136.880 M136.637 155.102 C 136.222 165.596,136.593 169.600,137.978 169.600 C 140.729 169.600,142.126 167.737,140.698 165.973 C 140.036 165.155,139.941 164.444,140.010 160.812 C 140.188 151.413,140.055 149.192,139.300 148.958 C 138.915 148.839,138.287 148.575,137.905 148.371 C 137.523 148.167,137.145 148.000,137.064 148.000 C 136.983 148.000,136.791 151.196,136.637 155.102 M204.920 153.680 C 204.553 154.144,203.837 160.477,203.979 162.000 C 204.232 164.712,203.655 166.215,202.720 165.280 C 201.921 164.481,197.841 164.671,197.051 165.544 C 196.491 166.163,196.092 166.233,194.689 165.962 C 192.297 165.499,187.294 165.524,187.000 166.000 C 186.616 166.621,186.000 166.472,186.000 165.758 C 186.000 165.405,185.550 164.581,185.000 163.927 C 184.450 163.273,183.994 162.257,183.987 161.669 C 183.980 161.081,183.710 160.251,183.387 159.824 C 183.064 159.396,182.800 158.348,182.800 157.493 C 182.800 153.889,177.329 151.804,176.785 155.200 C 176.662 155.970,176.669 157.050,176.801 157.600 C 177.022 158.519,176.156 161.578,175.485 162.248 C 175.328 162.405,175.200 163.505,175.200 164.693 C 175.200 165.881,174.975 167.246,174.700 167.726 C 174.425 168.207,174.153 169.860,174.095 171.400 C 174.037 172.940,173.891 176.622,173.771 179.581 C 173.591 184.028,173.670 185.267,174.224 186.718 C 174.908 188.509,174.592 190.400,173.609 190.400 C 173.381 190.400,173.200 191.349,173.200 192.538 C 173.200 193.714,172.844 195.739,172.410 197.038 C 171.975 198.337,171.615 199.985,171.610 200.700 C 171.604 201.415,171.447 202.000,171.259 202.000 C 170.844 202.000,170.406 196.728,170.402 191.700 C 170.400 188.437,170.297 187.897,169.530 187.130 C 167.345 184.945,166.328 181.907,165.617 175.442 C 165.153 171.223,164.447 170.280,161.515 169.959 C 160.305 169.826,159.098 169.584,158.834 169.421 C 157.565 168.636,156.454 169.531,156.898 170.980 C 157.234 172.075,157.185 172.724,156.661 174.095 C 156.298 175.047,156.000 176.123,156.000 176.486 C 156.000 178.347,153.335 180.789,152.600 179.600 C 152.464 179.380,151.444 179.200,150.334 179.200 C 148.764 179.200,148.051 178.978,147.127 178.200 C 146.183 177.405,145.498 177.200,143.793 177.200 C 142.613 177.200,141.523 176.999,141.372 176.754 C 141.207 176.488,140.472 176.392,139.542 176.517 C 138.257 176.689,137.912 176.583,137.545 175.897 C 136.866 174.629,135.621 176.432,135.609 178.700 C 135.599 180.673,135.424 180.758,134.165 179.400 C 133.476 178.656,132.830 178.400,131.648 178.400 C 130.773 178.400,129.816 178.158,129.520 177.863 C 129.225 177.568,128.582 177.112,128.092 176.849 C 127.601 176.587,127.200 176.104,127.200 175.776 C 127.200 175.448,126.750 175.009,126.200 174.800 C 125.210 174.424,125.097 174.133,125.033 171.800 C 125.000 170.606,124.985 170.598,122.000 170.277 C 115.951 169.626,115.600 169.776,115.600 173.030 C 115.600 175.377,115.095 176.879,113.794 178.400 C 112.390 180.041,111.873 182.353,112.171 185.651 C 113.227 197.299,113.186 197.600,110.552 197.600 C 108.208 197.600,108.137 197.020,109.033 185.287 C 109.298 181.814,108.939 180.167,107.574 178.600 C 106.398 177.250,105.600 174.808,105.600 172.559 C 105.600 170.606,105.511 170.393,104.601 170.164 C 102.859 169.727,102.539 170.144,102.253 173.218 C 102.105 174.807,101.787 176.893,101.545 177.854 L 101.105 179.600 85.167 179.600 C 66.923 179.600,68.412 179.256,68.386 183.474 C 68.378 184.753,68.114 186.250,67.800 186.800 C 67.454 187.406,67.223 188.944,67.214 190.700 L 67.200 193.600 65.810 193.600 C 64.682 193.600,64.308 193.818,63.822 194.757 C 63.365 195.642,62.869 195.961,61.712 196.115 C 59.611 196.396,56.265 197.632,55.880 198.269 C 55.691 198.583,54.831 198.800,53.780 198.800 L 52.000 198.800 52.000 200.837 C 52.000 202.268,51.762 203.176,51.200 203.891 C 50.609 204.643,50.400 205.514,50.400 207.230 C 50.400 209.842,50.200 210.100,48.441 209.748 C 47.398 209.540,47.200 209.316,47.200 208.350 C 47.200 206.845,45.791 206.743,45.127 208.200 C 44.877 208.750,44.430 209.200,44.136 209.200 C 43.841 209.200,43.600 209.524,43.600 209.920 C 43.600 210.842,42.842 211.600,41.920 211.600 C 41.482 211.600,41.200 211.894,41.200 212.351 C 41.200 212.764,40.930 213.326,40.600 213.600 C 40.270 213.874,40.000 214.492,40.000 214.973 C 40.000 215.454,39.736 216.196,39.413 216.624 C 39.090 217.051,38.820 218.053,38.813 218.851 C 38.793 221.099,38.181 221.366,34.308 220.813 C 32.430 220.545,28.060 220.397,24.200 220.470 L 17.400 220.600 17.292 229.572 C 17.209 236.482,17.301 238.617,17.692 238.865 C 18.651 239.474,31.339 239.257,33.200 238.600 C 35.479 237.796,35.644 237.831,35.190 239.026 C 34.366 241.193,34.697 270.183,35.555 270.959 C 36.251 271.589,38.157 271.636,60.055 271.559 C 76.647 271.501,84.342 271.612,85.600 271.928 C 86.590 272.177,88.468 272.385,89.774 272.390 C 91.347 272.397,92.730 272.682,93.874 273.236 L 95.600 274.071 95.600 290.359 C 95.600 303.788,95.500 306.783,95.033 307.424 C 94.496 308.158,93.804 308.207,82.233 308.322 L 70.000 308.443 70.000 316.342 C 70.000 321.951,69.861 324.379,69.520 324.720 C 69.177 325.063,66.628 325.200,60.587 325.200 C 51.245 325.200,51.668 325.122,51.914 326.798 L 52.091 328.000 59.230 328.000 C 68.285 328.000,68.000 327.804,68.000 334.023 L 68.000 338.295 69.500 338.543 C 70.325 338.680,79.505 338.793,89.900 338.796 L 108.800 338.800 108.800 323.600 L 108.800 308.400 105.029 308.400 C 99.607 308.400,99.921 309.074,100.074 297.765 C 100.212 287.516,100.175 287.661,102.752 287.316 C 104.258 287.114,104.400 286.994,104.400 285.921 C 104.400 284.116,105.067 283.200,106.381 283.200 C 108.502 283.200,108.800 282.885,108.800 280.642 C 108.800 278.685,108.911 278.461,110.800 276.600 C 112.540 274.886,112.801 274.420,112.806 273.015 C 112.817 270.108,112.419 270.215,123.743 270.065 L 133.916 269.930 134.058 262.133 C 134.235 252.402,133.481 253.200,142.503 253.200 C 150.417 253.200,150.800 253.321,150.800 255.814 L 150.800 257.600 152.586 257.600 C 153.942 257.600,154.471 257.786,154.786 258.374 C 155.323 259.378,155.336 270.269,154.800 270.600 C 154.027 271.078,154.411 271.613,155.357 271.375 C 155.916 271.235,156.858 271.416,157.622 271.811 C 158.883 272.464,158.953 272.458,159.565 271.660 C 159.941 271.170,160.887 270.724,161.881 270.568 L 163.563 270.304 163.706 268.052 L 163.849 265.800 163.924 268.100 C 164.002 270.454,164.593 271.166,165.028 269.429 C 165.662 266.904,168.033 266.255,168.977 268.349 C 169.630 269.796,170.258 270.557,172.977 273.192 L 174.000 274.183 174.000 293.478 C 174.000 310.746,173.929 312.921,173.326 314.186 C 172.704 315.491,172.056 316.019,171.960 315.300 C 171.938 315.135,171.771 313.290,171.589 311.200 C 171.127 305.900,170.839 304.699,170.099 304.983 C 168.248 305.694,166.800 304.343,166.800 301.906 C 166.800 299.452,165.741 296.783,163.707 294.115 C 163.169 293.408,162.629 292.089,162.507 291.183 C 162.365 290.125,162.171 289.723,161.965 290.057 C 161.708 290.472,161.605 290.458,161.457 289.989 C 161.354 289.665,161.075 288.788,160.835 288.040 C 160.596 287.292,160.397 285.852,160.394 284.840 C 160.391 283.828,160.213 282.730,160.000 282.400 C 159.727 281.977,159.605 282.569,159.589 284.400 C 159.577 285.830,159.242 288.348,158.845 289.996 C 158.210 292.629,158.188 293.234,158.657 294.996 C 158.950 296.098,159.193 298.629,159.195 300.620 C 159.198 302.611,159.388 304.428,159.617 304.657 C 159.906 304.946,159.845 305.231,159.417 305.586 C 158.627 306.242,158.638 306.758,159.463 307.670 C 160.077 308.348,160.078 308.572,159.481 310.701 C 158.464 314.329,158.406 316.267,159.206 319.930 C 159.707 322.221,159.828 323.573,159.576 324.045 C 159.369 324.431,159.200 325.631,159.200 326.710 C 159.200 327.790,158.960 329.470,158.667 330.445 C 157.772 333.418,158.443 337.910,159.989 339.300 C 161.359 340.532,162.000 340.691,162.000 339.800 C 162.000 339.369,162.440 339.200,163.557 339.200 C 165.322 339.200,165.588 338.822,165.623 336.267 C 165.651 334.212,166.885 329.355,167.546 328.694 C 168.439 327.801,168.786 329.228,168.836 334.000 C 168.919 342.004,169.173 343.184,170.566 342.029 C 170.895 341.755,171.338 341.638,171.550 341.769 C 171.762 341.900,172.145 341.374,172.400 340.600 L 172.865 339.192 173.994 339.996 C 175.973 341.405,177.166 340.210,177.187 336.797 C 177.194 335.586,177.365 334.021,177.566 333.319 C 177.802 332.497,177.790 331.997,177.532 331.911 C 176.762 331.654,176.367 323.236,177.019 320.992 C 178.464 316.023,178.799 312.315,178.799 301.274 C 178.800 288.907,178.839 288.708,181.147 289.324 C 182.441 289.670,182.903 289.625,183.746 289.072 C 184.310 288.702,185.228 288.400,185.786 288.400 C 186.748 288.400,186.800 288.287,186.800 286.216 C 186.800 283.585,187.862 282.238,189.724 282.506 C 190.625 282.636,190.958 282.454,191.406 281.588 C 192.118 280.212,195.458 279.607,196.300 280.703 C 196.751 281.290,196.800 281.277,196.800 280.573 C 196.800 280.144,197.160 279.568,197.600 279.293 C 198.040 279.018,198.400 278.580,198.400 278.318 C 198.400 278.057,198.886 277.336,199.481 276.716 C 200.477 275.676,200.529 275.463,200.142 274.013 C 199.801 272.737,199.830 272.397,200.293 272.219 C 201.980 271.572,203.200 272.982,203.200 275.576 C 203.200 276.663,203.380 277.664,203.600 277.800 C 204.066 278.088,204.101 277.083,203.743 273.659 C 203.535 271.667,203.351 271.200,202.776 271.200 C 200.897 271.200,200.802 270.957,200.770 266.057 C 200.737 261.020,199.972 255.078,199.463 255.900 C 199.273 256.206,198.261 256.400,196.856 256.400 C 195.593 256.400,194.344 256.616,194.080 256.880 C 193.707 257.253,193.600 257.231,193.600 256.780 C 193.601 256.285,192.069 256.217,183.158 256.319 C 170.439 256.464,171.794 257.534,171.414 247.050 C 171.255 242.647,171.062 238.720,170.985 238.323 C 170.791 237.313,169.782 235.951,169.464 236.269 C 169.319 236.414,169.200 236.227,169.200 235.853 C 169.200 235.478,168.892 234.701,168.515 234.126 C 167.848 233.108,167.851 233.092,168.631 233.510 C 169.374 233.907,169.420 233.834,169.264 232.500 C 168.954 229.845,167.585 227.818,165.998 227.667 C 164.151 227.492,163.600 226.970,163.600 225.397 C 163.600 224.446,163.328 223.914,162.600 223.437 L 161.600 222.782 161.600 214.191 C 161.600 203.904,161.561 204.000,165.757 204.000 C 168.824 204.000,168.800 203.962,168.800 208.833 C 168.800 212.369,169.039 212.958,170.000 211.800 C 170.581 211.100,171.600 211.000,171.600 211.643 C 171.600 213.163,173.439 216.023,174.282 215.813 C 176.572 215.244,177.200 214.813,177.200 213.810 C 177.200 212.670,177.663 212.512,178.400 213.400 C 179.323 214.512,182.837 212.975,183.395 211.215 C 183.897 209.633,185.126 210.231,185.421 212.200 C 185.720 214.193,185.967 214.386,186.706 213.202 C 186.980 212.763,187.878 212.088,188.702 211.701 C 190.144 211.025,190.207 210.909,190.400 208.599 L 190.600 206.200 193.000 205.886 C 200.497 204.905,200.771 204.684,200.829 199.572 C 200.923 191.278,202.517 189.800,202.990 197.569 C 203.169 200.517,203.472 202.225,203.988 203.200 C 204.913 204.946,205.599 208.592,205.602 211.773 C 205.606 215.956,206.149 217.200,207.972 217.200 C 209.807 217.200,209.933 216.897,209.684 213.100 L 209.507 210.400 207.961 210.400 C 206.685 210.400,206.380 210.243,206.212 209.500 C 205.097 204.570,204.654 202.123,204.383 199.400 C 203.880 194.359,202.778 189.600,202.115 189.600 C 202.011 189.600,201.465 189.963,200.902 190.406 C 199.610 191.422,199.454 191.250,199.800 189.202 C 200.098 187.434,201.159 186.655,202.712 187.061 C 203.937 187.381,204.096 186.710,204.057 181.412 L 204.020 176.499 205.631 176.241 C 208.292 175.816,211.668 171.574,209.810 170.991 C 209.474 170.886,208.910 170.708,208.555 170.595 C 208.068 170.441,208.018 170.260,208.351 169.858 C 208.594 169.566,208.660 169.193,208.497 169.031 C 208.333 168.868,208.110 165.285,208.000 161.068 L 207.800 153.400 206.566 153.280 C 205.887 153.213,205.147 153.393,204.920 153.680 M394.190 158.780 C 394.525 159.429,394.800 160.322,394.800 160.765 C 394.800 161.208,395.151 162.522,395.580 163.685 C 396.922 167.327,396.849 168.015,395.049 168.648 C 393.464 169.206,390.400 169.009,390.400 168.349 C 390.400 168.157,390.040 168.000,389.600 168.000 C 388.492 168.000,388.597 167.257,389.768 166.812 C 390.486 166.539,390.681 166.231,390.522 165.622 C 390.172 164.285,389.216 164.679,388.389 166.500 C 387.965 167.435,387.614 167.966,387.609 167.680 C 387.591 166.645,388.861 164.757,389.819 164.393 C 390.702 164.057,390.800 163.792,390.800 161.736 C 390.800 158.176,392.921 156.327,394.190 158.780 M187.600 168.629 C 187.600 169.587,186.375 170.002,185.412 169.371 C 184.067 168.490,184.122 168.400,186.000 168.400 C 186.880 168.400,187.600 168.503,187.600 168.629 M34.164 170.011 C 33.644 170.191,33.336 170.776,33.200 171.838 L 33.000 173.400 25.489 173.509 L 17.979 173.618 17.342 174.953 C 16.643 176.419,14.919 177.352,12.075 177.804 C 10.758 178.014,10.264 178.306,9.985 179.039 C 9.784 179.568,9.352 180.000,9.024 180.000 C 7.939 180.000,7.553 181.390,8.205 182.951 C 9.141 185.190,8.969 185.883,7.200 187.000 L 5.600 188.010 5.600 213.362 C 5.600 236.111,5.665 238.739,6.233 238.957 C 7.054 239.272,12.146 239.272,12.967 238.957 C 13.516 238.747,13.600 237.615,13.600 230.427 L 13.600 222.139 14.596 221.204 L 15.591 220.269 15.696 204.234 L 15.800 188.200 24.544 188.092 C 31.485 188.006,33.462 187.862,34.133 187.392 C 34.654 187.027,35.910 186.800,37.413 186.800 C 40.812 186.800,41.144 186.447,41.241 182.723 C 41.301 180.430,41.153 179.388,40.661 178.637 C 39.754 177.253,39.705 171.600,40.600 171.600 C 41.551 171.600,41.296 170.435,40.300 170.228 C 38.599 169.875,34.927 169.745,34.164 170.011 M395.200 170.070 C 395.200 170.252,394.525 170.430,393.700 170.467 L 392.200 170.534 393.670 170.690 C 395.621 170.896,396.425 171.806,394.977 172.170 C 394.402 172.314,393.587 172.323,393.166 172.189 C 392.605 172.011,392.400 172.139,392.400 172.665 C 392.400 176.163,389.800 178.625,387.344 177.454 C 386.590 177.094,385.659 176.800,385.275 176.800 C 383.211 176.800,381.555 171.238,383.251 170.000 C 383.723 169.655,395.200 169.723,395.200 170.070 M191.677 171.000 C 193.030 171.550,194.400 172.000,194.720 172.000 C 195.184 172.000,195.243 172.346,195.014 173.700 C 194.855 174.635,194.602 176.881,194.453 178.691 C 194.196 181.792,194.094 182.070,192.690 183.508 C 191.871 184.347,191.200 185.196,191.200 185.395 C 191.200 185.963,189.108 188.000,188.525 188.000 C 188.236 188.000,188.000 188.410,188.000 188.911 C 188.000 190.941,185.926 192.357,184.851 191.062 C 183.607 189.562,184.382 186.400,185.994 186.400 C 186.591 186.400,186.192 182.078,185.523 181.307 C 183.357 178.808,182.897 172.388,184.827 171.589 C 185.650 171.248,185.892 170.981,185.562 170.777 C 185.235 170.574,185.393 170.412,186.035 170.291 C 188.142 169.894,189.318 170.041,191.677 171.000 M381.082 174.900 C 380.987 175.395,380.909 174.990,380.909 174.000 C 380.909 173.010,380.987 172.605,381.082 173.100 C 381.178 173.595,381.178 174.405,381.082 174.900 M78.216 188.026 C 78.977 189.257,77.987 191.200,76.600 191.200 C 75.363 191.200,75.212 191.072,74.978 189.826 C 74.642 188.034,74.958 187.600,76.600 187.600 C 77.344 187.600,78.071 187.792,78.216 188.026 M129.711 192.100 C 129.965 196.684,129.610 197.600,127.581 197.600 C 126.151 197.600,126.000 197.108,126.000 192.434 C 126.000 188.009,126.004 188.000,128.009 188.000 L 129.484 188.000 129.711 192.100 M129.363 202.523 C 130.002 202.991,130.025 203.225,129.576 204.723 C 129.175 206.062,129.173 206.734,129.570 208.056 C 130.144 209.973,129.823 210.384,127.743 210.394 C 126.183 210.401,126.000 209.962,126.000 206.200 C 126.000 201.995,127.058 200.838,129.363 202.523 M70.485 203.546 C 72.554 205.739,80.642 205.743,82.710 203.552 C 83.874 202.319,84.632 202.093,84.899 202.900 C 85.014 203.247,86.768 203.496,90.633 203.715 C 100.320 204.263,103.322 204.323,102.748 203.959 C 101.821 203.372,102.802 203.563,104.256 204.253 C 105.027 204.619,106.328 205.879,107.216 207.118 C 108.087 208.335,108.800 209.193,108.800 209.026 C 108.800 208.858,109.444 209.101,110.231 209.565 C 111.018 210.029,111.828 210.307,112.031 210.181 C 112.234 210.055,112.409 210.278,112.421 210.676 C 112.439 211.291,112.541 211.258,113.099 210.456 C 114.005 209.155,116.916 207.348,117.120 207.960 C 117.235 208.304,117.421 208.314,117.801 207.999 C 118.662 207.285,120.298 207.945,120.611 209.135 C 120.871 210.122,120.916 210.141,121.218 209.400 L 121.544 208.600 121.586 209.400 C 121.627 210.176,124.796 215.751,124.799 215.051 C 124.799 214.859,125.062 214.919,125.382 215.185 C 125.874 215.593,126.005 215.353,126.233 213.634 C 126.754 209.705,130.000 211.971,130.000 216.263 C 130.000 216.646,130.253 216.684,130.975 216.410 C 131.792 216.099,131.970 216.168,132.075 216.833 C 132.195 217.595,132.286 217.582,134.334 216.524 C 136.995 215.149,137.095 214.953,137.655 210.030 L 138.113 206.000 141.447 206.000 L 144.782 206.000 144.891 213.300 L 145.000 220.600 146.800 220.920 C 147.790 221.095,149.500 221.365,150.600 221.520 C 152.930 221.846,153.055 222.249,151.430 224.197 C 150.581 225.216,149.940 225.600,149.088 225.600 C 148.127 225.600,147.170 226.359,143.791 229.800 C 139.541 234.128,138.197 234.872,137.828 233.100 C 137.725 232.605,137.375 231.030,137.050 229.600 C 136.726 228.170,136.331 226.370,136.174 225.600 C 135.928 224.402,135.841 224.316,135.571 225.000 C 135.398 225.440,135.244 225.575,135.228 225.300 C 135.191 224.645,134.457 224.671,133.107 225.375 C 132.455 225.715,131.919 225.792,131.779 225.566 C 131.648 225.355,131.089 225.544,130.518 225.993 C 129.954 226.437,129.320 226.800,129.109 226.800 C 128.899 226.800,128.269 227.160,127.709 227.600 C 127.150 228.040,126.351 228.400,125.935 228.400 C 125.518 228.400,124.123 228.932,122.835 229.582 C 120.957 230.531,119.753 230.818,116.747 231.038 C 113.968 231.240,112.536 231.555,111.203 232.256 C 110.215 232.775,108.921 233.200,108.327 233.200 C 107.169 233.200,106.468 233.818,107.298 234.107 C 107.574 234.204,106.858 234.416,105.707 234.578 C 103.941 234.827,103.397 234.740,102.232 234.020 C 100.744 233.100,86.450 232.896,84.634 233.768 C 84.065 234.042,83.947 234.010,84.173 233.644 C 84.546 233.040,80.653 233.363,77.068 234.234 C 75.785 234.545,73.874 234.800,72.822 234.800 C 71.576 234.800,70.575 235.057,69.954 235.536 C 67.932 237.096,64.804 237.633,63.500 236.643 C 62.880 236.173,62.800 235.310,62.800 229.118 C 62.800 221.485,62.822 221.561,60.300 220.486 L 59.200 220.017 59.200 213.232 C 59.200 208.802,59.350 206.354,59.632 206.180 C 60.401 205.705,64.557 204.829,66.113 204.814 C 67.075 204.805,67.708 204.583,67.854 204.202 C 67.981 203.874,68.245 203.704,68.442 203.826 C 68.639 203.948,68.800 203.677,68.800 203.224 C 68.800 202.110,69.201 202.187,70.485 203.546 M387.294 209.518 C 386.362 211.720,385.600 213.720,385.600 213.961 C 385.600 214.203,385.357 214.400,385.061 214.400 C 384.764 214.400,384.233 215.075,383.880 215.900 C 383.527 216.725,382.875 218.030,382.430 218.800 C 381.986 219.570,381.516 221.058,381.385 222.108 C 381.255 223.157,380.993 223.919,380.803 223.802 C 380.613 223.684,380.349 223.931,380.216 224.351 C 379.750 225.818,375.801 225.741,375.388 224.256 C 375.257 223.785,374.998 223.040,374.813 222.600 C 374.628 222.160,374.258 220.180,373.990 218.200 C 373.723 216.220,373.255 213.584,372.952 212.342 C 372.648 211.101,372.400 209.166,372.400 208.042 L 372.400 206.000 369.845 206.000 L 367.290 206.000 367.134 208.771 C 366.966 211.731,366.394 212.777,364.425 213.718 C 363.861 213.988,363.040 214.883,362.600 215.707 C 362.160 216.531,361.447 217.318,361.015 217.456 C 360.267 217.696,357.200 220.532,357.200 220.984 C 357.200 221.103,357.785 221.218,358.500 221.241 L 359.800 221.282 358.600 221.621 C 357.940 221.807,356.917 222.059,356.326 222.181 C 355.652 222.320,354.831 223.025,354.126 224.071 C 353.507 224.989,352.460 226.035,351.800 226.396 C 351.140 226.756,350.255 227.684,349.833 228.458 C 349.411 229.232,348.425 230.211,347.642 230.633 C 346.860 231.055,346.019 231.804,345.774 232.297 C 343.705 236.469,342.397 235.625,341.402 229.476 C 341.249 228.533,340.612 227.352,339.731 226.376 L 338.307 224.800 333.938 224.800 C 329.226 224.800,327.119 224.162,325.852 222.353 C 324.726 220.745,322.956 223.950,323.311 226.955 C 323.375 227.494,323.001 227.848,322.000 228.195 C 320.776 228.619,320.598 228.852,320.581 230.040 C 320.571 230.788,320.416 231.717,320.237 232.105 C 320.057 232.493,320.028 233.393,320.171 234.105 C 320.315 234.817,320.483 235.940,320.546 236.600 C 320.609 237.260,320.692 238.101,320.730 238.468 C 320.840 239.522,322.760 239.692,326.941 239.020 C 329.059 238.679,332.425 238.400,334.422 238.400 C 336.419 238.400,338.416 238.205,338.861 237.968 C 339.945 237.387,340.321 237.850,339.463 238.710 C 338.983 239.191,337.840 239.471,335.687 239.634 L 332.600 239.868 335.851 239.934 C 338.373 239.985,339.219 239.859,339.622 239.374 C 340.983 237.734,343.650 237.148,345.024 238.187 C 345.467 238.523,346.688 238.780,347.873 238.787 C 350.394 238.803,350.515 239.045,350.352 243.765 C 350.263 246.326,350.388 247.323,350.896 248.097 C 351.305 248.721,351.583 250.069,351.629 251.651 C 351.688 253.695,351.867 254.331,352.532 254.862 C 353.445 255.592,353.563 260.368,352.770 264.555 C 352.567 265.630,352.400 267.565,352.400 268.855 C 352.400 271.183,352.392 271.200,351.224 271.200 C 349.660 271.200,349.291 271.902,350.594 272.398 C 351.167 272.616,351.607 273.020,351.571 273.297 C 351.535 273.574,351.527 277.085,351.553 281.100 L 351.600 288.400 356.400 288.400 L 361.200 288.400 361.250 281.200 C 361.278 277.240,361.322 273.775,361.350 273.500 C 361.378 273.225,362.276 272.784,363.347 272.519 C 364.418 272.255,365.324 271.985,365.359 271.919 C 366.160 270.439,366.800 268.515,366.800 267.586 C 366.800 266.470,366.894 266.400,368.390 266.400 C 369.764 266.400,370.067 266.231,370.622 265.157 C 371.174 264.090,371.429 263.946,372.410 264.142 C 373.931 264.446,374.003 264.151,374.177 256.931 C 374.256 253.669,374.515 250.045,374.754 248.877 C 374.993 247.709,375.236 245.054,375.294 242.977 L 375.400 239.201 377.520 239.200 C 381.012 239.200,382.464 238.124,382.110 235.798 C 382.009 235.137,382.214 233.491,382.564 232.140 C 382.914 230.790,383.200 228.580,383.200 227.229 C 383.200 223.047,384.538 221.146,387.041 221.775 C 387.960 222.005,388.008 222.145,387.776 223.911 C 387.601 225.238,387.788 226.811,388.405 229.200 C 388.888 231.070,389.309 233.690,389.341 235.022 C 389.395 237.243,389.499 237.509,390.600 238.227 C 391.601 238.881,391.817 239.308,391.901 240.805 C 392.104 244.377,392.368 245.200,393.318 245.205 C 395.769 245.221,396.102 245.562,395.912 247.858 C 395.793 249.291,395.884 250.000,396.187 250.000 C 397.079 250.000,397.600 249.012,397.600 247.320 C 397.600 245.676,397.653 245.600,398.800 245.600 L 400.000 245.600 400.000 241.488 L 400.000 237.375 398.801 236.923 C 398.141 236.674,397.476 236.143,397.323 235.744 C 396.823 234.439,394.464 232.400,393.456 232.400 C 392.128 232.400,392.000 231.858,392.000 226.247 C 392.000 221.169,391.773 220.400,390.273 220.400 C 389.674 220.400,389.559 220.204,389.748 219.500 C 390.989 214.860,390.897 210.194,389.497 206.761 L 388.987 205.513 387.294 209.518 M157.498 216.480 C 157.426 218.526,157.366 216.960,157.365 213.000 C 157.365 209.040,157.424 207.366,157.498 209.280 C 157.571 211.194,157.571 214.434,157.498 216.480 M149.098 216.700 C 149.025 218.625,148.965 217.050,148.965 213.200 C 148.965 209.350,149.025 207.775,149.098 209.700 C 149.171 211.625,149.171 214.775,149.098 216.700 M151.900 220.676 C 151.515 220.776,150.885 220.776,150.500 220.676 C 150.115 220.575,150.430 220.493,151.200 220.493 C 151.970 220.493,152.285 220.575,151.900 220.676 M155.743 221.805 C 155.615 222.138,155.746 222.723,156.033 223.105 C 156.524 223.758,156.511 223.759,155.823 223.131 C 155.193 222.555,155.159 221.200,155.775 221.200 C 155.885 221.200,155.870 221.472,155.743 221.805 M54.800 229.600 L 54.800 237.200 53.400 237.200 L 52.000 237.200 52.000 229.600 L 52.000 222.000 53.400 222.000 L 54.800 222.000 54.800 229.600 M294.400 222.274 C 294.400 223.026,292.545 224.400,291.530 224.400 C 290.541 224.400,290.400 224.250,290.400 223.200 C 290.400 222.027,290.444 222.000,292.400 222.000 C 293.500 222.000,294.400 222.123,294.400 222.274 M222.243 225.433 C 222.109 225.781,221.994 227.086,221.986 228.333 C 221.978 229.580,221.714 231.050,221.400 231.600 C 220.617 232.969,220.608 234.007,221.387 232.976 C 221.710 232.549,221.980 232.380,221.987 232.600 C 221.995 232.856,224.626 232.957,229.300 232.881 C 236.471 232.765,236.613 232.778,237.335 233.669 L 238.070 234.575 237.935 233.388 L 237.800 232.200 230.000 231.987 L 222.200 231.774 229.871 231.687 L 237.542 231.600 238.371 232.654 C 239.339 233.885,239.461 236.086,238.600 236.800 C 238.166 237.160,238.000 237.170,238.000 236.835 C 238.000 236.521,237.775 236.490,237.300 236.739 C 236.915 236.942,235.841 237.233,234.914 237.386 C 233.986 237.540,232.581 238.179,231.791 238.807 C 231.001 239.435,230.157 240.014,229.916 240.095 C 229.233 240.322,228.862 244.196,229.447 244.996 C 229.839 245.532,229.832 245.974,229.415 247.156 C 228.921 248.558,228.957 248.739,230.046 250.335 C 230.681 251.266,231.200 252.389,231.200 252.830 C 231.200 253.271,231.584 254.152,232.054 254.788 C 232.669 255.619,232.823 256.203,232.604 256.871 C 232.437 257.382,232.154 259.060,231.975 260.600 C 231.421 265.364,230.974 267.508,230.389 268.214 C 229.575 269.194,229.561 271.598,230.368 271.606 C 230.923 271.612,230.927 271.662,230.400 272.021 C 229.970 272.314,230.253 272.354,231.400 272.163 C 232.280 272.016,233.228 271.715,233.507 271.493 C 234.231 270.918,237.600 270.693,237.600 271.220 C 237.600 271.455,237.799 271.524,238.043 271.374 C 238.344 271.187,238.395 271.386,238.201 271.998 C 238.041 272.500,238.127 273.289,238.394 273.789 C 238.798 274.544,238.711 275.003,237.836 276.728 C 237.098 278.185,236.800 279.401,236.800 280.954 C 236.800 284.310,236.717 284.400,233.619 284.400 C 230.207 284.400,229.600 283.849,229.600 280.749 C 229.600 278.318,229.144 277.600,227.600 277.600 C 227.028 277.600,226.344 277.384,226.080 277.120 C 225.707 276.747,225.584 277.347,225.530 279.820 C 225.490 281.646,225.403 282.234,225.325 281.200 C 225.074 277.872,224.928 277.600,223.400 277.600 C 221.872 277.600,221.726 277.872,221.475 281.200 C 221.396 282.250,221.311 281.688,221.270 279.851 C 221.210 277.138,221.119 276.769,220.615 277.187 C 220.253 277.488,219.113 277.621,217.619 277.536 C 215.812 277.434,215.153 277.542,214.990 277.967 C 214.825 278.399,214.663 278.423,214.307 278.067 C 214.050 277.810,212.796 277.600,211.520 277.600 C 210.019 277.600,209.200 277.435,209.200 277.133 C 209.200 276.877,209.078 276.788,208.929 276.937 C 208.669 277.197,207.904 285.185,207.876 287.934 C 207.869 288.668,208.089 289.408,208.365 289.578 C 209.116 290.042,235.644 290.340,237.878 289.909 C 238.935 289.706,241.330 289.382,243.200 289.189 C 245.070 288.996,247.510 288.720,248.622 288.576 L 250.645 288.313 250.475 285.966 C 250.354 284.287,250.511 283.133,251.030 281.910 C 251.703 280.322,251.746 278.763,251.635 260.100 L 251.516 240.000 253.058 239.954 C 253.906 239.928,254.240 239.828,253.800 239.731 C 251.705 239.270,250.707 238.684,251.379 238.308 C 251.737 238.107,252.530 238.053,253.140 238.187 C 254.382 238.460,256.203 237.020,255.312 236.469 C 255.061 236.314,254.798 235.380,254.728 234.393 C 254.612 232.772,254.495 232.588,253.500 232.473 C 252.895 232.404,252.397 232.224,252.394 232.073 C 252.370 230.988,251.690 230.818,249.866 231.439 C 247.581 232.218,246.800 231.788,246.800 229.751 C 246.800 228.817,246.615 228.400,246.200 228.400 C 245.803 228.400,245.600 228.797,245.600 229.573 C 245.600 230.870,245.497 230.925,241.838 231.576 C 238.879 232.102,238.579 231.869,238.229 228.771 C 237.785 224.848,237.679 224.800,229.443 224.800 C 223.468 224.800,222.451 224.889,222.243 225.433 M155.363 228.600 C 155.822 229.300,156.380 229.600,157.223 229.600 C 159.209 229.600,164.293 234.904,163.582 236.234 C 162.880 237.545,163.202 237.741,166.315 237.906 C 171.351 238.171,171.462 238.529,169.800 249.200 C 169.004 254.309,168.732 254.894,167.234 254.720 C 166.318 254.614,166.186 254.397,166.073 252.819 C 165.987 251.614,165.696 250.862,165.173 250.496 C 164.748 250.198,164.400 249.624,164.400 249.221 C 164.400 248.777,164.015 248.390,163.427 248.242 C 162.891 248.108,162.339 247.639,162.200 247.200 C 161.917 246.309,160.465 245.798,159.282 246.174 C 158.728 246.350,158.316 246.131,157.843 245.410 C 156.639 243.571,153.600 244.300,153.600 246.427 C 153.600 247.086,153.330 248.272,153.000 249.062 C 152.670 249.851,152.400 250.851,152.400 251.282 C 152.400 251.732,152.187 251.996,151.900 251.900 C 151.531 251.777,151.400 250.227,151.400 245.978 L 151.400 240.223 153.200 239.533 L 155.000 238.844 153.344 238.822 C 150.428 238.783,148.800 241.655,148.800 246.838 C 148.800 249.624,147.624 250.800,144.838 250.800 C 143.738 250.800,141.822 251.065,140.578 251.389 C 136.382 252.482,135.380 251.209,135.079 244.400 C 134.857 239.386,134.882 239.296,136.629 238.968 C 137.383 238.827,138.000 238.478,138.000 238.193 C 138.000 237.849,138.730 237.628,140.168 237.537 C 142.523 237.388,142.631 237.545,140.671 238.271 C 139.617 238.661,140.152 238.703,143.800 238.516 C 148.739 238.263,149.352 238.003,148.982 236.320 C 148.652 234.814,149.360 234.000,151.000 234.000 C 152.651 234.000,153.030 233.501,153.361 230.895 C 153.813 227.341,154.227 226.866,155.363 228.600 M101.477 234.437 C 101.724 234.684,101.823 235.551,101.705 236.433 C 101.590 237.291,101.654 238.219,101.848 238.496 C 102.512 239.446,101.892 271.170,101.200 271.625 C 100.576 272.036,98.787 271.972,89.400 271.201 C 86.163 270.935,73.672 270.712,59.800 270.671 L 35.800 270.600 35.695 255.353 C 35.602 241.830,35.662 240.046,36.226 239.579 C 37.369 238.630,37.588 239.923,37.594 247.686 C 37.600 254.674,37.651 255.199,38.374 255.586 C 39.616 256.251,63.384 256.143,63.942 255.469 C 64.221 255.133,64.422 252.036,64.491 247.017 L 64.600 239.094 74.732 239.047 C 86.133 238.994,86.330 238.942,85.803 236.093 C 85.670 235.374,85.671 234.609,85.804 234.393 C 86.152 233.831,100.912 233.872,101.477 234.437 M134.383 239.632 C 133.920 240.497,123.362 240.695,122.521 239.854 C 121.985 239.319,122.873 239.158,128.415 238.785 C 131.560 238.574,134.234 238.299,134.358 238.175 C 134.818 237.716,134.836 238.786,134.383 239.632 M276.311 239.023 C 277.926 240.154,277.243 244.667,275.044 247.400 L 274.400 248.200 273.782 247.400 C 273.098 246.513,272.199 243.519,271.828 240.889 C 271.500 238.562,274.104 237.477,276.311 239.023 M373.600 241.000 C 373.600 241.512,372.489 241.600,366.000 241.600 C 359.511 241.600,358.400 241.512,358.400 241.000 C 358.400 240.488,359.511 240.400,366.000 240.400 C 372.489 240.400,373.600 240.488,373.600 241.000 M205.443 256.476 C 204.305 260.434,204.000 262.528,204.000 266.394 L 204.000 270.800 205.724 270.800 C 208.806 270.800,208.835 270.723,208.710 262.998 L 208.600 256.200 207.097 256.076 C 206.113 255.994,205.541 256.132,205.443 256.476 M275.631 258.431 C 274.954 259.108,274.400 259.947,274.400 260.296 C 274.400 260.796,277.982 257.813,277.997 257.300 C 278.013 256.779,276.614 257.448,275.631 258.431 M308.501 265.089 C 306.830 265.297,306.419 266.121,306.502 269.099 C 306.576 271.783,306.047 272.800,304.575 272.800 C 303.483 272.800,302.901 273.481,303.832 273.670 C 304.394 273.784,304.467 274.674,304.421 280.840 L 304.368 287.881 305.844 289.007 L 307.320 290.133 307.096 300.766 C 306.973 306.615,306.958 311.850,307.063 312.400 L 307.254 313.400 314.927 313.269 C 323.935 313.115,324.000 313.090,324.000 309.724 C 324.000 308.351,323.748 307.186,323.302 306.507 C 322.501 305.284,322.466 299.084,323.256 298.133 C 324.066 297.157,326.642 297.473,327.579 298.664 C 328.109 299.338,328.963 299.817,329.908 299.971 C 331.319 300.200,331.413 300.308,331.635 301.971 C 332.021 304.851,333.663 306.016,337.095 305.845 L 339.800 305.710 340.300 301.955 C 341.192 295.257,340.920 283.290,339.858 282.479 C 339.323 282.069,325.251 282.847,324.500 283.327 C 324.187 283.528,324.000 284.587,324.000 286.162 C 324.000 289.679,323.411 290.172,319.736 289.729 L 317.000 289.400 316.887 281.400 C 316.740 271.063,316.557 271.665,319.903 271.518 L 322.600 271.400 322.719 268.895 C 322.860 265.944,322.650 265.772,319.523 266.270 C 317.123 266.652,313.128 266.197,311.538 265.359 C 310.954 265.052,310.324 264.829,310.138 264.864 C 309.952 264.899,309.215 265.001,308.501 265.089 M209.037 272.648 C 208.839 273.164,208.973 273.247,209.694 273.054 C 210.192 272.920,210.960 272.791,211.400 272.766 C 212.067 272.728,212.033 272.667,211.200 272.400 C 209.660 271.907,209.306 271.947,209.037 272.648 M61.600 273.200 C 60.858 273.942,60.800 274.533,60.800 281.324 C 60.800 290.103,60.721 289.922,64.600 290.050 C 68.380 290.175,68.387 290.160,68.394 281.100 C 68.399 275.697,68.520 273.997,68.900 273.987 C 69.175 273.979,68.975 273.619,68.456 273.187 C 67.096 272.054,62.738 272.062,61.600 273.200 M109.269 273.062 C 110.335 274.027,110.204 274.401,108.100 276.425 C 107.055 277.431,105.877 278.736,105.481 279.326 C 104.622 280.611,104.255 280.655,103.200 279.600 C 102.160 278.560,102.042 274.016,103.029 273.029 C 103.919 272.138,108.274 272.162,109.269 273.062 M382.360 273.051 C 382.153 273.298,381.977 276.803,381.969 280.839 C 381.951 289.709,381.680 289.278,387.178 289.113 L 390.966 289.000 391.320 287.400 C 391.678 285.779,391.386 274.151,390.960 273.039 C 390.673 272.292,382.984 272.303,382.360 273.051 M0.060 316.000 C 0.062 331.290,0.154 343.575,0.265 343.300 C 0.513 342.686,4.905 342.614,6.011 343.206 C 6.428 343.429,8.801 343.963,11.284 344.393 C 17.357 345.443,17.722 345.826,17.306 350.723 C 17.143 352.635,17.008 355.010,17.005 356.000 L 17.000 357.800 19.200 358.000 L 21.400 358.200 21.509 365.262 C 21.628 372.941,21.460 373.600,19.386 373.600 C 18.086 373.600,17.600 372.518,17.600 369.626 C 17.600 365.887,14.730 366.143,11.631 370.160 C 10.680 371.392,9.665 372.400,9.374 372.400 C 8.366 372.400,7.482 374.125,8.215 374.661 C 9.188 375.372,9.229 384.154,8.274 387.483 C 7.619 389.770,7.612 390.064,8.197 391.194 C 8.667 392.102,8.801 393.325,8.716 395.910 L 8.600 399.400 10.156 399.527 C 11.012 399.598,12.158 399.947,12.703 400.305 L 13.695 400.954 12.795 399.177 C 12.004 397.616,11.986 397.481,12.647 398.068 C 13.377 398.715,13.400 398.643,13.409 395.726 C 13.422 390.957,16.358 389.139,16.835 393.603 C 17.056 395.672,17.073 395.701,17.135 394.100 C 17.171 393.165,17.359 392.400,17.553 392.400 C 17.748 392.400,18.001 392.040,18.116 391.600 C 18.287 390.945,18.662 390.800,20.186 390.800 C 21.377 390.800,21.954 390.650,21.789 390.382 C 21.413 389.774,22.612 388.134,23.878 387.525 C 24.479 387.236,25.485 386.235,26.112 385.300 L 27.253 383.600 29.857 383.600 C 33.521 383.600,34.800 382.373,34.800 378.858 C 34.800 375.922,34.286 376.130,42.800 375.621 C 49.955 375.193,51.034 375.010,51.357 374.167 C 51.475 373.861,51.845 373.719,52.186 373.850 C 52.525 373.980,53.251 373.973,53.801 373.836 L 54.800 373.585 54.800 366.124 C 54.800 359.915,54.905 358.547,55.426 357.971 C 56.066 357.264,55.010 356.900,52.200 356.857 C 51.760 356.850,48.295 356.718,44.500 356.564 L 37.600 356.283 37.600 355.141 L 37.600 354.000 42.300 353.991 C 46.348 353.983,47.139 353.874,48.000 353.200 C 49.429 352.082,50.450 352.210,51.639 353.657 C 53.040 355.362,53.600 354.879,53.600 351.966 C 53.600 349.805,53.692 349.545,54.576 349.209 C 55.593 348.823,56.763 347.200,56.024 347.200 C 55.098 347.200,54.358 344.904,55.212 344.681 C 55.782 344.532,56.000 344.132,56.000 343.237 C 56.000 342.379,56.193 342.000,56.629 342.000 C 57.008 342.000,57.206 341.727,57.127 341.314 C 56.918 340.229,54.277 339.798,51.375 340.375 C 49.553 340.737,48.496 340.753,47.352 340.435 C 46.498 340.198,44.776 340.003,43.524 340.002 C 40.734 339.999,40.928 340.514,41.185 333.800 L 41.400 328.200 43.600 328.000 C 45.742 327.805,45.803 327.766,45.925 326.500 L 46.051 325.200 43.757 325.200 C 42.149 325.200,41.236 324.994,40.703 324.512 C 39.850 323.740,35.270 323.112,34.550 323.668 C 34.230 323.914,34.160 326.340,34.308 332.029 L 34.517 340.043 32.358 339.767 C 29.773 339.437,29.826 339.472,30.368 338.461 C 30.627 337.976,30.800 335.031,30.800 331.101 L 30.800 324.550 29.678 323.475 C 28.757 322.592,28.187 322.400,26.491 322.400 L 24.425 322.400 24.313 305.785 C 24.216 291.536,24.115 289.116,23.600 288.791 C 22.366 288.012,0.804 288.304,0.772 289.100 C 0.748 289.699,0.694 289.684,0.400 289.000 C 0.204 288.544,0.058 300.148,0.060 316.000 M150.800 288.968 C 150.800 289.443,150.412 289.579,149.199 289.532 C 147.229 289.454,146.940 289.712,147.535 291.017 C 147.791 291.578,148.000 292.445,148.000 292.942 C 148.000 295.104,151.379 296.359,152.195 294.500 C 152.412 294.005,152.727 293.600,152.895 293.600 C 153.387 293.600,153.233 290.689,152.684 289.604 C 152.103 288.455,150.800 288.015,150.800 288.968 M119.588 289.530 C 118.586 290.341,118.893 292.515,120.033 292.684 C 121.231 292.863,122.584 290.466,121.784 289.582 C 120.912 288.619,120.718 288.614,119.588 289.530 M123.533 290.354 C 122.163 290.859,119.555 294.915,120.700 294.759 C 120.865 294.737,121.783 293.845,122.739 292.778 C 124.479 290.836,124.789 289.890,123.533 290.354 M205.068 292.566 C 204.949 292.877,205.200 293.815,205.626 294.650 C 206.072 295.526,206.400 296.980,206.400 298.085 L 206.400 300.000 221.367 300.000 L 236.334 300.000 236.480 297.100 C 236.560 295.505,236.555 293.975,236.470 293.700 C 236.349 293.312,232.971 293.200,221.345 293.200 C 208.407 293.200,206.344 293.119,206.145 292.600 C 205.855 291.844,205.351 291.828,205.068 292.566 M399.724 302.200 C 399.726 303.520,399.801 304.012,399.890 303.293 C 399.979 302.574,399.977 301.494,399.886 300.893 C 399.795 300.292,399.722 300.880,399.724 302.200 M377.264 305.673 C 376.309 305.887,375.608 306.141,375.706 306.239 C 375.912 306.446,380.000 305.615,380.000 305.367 C 380.000 305.139,379.311 305.216,377.264 305.673 M272.892 307.021 C 272.651 307.451,272.651 308.252,272.890 309.195 L 273.269 310.688 276.295 310.944 C 277.959 311.085,280.329 311.202,281.560 311.205 C 284.574 311.213,285.600 311.530,285.600 312.455 C 285.600 312.880,286.043 313.419,286.602 313.674 C 287.727 314.186,288.396 313.836,287.673 313.113 C 287.095 312.535,287.047 311.200,287.605 311.200 C 288.385 311.200,289.816 307.656,289.261 307.100 C 288.385 306.223,273.379 306.151,272.892 307.021 M205.850 309.100 C 206.035 309.485,206.245 316.351,206.316 324.359 L 206.446 338.918 210.323 338.661 C 212.455 338.520,219.105 338.403,225.100 338.402 L 236.000 338.400 236.000 323.400 L 236.000 308.400 220.757 308.400 C 206.379 308.400,205.533 308.440,205.850 309.100 M150.884 314.984 C 150.459 315.525,149.900 317.037,149.643 318.345 C 149.385 319.653,148.911 320.942,148.587 321.210 C 147.578 322.048,147.939 322.688,149.568 322.949 C 152.114 323.356,152.325 323.118,152.471 319.669 C 152.707 314.058,152.378 313.085,150.884 314.984 M391.221 319.400 C 391.105 319.926,390.429 328.712,390.405 330.000 C 390.354 332.736,391.208 341.193,391.676 342.600 C 392.271 344.384,393.030 344.531,397.900 343.803 L 400.000 343.489 400.000 337.344 L 400.000 331.200 398.829 331.200 C 397.406 331.200,396.190 329.804,395.560 327.446 C 394.822 324.685,394.452 324.006,393.433 323.542 C 392.454 323.096,391.782 321.881,391.473 320.000 C 391.383 319.450,391.269 319.180,391.221 319.400 M239.200 331.600 C 239.200 338.089,239.288 339.200,239.800 339.200 C 240.312 339.200,240.400 338.089,240.400 331.600 C 240.400 325.111,240.312 324.000,239.800 324.000 C 239.288 324.000,239.200 325.111,239.200 331.600 M122.884 333.168 C 119.112 333.432,118.815 333.667,118.808 336.400 C 118.799 339.692,119.876 340.799,123.094 340.805 C 124.582 340.807,126.790 341.075,128.000 341.400 C 134.354 343.105,136.608 341.925,136.083 337.167 L 135.800 334.600 132.239 334.484 C 129.474 334.393,128.431 334.192,127.577 333.584 C 126.972 333.153,126.414 332.830,126.338 332.868 C 126.262 332.905,124.708 333.040,122.884 333.168 M97.776 340.176 C 97.116 340.665,97.075 340.873,97.500 341.570 C 97.849 342.142,98.000 344.478,98.000 349.315 C 98.000 356.753,98.115 357.200,100.031 357.200 C 101.555 357.200,101.941 357.881,102.079 360.812 C 102.246 364.378,105.675 365.958,106.804 362.989 C 107.011 362.445,107.453 362.000,107.787 362.000 C 108.120 362.000,108.618 361.640,108.893 361.200 C 109.168 360.760,109.799 360.400,110.296 360.400 C 111.114 360.400,111.200 360.210,111.200 358.400 C 111.200 356.533,111.133 356.400,110.200 356.400 L 109.200 356.400 109.200 349.157 L 109.200 341.913 110.200 342.164 C 111.606 342.517,111.503 341.574,110.016 340.475 C 108.522 339.371,99.171 339.142,97.776 340.176 M205.584 340.576 C 204.951 341.209,205.128 342.113,205.833 341.843 C 206.181 341.709,207.171 341.600,208.033 341.600 C 209.109 341.600,209.600 341.425,209.600 341.040 C 209.600 340.373,206.182 339.978,205.584 340.576 M358.400 340.950 C 358.400 341.369,358.720 341.586,359.300 341.560 C 360.477 341.508,362.401 340.892,361.550 340.840 C 361.193 340.818,360.338 340.688,359.650 340.550 C 358.660 340.352,358.400 340.435,358.400 340.950 M21.011 341.468 C 21.635 342.092,21.611 342.172,20.640 342.681 C 20.068 342.980,19.600 343.400,19.600 343.613 C 19.600 344.722,18.077 343.908,17.893 342.700 C 17.585 340.674,19.472 339.929,21.011 341.468 M358.225 348.042 C 358.104 348.569,357.959 350.619,357.903 352.597 L 357.800 356.194 359.606 356.797 C 362.360 357.717,362.400 357.774,362.400 360.775 C 362.400 362.722,362.573 363.646,363.006 364.005 C 363.363 364.302,363.592 365.100,363.564 365.954 C 363.509 367.609,364.149 370.309,364.734 370.894 C 366.158 372.318,368.290 369.495,368.369 366.080 C 368.386 365.354,368.679 364.220,369.021 363.560 C 369.362 362.900,369.533 362.020,369.402 361.605 C 369.270 361.190,369.388 360.488,369.665 360.044 C 370.734 358.332,369.703 357.047,366.931 356.635 L 364.473 356.270 364.009 353.035 C 363.255 347.769,363.382 348.000,361.237 348.000 C 360.204 348.000,359.154 347.794,358.902 347.542 C 358.558 347.198,358.390 347.323,358.225 348.042 M364.800 372.553 C 364.800 373.114,366.383 373.751,366.782 373.351 C 367.018 373.115,365.649 372.000,365.124 372.000 C 364.946 372.000,364.800 372.249,364.800 372.553 M85.990 394.076 C 85.984 395.464,85.798 398.400,85.576 400.600 C 85.007 406.250,85.369 409.200,86.632 409.200 C 88.024 409.200,88.039 409.397,87.914 426.680 C 87.851 435.304,87.925 442.234,88.078 442.080 C 88.469 441.686,88.821 427.460,88.918 408.200 L 89.000 391.800 87.500 391.676 L 86.000 391.552 85.990 394.076 M0.064 404.151 L -0.000 408.903 3.100 408.707 C 8.593 408.361,9.518 407.000,6.633 403.507 C 5.454 402.079,5.292 402.014,2.925 402.007 L 0.451 402.000 0.289 400.700 C 0.201 399.985,0.099 401.538,0.064 404.151 M119.657 411.516 C 119.822 415.151,119.756 415.012,121.465 415.377 C 122.809 415.665,122.796 415.681,123.370 413.100 C 123.530 412.382,123.874 412.000,124.359 412.000 C 124.768 412.000,125.326 411.730,125.600 411.400 C 125.874 411.070,126.706 410.800,127.449 410.800 C 128.383 410.800,128.800 410.985,128.800 411.400 C 128.800 412.484,129.396 412.027,129.842 410.600 C 130.291 409.167,130.111 408.849,129.306 409.654 C 128.967 409.993,128.679 409.936,128.173 409.430 C 127.661 408.918,126.842 408.761,124.847 408.791 C 123.391 408.812,121.595 408.710,120.855 408.563 L 119.511 408.296 119.657 411.516 M371.307 408.776 C 369.008 409.151,368.930 409.315,369.977 411.551 C 370.977 413.686,370.953 414.969,369.783 421.956 C 369.142 425.780,369.051 425.949,367.987 425.285 C 366.951 424.637,366.800 424.670,366.800 425.538 C 366.800 426.410,368.002 427.600,368.883 427.600 C 369.838 427.600,370.574 428.751,370.472 430.087 C 370.303 432.306,371.885 433.157,373.004 431.450 C 374.294 429.481,374.531 408.206,373.261 408.450 C 373.117 408.478,372.238 408.624,371.307 408.776 M45.047 426.222 C 44.911 426.576,44.800 430.185,44.800 434.243 L 44.800 441.621 50.900 441.510 L 57.000 441.400 57.000 433.600 L 57.000 425.800 51.147 425.690 C 46.073 425.594,45.261 425.665,45.047 426.222 M245.600 446.780 L 245.600 449.600 247.792 449.600 C 250.292 449.600,250.559 449.218,250.326 445.968 L 250.200 444.200 247.900 444.080 L 245.600 443.960 245.600 446.780 M85.826 449.300 C 85.687 450.675,85.472 452.655,85.349 453.700 C 85.084 455.951,86.155 456.394,87.477 454.579 C 88.204 453.582,88.202 453.480,87.410 450.183 C 86.441 446.148,86.160 445.992,85.826 449.300 M370.832 449.962 C 369.886 450.577,370.770 452.857,372.131 453.310 C 373.450 453.750,373.526 453.698,373.807 452.171 C 374.143 450.339,372.326 448.989,370.832 449.962 M85.821 457.058 C 85.510 458.298,86.154 459.206,86.851 458.509 C 87.342 458.018,87.008 456.000,86.436 456.000 C 86.244 456.000,85.967 456.476,85.821 457.058 M47.200 467.226 C 47.200 474.711,46.991 475.600,45.233 475.600 C 43.901 475.600,43.286 476.977,44.168 477.985 C 44.463 478.323,44.839 479.050,45.002 479.600 C 45.165 480.150,45.431 480.780,45.594 481.000 C 45.757 481.220,46.008 481.895,46.152 482.500 C 46.440 483.704,47.474 483.932,49.374 483.210 C 50.881 482.637,50.995 475.340,49.500 475.128 C 48.609 475.001,48.599 474.928,48.491 467.700 C 48.400 461.577,48.287 460.400,47.791 460.400 C 47.293 460.400,47.200 461.471,47.200 467.226 M136.812 477.367 C 136.310 478.689,136.271 491.976,136.767 492.760 C 137.124 493.324,145.921 493.208,153.900 492.534 L 156.800 492.290 156.800 484.800 L 156.800 477.310 153.100 477.059 C 151.065 476.921,146.661 476.690,143.312 476.545 L 137.225 476.283 136.812 477.367 M132.000 510.577 C 128.576 511.268,128.800 510.528,128.800 521.137 L 128.800 530.627 130.979 532.779 C 133.001 534.776,133.287 534.926,134.936 534.864 C 137.210 534.778,137.168 534.610,136.730 542.000 C 136.528 545.410,136.236 550.999,136.081 554.420 C 135.859 559.331,135.653 560.864,135.100 561.706 C 134.564 562.522,134.400 563.616,134.400 566.376 L 134.400 569.981 140.200 569.963 L 146.000 569.945 146.000 563.165 L 146.000 556.385 144.200 554.093 C 142.997 552.560,142.400 551.411,142.400 550.626 C 142.400 549.980,142.046 549.075,141.614 548.614 C 139.856 546.744,140.331 545.098,142.861 544.290 C 145.804 543.351,146.272 542.132,144.422 540.223 C 143.741 539.521,143.198 538.527,143.194 537.981 C 143.191 537.327,142.325 536.087,140.594 534.259 C 139.167 532.752,138.000 531.322,138.000 531.083 C 138.000 530.843,137.736 530.996,137.413 531.424 C 136.871 532.139,136.824 532.042,136.813 530.167 C 136.800 528.171,136.822 528.133,138.000 528.133 C 139.801 528.133,139.800 528.136,139.800 519.484 L 139.800 511.434 138.600 511.165 C 137.940 511.017,136.680 510.724,135.800 510.515 C 134.731 510.260,133.470 510.281,132.000 510.577 M260.800 510.936 L 259.000 511.400 258.891 518.910 C 258.758 528.089,258.781 528.157,261.928 527.775 C 265.831 527.302,265.600 527.852,265.600 519.013 C 265.600 511.310,265.594 511.252,264.700 510.995 C 262.922 510.484,262.575 510.479,260.800 510.936 M22.600 511.085 C 22.160 511.191,21.674 511.395,21.520 511.539 C 21.260 511.781,20.347 521.395,20.245 524.967 C 20.208 526.270,19.998 526.647,19.000 527.204 C 17.833 527.855,17.802 527.951,17.875 530.637 C 17.916 532.157,17.961 534.525,17.975 535.900 L 18.000 538.400 20.400 538.400 L 22.800 538.400 22.878 535.900 C 22.921 534.525,22.977 532.938,23.004 532.374 C 23.030 531.809,23.355 530.914,23.726 530.385 C 24.097 529.855,24.400 529.203,24.400 528.935 C 24.400 528.661,25.056 528.394,25.900 528.324 L 27.400 528.200 27.335 520.020 C 27.258 510.387,27.060 510.012,22.600 511.085 M55.857 511.640 C 54.748 513.223,54.875 542.647,55.999 544.490 C 56.989 546.114,57.266 569.345,56.300 569.735 C 56.025 569.846,57.510 569.927,59.600 569.914 C 61.690 569.901,62.995 569.813,62.500 569.718 L 61.600 569.544 61.600 557.535 C 61.600 546.132,61.640 545.475,62.400 544.509 C 63.169 543.531,63.200 542.886,63.200 527.746 L 63.200 512.000 62.280 512.000 C 61.774 512.000,61.175 511.815,60.949 511.589 C 59.970 510.610,56.554 510.644,55.857 511.640 M103.200 541.771 C 103.200 545.141,102.744 545.600,99.395 545.600 C 97.994 545.600,96.736 545.780,96.600 546.000 C 96.442 546.255,97.655 546.400,99.953 546.400 C 104.150 546.400,103.832 546.692,104.196 542.500 C 104.447 539.619,104.402 539.200,103.842 539.200 C 103.319 539.200,103.200 539.678,103.200 541.771 M17.467 561.867 C 17.320 562.013,17.200 563.903,17.200 566.067 L 17.200 570.000 18.600 570.000 L 20.000 570.000 20.000 566.214 C 20.000 562.215,18.939 560.394,17.467 561.867 M31.067 562.267 C 30.920 562.413,30.800 564.213,30.800 566.267 L 30.800 570.000 32.000 570.000 L 33.200 570.000 33.200 566.000 C 33.200 561.992,32.524 560.809,31.067 562.267 M270.100 562.260 C 269.750 562.405,269.600 563.597,269.600 566.233 L 269.600 570.000 270.814 570.000 L 272.029 570.000 271.914 566.105 C 271.798 562.131,271.572 561.653,270.100 562.260 \\\" stroke=\\\"none\\\" fill=\\\"#f4cc67\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path5\\\" d=\\\"M44.000 1.238 C 44.000 2.587,42.884 4.800,42.203 4.800 C 41.970 4.800,40.895 5.970,39.815 7.400 C 38.735 8.830,37.724 10.000,37.568 10.000 C 35.445 10.000,33.018 15.887,34.600 17.200 C 34.930 17.474,35.200 17.969,35.200 18.300 C 35.200 18.631,36.281 21.084,37.602 23.751 C 38.924 26.418,40.196 29.387,40.431 30.349 C 41.147 33.289,42.845 34.502,45.800 34.187 C 50.230 33.714,50.889 33.127,54.537 26.400 C 55.074 25.410,55.910 24.242,56.395 23.803 L 57.276 23.007 58.477 24.503 C 59.753 26.094,60.519 26.457,60.155 25.300 C 59.972 24.718,60.047 24.735,60.600 25.400 C 61.515 26.500,64.000 31.447,64.000 32.168 C 64.000 32.491,64.425 33.249,64.944 33.853 L 65.889 34.951 67.623 33.676 C 68.577 32.974,69.727 32.397,70.179 32.394 C 71.946 32.381,72.272 31.728,71.114 30.519 C 69.350 28.678,68.802 25.613,68.843 17.829 C 68.908 5.439,67.543 2.499,63.559 6.444 C 62.139 7.850,60.443 9.262,59.789 9.583 C 59.135 9.903,58.292 10.420,57.915 10.731 C 57.312 11.229,57.082 11.172,55.984 10.248 C 55.299 9.672,54.588 9.200,54.404 9.200 C 54.220 9.200,53.094 8.231,51.901 7.048 C 50.707 5.864,49.341 4.772,48.863 4.620 C 47.200 4.092,45.600 2.398,45.600 1.164 C 45.600 0.267,45.417 0.000,44.800 0.000 C 44.172 0.000,44.000 0.267,44.000 1.238 M81.200 1.200 L 81.200 2.400 83.957 2.400 C 86.102 2.400,86.768 2.260,86.957 1.767 C 87.569 0.172,87.300 0.000,84.200 0.000 L 81.200 0.000 81.200 1.200 M95.600 0.911 C 95.600 1.412,95.852 2.182,96.161 2.623 C 96.469 3.063,96.928 4.191,97.181 5.129 C 97.628 6.791,98.623 7.600,100.217 7.600 C 101.196 7.600,101.915 5.899,102.203 2.900 L 102.481 -0.000 99.041 -0.000 C 95.727 -0.000,95.600 0.034,95.600 0.911 M269.600 2.240 C 269.600 4.953,268.744 6.897,266.918 8.331 C 266.169 8.919,264.954 10.232,264.216 11.248 C 263.205 12.642,262.532 13.161,261.477 13.359 C 260.708 13.503,259.242 14.067,258.218 14.611 C 255.995 15.793,254.086 15.860,251.163 14.860 C 249.973 14.453,248.322 13.994,247.493 13.840 C 246.472 13.651,245.195 12.855,243.529 11.369 C 242.178 10.163,240.876 9.240,240.636 9.318 C 239.884 9.563,239.411 15.446,239.909 18.370 C 240.377 21.117,240.617 21.442,243.574 23.325 C 244.697 24.039,245.217 24.883,246.412 27.923 C 248.217 32.517,248.384 32.685,251.825 33.340 C 253.358 33.632,255.018 34.089,255.514 34.354 C 257.248 35.282,262.790 33.711,265.959 31.394 C 267.503 30.265,268.192 30.122,267.855 31.000 C 267.185 32.746,269.929 30.666,270.694 28.848 C 271.551 26.810,272.442 18.342,271.972 16.702 C 271.767 15.989,271.600 13.587,271.600 11.364 C 271.600 3.762,271.183 0.000,270.340 0.000 C 269.708 0.000,269.600 0.327,269.600 2.240 M295.380 0.900 C 295.531 1.395,295.806 2.398,295.991 3.129 C 296.462 4.983,297.261 5.737,300.290 7.184 C 305.212 9.535,306.257 8.801,306.991 2.480 L 307.279 0.000 301.193 0.000 L 295.107 0.000 295.380 0.900 M395.373 0.964 C 395.034 2.317,389.107 8.000,388.036 8.000 C 387.499 8.000,387.043 8.360,386.813 8.966 C 386.611 9.497,386.095 10.043,385.666 10.179 C 385.237 10.315,384.790 10.794,384.673 11.243 C 384.555 11.692,384.092 12.155,383.643 12.273 C 383.194 12.390,382.715 12.837,382.579 13.266 C 382.443 13.695,381.892 14.213,381.355 14.417 C 380.818 14.621,380.229 15.192,380.047 15.685 C 379.816 16.308,379.188 16.711,377.995 17.001 C 374.536 17.843,374.934 19.998,378.549 20.003 C 381.571 20.008,385.364 21.294,387.172 22.927 C 388.019 23.692,389.136 24.450,389.656 24.612 C 390.175 24.774,391.230 25.399,392.000 26.001 C 394.087 27.633,397.412 29.200,398.787 29.200 L 400.000 29.200 400.000 14.600 L 400.000 0.000 397.808 0.000 C 395.824 0.000,395.592 0.092,395.373 0.964 M110.142 12.981 C 109.614 14.647,107.638 16.000,105.735 16.000 C 103.465 16.000,101.973 17.495,101.234 20.509 C 100.952 21.659,100.380 23.278,99.963 24.108 C 99.546 24.937,99.249 25.792,99.303 26.009 C 99.356 26.226,98.681 26.813,97.801 27.314 C 94.640 29.113,93.150 34.074,94.269 39.065 C 94.606 40.569,94.919 42.430,94.964 43.200 C 95.065 44.915,95.545 45.826,97.603 48.203 C 98.481 49.218,99.201 50.353,99.202 50.724 C 99.204 51.096,99.474 51.916,99.802 52.546 C 100.131 53.176,100.400 53.941,100.400 54.246 C 100.400 54.551,100.670 54.800,101.000 54.800 C 101.330 54.800,101.600 54.521,101.600 54.180 C 101.600 52.538,102.760 51.285,104.489 51.060 C 110.770 50.244,111.716 49.967,111.364 49.050 C 111.216 48.664,112.064 48.400,114.593 48.047 C 118.347 47.521,118.827 47.612,118.519 48.789 C 118.229 49.897,119.937 50.676,121.189 50.006 C 121.855 49.650,122.031 49.273,121.886 48.515 C 121.741 47.760,122.038 47.118,123.046 46.002 C 124.250 44.670,124.400 44.251,124.400 42.233 C 124.400 40.130,124.488 39.913,125.598 39.281 C 127.145 38.401,127.573 36.472,126.650 34.536 C 126.270 33.740,126.098 32.751,126.239 32.185 C 126.399 31.550,126.190 30.710,125.642 29.782 C 125.028 28.740,124.800 27.677,124.800 25.852 C 124.800 23.567,124.691 23.248,123.551 22.175 C 122.507 21.193,121.200 18.995,121.200 18.221 C 121.200 18.108,121.920 17.649,122.800 17.200 C 125.203 15.974,124.903 14.583,121.863 12.856 L 120.325 11.983 118.913 13.222 C 117.358 14.588,116.107 14.585,114.600 13.212 C 113.384 12.105,110.469 11.954,110.142 12.981 M220.400 42.000 C 217.335 42.180,216.961 42.290,216.600 43.117 C 216.380 43.621,215.803 44.133,215.317 44.256 C 213.110 44.812,211.909 66.736,214.049 67.415 C 216.182 68.093,223.591 66.689,223.935 65.542 C 224.024 65.244,224.321 64.460,224.594 63.800 C 226.115 60.130,226.924 48.973,225.824 46.846 C 225.481 46.183,225.196 45.136,225.191 44.520 C 225.173 42.281,224.212 41.776,220.400 42.000 M345.600 66.000 C 345.600 66.660,345.780 67.200,346.000 67.200 C 346.220 67.200,346.400 66.660,346.400 66.000 C 346.400 65.340,346.220 64.800,346.000 64.800 C 345.780 64.800,345.600 65.340,345.600 66.000 M177.139 69.090 C 171.757 69.245,171.305 69.486,171.873 71.891 L 172.229 73.400 179.262 73.509 L 186.295 73.618 186.778 72.452 C 188.239 68.926,187.827 68.782,177.139 69.090 M222.000 93.100 L 222.000 100.200 224.900 100.200 L 227.800 100.200 227.909 93.100 L 228.018 86.000 225.009 86.000 L 222.000 86.000 222.000 93.100 M48.408 101.490 C 47.080 104.877,47.999 115.596,49.645 115.913 C 50.542 116.086,50.799 114.168,50.756 107.600 C 50.707 100.179,49.823 97.880,48.408 101.490 M102.800 219.400 C 102.800 220.763,103.286 221.231,103.814 220.377 C 104.163 219.813,103.688 218.000,103.192 218.000 C 102.977 218.000,102.800 218.630,102.800 219.400 M69.764 218.951 C 68.609 221.958,70.573 224.653,72.463 222.654 C 73.192 221.883,73.933 221.616,75.800 221.451 C 77.120 221.334,79.498 221.120,81.085 220.975 C 82.913 220.808,84.452 220.880,85.285 221.172 C 86.633 221.645,88.392 220.361,88.398 218.900 C 88.401 218.130,70.059 218.180,69.764 218.951 \\\" stroke=\\\"none\\\" fill=\\\"#f3cd52\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path6\\\" d=\\\"M149.289 131.023 C 148.800 131.365,148.400 131.943,148.400 132.308 C 148.400 132.672,147.921 133.352,147.335 133.819 C 145.999 134.884,146.277 135.337,148.769 136.152 C 152.869 137.493,154.284 135.533,152.525 130.949 C 152.242 130.211,150.388 130.253,149.289 131.023 M313.357 235.369 C 313.111 236.010,313.841 237.600,314.381 237.600 C 316.002 237.600,316.589 235.943,315.226 235.214 C 314.170 234.649,313.615 234.694,313.357 235.369 M284.547 267.438 C 281.596 270.587,282.355 272.180,286.581 271.708 L 289.343 271.400 289.456 269.445 C 289.673 265.685,287.156 264.656,284.547 267.438 M275.800 272.757 L 274.200 273.000 273.883 280.368 C 273.510 289.051,273.454 288.800,275.755 288.800 C 278.964 288.800,278.800 289.240,278.800 280.600 C 278.800 273.223,278.528 271.562,277.467 272.457 C 277.430 272.488,276.680 272.623,275.800 272.757 M342.076 384.993 C 339.919 389.727,338.467 409.795,340.366 408.621 C 340.823 408.339,341.188 409.799,341.195 411.938 C 341.201 414.057,342.297 418.000,342.880 418.000 C 343.113 418.000,343.970 417.415,344.785 416.700 C 345.601 415.985,346.838 415.093,347.534 414.719 C 348.672 414.106,348.800 413.852,348.800 412.206 C 348.800 410.910,348.984 410.304,349.429 410.134 C 350.781 409.615,352.092 405.624,351.862 402.725 C 351.714 400.853,351.793 400.002,352.125 399.891 C 352.387 399.804,352.617 398.941,352.639 397.966 C 352.660 396.995,352.817 395.280,352.988 394.156 C 353.282 392.221,353.240 392.071,352.204 391.356 C 350.340 390.068,347.600 387.520,347.600 387.074 C 347.600 384.499,343.077 382.795,342.076 384.993 M397.676 407.250 C 396.228 407.786,395.933 409.331,396.411 413.860 C 396.802 417.569,398.583 422.516,398.906 420.791 C 399.061 419.962,399.100 420.012,399.146 421.100 C 399.175 421.815,399.380 422.400,399.600 422.400 C 399.853 422.400,400.000 419.542,400.000 414.625 C 400.000 406.124,400.075 406.363,397.676 407.250 M301.200 425.956 C 297.855 426.327,298.016 428.891,301.611 432.500 C 304.291 435.189,305.446 434.247,305.657 429.200 L 305.800 425.800 304.600 425.756 C 303.940 425.732,302.410 425.822,301.200 425.956 M374.257 493.797 C 374.115 494.165,374.000 494.901,374.000 495.433 C 374.000 496.534,373.529 496.678,372.800 495.800 C 372.393 495.309,371.046 495.200,365.387 495.200 L 358.471 495.200 357.461 496.400 C 356.569 497.460,356.200 497.600,354.296 497.600 C 350.836 497.600,350.400 498.325,350.400 504.077 C 350.400 509.681,350.520 509.861,353.894 509.313 C 355.162 509.107,358.000 509.069,360.200 509.229 C 362.400 509.389,365.010 509.551,366.000 509.588 C 367.393 509.641,367.619 509.734,367.000 510.000 C 366.245 510.324,366.243 510.345,366.958 510.372 C 369.263 510.457,371.199 512.496,371.199 514.838 C 371.200 517.014,371.920 518.400,373.051 518.400 C 373.265 518.400,373.667 519.030,373.945 519.800 C 374.645 521.734,375.332 521.988,380.490 522.223 C 382.971 522.336,386.278 522.623,387.840 522.861 C 390.964 523.336,392.400 522.956,392.400 521.653 C 392.400 521.026,392.682 520.958,394.613 521.118 C 397.145 521.328,398.164 520.718,398.770 518.633 C 398.967 517.955,399.144 517.715,399.164 518.100 C 399.301 520.757,400.000 518.129,400.000 514.957 C 400.000 511.743,399.904 511.151,399.413 511.340 C 399.090 511.464,398.719 511.393,398.589 511.183 C 398.156 510.482,393.510 510.768,391.656 511.609 C 387.354 513.561,385.870 512.563,385.600 507.539 L 385.400 503.811 383.896 503.568 C 381.946 503.253,381.231 501.637,381.187 497.445 C 381.163 495.260,380.069 494.489,375.357 493.335 C 374.801 493.199,374.425 493.357,374.257 493.797 M347.200 508.800 C 346.870 509.013,345.600 509.191,344.378 509.194 C 342.395 509.199,342.020 509.341,340.878 510.519 L 339.600 511.838 339.602 516.419 C 339.604 522.696,341.404 533.600,342.438 533.600 C 342.630 533.600,343.262 532.661,343.844 531.514 C 344.425 530.366,345.398 528.791,346.005 528.014 C 347.873 525.623,350.400 517.227,350.400 513.412 C 350.400 509.596,349.028 507.619,347.200 508.800 M383.683 509.300 C 384.472 509.920,384.960 511.454,384.465 511.760 C 384.024 512.032,381.134 509.399,381.487 509.046 C 381.894 508.639,383.006 508.768,383.683 509.300 M341.680 545.280 C 340.734 546.226,341.463 550.800,342.559 550.800 C 343.071 550.800,344.800 547.567,344.800 546.612 C 344.800 545.383,342.541 544.419,341.680 545.280 \\\" stroke=\\\"none\\\" fill=\\\"#f5d47c\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path7\\\" d=\\\"M358.400 241.000 C 358.400 241.512,359.511 241.600,366.000 241.600 C 372.489 241.600,373.600 241.512,373.600 241.000 C 373.600 240.488,372.489 240.400,366.000 240.400 C 359.511 240.400,358.400 240.488,358.400 241.000 M37.600 355.200 L 37.600 356.400 42.200 356.400 L 46.800 356.400 46.800 355.200 L 46.800 354.000 42.200 354.000 L 37.600 354.000 37.600 355.200 M370.227 456.200 C 369.432 457.242,368.858 457.600,367.980 457.600 C 365.439 457.600,366.718 458.677,369.573 458.943 C 373.954 459.350,374.870 458.757,373.920 456.128 C 373.242 454.255,371.688 454.285,370.227 456.200 M284.817 512.500 C 284.829 513.432,285.284 514.310,286.424 515.600 C 288.353 517.784,288.785 517.438,288.794 513.700 L 288.800 511.200 286.800 511.200 C 284.807 511.200,284.800 511.204,284.817 512.500 M308.091 511.525 C 307.702 511.780,307.607 513.604,307.691 519.229 L 307.800 526.600 310.000 526.600 L 312.200 526.600 312.200 519.000 L 312.200 511.400 310.400 511.296 C 309.410 511.238,308.371 511.342,308.091 511.525 M383.005 537.666 C 380.148 540.550,377.176 543.310,376.399 543.800 C 374.447 545.033,374.079 545.570,373.930 547.405 L 373.800 549.000 366.160 549.108 L 358.520 549.217 358.253 553.108 C 358.106 555.249,357.871 559.925,357.730 563.500 L 357.475 570.000 367.837 569.954 C 373.537 569.928,377.885 569.825,377.500 569.724 C 376.896 569.566,376.800 569.026,376.800 565.780 C 376.800 562.209,376.749 561.985,375.800 561.363 C 375.034 560.861,374.801 560.367,374.806 559.254 C 374.816 556.803,374.736 556.828,383.018 556.709 L 390.600 556.600 390.902 554.000 C 391.780 546.458,392.013 542.653,391.797 539.400 C 391.196 530.339,390.416 530.185,383.005 537.666 M358.400 541.420 L 358.400 544.040 360.700 543.920 L 363.000 543.800 363.122 542.334 C 363.220 541.157,363.086 540.818,362.443 540.614 C 362.002 540.474,361.530 540.008,361.394 539.580 C 361.212 539.006,360.783 538.800,359.773 538.800 L 358.400 538.800 358.400 541.420 M398.080 561.680 C 397.424 562.336,397.500 565.575,398.200 566.800 C 398.991 568.183,398.946 569.503,398.100 569.724 C 397.715 569.825,397.985 569.928,398.700 569.954 L 400.000 570.000 400.000 565.600 C 400.000 561.023,399.585 560.175,398.080 561.680 \\\" stroke=\\\"none\\\" fill=\\\"#ecd167\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path8\\\" d=\\\"M366.000 524.800 C 366.000 525.787,365.386 525.838,364.809 524.900 C 364.436 524.294,364.393 524.335,364.489 525.200 C 364.578 526.001,365.216 526.521,367.701 527.818 C 369.407 528.708,371.567 530.173,372.501 531.074 C 375.489 533.956,377.422 534.587,378.784 533.125 C 379.941 531.883,379.795 531.526,378.445 532.300 C 377.542 532.818,377.085 532.868,376.345 532.529 C 375.416 532.103,375.424 532.089,376.800 531.724 C 377.802 531.458,378.237 531.097,378.331 530.454 C 378.450 529.632,378.388 529.600,377.606 530.077 C 376.841 530.544,376.644 530.479,375.770 529.472 L 374.791 528.345 374.535 529.623 C 374.286 530.871,374.265 530.882,373.640 530.097 C 373.288 529.655,372.554 529.064,372.009 528.784 C 371.067 528.300,371.057 528.259,371.809 527.965 C 372.478 527.704,372.415 527.642,371.400 527.565 C 370.530 527.499,370.749 527.399,372.200 527.200 L 374.200 526.926 372.536 526.863 C 371.210 526.813,370.660 526.549,369.835 525.569 C 369.148 524.753,368.742 524.517,368.631 524.869 C 368.539 525.161,368.383 525.670,368.286 526.000 C 368.162 526.418,367.880 526.207,367.354 525.303 C 366.493 523.821,366.000 523.638,366.000 524.800 M371.052 525.410 C 370.676 526.388,370.689 526.400,372.200 526.400 C 373.178 526.400,373.600 526.219,373.600 525.800 C 373.600 525.470,373.345 525.200,373.033 525.200 C 372.721 525.200,372.204 525.100,371.884 524.977 C 371.558 524.852,371.193 525.042,371.052 525.410 M350.554 549.988 C 350.504 556.066,350.130 557.630,348.554 558.348 C 347.212 558.960,346.800 558.917,346.800 558.167 C 346.800 557.818,346.665 557.594,346.500 557.669 C 341.200 560.065,340.000 561.703,340.000 566.542 C 340.000 569.857,340.013 569.900,341.000 569.900 C 341.811 569.900,342.001 569.702,342.005 568.850 C 342.017 566.610,342.392 566.018,343.642 566.268 C 344.539 566.448,344.800 566.354,344.800 565.850 C 344.800 565.040,345.991 565.006,347.024 565.787 C 348.111 566.610,348.400 566.541,348.400 565.462 C 348.400 564.946,348.760 564.198,349.200 563.800 C 350.196 562.899,350.199 562.599,349.220 561.620 C 348.446 560.846,348.453 560.836,350.120 560.501 L 351.800 560.162 351.700 556.381 C 351.390 544.600,350.633 540.380,350.554 549.988 M384.119 561.565 C 380.733 561.841,380.272 562.159,380.765 563.879 C 380.962 564.564,381.130 566.042,381.138 567.164 C 381.161 570.070,381.005 570.000,387.424 570.000 L 393.200 570.000 393.200 566.257 L 393.200 562.514 390.700 562.253 C 389.325 562.110,388.140 561.814,388.067 561.596 C 387.993 561.378,387.723 561.229,387.467 561.265 C 387.210 561.300,385.703 561.435,384.119 561.565 \\\" stroke=\\\"none\\\" fill=\\\"#f4dc6f\\\" fill-rule=\\\"evenodd\\\"></path></g></svg>\");\n\n//# sourceURL=webpack://templates/./src/images/enabled-bg.svg?");

/***/ }),

/***/ "./src/images/imageBetweenTables.svg":
/*!*******************************************!*\
  !*** ./src/images/imageBetweenTables.svg ***!
  \*******************************************/
/***/ (() => {

eval("throw new Error(\"Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\\n> <svg id=\\\"svg\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" width=\\\"400\\\" height=\\\"400\\\" viewBox=\\\"0, 0, 400,400\\\"><g id=\\\"svgg\\\"><path id=\\\"path0\\\" d=\\\"M203.800 50.389 C 203.360 50.572,202.595 51.106,202.100 51.576 C 201.605 52.046,201.200 52.322,201.200 52.188 C 201.200 52.055,200.677 52.318,200.038 52.773 C 199.399 53.228,198.749 53.600,198.593 53.600 C 198.255 53.600,196.105 55.300,194.184 57.087 C 193.423 57.794,192.800 58.275,192.800 58.156 C 192.800 57.659,187.820 62.123,182.312 67.558 C 178.337 71.478,176.582 73.468,176.912 73.677 C 177.294 73.920,177.292 73.989,176.903 73.994 C 176.289 74.001,174.459 75.554,173.949 76.500 C 173.667 77.024,173.723 77.200,174.173 77.200 C 174.570 77.200,174.688 76.973,174.519 76.534 C 174.355 76.105,174.421 75.966,174.706 76.142 C 175.286 76.500,177.326 74.446,177.422 73.408 C 177.463 72.964,177.713 72.649,177.978 72.710 C 178.243 72.770,178.362 72.663,178.244 72.471 C 177.973 72.033,180.161 69.895,180.517 70.250 C 180.660 70.393,180.962 70.025,181.188 69.431 C 181.414 68.838,181.752 68.447,181.940 68.563 C 182.128 68.679,182.624 68.516,183.041 68.200 C 183.576 67.795,183.634 67.622,183.238 67.613 C 182.805 67.603,182.840 67.419,183.391 66.809 C 183.785 66.375,184.267 66.118,184.463 66.239 C 184.659 66.360,184.794 66.311,184.763 66.130 C 184.624 65.331,184.843 65.048,185.184 65.587 C 185.500 66.087,185.663 66.056,186.277 65.380 C 190.016 61.269,199.539 54.873,201.155 55.386 C 201.603 55.528,202.382 55.415,202.885 55.134 C 203.814 54.616,206.401 53.617,206.842 53.606 C 206.974 53.603,207.558 54.040,208.139 54.578 C 209.920 56.229,214.304 58.082,217.173 58.397 C 219.132 58.612,220.259 58.996,221.584 59.899 C 222.562 60.566,223.582 61.028,223.851 60.925 C 224.119 60.822,224.561 61.153,224.832 61.661 C 225.639 63.168,227.200 64.299,227.200 63.377 C 227.200 62.949,223.492 59.801,223.118 59.910 C 222.910 59.970,222.853 59.839,222.989 59.617 C 223.126 59.396,222.195 58.560,220.919 57.761 C 219.644 56.961,217.960 55.878,217.178 55.354 C 215.576 54.279,214.756 54.175,213.572 54.900 C 212.873 55.328,212.691 55.286,212.306 54.608 C 211.154 52.576,208.984 50.755,207.557 50.623 C 206.764 50.550,205.774 50.393,205.357 50.274 C 204.941 50.155,204.240 50.207,203.800 50.389 M227.613 64.324 C 227.606 64.832,227.761 65.148,227.958 65.026 C 228.155 64.904,228.414 65.060,228.534 65.371 C 228.653 65.683,229.167 66.001,229.676 66.078 C 230.184 66.156,230.551 66.453,230.490 66.739 C 230.430 67.025,230.552 67.153,230.762 67.023 C 230.973 66.893,231.258 66.970,231.396 67.193 C 231.534 67.417,231.423 67.600,231.149 67.600 C 230.875 67.600,231.166 68.138,231.796 68.796 C 233.226 70.289,233.551 70.061,232.474 68.321 C 231.591 66.895,229.200 64.447,229.200 64.969 C 229.200 65.145,228.846 64.864,228.413 64.344 L 227.627 63.400 227.613 64.324 M235.256 72.145 C 235.539 72.775,235.842 73.073,235.931 72.806 C 236.020 72.540,235.789 72.024,235.418 71.661 C 234.786 71.042,234.776 71.073,235.256 72.145 M236.254 73.512 C 236.119 73.731,236.277 74.132,236.604 74.404 C 237.255 74.943,237.391 74.520,236.844 73.657 C 236.635 73.328,236.404 73.271,236.254 73.512 M238.189 75.945 C 238.270 77.052,239.600 78.546,239.600 77.530 C 239.600 77.177,239.268 76.478,238.862 75.977 L 238.124 75.066 238.189 75.945 M172.066 78.530 C 171.586 79.041,171.329 79.610,171.496 79.794 C 171.663 79.978,171.595 80.011,171.345 79.869 C 171.095 79.726,170.668 79.877,170.396 80.204 C 170.124 80.532,170.059 80.803,170.251 80.806 C 170.443 80.809,170.420 80.944,170.200 81.106 C 169.206 81.837,168.797 82.667,169.431 82.667 C 170.297 82.667,173.029 79.459,173.029 78.441 C 173.029 77.419,173.118 77.410,172.066 78.530 M240.814 79.597 C 241.026 80.366,241.200 81.052,241.200 81.121 C 241.200 81.190,241.380 81.136,241.600 81.000 C 242.186 80.638,242.095 80.203,241.214 79.144 L 240.427 78.200 240.814 79.597 M242.182 81.845 C 242.352 82.260,242.582 82.919,242.694 83.308 C 242.852 83.857,243.021 83.915,243.444 83.563 C 244.048 83.063,243.783 82.240,243.146 82.634 C 242.925 82.770,242.803 82.568,242.873 82.182 C 242.943 81.797,242.746 81.395,242.436 81.287 C 242.020 81.142,241.953 81.288,242.182 81.845 M267.200 83.218 C 267.200 83.355,266.969 83.467,266.688 83.467 C 265.990 83.467,264.000 84.802,264.000 85.270 C 264.000 85.477,263.822 85.537,263.603 85.402 C 263.385 85.267,262.755 85.608,262.203 86.160 C 261.652 86.712,261.195 87.037,261.188 86.882 C 261.181 86.727,260.990 86.919,260.763 87.308 C 260.536 87.698,260.194 87.920,260.003 87.802 C 259.812 87.684,259.550 87.757,259.421 87.966 C 259.292 88.174,259.371 88.459,259.597 88.598 C 260.264 89.011,261.540 88.420,261.808 87.574 C 261.959 87.099,262.244 86.905,262.529 87.082 C 262.788 87.243,263.418 87.321,263.929 87.255 C 264.592 87.170,264.920 87.374,265.076 87.968 C 265.349 89.014,265.376 89.012,266.994 87.777 C 268.255 86.816,268.360 86.798,268.755 87.477 C 269.139 88.137,269.177 88.122,269.188 87.300 C 269.195 86.805,269.391 86.400,269.624 86.400 C 269.857 86.400,269.944 86.232,269.817 86.028 C 269.691 85.823,269.770 85.542,269.993 85.404 C 270.659 84.993,270.456 83.658,269.664 83.234 C 268.880 82.814,267.200 82.804,267.200 83.218 M167.546 84.159 C 167.285 84.732,166.920 85.200,166.736 85.200 C 166.551 85.200,166.400 85.380,166.400 85.600 C 166.400 86.313,167.438 86.024,168.344 85.060 C 169.120 84.234,169.154 84.059,168.623 83.619 C 168.120 83.201,167.942 83.290,167.546 84.159 M243.982 83.700 C 243.642 84.949,244.369 86.210,245.257 85.914 C 245.559 85.814,245.513 85.570,245.118 85.175 C 244.794 84.851,244.424 84.319,244.296 83.993 C 244.168 83.667,244.026 83.535,243.982 83.700 M164.989 87.621 C 164.642 88.293,164.007 89.193,163.579 89.621 C 162.780 90.420,162.525 91.600,163.151 91.600 C 163.858 91.600,164.654 90.288,164.067 90.091 C 163.729 89.977,163.984 89.638,164.763 89.164 C 165.671 88.612,165.971 88.153,165.909 87.408 C 165.803 86.131,165.754 86.142,164.989 87.621 M246.000 86.875 C 246.000 87.220,246.270 87.726,246.600 88.000 C 247.363 88.634,247.356 88.039,246.587 87.024 C 246.117 86.402,246.000 86.372,246.000 86.875 M257.845 89.428 C 257.713 89.770,257.437 89.946,257.230 89.819 C 257.024 89.691,256.742 89.770,256.604 89.993 C 256.466 90.217,256.701 90.400,257.127 90.400 C 258.033 90.400,259.026 89.387,258.461 89.038 C 258.254 88.910,257.976 89.085,257.845 89.428 M161.312 92.900 C 160.890 93.615,160.557 94.294,160.572 94.409 C 160.588 94.525,160.180 95.065,159.667 95.609 C 158.130 97.242,157.840 98.000,158.754 98.000 C 159.299 98.000,159.617 97.634,159.801 96.797 C 159.946 96.135,160.218 95.688,160.405 95.803 C 160.990 96.165,161.332 95.130,160.751 94.755 C 160.324 94.480,160.408 94.343,161.123 94.147 C 161.666 93.999,161.962 93.678,161.843 93.368 C 161.705 93.009,161.857 92.922,162.320 93.095 C 162.888 93.308,162.918 93.249,162.503 92.738 C 162.230 92.402,162.125 92.008,162.270 91.863 C 162.415 91.718,162.431 91.600,162.306 91.600 C 162.181 91.600,161.734 92.185,161.312 92.900 M251.169 94.076 C 250.922 95.074,250.930 95.600,251.193 95.600 C 251.694 95.600,252.011 94.454,251.583 94.189 C 251.372 94.059,251.186 94.008,251.169 94.076 M119.329 97.129 C 118.693 97.764,118.680 98.016,119.244 98.800 C 119.603 99.300,119.636 99.278,119.439 98.670 C 119.308 98.266,119.469 97.674,119.801 97.342 C 120.131 97.012,120.400 96.925,120.400 97.148 C 120.400 97.371,120.227 97.660,120.015 97.791 C 119.599 98.048,120.117 99.777,120.888 100.706 C 121.223 101.110,121.400 101.123,121.624 100.761 C 121.809 100.463,122.197 100.404,122.660 100.605 C 123.067 100.782,123.610 100.893,123.867 100.853 C 124.125 100.813,125.005 101.234,125.823 101.790 C 126.642 102.345,127.542 102.800,127.823 102.800 C 128.104 102.800,128.619 102.909,128.967 103.043 C 129.983 103.432,129.729 102.107,128.600 101.125 C 127.276 99.974,127.331 99.723,129.071 98.996 C 131.431 98.010,129.494 97.195,124.700 97.156 C 124.315 97.153,124.000 97.019,124.000 96.858 C 124.000 96.340,119.879 96.579,119.329 97.129 M260.259 99.793 C 258.114 102.278,257.791 102.993,257.451 106.000 L 257.202 108.200 257.990 106.488 C 259.163 103.937,260.777 102.000,261.727 102.000 C 262.375 102.000,262.453 101.893,262.080 101.520 C 261.816 101.256,261.600 100.827,261.600 100.567 C 261.600 99.931,263.112 99.564,263.349 100.142 C 263.470 100.436,263.548 100.408,263.568 100.063 C 263.586 99.768,263.266 99.102,262.859 98.584 L 262.117 97.641 260.259 99.793 M131.200 98.835 C 131.200 99.680,132.939 99.945,133.416 99.173 C 133.771 98.599,133.427 98.315,132.213 98.182 C 131.443 98.097,131.200 98.254,131.200 98.835 M137.855 100.200 C 138.113 100.871,138.639 100.985,138.974 100.442 C 139.096 100.245,138.912 99.975,138.565 99.842 C 137.664 99.496,137.598 99.530,137.855 100.200 M156.839 100.153 C 156.486 100.578,156.512 100.758,156.951 100.926 C 157.614 101.180,158.000 100.889,158.000 100.133 C 158.000 99.441,157.421 99.451,156.839 100.153 M156.000 101.600 C 156.000 101.820,156.015 102.115,156.034 102.255 C 156.053 102.396,155.861 102.639,155.608 102.795 C 155.354 102.952,155.106 103.359,155.056 103.700 C 155.006 104.040,154.743 104.586,154.472 104.913 C 154.076 105.390,154.096 105.551,154.570 105.733 C 155.164 105.961,156.400 104.074,156.400 102.939 C 156.400 102.642,156.580 102.400,156.800 102.400 C 157.020 102.400,157.200 102.130,157.200 101.800 C 157.200 101.470,156.930 101.200,156.600 101.200 C 156.270 101.200,156.000 101.380,156.000 101.600 M148.406 104.075 C 148.402 104.477,148.687 104.729,149.110 104.697 C 149.501 104.667,150.399 105.071,151.105 105.593 C 151.812 106.116,152.522 106.411,152.683 106.250 C 153.036 105.897,151.975 105.168,151.519 105.450 C 151.344 105.558,151.200 105.469,151.200 105.251 C 151.200 104.864,150.155 104.380,149.445 104.439 C 149.249 104.455,148.937 104.228,148.751 103.934 C 148.489 103.520,148.411 103.552,148.406 104.075 M260.400 104.708 C 260.400 105.152,260.670 105.618,261.000 105.745 C 261.350 105.879,261.600 105.751,261.600 105.436 C 261.600 105.140,261.330 104.674,261.000 104.400 C 260.500 103.985,260.400 104.037,260.400 104.708 M153.329 106.640 C 153.077 107.298,153.911 108.102,154.481 107.750 C 154.656 107.642,154.800 107.203,154.800 106.776 C 154.800 105.840,153.676 105.737,153.329 106.640 M259.600 107.477 C 259.600 107.938,259.852 108.411,260.161 108.530 C 260.830 108.786,260.772 107.812,260.076 107.116 C 259.708 106.748,259.600 106.830,259.600 107.477 M309.000 108.718 C 308.560 108.811,308.020 109.012,307.800 109.166 C 307.580 109.319,306.590 109.397,305.600 109.338 C 304.610 109.279,303.170 109.471,302.400 109.763 C 301.630 110.056,300.605 110.232,300.123 110.154 C 299.640 110.076,298.986 110.271,298.669 110.588 C 298.342 110.915,297.654 111.084,297.077 110.980 C 296.510 110.877,295.815 111.043,295.501 111.356 C 295.170 111.687,294.504 111.833,293.871 111.711 C 293.201 111.583,292.800 111.683,292.800 111.977 C 292.800 112.236,292.632 112.344,292.428 112.217 C 292.223 112.091,291.940 112.173,291.800 112.400 C 291.660 112.627,291.381 112.712,291.181 112.588 C 290.980 112.464,290.408 112.590,289.908 112.866 C 289.409 113.143,288.844 113.325,288.654 113.270 C 288.092 113.107,284.800 114.476,284.800 114.872 C 284.800 115.072,284.575 115.191,284.300 115.136 C 283.512 114.981,280.800 116.017,280.800 116.474 C 280.800 116.700,280.535 116.784,280.212 116.660 C 279.888 116.536,279.349 116.708,279.015 117.042 C 278.680 117.377,278.225 117.539,278.003 117.402 C 277.781 117.265,277.600 117.313,277.600 117.510 C 277.600 117.706,277.370 117.867,277.090 117.867 C 276.334 117.867,268.281 122.364,267.700 123.111 C 267.425 123.464,266.948 123.790,266.639 123.835 C 265.651 123.980,263.600 125.728,263.600 126.425 C 263.600 126.796,263.496 127.617,263.369 128.250 L 263.138 129.400 265.966 129.267 C 268.394 129.153,268.901 128.998,269.554 128.167 C 270.506 126.958,272.239 126.863,272.600 128.000 C 273.085 129.529,276.941 127.825,281.133 124.229 C 282.306 123.223,283.528 122.400,283.849 122.400 C 284.169 122.400,285.138 122.040,286.000 121.600 C 288.010 120.574,289.470 120.517,288.017 121.521 C 286.325 122.690,284.178 124.796,284.676 124.798 C 284.938 124.799,285.257 124.631,285.384 124.425 C 285.512 124.219,286.107 123.796,286.708 123.485 C 287.309 123.173,289.510 122.031,291.600 120.946 C 293.690 119.861,296.660 118.463,298.200 117.839 C 300.727 116.816,303.036 115.818,305.462 114.702 C 305.936 114.484,306.500 114.415,306.717 114.548 C 306.933 114.682,307.339 114.515,307.619 114.177 C 307.899 113.840,308.354 113.650,308.631 113.757 C 308.908 113.863,309.241 113.670,309.372 113.329 C 309.538 112.897,309.942 112.773,310.705 112.921 C 311.397 113.055,312.061 112.899,312.509 112.496 C 313.045 112.015,313.332 111.972,313.680 112.320 C 314.028 112.668,314.279 112.667,314.703 112.315 C 315.131 111.959,315.443 111.960,316.014 112.316 C 316.429 112.575,316.861 112.625,316.983 112.427 C 317.104 112.232,317.517 112.118,317.902 112.174 C 318.286 112.231,318.838 111.990,319.130 111.639 C 319.533 111.152,319.586 111.143,319.353 111.600 C 319.113 112.070,319.172 112.108,319.623 111.775 C 319.940 111.542,320.470 111.362,320.800 111.375 C 322.083 111.428,322.890 110.090,322.070 109.270 C 321.365 108.565,311.678 108.156,309.000 108.718 M258.800 111.200 C 258.800 111.753,259.067 112.000,259.662 112.000 C 260.499 112.000,260.503 111.976,259.800 111.200 C 259.402 110.760,259.014 110.400,258.938 110.400 C 258.862 110.400,258.800 110.760,258.800 111.200 M295.726 116.434 C 295.488 116.672,294.057 117.198,292.546 117.603 C 289.115 118.522,284.829 120.006,282.145 121.203 C 279.810 122.246,278.512 122.086,279.180 120.838 C 279.603 120.048,285.401 117.608,288.800 116.791 C 295.185 115.255,296.998 115.162,295.726 116.434 M115.200 124.903 C 115.200 125.114,114.936 125.184,114.613 125.060 C 114.290 124.936,113.927 124.994,113.807 125.189 C 113.377 125.884,115.474 126.163,120.200 126.039 C 124.531 125.925,126.089 125.555,125.351 124.817 C 124.963 124.430,115.200 124.513,115.200 124.903 M107.844 125.811 C 107.256 126.116,106.525 126.269,106.219 126.152 C 105.913 126.034,105.273 126.147,104.796 126.402 C 104.320 126.657,103.454 126.952,102.873 127.057 C 102.292 127.163,101.723 127.379,101.609 127.538 C 101.494 127.697,101.130 127.809,100.800 127.788 C 100.470 127.766,99.705 127.990,99.100 128.284 C 98.495 128.579,97.995 128.681,97.988 128.510 C 97.981 128.340,97.788 128.523,97.558 128.918 C 97.293 129.374,96.872 129.550,96.404 129.401 C 95.999 129.273,95.550 129.358,95.406 129.590 C 95.262 129.823,94.990 129.917,94.800 129.800 C 94.610 129.683,94.340 129.773,94.200 130.000 C 94.060 130.227,93.796 130.321,93.614 130.209 C 93.433 130.096,93.173 130.292,93.039 130.644 C 92.899 131.008,92.537 131.185,92.197 131.054 C 91.868 130.928,91.600 130.969,91.600 131.146 C 91.600 131.322,91.350 131.467,91.044 131.467 C 90.154 131.467,88.000 132.461,88.000 132.872 C 88.000 133.078,87.820 133.136,87.600 133.000 C 87.380 132.864,87.200 132.954,87.200 133.200 C 87.200 133.446,86.993 133.519,86.739 133.362 C 86.486 133.206,86.036 133.410,85.739 133.815 C 85.443 134.221,85.200 134.426,85.200 134.271 C 85.200 133.900,80.240 136.394,80.066 136.852 C 79.992 137.046,79.790 137.117,79.616 137.010 C 79.192 136.748,77.198 138.627,77.206 139.281 C 77.222 140.622,80.362 141.832,81.029 140.754 C 81.153 140.552,81.451 140.508,81.689 140.655 C 81.949 140.815,82.009 140.737,81.838 140.462 C 81.541 139.980,82.125 139.858,84.096 139.987 C 85.100 140.053,85.179 139.955,85.045 138.803 L 84.899 137.546 86.549 137.845 C 89.132 138.313,90.475 138.156,91.165 137.305 C 91.571 136.804,92.953 136.263,95.000 135.805 C 101.425 134.365,104.164 133.582,104.462 133.099 C 105.188 131.925,101.249 131.982,96.800 133.210 C 95.810 133.484,94.370 133.854,93.600 134.033 L 92.200 134.358 93.200 133.594 C 94.806 132.367,98.735 130.586,102.000 129.603 C 102.990 129.305,103.971 128.912,104.180 128.730 C 104.389 128.549,105.051 128.400,105.651 128.400 C 106.252 128.400,107.013 128.130,107.343 127.800 C 107.676 127.467,108.654 127.200,109.539 127.200 C 111.987 127.200,113.956 125.701,111.700 125.554 C 111.315 125.529,110.530 125.452,109.956 125.383 C 109.382 125.313,108.432 125.506,107.844 125.811 M128.522 125.482 C 127.668 125.786,128.457 126.800,129.543 126.794 C 130.953 126.786,131.877 126.218,131.181 125.788 C 130.569 125.410,129.176 125.249,128.522 125.482 M92.000 134.353 C 92.000 134.548,91.640 134.801,91.200 134.916 C 90.760 135.031,90.399 135.457,90.397 135.863 C 90.393 136.736,88.700 137.633,87.941 137.163 C 87.279 136.755,88.322 135.710,90.400 134.699 C 92.056 133.894,92.000 133.906,92.000 134.353 M265.200 173.130 C 265.200 173.336,265.875 174.005,266.700 174.616 C 270.440 177.387,271.131 179.308,267.819 177.728 C 265.621 176.680,265.633 177.458,267.846 179.520 C 273.266 184.570,275.390 190.026,270.269 185.745 C 269.142 184.803,268.000 184.497,268.000 185.138 C 268.000 185.618,269.373 186.800,269.931 186.800 C 270.189 186.800,270.400 186.980,270.400 187.200 C 270.400 187.720,270.168 187.703,267.910 187.018 C 265.298 186.225,264.995 186.932,267.135 188.831 C 268.180 189.759,268.722 190.537,268.581 190.907 C 268.431 191.297,269.042 192.003,270.378 192.984 C 271.491 193.801,272.507 194.859,272.635 195.335 C 272.762 195.811,273.863 196.919,275.082 197.799 C 277.774 199.742,283.457 205.645,285.043 208.146 C 286.501 210.446,286.920 210.473,286.586 208.246 C 286.428 207.191,286.503 206.154,286.776 205.646 C 287.171 204.907,287.120 204.800,286.369 204.800 C 285.636 204.800,285.536 204.618,285.691 203.563 C 285.810 202.751,285.685 202.254,285.327 202.117 C 284.940 201.968,284.855 201.513,285.035 200.554 C 285.194 199.704,285.130 199.200,284.863 199.200 C 284.483 199.200,283.841 198.010,282.759 195.300 C 282.562 194.805,282.220 193.950,282.000 193.400 C 281.082 191.106,280.601 190.157,279.969 189.400 C 278.841 188.047,278.621 184.795,279.704 185.464 C 279.955 185.619,280.004 185.530,279.826 185.242 C 279.611 184.894,279.385 184.880,279.007 185.194 C 278.225 185.843,277.076 184.547,277.376 183.353 C 277.565 182.600,277.482 182.471,276.939 182.679 C 276.518 182.840,276.367 182.778,276.532 182.510 C 276.677 182.276,276.506 181.973,276.152 181.837 C 275.764 181.688,275.586 181.296,275.704 180.846 C 275.847 180.298,275.721 180.148,275.224 180.278 C 274.822 180.383,273.891 179.836,272.926 178.927 C 271.465 177.551,267.861 174.637,265.939 173.277 C 265.532 172.990,265.200 172.923,265.200 173.130 M200.992 180.792 C 203.515 183.579,212.149 184.328,222.000 182.614 C 226.108 181.899,229.786 181.519,232.900 181.488 C 237.318 181.444,238.445 181.210,236.967 180.643 C 235.846 180.212,229.782 180.383,223.106 181.034 C 213.264 181.992,206.405 181.933,203.313 180.862 C 200.259 179.804,200.094 179.799,200.992 180.792 M144.493 183.200 C 144.493 183.970,144.575 184.285,144.676 183.900 C 144.776 183.515,144.776 182.885,144.676 182.500 C 144.575 182.115,144.493 182.430,144.493 183.200 M197.600 185.200 C 195.827 186.973,196.703 187.603,200.933 187.594 C 205.104 187.585,205.429 187.140,202.360 185.643 C 199.374 184.186,198.679 184.121,197.600 185.200 M143.611 188.168 C 143.362 188.920,142.917 189.737,142.621 189.983 C 142.325 190.228,142.175 190.783,142.288 191.215 C 142.401 191.647,142.300 192.000,142.063 192.000 C 141.826 192.000,141.412 192.765,141.143 193.700 C 140.875 194.635,140.292 195.928,139.849 196.572 C 139.405 197.217,139.229 197.629,139.456 197.489 C 140.179 197.042,141.599 198.380,141.616 199.523 C 141.631 200.532,141.682 200.500,142.416 199.029 C 142.847 198.164,143.200 197.172,143.200 196.823 C 143.200 196.474,143.560 195.204,144.000 194.000 C 144.440 192.796,144.800 191.494,144.800 191.106 C 144.800 190.718,145.058 190.400,145.373 190.400 C 146.513 190.400,146.556 187.878,145.429 187.106 C 144.575 186.521,144.054 186.826,143.611 188.168 M166.400 195.321 C 160.457 197.919,147.878 205.692,146.451 207.648 C 145.860 208.458,144.800 208.669,144.800 207.976 C 144.800 207.743,144.601 207.676,144.357 207.826 C 144.048 208.017,144.079 208.207,144.457 208.455 C 145.057 208.847,142.566 211.286,141.800 211.058 C 140.943 210.802,141.097 208.800,141.973 208.800 C 142.686 208.800,142.800 208.553,142.800 207.000 C 142.800 205.773,142.641 205.232,142.300 205.300 C 141.777 205.405,141.757 205.072,142.213 203.900 C 142.420 203.367,142.282 203.200,141.635 203.200 C 140.926 203.200,140.818 203.018,140.985 202.100 C 141.095 201.495,140.839 201.990,140.417 203.200 C 139.994 204.410,139.638 206.151,139.624 207.069 C 139.611 207.988,139.430 209.608,139.222 210.669 C 138.371 215.021,137.493 224.681,137.886 225.381 C 138.232 226.001,138.394 225.899,139.210 224.544 C 147.379 210.982,154.699 203.642,165.961 197.725 C 169.398 195.918,170.560 194.983,170.164 194.341 C 169.855 193.841,169.683 193.886,166.400 195.321 M103.047 243.823 C 102.911 244.176,102.800 244.502,102.800 244.548 C 102.800 244.593,103.160 244.657,103.600 244.690 C 104.529 244.760,104.638 244.296,103.847 243.639 C 103.418 243.283,103.238 243.325,103.047 243.823 M157.420 243.548 C 157.629 243.739,158.520 244.001,159.400 244.129 C 160.942 244.353,160.964 244.341,160.000 243.795 C 158.908 243.176,156.793 242.974,157.420 243.548 M102.603 247.205 C 102.737 247.422,102.651 247.600,102.411 247.600 C 102.138 247.600,102.002 248.483,102.047 249.967 C 102.113 252.163,102.171 252.300,102.859 251.870 C 103.842 251.257,103.937 247.415,102.979 247.047 C 102.623 246.911,102.463 246.978,102.603 247.205 M151.600 247.553 C 151.600 248.196,153.902 250.400,154.573 250.400 C 155.173 250.400,154.680 249.156,153.640 248.042 C 152.319 246.629,151.600 246.456,151.600 247.553 M142.297 249.436 C 141.639 250.094,142.067 250.449,143.216 250.196 C 144.660 249.879,146.196 250.729,146.626 252.081 C 146.783 252.578,147.443 253.480,148.092 254.086 C 150.495 256.331,147.527 256.960,144.783 254.787 C 143.996 254.164,142.868 253.532,142.276 253.383 C 141.582 253.209,141.200 252.844,141.200 252.357 C 141.200 251.359,139.734 251.347,139.419 252.341 C 139.289 252.748,138.332 253.569,137.292 254.165 C 134.341 255.855,132.643 257.170,132.112 258.179 C 131.555 259.236,130.674 259.680,129.800 259.345 C 129.423 259.200,129.200 259.349,129.200 259.743 C 129.200 260.529,128.086 261.200,126.782 261.200 C 126.553 261.200,126.418 261.515,126.482 261.900 C 126.556 262.336,126.374 262.565,126.000 262.507 C 125.523 262.433,125.387 262.958,125.335 265.074 C 125.299 266.549,125.413 267.502,125.591 267.214 C 125.827 266.832,125.987 266.929,126.193 267.577 C 126.524 268.621,126.259 269.008,125.527 268.552 C 124.178 267.713,122.304 268.604,120.413 270.983 C 118.403 273.513,119.038 274.193,121.639 272.297 C 124.185 270.442,126.806 272.252,126.889 275.923 C 126.947 278.459,127.127 278.481,129.091 276.183 C 130.817 274.164,131.331 274.189,133.644 276.401 C 141.598 284.013,151.654 289.634,163.200 292.921 C 171.623 295.319,183.245 295.494,196.200 293.419 C 198.180 293.102,203.642 292.643,208.338 292.400 C 221.318 291.727,229.985 289.864,234.200 286.841 C 236.548 285.157,239.200 282.628,239.200 282.074 C 239.200 281.860,239.470 281.582,239.800 281.455 C 240.130 281.329,240.400 280.947,240.400 280.607 C 240.400 280.267,240.605 279.660,240.856 279.258 C 241.416 278.362,241.011 275.873,240.194 275.195 C 239.872 274.928,239.678 274.595,239.764 274.455 C 240.063 273.963,236.399 271.516,233.428 270.225 C 231.777 269.507,230.195 268.741,229.913 268.522 C 229.631 268.303,228.500 267.808,227.400 267.422 C 219.741 264.731,219.983 264.782,212.804 264.346 C 208.952 264.112,205.350 263.872,204.800 263.812 C 204.250 263.752,203.485 263.680,203.100 263.652 C 202.603 263.615,202.400 263.257,202.400 262.416 C 202.400 261.130,202.808 261.324,196.974 259.824 C 195.639 259.481,193.985 259.200,193.297 259.200 C 192.610 259.200,191.936 259.020,191.800 258.800 C 191.656 258.567,192.055 258.400,192.753 258.400 C 193.413 258.400,194.049 258.244,194.167 258.053 C 194.431 257.626,191.745 257.214,187.036 256.960 C 183.049 256.745,182.651 256.614,182.916 255.599 C 183.139 254.748,180.746 254.187,179.572 254.815 C 179.178 255.026,177.539 255.294,175.928 255.411 C 174.318 255.527,172.190 255.746,171.200 255.897 C 168.943 256.240,164.866 256.105,162.027 255.592 C 160.831 255.377,159.085 255.200,158.146 255.200 C 154.351 255.200,149.806 253.359,149.802 251.819 C 149.799 250.685,143.157 248.576,142.297 249.436 M102.197 256.476 C 102.393 260.864,103.038 261.384,103.630 257.633 C 104.002 255.284,103.617 253.508,102.708 253.375 C 102.140 253.291,102.073 253.697,102.197 256.476 M140.728 254.331 C 140.875 255.332,140.205 255.510,139.843 254.567 C 139.463 253.577,139.555 253.119,140.100 253.298 C 140.375 253.389,140.658 253.854,140.728 254.331 M162.800 254.368 C 162.800 254.900,165.112 255.371,167.184 255.260 C 169.165 255.155,169.400 255.048,169.016 254.427 C 168.694 253.904,162.800 253.849,162.800 254.368 M155.500 255.852 C 156.779 256.195,156.614 256.614,155.155 256.725 C 154.471 256.777,153.610 256.980,153.243 257.177 C 152.875 257.374,151.950 257.397,151.187 257.229 L 149.800 256.923 151.705 256.615 C 152.753 256.446,153.708 256.148,153.829 255.954 C 154.084 255.540,154.289 255.528,155.500 255.852 M102.977 262.965 C 103.083 263.606,103.384 264.326,103.644 264.565 C 103.991 264.884,104.042 264.867,103.835 264.500 C 103.680 264.225,103.757 264.000,104.006 264.000 C 104.255 264.000,104.400 263.720,104.329 263.379 C 104.258 263.037,104.040 262.783,103.845 262.813 C 103.649 262.843,103.330 262.628,103.136 262.334 C 102.907 261.987,102.851 262.209,102.977 262.965 M103.781 266.860 C 103.604 267.418,103.669 267.823,103.949 267.916 C 104.200 268.000,104.303 268.233,104.179 268.434 C 104.055 268.635,104.245 268.800,104.602 268.800 C 105.090 268.800,105.220 268.486,105.125 267.531 C 104.974 266.002,104.179 265.605,103.781 266.860 \\\" stroke=\\\"none\\\" fill=\\\"#dacf5f\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path1\\\" d=\\\"M262.523 87.678 C 261.355 88.242,260.904 89.348,261.982 89.006 C 262.570 88.819,262.911 89.055,263.389 89.980 C 264.180 91.508,264.633 91.491,266.473 89.864 C 267.524 88.935,267.847 88.399,267.598 87.996 C 267.304 87.521,267.130 87.539,266.493 88.116 C 265.525 88.992,265.339 88.976,265.084 88.000 C 264.856 87.127,263.909 87.008,262.523 87.678 M263.281 94.040 C 260.577 98.960,257.423 102.400,255.615 102.400 C 254.947 102.400,254.400 102.226,254.400 102.013 C 254.400 101.799,254.130 101.729,253.800 101.855 C 253.114 102.118,252.975 103.600,253.636 103.600 C 253.909 103.600,254.021 104.312,253.936 105.500 C 253.810 107.266,253.863 107.393,254.700 107.305 C 255.450 107.225,255.600 107.405,255.600 108.379 C 255.600 110.364,256.306 111.776,257.007 111.194 C 257.514 110.773,257.600 110.931,257.600 112.284 C 257.600 114.288,257.780 114.448,259.224 113.728 C 260.565 113.059,260.795 112.000,259.600 112.000 C 259.051 112.000,258.800 111.733,258.800 111.151 C 258.800 110.491,258.918 110.400,259.331 110.743 C 259.746 111.087,259.855 110.990,259.831 110.298 C 259.812 109.771,260.040 109.411,260.395 109.407 C 260.722 109.403,261.050 109.085,261.124 108.700 C 261.198 108.315,261.055 108.000,260.806 108.000 C 260.557 108.000,260.463 108.178,260.597 108.395 C 260.737 108.622,260.577 108.689,260.221 108.553 C 259.879 108.422,259.600 107.938,259.600 107.477 C 259.600 106.840,259.711 106.751,260.066 107.106 C 260.813 107.853,262.035 106.143,261.924 104.505 C 261.874 103.760,262.034 103.026,262.280 102.874 C 263.232 102.286,263.373 99.630,262.439 99.874 C 261.502 100.119,261.355 100.795,262.080 101.520 C 262.453 101.893,262.375 102.000,261.727 102.000 C 260.777 102.000,259.163 103.937,257.990 106.488 L 257.202 108.200 257.451 106.000 C 257.791 102.993,258.114 102.277,260.256 99.797 L 262.111 97.648 262.886 98.524 C 263.312 99.006,263.539 99.163,263.390 98.873 C 263.237 98.574,263.440 98.109,263.860 97.798 C 264.507 97.317,264.533 97.138,264.060 96.366 C 263.578 95.578,263.594 95.512,264.209 95.748 C 264.776 95.966,264.847 95.853,264.614 95.106 C 264.458 94.608,264.335 93.885,264.341 93.500 C 264.355 92.482,264.053 92.636,263.281 94.040 M250.900 97.691 C 249.867 98.793,249.735 99.600,250.586 99.600 C 251.281 99.600,252.103 98.215,251.925 97.344 C 251.826 96.859,251.611 96.932,250.900 97.691 M129.100 98.885 C 127.327 99.808,127.288 99.984,128.600 101.125 C 129.729 102.107,129.983 103.432,128.967 103.043 C 128.619 102.909,128.104 102.800,127.823 102.800 C 127.542 102.800,126.633 102.340,125.804 101.777 C 124.975 101.214,124.056 100.847,123.761 100.960 C 123.467 101.073,123.119 100.993,122.989 100.783 C 122.629 100.200,122.133 100.326,122.133 101.000 C 122.133 101.330,122.221 101.513,122.327 101.406 C 122.434 101.300,122.777 101.525,123.090 101.906 C 123.429 102.320,123.535 102.357,123.353 102.000 C 123.089 101.483,123.141 101.476,123.723 101.949 C 124.095 102.251,124.406 102.341,124.413 102.149 C 124.421 101.957,124.771 102.213,125.192 102.718 C 125.612 103.222,126.101 103.617,126.278 103.594 C 126.455 103.571,126.698 103.967,126.817 104.472 C 126.966 105.104,127.130 105.236,127.342 104.894 C 127.527 104.595,128.036 104.494,128.625 104.642 C 131.807 105.441,133.946 101.978,131.692 99.676 C 131.193 99.166,130.889 98.580,131.016 98.374 C 131.341 97.848,130.833 97.983,129.100 98.885 M261.600 105.436 C 261.600 105.751,261.350 105.879,261.000 105.745 C 260.670 105.618,260.400 105.152,260.400 104.708 C 260.400 104.037,260.500 103.985,261.000 104.400 C 261.330 104.674,261.600 105.140,261.600 105.436 M312.414 112.583 C 312.096 112.967,311.534 113.087,310.771 112.934 C 309.937 112.767,309.545 112.877,309.373 113.326 C 309.241 113.669,308.908 113.863,308.631 113.757 C 308.354 113.650,307.899 113.840,307.619 114.177 C 307.339 114.515,306.933 114.682,306.717 114.548 C 306.500 114.415,305.936 114.484,305.462 114.702 C 303.036 115.818,300.727 116.816,298.200 117.839 C 296.660 118.463,293.690 119.861,291.600 120.946 C 289.510 122.031,287.309 123.173,286.708 123.485 C 286.107 123.796,285.512 124.219,285.384 124.425 C 285.257 124.631,284.938 124.799,284.676 124.798 C 284.178 124.796,286.325 122.690,288.017 121.521 C 289.470 120.517,288.010 120.574,286.000 121.600 C 285.138 122.040,284.169 122.400,283.849 122.400 C 283.528 122.400,282.306 123.223,281.133 124.229 C 276.941 127.825,273.085 129.529,272.600 128.000 C 272.239 126.863,270.506 126.958,269.554 128.167 C 268.438 129.586,263.046 129.905,263.309 128.536 C 263.426 127.926,262.876 128.335,261.438 129.927 C 260.317 131.167,259.035 132.545,258.588 132.991 C 257.153 134.421,256.190 137.600,257.192 137.600 C 257.652 137.600,259.200 134.701,259.200 133.840 C 259.200 133.021,259.977 132.617,260.515 133.155 C 261.227 133.867,262.191 133.674,263.181 132.621 C 264.900 130.790,267.372 130.755,266.178 132.578 C 265.255 133.987,265.646 134.228,267.591 133.450 C 269.606 132.644,269.600 132.644,269.600 133.520 C 269.600 135.166,270.401 135.145,273.534 133.418 C 277.045 131.482,278.902 130.868,278.562 131.755 C 278.443 132.065,278.523 132.429,278.739 132.562 C 279.343 132.936,281.200 132.093,281.200 131.445 C 281.200 130.755,286.296 126.000,287.035 126.000 C 287.321 126.000,287.795 125.657,288.088 125.238 C 288.382 124.819,289.517 124.054,290.611 123.538 C 291.705 123.022,292.717 122.439,292.860 122.242 C 293.002 122.045,293.407 121.994,293.760 122.129 C 294.112 122.264,294.400 122.190,294.400 121.964 C 294.400 121.738,294.580 121.664,294.800 121.800 C 295.020 121.936,295.200 121.657,295.200 121.180 C 295.200 120.455,295.364 120.354,296.200 120.564 C 296.913 120.743,297.200 120.653,297.200 120.250 C 297.200 119.940,297.495 119.572,297.857 119.434 C 298.430 119.214,298.442 119.267,297.957 119.856 C 297.448 120.473,297.480 120.488,298.323 120.039 C 298.830 119.769,299.339 119.303,299.454 119.003 C 299.569 118.703,300.009 118.525,300.432 118.606 C 300.891 118.695,301.200 118.531,301.200 118.200 C 301.200 117.861,301.511 117.706,302.000 117.800 C 302.489 117.894,302.800 117.739,302.800 117.400 C 302.800 117.069,303.109 116.905,303.568 116.994 C 303.991 117.075,304.439 116.877,304.563 116.552 C 304.687 116.228,305.017 116.007,305.295 116.062 C 306.025 116.207,308.800 115.201,308.800 114.792 C 308.800 114.602,309.169 114.517,309.620 114.604 C 310.100 114.696,310.537 114.509,310.674 114.151 C 310.829 113.747,311.214 113.617,311.809 113.766 C 312.491 113.938,312.762 113.790,312.927 113.156 C 313.067 112.624,313.324 112.429,313.635 112.622 C 313.947 112.815,314.021 112.757,313.838 112.462 C 313.455 111.841,312.997 111.880,312.414 112.583 M314.584 112.427 C 314.439 112.661,314.453 112.976,314.615 113.127 C 314.777 113.277,314.987 113.185,315.081 112.922 C 315.175 112.660,315.540 112.555,315.891 112.690 C 316.316 112.854,316.434 112.779,316.242 112.468 C 315.881 111.883,314.934 111.860,314.584 112.427 M137.847 114.500 C 137.667 115.155,137.872 115.639,138.600 116.281 C 139.150 116.765,139.600 117.331,139.600 117.538 C 139.600 117.745,139.881 118.022,140.225 118.154 C 140.569 118.286,140.746 118.563,140.619 118.770 C 140.491 118.976,140.598 119.275,140.855 119.434 C 141.148 119.615,141.216 119.550,141.038 119.262 C 140.870 118.990,141.004 118.800,141.364 118.800 C 141.743 118.800,141.887 119.028,141.745 119.400 C 141.618 119.730,141.714 120.000,141.957 120.000 C 142.201 120.000,142.355 120.225,142.300 120.500 C 142.245 120.775,142.470 121.000,142.800 121.000 C 143.623 121.000,145.210 122.405,145.637 123.510 C 146.001 124.453,147.043 125.090,147.490 124.643 C 148.172 123.961,142.624 115.563,140.627 114.254 C 139.219 113.332,138.141 113.427,137.847 114.500 M293.000 115.831 C 288.162 116.893,286.927 117.251,283.297 118.644 C 281.097 119.488,279.426 120.379,279.180 120.838 C 278.512 122.086,279.810 122.246,282.145 121.203 C 284.829 120.006,289.115 118.522,292.546 117.603 C 297.020 116.404,297.415 114.861,293.000 115.831 M110.853 125.386 C 110.969 125.503,111.560 125.639,112.165 125.689 L 113.265 125.780 112.388 126.490 C 111.906 126.880,110.986 127.200,110.343 127.200 C 109.700 127.200,108.528 127.470,107.738 127.800 C 106.949 128.130,105.910 128.400,105.431 128.400 C 104.952 128.400,104.389 128.549,104.180 128.730 C 103.971 128.912,102.990 129.305,102.000 129.603 C 98.735 130.586,94.806 132.367,93.200 133.594 L 92.200 134.358 93.600 134.033 C 94.370 133.854,95.810 133.484,96.800 133.210 C 101.249 131.982,105.188 131.925,104.462 133.099 C 104.164 133.582,101.425 134.365,95.000 135.805 C 92.953 136.263,91.571 136.804,91.165 137.305 C 90.475 138.156,89.132 138.313,86.549 137.845 L 84.899 137.546 85.043 138.785 C 85.181 139.973,85.130 140.020,83.808 139.931 C 83.049 139.880,82.311 139.956,82.167 140.100 C 81.726 140.541,94.513 140.404,95.046 139.962 C 95.664 139.449,99.647 139.661,99.505 140.200 C 99.447 140.420,99.265 140.555,99.100 140.500 C 98.935 140.445,98.800 140.569,98.800 140.775 C 98.800 141.831,100.485 140.882,101.217 139.414 C 103.047 135.745,103.710 135.327,108.737 134.678 C 114.301 133.959,114.922 133.521,112.080 132.320 C 110.936 131.837,110.000 131.316,110.000 131.163 C 110.000 130.521,114.660 129.464,120.400 128.805 C 127.245 128.018,126.938 127.490,119.218 126.773 C 116.918 126.560,114.668 126.153,114.218 125.870 C 113.439 125.380,110.411 124.945,110.853 125.386 M272.945 131.400 C 272.701 132.034,272.000 132.232,272.000 131.667 C 272.000 131.244,272.437 130.800,272.854 130.800 C 273.031 130.800,273.071 131.070,272.945 131.400 M90.400 134.699 C 88.322 135.710,87.279 136.755,87.941 137.163 C 88.700 137.633,90.393 136.736,90.397 135.863 C 90.399 135.457,90.760 135.031,91.200 134.916 C 91.640 134.801,92.000 134.548,92.000 134.353 C 92.000 133.906,92.056 133.894,90.400 134.699 M251.414 140.700 C 249.190 143.731,249.652 143.854,252.700 141.042 C 254.082 139.767,254.386 138.800,253.404 138.800 C 253.076 138.800,252.180 139.655,251.414 140.700 M251.200 165.592 C 251.200 165.807,251.965 166.374,252.900 166.851 C 256.244 168.557,257.756 170.822,256.323 171.982 L 255.447 172.691 256.761 174.351 C 257.484 175.264,258.889 176.487,259.883 177.070 C 262.283 178.476,263.431 180.282,262.547 181.259 C 261.978 181.887,261.979 182.035,262.560 182.865 C 263.476 184.172,263.402 184.279,261.382 184.582 C 259.791 184.820,259.595 184.955,259.820 185.662 C 260.037 186.346,259.964 186.410,259.338 186.083 C 258.932 185.871,257.070 185.498,255.200 185.254 C 250.026 184.579,249.592 184.504,246.843 183.807 C 245.437 183.450,243.817 183.223,243.243 183.303 C 241.947 183.483,242.559 183.744,245.800 184.394 C 250.092 185.254,254.900 186.851,260.000 189.111 C 265.280 191.451,266.182 191.974,269.638 194.711 C 270.827 195.653,273.423 197.650,275.406 199.151 C 279.065 201.920,279.407 202.272,283.979 207.980 C 285.398 209.751,286.692 211.200,286.855 211.200 C 287.409 211.200,287.720 207.626,287.218 207.022 C 286.863 206.594,286.857 206.240,287.194 205.610 C 287.712 204.643,287.355 203.057,286.709 203.456 C 286.414 203.639,286.356 203.320,286.528 202.462 C 286.726 201.471,286.644 201.200,286.147 201.200 C 285.668 201.200,285.576 200.952,285.769 200.182 C 286.009 199.224,285.051 196.801,284.300 196.467 C 284.135 196.393,284.000 195.909,284.000 195.390 C 284.000 194.872,283.811 194.331,283.581 194.188 C 283.350 194.046,283.215 193.540,283.281 193.065 C 283.359 192.500,283.209 192.241,282.849 192.317 C 282.471 192.397,282.366 192.175,282.513 191.610 C 282.633 191.151,282.466 190.523,282.136 190.193 C 281.810 189.867,281.691 189.595,281.871 189.588 C 282.052 189.581,281.885 189.392,281.500 189.168 C 281.115 188.944,280.800 188.399,280.800 187.957 C 280.800 187.445,280.630 187.258,280.332 187.442 C 280.022 187.633,279.946 187.517,280.107 187.099 C 280.309 186.572,279.721 186.000,278.977 186.000 C 278.590 186.000,279.374 188.680,279.972 189.400 C 280.683 190.256,281.533 192.051,282.813 195.400 C 283.730 197.799,284.485 199.200,284.863 199.200 C 285.130 199.200,285.194 199.704,285.035 200.554 C 284.855 201.513,284.940 201.968,285.327 202.117 C 285.685 202.254,285.810 202.751,285.691 203.563 C 285.536 204.618,285.636 204.800,286.369 204.800 C 287.120 204.800,287.171 204.907,286.776 205.646 C 286.503 206.154,286.428 207.191,286.586 208.246 C 286.920 210.473,286.501 210.446,285.043 208.146 C 283.457 205.645,277.774 199.742,275.082 197.799 C 273.863 196.919,272.762 195.811,272.635 195.335 C 272.507 194.859,271.491 193.801,270.378 192.984 C 269.042 192.003,268.431 191.297,268.581 190.907 C 268.722 190.537,268.180 189.759,267.135 188.831 C 264.995 186.932,265.298 186.225,267.910 187.018 C 270.168 187.703,270.400 187.720,270.400 187.200 C 270.400 186.980,270.158 186.800,269.862 186.800 C 269.322 186.800,268.000 185.571,268.000 185.069 C 268.000 184.490,269.194 184.846,270.269 185.745 C 275.390 190.026,273.266 184.570,267.846 179.520 C 265.633 177.458,265.621 176.680,267.819 177.728 C 271.251 179.365,270.428 177.413,266.391 174.342 C 265.626 173.760,265.101 173.179,265.223 173.052 C 265.467 172.798,270.477 176.626,272.941 178.948 C 273.788 179.747,274.733 180.400,275.041 180.400 C 275.348 180.400,275.600 180.676,275.600 181.013 C 275.600 181.349,275.869 181.728,276.198 181.854 C 276.526 181.981,276.696 182.245,276.574 182.442 C 276.452 182.639,276.533 182.800,276.753 182.800 C 277.581 182.800,277.503 182.148,276.568 181.248 C 276.036 180.735,275.600 180.155,275.600 179.958 C 275.600 179.761,275.285 179.586,274.900 179.568 C 274.515 179.551,274.401 179.454,274.646 179.353 C 275.292 179.087,273.037 176.800,272.129 176.800 C 271.716 176.800,270.818 176.305,270.133 175.700 C 265.368 171.493,260.593 168.329,255.850 166.237 C 253.474 165.188,251.200 164.873,251.200 165.592 M235.400 168.400 C 235.536 168.620,236.007 168.800,236.447 168.800 C 236.887 168.800,237.136 168.620,237.000 168.400 C 236.864 168.180,236.393 168.000,235.953 168.000 C 235.513 168.000,235.264 168.180,235.400 168.400 M238.160 168.693 C 238.321 168.854,239.116 169.197,239.927 169.453 C 240.737 169.710,243.801 170.748,246.735 171.760 C 252.135 173.623,253.448 173.924,253.000 173.200 C 252.864 172.980,252.463 172.800,252.108 172.800 C 251.753 172.800,251.179 172.544,250.831 172.232 C 249.123 170.696,236.690 167.223,238.160 168.693 M159.600 175.094 C 158.562 175.493,153.629 179.332,148.956 183.377 C 146.952 185.112,146.450 185.152,146.140 183.600 C 145.810 181.952,144.802 182.027,144.795 183.700 C 144.792 184.415,144.685 185.388,144.558 185.861 C 144.389 186.492,144.541 186.791,145.124 186.976 C 146.498 187.412,146.702 190.400,145.357 190.400 C 145.051 190.400,144.800 190.718,144.800 191.106 C 144.800 191.494,144.440 192.796,144.000 194.000 C 143.560 195.204,143.200 196.474,143.200 196.823 C 143.200 197.172,142.847 198.164,142.416 199.029 C 141.682 200.500,141.631 200.532,141.616 199.523 C 141.607 198.885,141.247 198.198,140.735 197.839 C 139.755 197.153,139.124 197.337,139.459 198.211 C 139.583 198.532,139.845 198.696,140.042 198.574 C 140.532 198.271,140.493 199.704,139.973 201.070 C 138.334 205.383,136.470 225.166,137.525 227.052 C 137.843 227.619,137.971 227.582,138.564 226.750 C 139.776 225.047,142.606 220.657,144.204 218.000 C 149.399 209.360,156.595 203.235,169.100 196.808 C 175.219 193.663,175.294 193.599,173.834 192.818 C 172.562 192.138,168.830 193.244,162.247 196.255 C 157.090 198.613,156.669 198.669,157.984 196.823 C 159.106 195.247,158.422 195.194,155.498 196.631 C 150.884 198.898,150.864 198.869,154.320 194.900 C 156.850 191.996,156.763 191.905,153.308 193.836 C 150.393 195.467,149.829 195.394,151.350 193.586 C 153.339 191.222,152.458 190.909,149.713 193.004 C 147.274 194.867,147.175 194.561,149.147 191.243 C 151.000 188.123,151.040 188.000,150.200 188.000 C 148.161 188.000,153.380 181.467,159.400 176.484 C 161.194 174.998,161.273 174.451,159.600 175.094 M199.440 179.535 C 197.651 182.429,213.148 186.223,219.161 184.363 C 220.372 183.989,228.175 182.523,230.800 182.177 C 231.790 182.046,234.829 182.145,237.554 182.396 C 244.680 183.051,245.250 182.118,238.648 180.605 C 235.136 179.799,230.280 179.884,217.414 180.975 C 209.878 181.613,205.339 181.316,201.895 179.959 C 199.681 179.086,199.714 179.092,199.440 179.535 M203.313 180.862 C 206.405 181.933,213.264 181.992,223.106 181.034 C 229.782 180.383,235.846 180.212,236.967 180.643 C 238.445 181.210,237.318 181.444,232.900 181.488 C 229.786 181.519,226.108 181.899,222.000 182.614 C 212.149 184.328,203.515 183.579,200.992 180.792 C 200.094 179.799,200.259 179.804,203.313 180.862 M277.485 183.049 C 277.017 183.516,277.159 184.302,277.832 184.975 C 278.421 185.564,279.211 185.507,279.191 184.876 C 279.172 184.295,277.756 182.778,277.485 183.049 M195.769 185.249 C 193.982 188.081,194.288 188.170,205.547 188.086 C 223.027 187.956,238.000 186.579,238.000 185.103 C 238.000 184.631,225.744 185.011,221.800 185.605 C 215.956 186.486,207.569 186.509,204.411 185.654 C 200.853 184.691,200.590 184.754,203.046 185.980 C 205.411 187.161,204.815 187.588,200.800 187.588 C 197.364 187.588,196.595 187.278,196.984 186.050 C 197.340 184.928,198.618 184.279,199.937 184.550 C 200.950 184.757,200.943 184.740,199.800 184.202 C 197.733 183.228,196.910 183.442,195.769 185.249 M170.164 194.341 C 170.560 194.983,169.398 195.918,165.961 197.725 C 154.699 203.642,147.379 210.982,139.210 224.544 C 138.394 225.899,138.232 226.001,137.886 225.381 C 137.493 224.681,138.371 215.021,139.222 210.669 C 139.430 209.608,139.611 207.988,139.624 207.069 C 139.638 206.151,139.994 204.410,140.417 203.200 C 140.839 201.990,141.095 201.495,140.985 202.100 C 140.818 203.018,140.926 203.200,141.635 203.200 C 142.282 203.200,142.420 203.367,142.213 203.900 C 141.757 205.072,141.777 205.405,142.300 205.300 C 142.641 205.232,142.800 205.773,142.800 207.000 C 142.800 208.553,142.686 208.800,141.973 208.800 C 141.097 208.800,140.943 210.802,141.800 211.058 C 142.566 211.286,145.057 208.847,144.457 208.455 C 144.079 208.207,144.048 208.017,144.357 207.826 C 144.601 207.676,144.800 207.743,144.800 207.976 C 144.800 208.669,145.860 208.458,146.451 207.648 C 148.795 204.435,169.293 192.932,170.164 194.341 M118.506 215.839 C 118.661 215.994,118.475 216.374,118.094 216.683 C 117.482 217.178,117.518 217.188,118.400 216.768 C 119.739 216.130,119.735 216.137,118.929 215.828 C 118.542 215.679,118.351 215.684,118.506 215.839 M112.353 223.913 C 112.327 224.071,112.325 224.330,112.349 224.488 C 112.373 224.646,112.029 224.971,111.585 225.208 C 111.141 225.446,110.883 225.811,111.012 226.020 C 111.142 226.229,111.046 226.400,110.800 226.400 C 110.554 226.400,110.452 226.561,110.574 226.758 C 110.696 226.955,110.515 227.224,110.172 227.355 C 109.830 227.487,109.661 227.776,109.798 227.997 C 109.935 228.219,109.846 228.400,109.600 228.400 C 109.354 228.400,109.264 228.580,109.400 228.800 C 109.536 229.020,109.457 229.200,109.224 229.200 C 108.991 229.200,108.800 229.397,108.800 229.638 C 108.800 229.879,108.405 230.632,107.921 231.310 C 107.438 231.989,107.256 232.413,107.517 232.251 C 107.831 232.057,107.911 232.167,107.753 232.579 C 107.622 232.921,107.343 233.200,107.134 233.200 C 106.924 233.200,106.851 233.360,106.972 233.555 C 107.093 233.750,106.936 234.121,106.624 234.380 C 106.311 234.640,106.122 235.197,106.204 235.619 C 106.285 236.042,106.066 236.547,105.716 236.743 C 105.311 236.970,105.161 237.408,105.303 237.950 C 105.425 238.418,105.381 238.712,105.205 238.603 C 104.741 238.316,104.418 239.382,104.673 240.357 C 104.815 240.902,104.667 241.276,104.245 241.438 C 103.538 241.709,103.362 243.405,104.000 243.800 C 104.660 244.208,104.452 244.844,103.700 244.718 C 102.878 244.580,102.478 246.238,103.166 246.926 C 103.983 247.743,103.700 251.345,102.773 251.924 C 101.887 252.478,101.913 253.400,102.815 253.400 C 103.935 253.400,104.114 257.069,103.122 259.692 C 102.637 260.976,102.999 262.838,103.707 262.698 C 104.209 262.598,104.221 263.059,103.784 265.600 C 103.621 266.551,103.666 266.823,103.927 266.449 C 104.138 266.146,104.511 266.021,104.755 266.172 C 105.275 266.494,105.363 268.800,104.855 268.800 C 104.666 268.800,104.597 269.250,104.702 269.800 C 104.807 270.350,105.063 270.800,105.270 270.800 C 105.478 270.800,105.541 270.972,105.411 271.182 C 104.994 271.856,105.649 273.757,106.085 273.138 C 106.346 272.768,106.392 272.935,106.231 273.674 C 105.975 274.851,107.822 280.400,108.470 280.400 C 108.677 280.400,108.740 280.574,108.608 280.786 C 108.312 281.267,109.872 284.400,110.408 284.400 C 110.624 284.400,110.800 284.130,110.800 283.800 C 110.800 283.470,110.631 283.200,110.425 283.200 C 110.219 283.200,110.044 282.885,110.038 282.500 C 110.014 281.087,109.613 275.233,109.508 274.774 C 109.260 273.686,110.275 274.141,111.254 275.557 C 112.063 276.727,112.658 277.137,113.819 277.326 C 114.650 277.460,116.010 278.117,116.842 278.785 C 117.673 279.453,118.590 280.000,118.880 280.000 C 119.170 280.000,119.632 280.360,119.907 280.800 C 120.182 281.240,120.692 281.600,121.042 281.600 C 121.391 281.600,122.221 281.988,122.886 282.461 C 123.700 283.041,124.843 283.365,126.384 283.452 C 127.643 283.523,129.197 283.855,129.837 284.188 C 130.476 284.522,131.194 284.796,131.431 284.798 C 132.300 284.803,141.690 288.858,145.000 290.658 C 149.285 292.988,152.176 294.416,153.302 294.757 C 154.016 294.974,156.760 295.886,159.400 296.784 C 169.227 300.125,176.810 300.646,191.600 298.997 C 201.853 297.853,205.438 297.621,215.600 297.441 C 224.717 297.279,234.830 296.412,239.680 295.376 C 240.275 295.249,242.128 295.083,243.799 295.008 C 245.470 294.933,248.764 294.667,251.119 294.418 C 253.473 294.168,257.200 293.780,259.400 293.555 C 265.497 292.933,268.728 292.480,271.800 291.818 C 273.340 291.486,276.216 290.920,278.190 290.561 C 280.165 290.202,282.685 289.652,283.790 289.339 C 284.896 289.026,286.970 288.508,288.400 288.188 C 289.830 287.868,292.210 287.322,293.690 286.973 C 297.393 286.101,298.488 287.725,295.418 289.536 C 293.264 290.807,290.269 296.018,291.007 297.212 C 291.316 297.711,292.400 296.974,292.400 296.266 C 292.400 296.026,292.865 295.373,293.432 294.815 C 294.000 294.257,294.869 293.170,295.363 292.400 C 296.022 291.373,296.507 291.028,297.183 291.105 C 298.005 291.198,298.045 291.135,297.553 290.530 C 297.074 289.941,297.084 289.882,297.625 290.084 C 298.126 290.271,298.214 290.077,298.070 289.095 C 297.929 288.137,298.019 287.922,298.483 288.100 C 298.938 288.274,299.029 288.088,298.878 287.298 C 298.727 286.505,298.818 286.321,299.278 286.498 C 299.730 286.671,299.831 286.496,299.694 285.779 C 299.468 284.596,300.475 283.435,301.146 284.106 C 301.578 284.538,301.836 283.750,301.626 282.637 C 301.589 282.437,301.788 282.131,302.068 281.958 C 302.349 281.784,302.598 281.318,302.621 280.921 C 302.644 280.524,302.694 279.525,302.732 278.700 C 302.786 277.515,302.960 277.200,303.563 277.200 C 304.147 277.200,304.272 276.998,304.100 276.337 C 303.939 275.724,304.015 275.562,304.363 275.777 C 304.731 276.005,304.782 275.710,304.569 274.575 C 304.327 273.285,304.380 273.107,304.939 273.321 C 305.591 273.572,306.391 271.858,305.867 271.334 C 305.741 271.208,305.900 270.843,306.219 270.524 C 306.883 269.859,306.996 268.168,306.400 267.800 C 305.895 267.488,305.881 265.809,306.376 264.895 C 306.583 264.513,306.860 263.689,306.993 263.064 C 307.169 262.234,307.405 261.993,307.870 262.172 C 308.419 262.382,308.465 262.178,308.206 260.708 C 308.040 259.769,307.776 257.650,307.618 256.000 C 307.461 254.350,307.303 253.264,307.266 253.587 C 307.000 255.948,305.866 257.634,304.714 257.381 C 303.853 257.192,303.169 257.379,302.076 258.100 C 301.264 258.637,299.610 259.307,298.400 259.590 C 297.190 259.874,296.020 260.212,295.800 260.343 C 295.580 260.474,294.631 260.632,293.690 260.696 C 292.750 260.759,291.220 261.096,290.290 261.445 C 289.361 261.794,287.259 262.256,285.620 262.473 C 283.981 262.690,282.276 263.122,281.831 263.434 C 281.386 263.745,280.297 264.008,279.411 264.017 C 277.593 264.037,275.612 264.429,272.400 265.405 C 269.605 266.254,269.047 266.263,266.563 265.504 L 264.526 264.881 264.701 265.793 C 264.797 266.295,264.651 266.845,264.377 267.014 C 263.713 267.424,252.421 267.489,252.673 267.082 C 252.781 266.907,252.089 266.795,251.135 266.835 C 250.181 266.874,248.500 266.689,247.400 266.423 C 246.300 266.157,244.778 265.839,244.018 265.717 C 243.258 265.594,242.381 265.239,242.070 264.927 C 241.758 264.616,240.989 264.258,240.361 264.132 C 238.262 263.712,238.186 262.949,240.192 262.444 C 243.286 261.665,242.207 261.346,236.569 261.374 C 231.946 261.396,231.066 261.301,230.650 260.734 C 230.382 260.368,229.540 259.807,228.781 259.488 L 227.400 258.908 229.400 258.646 C 232.676 258.217,236.813 257.480,236.682 257.349 C 236.615 257.281,234.556 257.143,232.108 257.042 C 227.050 256.833,226.870 256.766,223.995 253.995 C 221.743 251.825,220.307 251.057,217.659 250.610 C 216.747 250.456,215.847 250.056,215.660 249.722 C 215.400 249.256,213.834 248.991,208.960 248.586 C 205.462 248.296,202.510 248.042,202.400 248.023 C 201.368 247.842,203.917 247.211,205.700 247.206 C 206.965 247.203,208.000 247.020,208.000 246.800 C 208.000 246.580,207.595 246.399,207.100 246.398 C 206.148 246.397,196.919 245.768,192.200 245.383 C 186.198 244.894,186.625 244.167,193.000 244.022 C 198.702 243.892,191.994 242.641,182.800 242.119 C 180.930 242.013,178.500 241.675,177.400 241.369 C 175.236 240.765,176.212 240.772,187.398 241.445 C 189.376 241.564,190.900 241.567,190.784 241.451 C 190.668 241.335,189.049 241.150,187.187 241.040 C 185.324 240.931,183.080 240.582,182.200 240.264 C 181.320 239.947,179.074 239.556,177.210 239.394 C 175.345 239.233,173.117 238.853,172.259 238.550 C 171.401 238.248,169.944 238.000,169.021 238.000 C 166.801 238.000,163.542 236.865,163.320 236.015 C 162.965 234.659,159.055 233.937,157.039 234.855 C 155.840 235.401,149.600 234.722,147.757 233.845 C 146.340 233.170,143.600 232.730,143.600 233.177 C 143.600 233.820,145.980 234.511,152.900 235.874 C 154.101 236.111,154.432 237.204,153.300 237.194 C 152.915 237.190,151.520 236.927,150.200 236.608 C 148.880 236.289,147.299 236.022,146.686 236.014 C 146.073 236.006,145.173 235.741,144.686 235.424 C 143.504 234.655,139.600 234.137,139.600 234.748 C 139.600 234.997,140.039 235.200,140.576 235.200 C 141.113 235.200,141.664 235.380,141.800 235.600 C 141.936 235.820,142.735 236.000,143.575 236.000 C 144.497 236.000,145.316 236.258,145.642 236.651 C 146.251 237.384,144.415 237.301,141.600 236.467 C 140.830 236.239,138.670 235.660,136.800 235.180 C 134.930 234.700,133.084 234.146,132.698 233.949 C 131.893 233.538,128.716 233.940,129.010 234.416 C 129.117 234.590,128.979 234.814,128.702 234.914 C 128.299 235.060,128.299 235.264,128.703 235.948 C 129.126 236.663,129.110 236.800,128.603 236.800 C 128.272 236.800,128.000 236.649,128.000 236.464 C 128.000 235.984,126.136 235.200,124.995 235.200 C 124.463 235.200,123.436 234.945,122.714 234.633 C 119.731 233.345,116.331 232.563,114.542 232.752 C 114.290 232.778,113.616 233.694,113.045 234.787 L 112.005 236.775 112.903 237.263 C 115.340 238.587,119.360 240.494,122.600 241.861 C 124.580 242.696,127.100 243.892,128.200 244.518 L 130.200 245.656 128.600 245.399 C 126.493 245.061,116.725 241.756,114.267 240.549 C 113.204 240.027,111.988 239.600,111.566 239.600 C 110.399 239.600,107.898 238.127,107.332 237.106 C 106.575 235.745,106.696 235.200,107.754 235.200 C 108.923 235.200,110.039 233.637,109.726 232.438 C 109.591 231.921,109.765 231.280,110.160 230.845 C 110.528 230.437,110.708 229.826,110.567 229.458 C 110.428 229.096,110.493 228.800,110.711 228.800 C 110.928 228.800,111.203 228.485,111.322 228.100 C 111.440 227.715,112.000 226.654,112.566 225.742 C 113.420 224.367,113.493 224.045,112.998 223.854 C 112.669 223.728,112.379 223.754,112.353 223.913 M169.590 228.626 C 169.005 230.164,169.086 230.348,170.500 230.712 C 171.509 230.971,171.828 231.288,171.927 232.123 C 172.065 233.305,172.803 233.625,172.795 232.500 C 172.783 230.998,172.287 230.000,171.553 230.000 C 170.983 230.000,170.800 229.709,170.800 228.800 C 170.800 227.331,170.120 227.233,169.590 228.626 M302.000 230.357 C 302.000 230.554,302.289 230.825,302.642 230.961 C 303.008 231.101,303.185 231.463,303.054 231.803 C 302.928 232.132,302.999 232.400,303.213 232.400 C 303.815 232.400,303.669 231.326,302.971 230.629 C 302.257 229.914,302.000 229.842,302.000 230.357 M136.915 233.752 C 136.996 233.999,137.562 234.259,138.173 234.331 C 139.548 234.492,139.216 233.773,137.790 233.500 C 137.144 233.377,136.822 233.470,136.915 233.752 M163.600 233.597 C 163.600 235.246,168.214 236.911,169.338 235.669 C 170.350 234.550,170.174 234.400,167.849 234.400 C 166.425 234.400,165.530 234.197,165.200 233.800 C 164.639 233.124,163.600 232.992,163.600 233.597 M132.825 235.800 C 132.806 236.320,131.634 236.378,130.397 235.921 C 129.683 235.657,129.560 235.472,129.941 235.236 C 130.602 234.828,132.845 235.267,132.825 235.800 M136.800 236.800 C 136.800 237.301,136.376 237.301,135.600 236.800 C 135.115 236.486,135.172 236.411,135.900 236.406 C 136.395 236.403,136.800 236.580,136.800 236.800 M172.094 239.934 C 172.449 240.289,172.071 240.400,170.513 240.400 C 168.239 240.400,167.200 240.120,167.200 239.508 C 167.200 238.957,171.491 239.331,172.094 239.934 M113.003 242.766 C 116.528 244.507,120.219 246.248,121.206 246.636 C 122.193 247.023,123.630 247.773,124.400 248.303 L 125.800 249.265 124.000 248.986 C 123.010 248.833,121.894 248.547,121.521 248.351 C 121.147 248.155,119.077 247.383,116.921 246.636 C 108.509 243.723,107.400 243.240,106.300 242.014 C 103.326 238.698,105.190 238.907,113.003 242.766 M196.318 242.070 C 197.434 242.319,198.416 242.316,199.118 242.059 C 200.007 241.734,199.700 241.665,197.400 241.674 C 194.673 241.685,194.645 241.696,196.318 242.070 M160.000 243.795 C 160.964 244.341,160.942 244.353,159.400 244.129 C 157.548 243.859,156.542 243.193,158.020 243.214 C 158.559 243.222,159.450 243.483,160.000 243.795 M198.220 244.366 C 198.707 244.834,199.772 244.910,204.200 244.794 C 207.393 244.711,207.596 244.664,206.000 244.380 C 203.449 243.926,197.752 243.915,198.220 244.366 M153.640 248.042 C 154.680 249.156,155.173 250.400,154.573 250.400 C 153.902 250.400,151.600 248.196,151.600 247.553 C 151.600 246.456,152.319 246.629,153.640 248.042 M147.838 250.376 C 149.150 250.875,149.801 251.353,149.802 251.819 C 149.806 253.359,154.351 255.200,158.146 255.200 C 159.085 255.200,160.831 255.377,162.027 255.592 C 164.866 256.105,168.943 256.240,171.200 255.897 C 172.190 255.746,174.318 255.527,175.928 255.411 C 177.539 255.294,179.178 255.026,179.572 254.815 C 180.746 254.187,183.139 254.748,182.916 255.599 C 182.651 256.614,183.049 256.745,187.036 256.960 C 191.745 257.214,194.431 257.626,194.167 258.053 C 194.049 258.244,193.413 258.400,192.753 258.400 C 192.055 258.400,191.656 258.567,191.800 258.800 C 191.936 259.020,192.610 259.200,193.297 259.200 C 193.985 259.200,195.639 259.481,196.974 259.824 C 202.808 261.324,202.400 261.130,202.400 262.416 C 202.400 263.257,202.603 263.615,203.100 263.652 C 203.485 263.680,204.250 263.752,204.800 263.812 C 205.350 263.872,208.952 264.112,212.804 264.346 C 219.983 264.782,219.741 264.731,227.400 267.422 C 228.500 267.808,229.631 268.303,229.913 268.522 C 230.195 268.741,231.777 269.507,233.428 270.225 C 236.399 271.516,240.063 273.963,239.764 274.455 C 239.678 274.595,239.872 274.928,240.194 275.195 C 241.011 275.873,241.416 278.362,240.856 279.258 C 240.605 279.660,240.400 280.267,240.400 280.607 C 240.400 280.947,240.130 281.329,239.800 281.455 C 239.470 281.582,239.200 281.860,239.200 282.074 C 239.200 282.628,236.548 285.157,234.200 286.841 C 229.985 289.864,221.318 291.727,208.338 292.400 C 203.642 292.643,198.180 293.102,196.200 293.419 C 183.245 295.494,171.623 295.319,163.200 292.921 C 151.654 289.634,141.598 284.013,133.644 276.401 C 131.331 274.189,130.817 274.164,129.091 276.183 C 127.127 278.481,126.947 278.459,126.889 275.923 C 126.806 272.252,124.185 270.442,121.639 272.297 C 119.038 274.193,118.403 273.513,120.413 270.983 C 122.304 268.604,124.178 267.713,125.527 268.552 C 126.259 269.008,126.524 268.621,126.193 267.577 C 125.987 266.929,125.827 266.832,125.591 267.214 C 125.413 267.502,125.299 266.549,125.335 265.074 C 125.387 262.958,125.523 262.433,126.000 262.507 C 126.374 262.565,126.556 262.336,126.482 261.900 C 126.418 261.515,126.553 261.200,126.782 261.200 C 128.086 261.200,129.200 260.529,129.200 259.743 C 129.200 259.349,129.423 259.200,129.800 259.345 C 130.674 259.680,131.555 259.236,132.112 258.179 C 132.643 257.170,134.341 255.855,137.292 254.165 C 138.332 253.569,139.289 252.748,139.419 252.341 C 139.734 251.347,141.200 251.359,141.200 252.357 C 141.200 252.844,141.582 253.209,142.276 253.383 C 142.868 253.532,143.996 254.164,144.783 254.787 C 147.527 256.960,150.495 256.331,148.092 254.086 C 147.443 253.480,146.783 252.578,146.626 252.081 C 146.196 250.729,144.660 249.879,143.216 250.196 C 142.067 250.449,141.639 250.094,142.297 249.436 C 142.715 249.018,145.515 249.493,147.838 250.376 M273.319 251.220 C 272.394 251.402,271.314 251.722,270.919 251.930 C 270.523 252.138,269.210 252.439,268.000 252.599 C 266.064 252.854,263.923 253.559,265.000 253.586 C 265.989 253.610,275.694 251.586,276.311 251.226 C 277.181 250.719,275.868 250.716,273.319 251.220 M139.600 253.534 C 139.600 254.276,140.083 255.200,140.471 255.200 C 141.027 255.200,140.694 253.494,140.100 253.298 C 139.825 253.207,139.600 253.314,139.600 253.534 M258.800 254.000 C 258.250 254.176,257.080 254.341,256.200 254.366 C 254.340 254.420,252.712 255.184,254.436 255.194 C 256.359 255.205,262.197 254.320,262.580 253.958 C 263.048 253.517,260.211 253.548,258.800 254.000 M169.016 254.427 C 169.400 255.048,169.165 255.155,167.184 255.260 C 165.112 255.371,162.800 254.900,162.800 254.368 C 162.800 253.849,168.694 253.904,169.016 254.427 M281.800 254.400 C 280.718 254.865,282.948 254.865,284.400 254.400 C 285.309 254.109,285.273 254.079,284.000 254.068 C 283.230 254.062,282.240 254.211,281.800 254.400 M247.260 255.691 C 245.749 255.923,244.867 256.227,245.082 256.442 C 245.403 256.763,252.717 255.782,253.167 255.357 C 253.455 255.085,249.906 255.286,247.260 255.691 M274.400 255.840 C 273.410 256.163,270.890 256.709,268.800 257.054 C 264.443 257.773,262.931 258.368,265.400 258.391 C 266.280 258.399,268.620 258.058,270.600 257.633 C 272.580 257.208,275.232 256.654,276.493 256.403 C 277.754 256.151,278.890 255.778,279.017 255.573 C 279.367 255.007,276.436 255.177,274.400 255.840 M153.829 255.954 C 153.708 256.148,152.753 256.446,151.705 256.615 L 149.800 256.923 151.187 257.229 C 151.950 257.397,152.875 257.374,153.243 257.177 C 153.610 256.980,154.471 256.777,155.155 256.725 C 156.614 256.614,156.779 256.195,155.500 255.852 C 154.289 255.528,154.084 255.540,153.829 255.954 M259.400 258.659 C 256.506 259.261,251.594 260.022,248.000 260.425 C 245.690 260.684,243.530 261.049,243.200 261.236 C 242.209 261.797,246.235 261.654,250.400 260.979 C 252.490 260.640,255.460 260.208,257.000 260.018 C 260.633 259.571,262.365 259.181,262.632 258.748 C 262.847 258.400,260.906 258.346,259.400 258.659 M112.655 289.800 C 112.782 290.130,113.046 290.400,113.243 290.400 C 113.439 290.400,113.600 290.681,113.600 291.024 C 113.600 291.367,113.778 291.537,113.995 291.403 C 114.222 291.263,114.289 291.423,114.153 291.779 C 114.022 292.121,114.114 292.400,114.357 292.400 C 115.153 292.400,114.823 291.113,113.779 290.146 C 112.594 289.047,112.336 288.968,112.655 289.800 M115.200 294.013 C 115.200 294.239,115.469 294.528,115.798 294.654 C 116.126 294.781,116.296 295.045,116.174 295.242 C 116.052 295.439,116.163 295.600,116.419 295.600 C 116.680 295.600,116.779 295.321,116.643 294.967 C 116.509 294.619,116.400 294.169,116.400 293.967 C 116.400 293.765,116.130 293.600,115.800 293.600 C 115.470 293.600,115.200 293.786,115.200 294.013 M202.036 334.331 C 201.026 334.860,199.417 335.892,198.460 336.626 C 197.503 337.360,196.513 338.036,196.260 338.130 C 195.074 338.568,196.924 339.235,199.981 339.470 C 202.750 339.684,203.340 339.851,203.501 340.463 C 203.680 341.150,204.230 341.196,211.547 341.146 C 215.866 341.116,218.995 341.013,218.500 340.918 C 217.457 340.717,217.323 340.192,218.225 339.846 C 219.050 339.529,218.656 338.951,217.403 338.636 C 216.850 338.498,215.575 337.596,214.569 336.632 C 211.557 333.746,205.338 332.604,202.036 334.331 M190.500 340.276 C 190.885 340.376,191.515 340.376,191.900 340.276 C 192.285 340.175,191.970 340.093,191.200 340.093 C 190.430 340.093,190.115 340.175,190.500 340.276 M199.905 341.083 C 200.402 341.179,201.122 341.175,201.505 341.075 C 201.887 340.975,201.480 340.896,200.600 340.901 C 199.720 340.905,199.407 340.987,199.905 341.083 \\\" stroke=\\\"none\\\" fill=\\\"#c79d33\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path2\\\" d=\\\"M205.386 64.423 C 205.001 65.045,205.536 66.801,206.108 66.794 C 207.180 66.781,207.709 66.089,207.447 65.043 C 207.178 63.972,205.902 63.588,205.386 64.423 M197.429 65.429 C 197.083 65.774,196.785 66.179,196.767 66.329 C 196.749 66.478,196.653 67.095,196.553 67.700 C 196.322 69.107,196.377 69.094,198.355 67.286 C 199.655 66.098,199.907 65.667,199.526 65.286 C 198.868 64.628,198.182 64.675,197.429 65.429 M204.132 67.700 C 202.889 69.401,202.729 70.255,203.367 71.784 C 204.159 73.677,205.200 73.136,205.200 70.831 C 205.200 70.022,205.404 69.156,205.653 68.907 C 206.217 68.343,205.821 67.200,205.062 67.200 C 204.752 67.200,204.333 67.425,204.132 67.700 M186.744 81.639 C 185.745 83.267,184.700 85.179,184.421 85.887 C 184.142 86.594,183.663 87.381,183.357 87.636 C 182.714 88.170,182.610 89.200,183.200 89.200 C 183.420 89.200,183.600 88.956,183.600 88.658 C 183.600 88.359,184.215 87.310,184.966 86.326 C 185.717 85.342,186.624 83.921,186.980 83.169 C 187.337 82.416,187.905 81.299,188.243 80.686 C 189.654 78.127,188.413 78.915,186.744 81.639 M192.620 87.300 C 191.730 89.640,191.635 91.400,192.400 91.400 C 193.132 91.400,194.531 87.444,194.185 86.353 C 193.808 85.166,193.319 85.462,192.620 87.300 M223.059 87.104 C 222.939 87.299,223.476 88.346,224.253 89.429 C 226.297 92.281,227.199 94.187,227.210 95.684 C 227.216 96.487,227.762 97.850,228.610 99.181 C 230.051 101.443,230.288 102.237,229.593 102.469 C 229.036 102.655,230.189 106.452,231.169 107.660 C 232.236 108.975,232.647 108.303,232.078 106.175 C 231.673 104.661,231.694 104.228,232.212 103.438 C 232.772 102.584,232.756 102.310,232.039 100.350 C 231.606 99.168,231.048 97.390,230.799 96.400 C 230.068 93.492,223.779 85.939,223.059 87.104 M249.513 98.300 C 248.359 99.623,247.892 100.852,248.363 101.323 C 248.603 101.563,248.800 101.628,248.800 101.466 C 248.800 101.304,249.160 101.365,249.600 101.600 C 250.533 102.099,250.619 101.719,249.922 100.189 C 249.551 99.375,249.552 98.968,249.926 98.370 C 250.526 97.410,250.321 97.375,249.513 98.300 M224.135 99.826 C 223.989 100.206,224.096 101.076,224.373 101.759 C 224.650 102.442,225.108 103.990,225.391 105.200 C 226.042 107.984,226.914 109.990,228.109 111.452 C 228.626 112.083,229.545 113.635,230.153 114.900 C 231.359 117.409,231.853 117.723,232.230 116.221 C 232.536 115.005,231.967 113.165,229.937 108.800 C 225.713 99.718,224.748 98.226,224.135 99.826 M252.394 104.812 C 251.894 105.128,251.913 105.189,252.514 105.194 C 253.138 105.199,253.194 105.449,252.963 107.193 C 252.746 108.831,252.816 109.231,253.354 109.438 C 254.056 109.707,255.200 108.983,255.200 108.271 C 255.200 107.990,255.033 108.007,254.720 108.320 C 253.716 109.324,253.179 108.873,253.439 107.243 C 253.739 105.372,253.262 104.263,252.394 104.812 M129.183 107.300 C 130.164 108.345,131.019 109.200,131.083 109.200 C 131.384 109.200,131.066 108.841,129.300 107.183 L 127.400 105.400 129.183 107.300 M235.087 106.646 C 234.312 107.422,235.752 111.266,237.225 112.355 C 238.081 112.988,238.400 113.557,238.400 114.452 C 238.400 115.772,239.479 118.400,240.022 118.400 C 241.295 118.400,240.749 115.514,238.948 112.725 C 238.194 111.556,237.374 109.928,237.127 109.106 C 236.666 107.574,235.529 106.204,235.087 106.646 M202.672 108.156 C 201.787 110.463,202.209 117.913,203.464 122.153 C 204.245 124.787,204.797 112.471,204.053 109.033 C 203.771 107.730,203.019 107.253,202.672 108.156 M219.453 112.100 C 219.720 114.712,219.867 115.200,220.387 115.200 C 221.013 115.200,220.881 112.517,220.190 111.180 C 219.336 109.530,219.206 109.692,219.453 112.100 M254.870 112.900 C 254.799 115.244,255.235 115.829,255.995 114.409 C 256.336 113.772,256.305 113.662,255.834 113.842 C 255.389 114.013,255.212 113.653,255.095 112.333 C 254.957 110.789,254.932 110.851,254.870 112.900 M234.407 112.486 C 234.430 114.190,238.413 124.800,239.030 124.800 C 239.723 124.800,238.637 119.496,237.282 116.261 C 235.956 113.093,234.387 111.034,234.407 112.486 M256.416 119.800 C 256.390 120.460,256.148 122.260,255.878 123.800 C 255.609 125.340,255.509 127.140,255.656 127.800 C 255.916 128.963,255.923 128.956,255.885 127.569 C 255.864 126.782,256.102 125.522,256.416 124.769 L 256.986 123.400 257.246 124.600 C 257.460 125.589,257.515 125.448,257.558 123.800 C 257.587 122.700,257.714 121.350,257.840 120.800 C 258.015 120.037,257.971 119.940,257.656 120.389 C 257.292 120.907,257.220 120.907,257.053 120.389 C 256.949 120.065,256.773 119.530,256.663 119.200 C 256.553 118.870,256.442 119.140,256.416 119.800 M215.890 122.701 C 215.762 124.228,215.820 126.181,216.019 127.039 C 216.218 127.898,216.385 129.389,216.390 130.354 C 216.402 132.440,217.178 135.261,217.659 134.963 C 218.533 134.423,217.821 125.157,216.622 121.462 L 216.122 119.923 215.890 122.701 M231.206 123.476 C 231.213 125.231,231.731 126.359,232.190 125.617 C 232.550 125.033,232.105 122.512,231.585 122.190 C 231.364 122.054,231.203 122.602,231.206 123.476 M224.562 125.766 C 224.531 127.245,224.612 127.445,225.062 126.995 C 225.644 126.414,225.741 125.633,225.357 124.633 C 224.923 123.502,224.601 123.962,224.562 125.766 M212.185 128.182 C 211.894 130.512,212.642 137.055,213.242 137.426 C 213.648 137.677,213.738 129.190,213.350 127.250 C 212.972 125.360,212.489 125.746,212.185 128.182 M267.316 158.597 C 260.680 164.526,258.385 166.404,257.750 166.425 C 257.127 166.446,257.157 166.514,257.922 166.821 C 261.150 168.116,266.517 171.839,270.456 175.517 C 271.383 176.383,272.181 176.806,272.656 176.684 C 273.271 176.526,273.243 176.485,272.500 176.446 C 271.258 176.382,271.327 176.211,273.600 173.724 C 274.890 172.312,275.600 171.178,275.600 170.529 C 275.600 169.043,274.398 165.104,273.703 164.313 C 273.372 163.936,273.100 163.176,273.100 162.624 C 273.100 161.952,272.820 161.535,272.250 161.357 C 271.782 161.211,271.310 160.981,271.200 160.846 C 271.090 160.711,270.640 160.396,270.200 160.148 C 269.760 159.899,269.412 159.332,269.427 158.888 C 269.446 158.334,269.269 158.152,268.862 158.308 C 268.478 158.456,268.371 158.371,268.558 158.068 C 269.027 157.309,268.512 157.529,267.316 158.597 M139.080 159.916 C 138.486 160.536,138.000 161.240,138.000 161.479 C 138.000 161.719,137.744 162.013,137.431 162.133 C 137.079 162.268,136.946 162.671,137.082 163.190 C 137.221 163.724,136.860 164.740,136.090 165.978 C 134.370 168.746,135.339 174.000,137.570 174.000 C 137.820 174.000,138.129 174.270,138.255 174.600 C 138.382 174.930,138.644 175.200,138.837 175.200 C 140.713 175.200,142.969 178.351,141.800 179.338 C 141.567 179.534,141.693 179.581,142.100 179.450 C 142.970 179.170,144.072 179.560,143.774 180.042 C 143.652 180.239,143.817 180.400,144.139 180.400 C 144.530 180.400,144.669 180.700,144.558 181.300 C 144.466 181.795,144.504 181.930,144.642 181.600 C 145.175 180.321,146.051 180.035,148.675 180.280 L 151.250 180.520 153.151 178.648 C 154.242 177.574,155.679 176.603,156.526 176.369 C 158.435 175.842,158.383 175.637,155.978 174.209 C 154.874 173.553,153.218 172.113,152.298 171.009 C 148.620 166.592,144.526 162.328,143.200 161.532 C 142.430 161.070,141.431 160.264,140.980 159.741 L 140.161 158.788 139.080 159.916 M134.018 165.566 C 133.773 166.025,133.739 166.400,133.943 166.400 C 134.354 166.400,134.922 165.188,134.642 164.908 C 134.544 164.811,134.264 165.107,134.018 165.566 M167.823 166.363 C 167.423 167.009,167.880 168.148,168.937 169.141 C 169.955 170.098,172.400 169.979,172.400 168.972 C 172.400 167.387,168.547 165.191,167.823 166.363 M138.164 168.459 C 138.048 168.647,137.693 168.800,137.376 168.800 C 136.781 168.800,136.578 167.556,137.089 167.044 C 137.452 166.681,138.450 167.995,138.164 168.459 M134.217 173.972 C 133.977 174.362,134.643 174.923,135.500 175.053 C 136.097 175.144,136.167 174.550,135.600 174.200 C 135.380 174.064,135.200 174.154,135.200 174.400 C 135.200 174.646,135.017 174.734,134.793 174.596 C 134.570 174.458,134.491 174.177,134.617 173.972 C 134.744 173.768,134.757 173.600,134.647 173.600 C 134.537 173.600,134.344 173.768,134.217 173.972 M239.100 184.202 C 240.586 184.888,240.756 185.433,239.600 185.800 C 238.140 186.263,238.769 186.722,241.500 187.186 C 242.985 187.437,245.352 188.155,246.759 188.779 L 249.319 189.915 247.159 190.168 C 245.972 190.307,244.370 190.461,243.600 190.511 C 242.830 190.560,242.010 190.724,241.777 190.876 C 241.544 191.028,240.374 191.278,239.177 191.433 C 237.980 191.587,236.550 191.899,236.000 192.125 C 235.450 192.351,234.100 192.574,233.000 192.622 C 229.652 192.766,225.200 193.818,225.200 194.464 C 225.200 194.980,229.938 194.863,230.926 194.322 C 231.431 194.046,232.981 193.888,234.600 193.949 C 236.453 194.018,237.903 193.841,238.887 193.427 C 239.705 193.082,240.999 192.800,241.764 192.800 C 242.528 192.800,243.276 192.600,243.427 192.356 C 243.592 192.090,244.269 192.004,245.119 192.142 C 246.334 192.339,248.681 191.858,251.200 190.895 C 252.947 190.227,258.400 191.375,258.400 192.411 C 258.400 192.617,257.905 192.896,257.300 193.031 C 256.695 193.167,255.587 193.433,254.838 193.624 C 254.088 193.814,253.331 193.881,253.155 193.772 C 252.979 193.664,252.226 193.829,251.481 194.140 C 250.736 194.451,248.794 194.825,247.164 194.970 C 245.534 195.115,243.030 195.494,241.600 195.812 C 238.924 196.406,230.802 197.233,230.341 196.958 C 230.199 196.873,226.149 197.072,221.341 197.401 C 196.064 199.127,171.439 196.832,186.188 194.123 C 191.127 193.216,195.542 189.733,194.417 187.631 C 193.787 186.454,193.096 186.613,192.400 188.096 C 191.630 189.737,189.109 191.229,184.800 192.595 C 181.389 193.676,177.207 195.481,172.522 197.895 C 171.140 198.607,169.287 199.305,168.405 199.446 C 167.211 199.637,166.800 199.889,166.800 200.433 C 166.800 200.916,165.850 201.719,164.005 202.797 C 162.467 203.695,159.824 205.607,158.132 207.045 C 156.440 208.483,154.181 210.103,153.112 210.644 C 151.887 211.265,151.011 212.030,150.740 212.714 C 149.938 214.739,149.050 216.197,147.934 217.320 C 147.322 217.936,146.522 218.946,146.157 219.566 C 145.238 221.120,143.200 222.348,143.200 221.346 C 143.200 220.658,146.561 215.158,148.176 213.203 L 149.000 212.206 148.130 212.938 C 147.651 213.341,146.233 215.319,144.978 217.335 C 143.724 219.351,141.953 222.170,141.043 223.600 C 138.737 227.222,138.257 228.251,138.534 228.973 C 139.261 230.867,143.200 228.259,143.200 225.885 C 143.200 224.098,143.874 223.200,145.214 223.200 C 145.866 223.200,146.400 223.026,146.400 222.814 C 146.400 222.601,146.966 221.849,147.658 221.141 L 148.916 219.854 149.858 220.949 C 151.328 222.659,151.130 225.515,149.500 226.117 C 148.311 226.555,148.725 227.415,150.332 227.844 C 151.332 228.111,152.165 228.118,152.733 227.865 C 153.372 227.579,153.786 227.637,154.301 228.084 C 155.911 229.482,161.821 229.893,162.466 228.651 C 162.709 228.183,163.244 227.478,163.654 227.084 C 164.706 226.076,164.663 224.000,163.591 224.000 C 162.495 224.000,161.687 222.259,162.390 221.412 C 162.669 221.075,163.234 220.800,163.644 220.800 C 164.118 220.800,164.602 220.290,164.974 219.400 C 165.557 218.005,167.928 217.313,168.570 218.351 C 168.906 218.895,167.612 221.200,166.971 221.200 C 166.657 221.200,166.400 221.560,166.400 222.000 C 166.400 222.537,166.667 222.800,167.213 222.800 C 167.659 222.800,168.141 223.101,168.282 223.469 C 168.630 224.376,170.117 225.828,170.551 225.683 C 170.743 225.619,171.159 225.934,171.473 226.383 C 171.788 226.832,172.284 227.200,172.576 227.200 C 172.868 227.200,173.201 227.560,173.316 228.000 C 173.581 229.015,174.400 229.048,174.400 228.043 C 174.400 227.570,174.774 227.193,175.400 227.036 C 175.950 226.898,176.400 226.608,176.400 226.392 C 176.400 225.721,177.441 225.961,178.210 226.811 C 178.716 227.370,178.964 228.323,179.011 229.886 C 179.073 231.985,179.163 232.185,180.239 232.618 C 182.942 233.707,185.162 234.253,185.688 233.959 C 185.999 233.785,186.959 233.895,187.826 234.204 C 188.692 234.513,190.357 234.773,191.526 234.782 C 192.696 234.792,193.964 234.967,194.344 235.170 C 195.276 235.669,200.284 235.861,201.900 235.459 C 202.876 235.217,203.200 235.269,203.201 235.668 C 203.202 236.003,203.720 236.211,204.601 236.230 C 205.371 236.247,206.000 236.210,206.000 236.149 C 206.000 235.558,204.959 234.000,204.564 234.000 C 203.562 234.000,202.800 232.740,202.792 231.071 L 202.784 229.400 201.075 231.353 C 199.391 233.277,197.600 233.739,197.600 232.249 C 197.600 230.973,201.097 228.575,202.445 228.928 C 202.956 229.061,203.505 228.853,203.918 228.370 C 204.865 227.264,206.598 228.146,207.317 230.100 C 207.459 230.485,207.766 230.800,208.000 230.800 C 208.234 230.800,208.541 230.485,208.683 230.100 C 209.473 227.954,211.036 227.306,212.254 228.621 C 213.681 230.160,213.509 233.600,212.006 233.600 C 211.118 233.600,210.547 234.275,210.172 235.768 C 209.917 236.784,209.972 236.896,210.608 236.652 C 211.037 236.488,211.463 236.579,211.646 236.875 C 211.885 237.260,212.328 237.278,213.559 236.949 C 214.440 236.714,215.305 236.654,215.481 236.816 C 216.043 237.335,217.724 237.724,217.444 237.270 C 216.972 236.507,217.889 236.405,219.853 237.001 C 220.924 237.326,222.276 237.593,222.857 237.596 C 223.439 237.598,224.018 237.870,224.145 238.200 C 224.328 238.677,225.093 238.787,227.887 238.736 C 229.819 238.701,230.815 238.599,230.100 238.511 C 229.385 238.422,228.800 238.181,228.800 237.975 C 228.800 237.460,229.397 237.505,230.913 238.134 C 232.911 238.964,237.174 238.402,236.000 237.463 C 235.412 236.994,234.400 235.428,234.400 234.989 C 234.400 234.661,238.039 236.791,239.200 237.799 C 240.319 238.770,240.294 238.770,250.000 238.007 C 253.190 237.757,257.420 237.210,259.400 236.793 C 266.764 235.241,273.846 233.859,275.303 233.690 C 276.129 233.594,276.905 233.355,277.026 233.158 C 277.148 232.961,277.684 232.800,278.218 232.800 C 279.433 232.800,282.441 232.125,284.800 231.323 C 287.085 230.546,293.454 229.210,294.900 229.204 C 295.505 229.202,296.000 229.020,296.000 228.800 C 296.000 228.580,296.199 228.400,296.443 228.400 C 296.686 228.400,296.783 228.668,296.657 228.995 C 296.532 229.323,296.557 229.573,296.714 229.552 C 298.102 229.365,299.340 230.618,298.200 231.055 C 297.448 231.344,297.427 231.848,298.157 232.128 C 298.748 232.355,301.600 231.222,301.600 230.759 C 301.600 230.609,301.333 230.383,301.007 230.258 C 300.669 230.128,300.515 229.765,300.650 229.415 C 300.779 229.077,300.686 228.800,300.443 228.800 C 300.199 228.800,300.000 228.558,300.000 228.262 C 300.000 227.966,299.650 227.407,299.223 227.021 C 298.795 226.634,298.334 225.811,298.198 225.192 C 298.062 224.573,297.706 223.973,297.407 223.858 C 297.082 223.733,296.949 223.317,297.077 222.829 C 297.194 222.378,297.478 222.125,297.707 222.266 C 297.936 222.408,298.006 222.333,297.861 222.099 C 297.717 221.866,297.267 221.762,296.861 221.868 C 295.832 222.137,293.874 219.771,294.109 218.542 C 294.205 218.037,294.130 217.719,293.942 217.836 C 293.754 217.952,293.600 217.857,293.600 217.624 C 293.600 217.391,293.365 217.200,293.078 217.200 C 292.042 217.200,289.742 214.411,290.405 213.958 C 290.837 213.663,290.639 213.623,289.684 213.811 C 288.163 214.111,287.070 213.440,287.398 212.408 C 287.536 211.973,287.320 211.597,286.801 211.364 C 286.354 211.164,285.309 210.100,284.479 209.000 C 283.648 207.900,282.383 206.640,281.668 206.200 C 276.996 203.329,273.262 200.561,269.600 197.255 C 267.290 195.169,264.772 193.091,264.005 192.636 C 262.928 191.997,262.773 191.778,263.324 191.672 C 263.717 191.596,264.614 191.960,265.319 192.481 C 266.543 193.385,268.800 194.531,268.800 194.248 C 268.800 191.937,248.997 184.815,239.800 183.818 L 237.800 183.602 239.100 184.202 M253.768 187.608 C 254.359 188.199,253.206 188.064,251.800 187.378 L 250.600 186.792 251.988 187.004 C 252.751 187.120,253.552 187.392,253.768 187.608 M216.267 194.438 C 214.093 194.788,214.125 195.061,216.375 195.359 C 218.682 195.665,223.600 195.252,223.600 194.752 C 223.600 194.025,219.835 193.863,216.267 194.438 M168.636 197.310 C 166.042 198.678,164.931 199.450,165.421 199.546 C 165.833 199.626,166.239 199.484,166.323 199.231 C 166.407 198.978,167.899 198.055,169.638 197.181 C 171.377 196.306,172.800 195.503,172.800 195.396 C 172.800 195.107,172.910 195.056,168.636 197.310 M260.454 199.335 C 259.583 200.385,252.970 201.924,244.688 203.005 C 242.317 203.314,240.232 203.657,240.054 203.767 C 238.302 204.849,226.309 205.616,210.200 205.676 C 194.992 205.732,191.130 205.495,183.000 204.009 C 181.900 203.808,179.650 203.436,178.000 203.182 C 174.155 202.591,169.647 201.407,169.081 200.841 C 168.403 200.163,172.488 200.283,175.800 201.039 C 177.340 201.390,179.680 201.831,181.000 202.020 C 182.320 202.208,184.660 202.545,186.200 202.768 C 197.835 204.453,200.761 204.670,213.203 204.770 C 220.749 204.830,224.342 204.695,227.003 204.250 C 228.981 203.919,232.130 203.457,234.000 203.223 C 237.441 202.792,242.993 201.983,249.200 201.008 C 251.070 200.714,253.860 200.110,255.400 199.665 C 258.798 198.684,261.120 198.533,260.454 199.335 M138.200 200.188 C 137.540 200.729,136.834 201.178,136.631 201.186 C 136.429 201.194,135.914 201.515,135.488 201.900 C 135.062 202.285,134.238 202.600,133.657 202.600 C 132.867 202.600,132.448 202.917,132.000 203.852 C 131.591 204.705,130.891 205.290,129.802 205.688 C 128.872 206.029,128.203 206.534,128.202 206.897 C 128.200 207.464,126.025 210.012,124.146 211.650 C 123.736 212.007,122.341 213.507,121.046 214.982 C 119.292 216.981,118.496 217.614,117.922 217.464 C 117.023 217.229,116.418 218.317,117.185 218.790 C 117.460 218.961,117.580 219.438,117.452 219.850 C 116.998 221.308,117.821 221.892,119.219 221.103 C 120.304 220.491,120.583 220.474,121.532 220.965 C 122.126 221.272,124.589 221.822,127.006 222.187 C 129.423 222.553,132.174 223.022,133.120 223.230 C 135.532 223.760,138.135 221.673,136.400 220.600 C 136.180 220.464,136.000 219.753,136.000 219.020 C 136.000 217.936,135.815 217.640,135.012 217.439 C 132.818 216.888,132.840 214.728,135.049 213.806 C 135.848 213.471,136.400 212.957,136.400 212.546 C 136.400 212.164,136.797 211.429,137.283 210.912 C 138.067 210.077,138.112 209.832,137.687 208.707 C 137.360 207.840,137.341 207.360,137.627 207.183 C 137.856 207.042,138.388 205.592,138.809 203.963 C 139.229 202.333,139.690 200.595,139.833 200.100 C 140.169 198.938,139.693 198.964,138.200 200.188 M162.800 200.436 C 162.136 200.979,162.069 201.115,162.600 200.840 C 163.905 200.166,164.628 199.612,164.200 199.615 C 163.980 199.617,163.350 199.986,162.800 200.436 M160.300 201.829 C 158.805 202.640,158.896 202.978,160.400 202.200 C 161.060 201.859,161.600 201.494,161.600 201.390 C 161.600 201.132,161.557 201.147,160.300 201.829 M152.600 208.265 C 149.855 210.895,149.478 211.340,151.400 209.684 C 154.122 207.338,157.139 204.384,156.778 204.416 C 156.680 204.425,154.800 206.157,152.600 208.265 M272.261 208.236 C 272.634 208.807,273.358 209.432,273.870 209.627 C 274.848 209.998,275.106 211.297,274.418 212.384 C 274.039 212.984,272.000 211.294,272.000 210.379 C 272.000 209.647,270.451 210.009,270.200 210.800 C 269.910 211.714,268.576 212.556,267.992 212.195 C 267.158 211.679,267.559 209.596,268.566 209.213 C 269.097 209.011,269.649 208.476,269.793 208.023 C 270.155 206.882,271.446 206.994,272.261 208.236 M175.524 211.676 C 175.627 212.562,175.875 212.775,176.924 212.876 C 178.339 213.013,178.795 214.115,178.029 215.546 C 177.563 216.416,175.200 215.927,175.200 214.961 C 175.200 213.488,173.953 213.495,172.597 214.976 C 170.985 216.736,170.200 216.667,170.200 214.767 C 170.200 213.597,170.348 213.383,171.227 213.281 C 171.989 213.192,172.384 212.800,172.761 211.757 C 173.419 209.938,175.317 209.882,175.524 211.676 M209.454 212.400 C 209.744 213.292,210.179 213.821,210.654 213.857 C 211.064 213.889,211.625 213.934,211.900 213.957 C 212.596 214.017,212.537 216.588,211.827 217.178 C 211.076 217.801,209.200 216.642,209.200 215.554 C 209.200 214.346,207.276 214.547,206.798 215.805 C 206.296 217.127,204.500 217.997,203.967 217.177 C 203.146 215.915,203.718 214.267,205.100 213.912 C 205.815 213.728,206.400 213.414,206.400 213.215 C 206.400 210.631,208.683 210.022,209.454 212.400 M242.920 212.600 C 243.143 213.040,243.451 213.670,243.603 214.000 C 243.756 214.330,244.349 214.656,244.921 214.725 C 245.496 214.794,246.064 215.173,246.191 215.572 C 246.511 216.580,245.714 218.520,245.098 218.233 C 244.824 218.105,244.320 217.899,243.978 217.774 C 243.636 217.649,243.156 217.019,242.913 216.374 C 242.385 214.976,241.317 214.840,240.835 216.108 C 240.340 217.411,238.480 218.367,237.970 217.582 C 237.159 216.335,237.713 214.618,238.995 214.399 C 239.778 214.264,240.241 213.919,240.338 213.397 C 240.685 211.530,242.148 211.078,242.920 212.600 M154.918 212.809 C 155.034 213.253,155.678 213.808,156.348 214.042 C 158.373 214.748,158.365 217.200,156.338 217.200 C 155.559 217.200,155.447 217.379,155.026 219.300 C 154.667 220.938,153.017 220.820,150.476 218.975 C 150.197 218.772,152.478 216.800,152.991 216.800 C 153.908 216.800,154.155 215.234,153.374 214.371 C 152.710 213.637,152.711 213.562,153.400 212.800 C 154.314 211.790,154.652 211.792,154.918 212.809 M266.206 214.010 C 266.707 214.821,265.971 216.800,265.168 216.800 C 264.023 216.800,264.176 218.257,265.352 218.552 C 265.876 218.684,266.399 219.153,266.515 219.596 C 266.630 220.038,267.020 220.400,267.381 220.400 C 267.972 220.400,267.966 220.498,267.319 221.387 C 265.947 223.273,262.380 222.448,262.923 220.371 C 263.094 219.720,262.889 219.450,261.987 219.136 C 259.908 218.411,260.049 216.376,262.216 215.832 C 262.931 215.652,263.200 215.313,263.200 214.592 C 263.200 213.538,265.624 213.068,266.206 214.010 M279.595 214.800 C 279.737 215.426,280.309 216.016,281.123 216.377 C 282.821 217.131,283.262 218.659,282.060 219.632 C 281.587 220.015,281.200 220.772,281.200 221.315 C 281.200 222.588,280.414 223.223,279.179 222.950 C 278.139 222.720,278.950 223.597,281.813 225.800 C 282.532 226.353,282.770 226.816,282.584 227.300 C 282.128 228.485,280.756 228.086,279.145 226.300 L 277.611 224.600 277.606 226.290 C 277.601 227.760,277.444 228.060,276.400 228.600 C 275.734 228.945,275.200 229.544,275.200 229.948 C 275.200 232.409,271.018 232.392,270.526 229.929 C 270.394 229.270,269.997 228.629,269.643 228.505 C 267.392 227.712,266.854 224.908,268.571 222.922 C 269.427 221.932,269.573 221.882,269.813 222.500 C 269.963 222.885,270.346 223.200,270.664 223.200 C 270.982 223.200,271.433 223.748,271.666 224.418 C 272.135 225.763,272.931 225.807,273.124 224.499 C 273.331 223.099,275.055 222.213,276.161 222.938 C 277.425 223.766,278.276 223.174,277.209 222.209 C 276.052 221.161,276.175 220.700,278.100 218.883 C 278.485 218.520,278.800 218.004,278.800 217.738 C 278.800 217.472,278.485 217.152,278.100 217.028 C 276.868 216.630,275.897 214.503,276.723 214.010 C 277.909 213.301,279.345 213.696,279.595 214.800 M216.800 215.120 C 216.800 215.296,216.584 215.656,216.320 215.920 C 216.056 216.184,215.696 216.400,215.520 216.400 C 215.003 216.400,215.153 215.285,215.700 215.065 C 216.471 214.754,216.800 214.770,216.800 215.120 M272.814 217.226 C 273.304 218.141,272.741 219.200,271.765 219.200 C 271.053 219.200,270.341 217.820,270.644 217.029 C 270.988 216.133,272.292 216.251,272.814 217.226 M183.234 218.300 C 183.457 218.927,184.180 219.658,184.913 220.000 C 186.618 220.795,186.622 222.001,184.924 222.800 C 183.906 223.279,183.623 223.678,183.524 224.777 C 183.416 225.976,183.220 226.200,182.002 226.514 C 180.445 226.915,180.389 226.815,183.400 229.010 C 184.661 229.929,184.539 231.600,183.210 231.600 C 182.216 231.600,179.045 227.782,179.359 226.963 C 179.491 226.618,179.337 225.959,179.015 225.500 C 178.360 224.565,179.483 223.129,181.453 222.380 C 182.934 221.817,182.356 220.871,180.133 220.218 C 180.095 220.207,179.941 219.705,179.790 219.102 C 179.306 217.176,182.562 216.417,183.234 218.300 M202.133 219.301 C 203.039 219.964,202.225 221.913,200.900 222.255 C 199.770 222.546,199.712 223.855,200.813 224.204 C 201.260 224.346,202.066 224.870,202.605 225.369 L 203.583 226.276 202.692 227.083 C 200.862 228.738,198.400 228.476,198.400 226.625 C 198.400 225.964,197.970 225.425,196.973 224.837 C 195.124 223.746,195.181 222.382,197.100 221.817 C 198.031 221.543,198.400 221.197,198.400 220.597 C 198.400 218.929,200.585 218.170,202.133 219.301 M217.402 220.009 C 217.596 220.894,218.041 221.374,219.063 221.800 C 220.801 222.527,220.774 223.824,219.000 224.799 C 218.203 225.237,217.757 225.827,217.671 226.553 C 217.475 228.217,214.986 228.474,213.078 227.027 C 212.254 226.402,213.509 224.737,215.210 224.197 C 216.357 223.833,216.125 222.246,214.900 222.072 C 214.322 221.990,214.000 221.668,214.000 221.172 C 214.000 220.747,213.820 220.400,213.600 220.400 C 212.850 220.400,213.197 219.575,214.100 219.212 C 216.014 218.443,217.117 218.709,217.402 220.009 M235.300 219.221 C 236.125 219.450,236.800 219.699,236.800 219.773 C 236.800 220.502,235.420 222.246,234.709 222.418 C 233.379 222.737,233.313 223.913,234.607 224.238 C 235.190 224.384,236.127 224.963,236.689 225.525 L 237.711 226.547 236.555 227.472 C 234.613 229.025,232.000 228.311,232.000 226.226 C 232.000 225.648,231.615 225.230,230.800 224.922 C 228.865 224.192,229.249 221.937,231.375 221.542 C 231.857 221.453,232.277 220.908,232.486 220.099 C 232.855 218.677,233.083 218.605,235.300 219.221 M250.426 219.614 C 250.870 219.852,251.200 220.449,251.200 221.014 C 251.200 221.721,251.418 222.000,251.971 222.000 C 254.046 222.000,254.765 224.855,252.858 225.520 C 252.039 225.806,251.647 226.265,251.470 227.148 C 251.293 228.035,250.937 228.451,250.195 228.637 C 248.914 228.959,249.026 229.301,250.800 230.492 C 252.527 231.652,252.684 232.944,251.120 233.125 C 250.256 233.224,249.855 232.965,249.120 231.833 C 247.854 229.885,247.202 229.708,247.194 231.313 C 247.186 232.882,246.845 233.461,245.810 233.657 C 245.376 233.740,244.829 234.191,244.594 234.661 C 243.302 237.254,241.065 237.581,240.000 235.334 C 239.670 234.638,238.860 233.828,238.200 233.534 C 237.220 233.098,236.977 232.725,236.876 231.500 C 236.715 229.555,236.330 229.609,234.757 231.800 C 233.306 233.821,232.855 233.966,231.765 232.762 C 231.017 231.935,231.020 231.914,232.003 231.179 C 232.552 230.769,233.504 230.046,234.119 229.571 C 234.902 228.967,235.572 228.774,236.350 228.930 C 237.174 229.095,237.653 228.931,238.196 228.296 L 238.929 227.440 239.513 228.320 C 239.835 228.804,240.337 229.200,240.629 229.200 C 240.921 229.200,241.349 229.515,241.580 229.900 C 241.980 230.567,242.020 230.567,242.420 229.900 C 242.651 229.515,243.079 229.200,243.371 229.200 C 243.663 229.200,244.187 228.795,244.535 228.300 L 245.168 227.400 245.963 228.400 C 246.602 229.205,246.855 229.302,247.263 228.896 C 247.671 228.489,247.608 228.230,246.938 227.560 L 246.107 226.729 247.072 225.765 C 247.602 225.234,248.304 224.800,248.631 224.800 C 249.842 224.800,249.652 223.625,248.208 222.182 C 246.156 220.129,247.810 218.214,250.426 219.614 M174.965 221.316 C 175.495 222.157,174.379 223.431,173.431 223.067 C 172.682 222.780,172.601 221.559,173.285 220.875 C 173.873 220.287,174.403 220.426,174.965 221.316 M154.000 222.358 C 156.061 223.612,156.448 224.937,154.800 225.097 C 154.029 225.172,153.548 224.828,152.700 223.592 C 150.882 220.944,151.192 220.650,154.000 222.358 M209.122 223.249 C 209.199 223.913,209.015 224.385,208.622 224.536 C 207.546 224.949,206.800 224.374,206.800 223.131 C 206.800 221.474,208.928 221.583,209.122 223.249 M242.720 222.480 C 244.041 223.801,242.844 225.680,241.231 224.817 C 240.241 224.287,240.167 223.490,241.029 222.629 C 241.783 221.874,242.087 221.847,242.720 222.480 M267.200 223.569 C 267.200 224.379,264.509 227.408,263.682 227.528 C 262.105 227.756,262.595 225.981,264.515 224.506 C 266.193 223.218,267.200 222.867,267.200 223.569 M216.192 229.817 C 218.200 230.993,218.741 231.961,217.783 232.662 C 216.885 233.318,216.419 233.056,214.900 231.044 C 212.935 228.441,213.282 228.111,216.192 229.817 M303.997 242.774 C 302.635 243.188,300.400 244.364,300.400 244.666 C 300.400 245.192,304.823 244.421,305.772 243.731 C 307.485 242.483,306.572 241.990,303.997 242.774 M304.400 247.892 C 302.802 248.652,302.419 248.975,303.000 249.074 C 304.450 249.319,307.780 248.255,307.925 247.500 C 308.113 246.516,307.043 246.636,304.400 247.892 M115.463 290.980 C 115.338 291.305,115.769 292.124,116.443 292.846 C 118.493 295.040,119.341 297.181,118.520 298.088 C 117.984 298.680,117.969 298.787,118.445 298.604 C 118.808 298.465,119.470 298.851,120.122 299.584 C 121.349 300.961,121.481 301.393,120.567 301.043 C 120.203 300.903,119.994 300.983,120.077 301.230 C 120.155 301.466,120.381 301.634,120.579 301.602 C 120.776 301.570,121.162 302.052,121.436 302.672 C 121.710 303.292,121.950 303.572,121.968 303.292 C 122.007 302.682,123.531 302.975,125.600 303.989 C 126.370 304.367,128.620 305.179,130.600 305.794 C 132.580 306.409,135.190 307.317,136.400 307.812 C 137.610 308.307,139.314 308.837,140.186 308.990 C 141.059 309.143,142.229 309.498,142.786 309.779 C 143.344 310.059,144.610 310.411,145.600 310.560 C 146.590 310.709,148.432 311.194,149.692 311.639 C 152.721 312.706,155.349 312.560,155.526 311.314 C 155.625 310.620,155.409 310.379,154.526 310.200 C 153.907 310.075,151.870 309.521,150.000 308.971 C 148.130 308.420,145.520 307.685,144.200 307.338 C 142.880 306.990,141.629 306.547,141.420 306.353 C 141.211 306.159,140.790 306.000,140.485 306.000 C 139.867 306.000,130.830 302.496,130.200 302.012 C 129.980 301.843,129.080 301.473,128.200 301.190 C 125.817 300.423,123.606 298.849,123.887 298.118 C 124.083 297.606,123.982 297.582,123.257 297.969 C 122.505 298.372,122.212 298.256,120.997 297.076 C 118.610 294.757,119.242 294.147,122.341 295.779 C 123.363 296.317,125.190 297.125,126.400 297.574 C 127.610 298.022,130.261 299.022,132.291 299.795 C 134.322 300.568,136.336 301.200,136.768 301.200 C 137.200 301.200,137.664 301.380,137.800 301.600 C 137.936 301.820,138.367 302.000,138.758 302.000 C 139.484 302.000,143.958 303.343,145.400 303.994 C 145.840 304.192,147.010 304.475,148.000 304.622 C 148.990 304.769,150.407 305.139,151.149 305.445 C 151.891 305.750,152.971 306.002,153.549 306.004 C 154.127 306.006,156.310 306.461,158.400 307.016 C 160.490 307.571,163.100 308.105,164.200 308.204 C 165.300 308.302,167.280 308.671,168.600 309.024 C 169.920 309.377,172.440 309.827,174.200 310.023 C 175.960 310.220,178.390 310.562,179.600 310.784 C 180.810 311.006,183.396 311.383,185.346 311.621 C 187.296 311.859,189.332 312.222,189.872 312.427 C 190.411 312.632,193.170 312.800,196.002 312.800 C 199.485 312.800,201.246 312.951,201.440 313.265 C 201.657 313.616,199.405 313.669,192.250 313.481 C 187.037 313.344,182.867 313.384,182.982 313.570 C 183.263 314.026,185.266 314.358,188.317 314.453 C 189.702 314.497,190.917 314.666,191.018 314.830 C 191.119 314.993,189.267 315.090,186.901 315.044 C 184.535 314.998,182.375 315.034,182.100 315.123 C 181.516 315.313,181.418 316.400,181.984 316.400 C 182.196 316.400,182.691 316.735,183.084 317.144 C 183.478 317.554,184.593 318.010,185.562 318.159 C 187.977 318.530,188.310 318.829,186.955 319.412 L 185.800 319.908 187.389 320.596 L 188.977 321.285 187.948 321.824 C 187.065 322.287,186.585 322.264,184.560 321.661 C 183.008 321.200,181.105 320.988,179.000 321.042 C 176.499 321.106,175.423 320.947,174.077 320.315 C 172.103 319.388,166.542 318.638,164.249 318.989 C 163.263 319.139,162.390 319.031,161.849 318.690 C 159.022 316.907,154.166 316.440,152.216 317.763 C 150.422 318.981,150.065 318.883,151.015 317.433 C 151.880 316.114,151.354 315.383,149.286 315.029 C 148.469 314.889,147.170 314.533,146.400 314.238 C 145.630 313.943,144.129 313.495,143.064 313.243 C 141.999 312.990,140.390 312.427,139.489 311.992 C 138.587 311.556,137.659 311.199,137.425 311.198 C 136.818 311.196,130.886 308.917,129.062 307.985 C 128.216 307.553,127.383 307.287,127.210 307.394 C 126.673 307.726,126.454 309.186,126.899 309.461 C 127.165 309.626,127.211 309.514,127.021 309.162 C 126.855 308.853,127.200 309.185,127.788 309.900 C 128.377 310.615,129.085 311.200,129.361 311.200 C 129.638 311.200,130.106 311.650,130.400 312.200 C 130.940 313.209,131.600 313.539,131.600 312.800 C 131.600 311.892,132.205 312.483,132.261 313.447 C 132.336 314.746,133.320 315.774,134.503 315.789 C 135.177 315.797,135.366 315.999,135.262 316.600 C 135.186 317.040,135.247 317.280,135.396 317.132 C 135.546 316.985,136.209 317.435,136.868 318.132 C 137.528 318.830,137.952 319.175,137.810 318.900 C 137.669 318.625,137.743 318.400,137.976 318.400 C 138.209 318.400,138.400 318.580,138.400 318.800 C 138.400 319.020,138.580 319.200,138.800 319.200 C 139.020 319.200,139.155 319.038,139.100 318.840 C 138.904 318.135,139.807 318.303,140.200 319.045 C 140.420 319.460,140.920 319.854,141.312 319.920 C 142.063 320.047,144.545 321.626,145.586 322.638 C 146.647 323.670,150.862 326.000,151.668 326.000 C 152.093 326.000,153.003 326.291,153.691 326.647 C 155.257 327.457,158.508 327.540,159.407 326.794 C 160.185 326.149,163.090 325.898,163.429 326.447 C 163.556 326.652,162.836 327.183,161.829 327.628 C 160.823 328.073,160.000 328.629,160.000 328.863 C 160.000 329.451,162.754 328.903,163.489 328.168 C 164.587 327.071,165.592 326.714,165.832 327.339 C 166.085 327.998,167.631 327.754,168.094 326.982 C 168.963 325.534,173.605 326.096,172.825 327.554 C 172.409 328.330,173.169 329.497,173.727 328.940 C 173.867 328.800,174.227 328.890,174.527 329.140 C 174.828 329.389,175.221 329.460,175.401 329.297 C 175.581 329.133,175.593 329.234,175.429 329.519 C 175.219 329.882,174.980 329.915,174.635 329.629 C 174.338 329.383,173.993 329.364,173.770 329.583 C 173.567 329.783,172.771 329.817,172.002 329.657 C 169.325 329.103,167.764 332.521,170.257 333.477 C 170.556 333.592,170.800 334.003,170.800 334.391 C 170.800 335.192,175.868 337.200,177.890 337.200 C 178.531 337.200,179.942 337.451,181.027 337.758 C 182.112 338.065,184.155 338.426,185.568 338.559 C 188.531 338.839,188.711 338.938,187.957 339.867 C 187.477 340.459,187.480 340.505,187.981 340.203 C 188.300 340.011,189.265 339.895,190.125 339.945 L 191.689 340.038 190.920 338.719 C 189.848 336.879,190.156 335.879,192.364 334.030 L 194.276 332.429 200.038 332.097 C 203.207 331.914,206.487 331.886,207.327 332.033 C 208.166 332.181,210.686 332.332,212.927 332.368 C 219.415 332.472,220.916 333.137,222.382 336.557 L 223.191 338.445 221.808 339.022 C 221.048 339.340,220.246 339.600,220.025 339.600 C 219.805 339.600,219.729 339.870,219.855 340.200 C 220.129 340.913,222.041 340.999,222.713 340.327 C 223.410 339.630,227.936 339.194,229.922 339.633 C 231.274 339.932,231.768 339.889,232.222 339.435 C 232.540 339.117,233.835 338.645,235.100 338.386 C 240.446 337.289,244.238 335.637,243.744 334.619 C 243.632 334.389,243.779 334.471,244.070 334.803 C 244.362 335.135,244.969 335.352,245.419 335.286 C 246.518 335.125,246.560 332.103,245.479 331.022 C 245.082 330.625,244.812 329.918,244.879 329.450 C 245.037 328.348,247.052 328.411,247.845 329.543 C 248.389 330.320,250.882 330.613,251.800 330.008 C 252.020 329.863,253.010 329.500,254.000 329.202 C 254.990 328.905,255.971 328.512,256.180 328.330 C 256.389 328.149,256.867 328.000,257.242 328.000 C 257.617 328.000,258.648 327.415,259.533 326.700 C 262.842 324.025,265.143 322.470,269.595 319.900 C 273.367 317.723,273.366 317.723,273.078 318.823 C 272.902 319.495,272.966 319.560,273.427 319.178 C 273.737 318.920,273.911 318.579,273.812 318.420 C 273.386 317.731,275.880 315.402,276.496 315.914 C 277.163 316.467,278.266 315.628,277.697 314.999 C 277.533 314.819,277.625 314.801,277.901 314.960 C 278.221 315.144,278.542 314.879,278.791 314.224 C 279.005 313.661,279.419 313.200,279.712 313.200 C 280.356 313.200,282.580 310.895,282.952 309.843 C 283.099 309.426,283.334 309.201,283.475 309.341 C 283.615 309.482,284.058 309.058,284.459 308.399 C 284.860 307.739,285.430 307.200,285.724 307.200 C 286.351 307.200,288.000 305.546,288.000 304.917 C 288.000 304.680,288.267 304.383,288.593 304.258 C 288.961 304.117,289.087 303.771,288.925 303.350 C 288.748 302.889,288.815 302.762,289.132 302.958 C 289.864 303.411,289.688 302.537,288.571 300.175 C 287.404 297.708,287.171 297.617,285.545 298.985 C 284.569 299.806,284.199 299.904,283.329 299.573 C 282.599 299.296,281.850 299.323,280.842 299.665 C 280.049 299.934,279.005 300.108,278.522 300.051 C 278.039 299.995,277.238 300.166,276.741 300.431 C 276.245 300.697,274.300 300.992,272.420 301.088 C 270.539 301.183,268.550 301.286,268.000 301.317 C 267.450 301.348,266.877 301.550,266.728 301.765 C 266.578 301.981,265.408 302.190,264.128 302.229 C 262.847 302.269,261.148 302.429,260.351 302.586 C 259.554 302.742,255.414 302.940,251.151 303.025 C 240.318 303.243,235.377 303.429,229.600 303.836 C 226.850 304.030,223.610 304.162,222.400 304.129 C 203.696 303.621,195.833 304.110,185.143 306.446 C 184.121 306.669,180.976 306.925,178.154 307.014 C 175.332 307.103,172.516 307.287,171.895 307.423 C 171.275 307.559,170.550 307.504,170.284 307.300 C 170.018 307.096,168.450 306.703,166.800 306.427 C 160.621 305.392,159.377 305.112,158.514 304.563 C 158.027 304.254,157.346 304.000,157.002 304.000 C 156.657 304.000,156.271 303.730,156.145 303.400 C 156.003 303.030,155.395 302.800,154.557 302.800 C 153.811 302.800,153.200 302.620,153.200 302.400 C 153.200 302.180,152.750 302.000,152.200 302.000 C 151.578 302.000,151.200 301.773,151.200 301.400 C 151.200 301.070,150.885 300.795,150.500 300.789 C 150.115 300.783,148.990 300.332,148.000 299.788 C 146.342 298.877,144.609 298.039,141.340 296.567 C 140.646 296.255,139.903 296.000,139.689 296.000 C 139.474 296.000,139.090 295.750,138.837 295.444 C 138.412 294.932,135.402 293.896,134.000 293.779 C 133.670 293.751,132.680 293.544,131.800 293.317 C 128.660 292.510,124.579 291.835,123.322 291.915 C 122.620 291.959,121.936 291.821,121.804 291.606 C 121.653 291.362,121.275 291.396,120.791 291.698 C 120.188 292.075,119.913 292.073,119.530 291.690 C 119.260 291.420,118.637 291.200,118.144 291.200 C 117.651 291.200,117.136 291.020,117.000 290.800 C 116.634 290.208,115.718 290.315,115.463 290.980 M279.373 302.756 C 279.494 302.952,279.150 303.403,278.609 303.757 C 278.039 304.131,277.717 304.641,277.844 304.970 C 278.112 305.670,276.879 306.373,274.200 307.048 C 273.100 307.324,271.390 307.847,270.400 308.209 C 268.438 308.925,263.553 310.063,257.600 311.189 C 255.510 311.585,252.540 312.197,251.000 312.550 C 249.460 312.903,246.310 313.368,244.000 313.585 C 241.690 313.802,239.171 314.164,238.403 314.389 C 237.634 314.615,236.284 314.803,235.403 314.806 C 233.277 314.814,232.448 315.337,233.051 316.289 C 233.739 317.372,243.983 317.123,245.835 315.978 C 246.528 315.550,247.544 315.200,248.093 315.200 C 248.643 315.200,249.550 314.840,250.109 314.400 C 251.242 313.509,252.212 313.372,252.628 314.046 C 252.926 314.528,256.840 314.250,259.000 313.592 C 259.660 313.391,261.550 312.966,263.200 312.647 C 264.850 312.328,267.233 311.785,268.496 311.440 C 271.052 310.741,274.571 310.044,277.000 309.754 C 279.408 309.467,277.795 310.613,275.293 310.967 C 274.252 311.114,272.770 311.579,272.000 312.000 L 270.600 312.766 272.033 312.783 C 272.822 312.792,273.599 312.668,273.760 312.507 C 274.170 312.097,277.327 311.194,277.555 311.422 C 277.868 311.735,276.250 312.774,275.428 312.787 C 274.559 312.802,272.178 313.505,271.062 314.076 C 270.656 314.284,269.036 314.707,267.462 315.016 C 261.252 316.233,257.418 317.454,257.005 318.347 C 256.535 319.362,256.269 319.395,255.040 318.589 C 254.325 318.121,253.857 318.074,253.028 318.389 C 252.434 318.615,251.525 318.800,251.007 318.800 C 250.490 318.800,249.197 319.173,248.135 319.628 C 246.357 320.390,246.120 320.407,245.158 319.839 C 244.583 319.499,244.021 319.313,243.909 319.424 C 243.797 319.536,242.563 319.811,241.167 320.036 C 239.770 320.261,238.375 320.654,238.067 320.910 C 237.739 321.183,235.911 321.398,233.654 321.431 C 231.534 321.462,228.788 321.623,227.552 321.789 C 226.027 321.993,225.214 321.947,225.028 321.645 C 224.659 321.048,226.442 320.400,228.450 320.400 C 230.721 320.400,230.025 319.745,227.405 319.418 C 224.301 319.030,224.622 318.000,227.847 318.000 C 229.541 318.000,231.200 316.977,231.200 315.931 C 231.200 315.191,230.958 315.165,226.100 315.374 C 214.846 315.860,197.335 316.025,195.800 315.661 C 194.671 315.392,197.971 315.268,207.000 315.237 C 214.040 315.213,220.880 315.026,222.200 314.820 C 223.520 314.615,226.180 314.352,228.111 314.237 C 236.266 313.751,232.422 313.304,221.162 313.429 C 213.694 313.513,210.057 313.432,211.200 313.210 C 212.190 313.017,215.270 312.846,218.045 312.830 C 220.820 312.813,224.060 312.614,225.245 312.388 C 226.430 312.161,228.840 311.807,230.600 311.601 C 232.360 311.395,235.240 311.032,237.000 310.793 C 238.760 310.555,241.550 310.201,243.200 310.007 C 247.377 309.516,252.531 308.563,258.400 307.196 C 261.150 306.556,263.940 305.948,264.600 305.844 C 266.227 305.588,270.680 304.513,274.800 303.381 C 278.672 302.317,279.068 302.263,279.373 302.756 M123.867 305.467 C 123.720 305.613,123.910 306.027,124.289 306.387 C 124.971 307.035,128.000 306.690,128.000 305.964 C 128.000 305.353,124.412 304.922,123.867 305.467 M131.376 307.813 C 131.804 308.136,132.434 308.394,132.776 308.387 C 133.275 308.377,133.244 308.257,132.624 307.787 C 132.196 307.464,131.566 307.206,131.224 307.213 C 130.725 307.223,130.756 307.343,131.376 307.813 M143.600 312.000 C 143.930 312.213,144.560 312.388,145.000 312.388 C 145.662 312.388,145.697 312.321,145.200 312.000 C 144.870 311.787,144.240 311.612,143.800 311.612 C 143.138 311.612,143.103 311.679,143.600 312.000 M158.407 311.850 C 158.426 312.823,160.474 314.146,161.229 313.675 C 162.217 313.057,162.272 313.068,162.496 313.925 C 162.640 314.475,163.402 314.780,165.643 315.186 C 167.269 315.481,169.193 315.959,169.918 316.248 C 171.725 316.970,178.169 317.089,178.980 316.417 C 180.625 315.051,179.271 314.565,170.600 313.405 C 168.180 313.082,165.390 312.624,164.400 312.388 C 161.726 311.750,158.399 311.452,158.407 311.850 M171.600 312.000 C 171.600 312.220,172.365 312.397,173.300 312.394 C 174.545 312.389,174.839 312.284,174.400 312.000 C 173.610 311.490,171.600 311.490,171.600 312.000 M241.000 312.000 C 240.849 312.244,241.455 312.400,242.553 312.400 C 243.543 312.400,244.464 312.220,244.600 312.000 C 244.751 311.756,244.145 311.600,243.047 311.600 C 242.057 311.600,241.136 311.780,241.000 312.000 M178.000 312.800 C 178.000 313.020,178.495 313.197,179.100 313.194 C 179.957 313.189,180.068 313.102,179.600 312.800 C 178.817 312.294,178.000 312.294,178.000 312.800 M235.800 312.800 C 235.155 313.077,235.287 313.149,236.476 313.172 C 237.288 313.187,238.064 313.020,238.200 312.800 C 238.498 312.317,236.923 312.317,235.800 312.800 M166.804 317.750 C 168.310 318.612,175.607 319.098,174.800 318.283 C 174.378 317.856,172.955 317.602,170.000 317.426 C 166.224 317.201,165.901 317.234,166.804 317.750 M206.296 317.800 C 206.717 318.552,211.206 319.171,216.367 319.188 C 221.597 319.205,220.730 319.542,214.157 320.048 C 205.370 320.724,203.286 320.719,199.630 320.014 L 196.200 319.352 199.000 319.064 C 203.908 318.558,204.800 318.358,204.800 317.765 C 204.800 317.015,205.871 317.041,206.296 317.800 M239.600 318.200 C 238.169 319.018,242.335 319.027,244.600 318.212 L 246.200 317.635 243.400 317.632 C 241.700 317.630,240.207 317.853,239.600 318.200 M179.478 319.056 C 178.912 319.621,179.746 319.999,181.524 319.984 L 183.400 319.969 182.054 319.384 C 180.592 318.749,179.875 318.658,179.478 319.056 M140.475 320.353 C 140.071 320.604,140.095 320.781,140.591 321.192 C 141.353 321.825,141.804 321.493,141.331 320.648 C 141.123 320.276,140.787 320.161,140.475 320.353 M211.300 321.467 C 212.125 321.579,212.800 321.795,212.800 321.947 C 212.800 322.547,210.568 323.048,209.398 322.712 C 207.681 322.218,203.192 322.239,201.900 322.748 C 200.742 323.203,198.800 322.759,198.800 322.039 C 198.800 321.336,207.426 320.941,211.300 321.467 M144.233 323.146 C 144.098 323.365,144.170 323.658,144.393 323.796 C 144.617 323.934,144.803 323.902,144.806 323.724 C 144.809 323.546,144.980 323.665,145.184 323.988 C 145.389 324.312,145.657 324.476,145.781 324.353 C 145.904 324.229,145.662 323.818,145.242 323.438 C 144.784 323.023,144.381 322.907,144.233 323.146 M217.906 327.666 C 218.162 327.922,219.130 328.103,220.057 328.066 C 222.655 327.964,224.675 329.580,222.700 330.180 C 219.164 331.255,217.331 331.279,217.728 330.243 C 217.846 329.937,217.527 329.766,216.863 329.779 C 215.676 329.803,215.223 328.736,216.016 327.781 C 216.598 327.079,217.278 327.038,217.906 327.666 M196.610 328.941 C 197.264 329.047,197.935 329.149,198.100 329.167 C 198.652 329.228,198.209 330.196,197.495 330.489 C 195.984 331.108,194.400 330.398,194.400 329.101 C 194.400 328.175,194.516 327.998,194.910 328.325 C 195.190 328.558,195.955 328.835,196.610 328.941 M243.194 328.500 C 243.185 329.242,242.689 329.785,241.900 329.918 C 241.092 330.053,241.040 329.846,241.614 328.774 C 242.074 327.914,243.203 327.718,243.194 328.500 M188.400 329.363 C 188.400 329.762,187.760 329.966,186.199 330.063 C 183.748 330.216,183.313 329.821,185.300 329.248 C 187.256 328.683,188.400 328.725,188.400 329.363 M191.074 330.259 C 190.718 330.615,190.000 330.006,190.000 329.348 C 190.000 328.825,190.088 328.831,190.648 329.390 C 191.004 329.747,191.196 330.138,191.074 330.259 M225.462 329.817 C 225.764 330.604,225.407 330.965,224.624 330.665 C 224.272 330.530,224.114 330.169,224.250 329.815 C 224.553 329.025,225.158 329.026,225.462 329.817 M214.080 330.880 C 213.707 331.253,213.493 331.253,213.120 330.880 C 212.747 330.507,212.853 330.400,213.600 330.400 C 214.347 330.400,214.453 330.507,214.080 330.880 M197.500 339.865 C 198.227 340.158,198.113 340.800,197.333 340.800 C 196.967 340.800,196.773 340.906,196.903 341.037 C 197.033 341.167,197.504 341.157,197.949 341.016 C 198.899 340.715,198.660 339.583,197.657 339.632 C 197.242 339.652,197.184 339.738,197.500 339.865 \\\" stroke=\\\"none\\\" fill=\\\"#a24c13\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path3\\\" d=\\\"M260.578 89.522 C 259.685 89.895,258.427 90.695,257.782 91.300 C 257.136 91.905,256.385 92.400,256.112 92.400 C 255.195 92.400,252.210 96.045,251.897 97.547 C 250.916 102.261,251.499 104.318,253.277 102.409 C 253.813 101.834,254.216 101.649,254.311 101.933 C 255.133 104.400,259.888 100.208,263.298 94.010 C 264.041 92.660,265.446 92.455,265.345 93.711 C 265.258 94.795,265.835 94.163,266.791 92.130 C 268.377 88.757,267.969 88.004,265.834 90.363 C 264.794 91.512,264.131 91.413,263.400 90.000 C 262.686 88.619,262.724 88.626,260.578 89.522 M132.554 101.425 C 133.225 103.174,131.045 104.998,128.611 104.726 C 127.879 104.644,127.415 104.810,127.287 105.200 C 127.179 105.530,127.205 105.696,127.344 105.568 C 127.657 105.282,136.261 113.683,136.082 114.100 C 135.888 114.551,136.715 114.461,137.000 114.000 C 137.615 113.004,139.957 113.591,141.483 115.123 C 144.307 117.958,145.576 119.759,147.246 123.300 C 147.739 124.345,148.285 125.200,148.461 125.200 C 148.947 125.200,149.859 127.210,150.182 128.995 C 150.534 130.930,151.611 130.019,151.560 127.831 C 151.478 124.396,152.412 117.827,153.219 116.161 C 153.691 115.185,154.168 113.435,154.279 112.273 L 154.479 110.161 152.540 108.587 C 151.473 107.721,150.251 106.694,149.825 106.306 C 149.398 105.918,148.847 105.600,148.599 105.600 C 147.799 105.600,144.000 103.611,144.000 103.191 C 144.000 102.958,143.576 102.891,143.004 103.035 C 142.330 103.204,141.937 103.100,141.788 102.714 C 141.646 102.344,141.170 102.202,140.432 102.310 C 139.807 102.402,139.173 102.280,139.024 102.038 C 138.875 101.797,138.234 101.600,137.600 101.600 C 136.966 101.600,136.336 101.420,136.200 101.200 C 135.756 100.482,132.275 100.697,132.554 101.425 M253.094 103.839 C 252.774 104.160,253.193 105.200,253.643 105.200 C 253.839 105.200,254.000 104.840,254.000 104.400 C 254.000 103.620,253.576 103.358,253.094 103.839 M259.854 109.913 C 259.743 110.092,259.796 110.470,259.971 110.753 C 260.219 111.154,260.341 111.131,260.527 110.646 C 260.779 109.990,260.198 109.357,259.854 109.913 M258.800 114.600 C 258.800 114.930,259.070 115.200,259.400 115.200 C 259.730 115.200,260.000 114.930,260.000 114.600 C 260.000 114.270,259.730 114.000,259.400 114.000 C 259.070 114.000,258.800 114.270,258.800 114.600 M292.256 123.078 C 291.805 123.528,291.981 124.000,292.600 124.000 C 292.930 124.000,293.200 123.831,293.200 123.624 C 293.200 123.119,292.575 122.758,292.256 123.078 M290.007 125.096 C 289.353 125.353,288.400 126.220,288.400 126.559 C 288.400 126.939,289.714 126.286,290.469 125.531 C 291.209 124.791,291.084 124.673,290.007 125.096 M120.200 128.792 C 114.437 129.599,111.301 130.239,110.412 130.791 C 109.683 131.243,109.743 131.297,112.171 132.357 C 114.879 133.540,114.248 133.966,108.734 134.678 C 104.315 135.248,104.171 135.298,103.034 136.676 C 100.540 139.699,100.113 141.420,101.800 141.640 C 103.109 141.811,103.469 141.789,104.100 141.496 C 104.515 141.304,104.800 141.334,104.800 141.571 C 104.800 141.897,106.491 142.524,108.600 142.979 C 108.820 143.026,109.810 143.295,110.800 143.575 C 111.790 143.855,112.647 144.062,112.704 144.034 C 112.761 144.006,113.346 144.262,114.004 144.602 C 114.662 144.942,115.200 145.122,115.200 145.001 C 115.200 144.880,115.619 145.056,116.132 145.392 C 116.644 145.728,117.172 145.895,117.304 145.762 C 117.436 145.630,118.052 145.802,118.672 146.145 C 120.703 147.267,125.393 149.358,125.700 149.278 C 125.865 149.235,126.000 149.410,126.000 149.667 C 126.000 149.923,126.111 150.022,126.248 149.886 C 126.384 149.750,126.758 149.901,127.080 150.223 C 127.401 150.544,127.830 150.705,128.032 150.580 C 128.235 150.455,128.400 150.532,128.400 150.751 C 128.400 150.969,129.030 151.376,129.800 151.654 C 130.570 151.933,131.200 152.335,131.200 152.547 C 131.200 152.759,131.309 152.824,131.443 152.691 C 131.576 152.557,131.891 152.621,132.143 152.831 C 134.093 154.466,134.588 154.800,135.061 154.800 C 135.358 154.800,135.600 154.991,135.600 155.224 C 135.600 155.457,135.781 155.535,136.003 155.398 C 136.224 155.261,136.513 155.430,136.645 155.772 C 136.776 156.115,137.010 156.318,137.163 156.223 C 137.317 156.128,138.073 156.628,138.844 157.334 C 139.615 158.040,140.639 158.648,141.120 158.684 C 142.187 158.764,143.015 159.329,145.487 161.663 C 149.435 165.391,157.796 174.388,158.067 175.201 C 158.210 175.629,158.651 175.550,160.145 174.827 C 162.946 173.471,162.718 173.924,159.156 176.786 C 153.325 181.471,148.111 188.000,150.200 188.000 C 151.040 188.000,151.000 188.123,149.147 191.243 C 147.133 194.633,147.252 194.850,150.003 192.798 C 152.998 190.563,153.579 191.156,151.082 193.898 C 149.719 195.395,150.594 195.354,153.390 193.790 C 156.790 191.889,156.848 192.043,153.974 195.331 C 150.854 198.900,150.863 198.908,155.498 196.631 C 158.422 195.194,159.106 195.247,157.984 196.823 C 156.669 198.669,157.090 198.613,162.247 196.258 C 169.749 192.831,172.837 191.998,174.200 193.033 C 174.992 193.634,174.990 193.648,174.000 194.411 C 172.735 195.386,172.790 195.382,176.400 194.233 C 188.123 190.499,195.223 186.043,195.670 182.140 C 195.864 180.440,197.112 180.497,200.793 182.372 C 202.550 183.268,204.305 183.991,204.694 183.979 C 205.082 183.968,204.680 183.668,203.800 183.314 C 198.975 181.368,197.462 178.424,202.074 179.957 C 206.383 181.389,209.852 181.618,217.400 180.969 C 229.995 179.886,235.131 179.798,238.656 180.606 C 245.370 182.145,244.641 183.012,237.164 182.379 C 232.895 182.018,231.555 182.029,230.600 182.436 C 229.491 182.908,229.735 182.970,233.800 183.255 C 236.220 183.424,238.740 183.642,239.400 183.740 C 240.060 183.837,241.328 183.728,242.217 183.498 C 243.488 183.168,244.429 183.225,246.617 183.764 C 249.637 184.508,250.119 184.591,255.200 185.254 C 257.070 185.498,258.932 185.871,259.338 186.083 C 259.964 186.410,260.037 186.346,259.820 185.662 C 259.595 184.955,259.791 184.820,261.382 184.582 C 263.402 184.279,263.476 184.172,262.560 182.865 C 261.979 182.035,261.978 181.887,262.547 181.259 C 263.427 180.286,262.286 178.478,259.911 177.086 C 258.424 176.215,255.200 172.923,255.200 172.276 C 255.200 172.172,255.650 171.974,256.200 171.836 C 258.089 171.362,256.226 168.548,252.900 166.851 C 250.051 165.398,251.569 164.644,255.044 165.787 C 255.746 166.017,255.926 165.870,256.119 164.905 C 256.287 164.065,256.959 163.342,258.558 162.281 C 259.772 161.475,261.178 160.252,261.682 159.564 C 262.187 158.875,263.500 157.793,264.600 157.160 C 265.700 156.526,266.477 156.006,266.327 156.004 C 266.177 156.002,266.664 155.353,267.409 154.563 C 268.155 153.772,269.149 152.332,269.618 151.363 C 270.087 150.393,270.635 149.600,270.836 149.600 C 271.036 149.600,271.200 149.305,271.200 148.944 C 271.200 148.583,271.515 148.030,271.900 147.714 C 272.344 147.350,272.381 147.241,272.000 147.414 C 271.670 147.565,271.940 147.205,272.600 146.615 C 273.260 146.025,273.530 145.676,273.200 145.840 C 272.870 146.004,273.095 145.633,273.700 145.015 C 274.305 144.397,274.800 143.763,274.800 143.607 C 274.800 143.450,275.160 142.907,275.600 142.400 C 276.040 141.893,276.400 141.261,276.400 140.997 C 276.400 140.733,276.850 140.031,277.400 139.438 C 277.950 138.844,278.400 138.177,278.400 137.956 C 278.400 137.734,278.580 137.664,278.800 137.800 C 279.021 137.937,279.200 137.649,279.200 137.157 C 279.200 136.667,279.312 136.379,279.450 136.516 C 279.722 136.788,281.600 134.212,281.600 133.567 C 281.600 133.348,281.206 133.536,280.725 133.984 C 279.491 135.133,278.649 135.057,278.958 133.825 C 279.093 133.288,279.010 132.730,278.774 132.584 C 278.538 132.438,278.443 132.065,278.562 131.755 C 278.903 130.866,277.042 131.484,273.500 133.437 C 271.795 134.377,270.040 135.260,269.600 135.400 C 268.783 135.659,268.477 135.047,269.200 134.600 C 269.597 134.355,269.776 132.800,269.408 132.800 C 269.303 132.800,268.485 133.093,267.591 133.450 C 265.646 134.228,265.255 133.987,266.178 132.578 C 267.372 130.755,264.900 130.790,263.181 132.621 C 262.191 133.674,261.227 133.867,260.515 133.155 C 259.977 132.617,259.200 133.021,259.200 133.840 C 259.200 134.701,257.652 137.600,257.192 137.600 C 256.653 137.600,256.700 136.266,257.288 134.919 C 257.757 133.845,258.230 133.250,260.379 131.034 C 263.945 127.355,258.008 131.520,251.303 137.400 C 244.650 143.234,237.768 154.400,240.824 154.400 C 242.066 154.400,241.719 155.476,240.391 155.742 C 239.725 155.875,239.065 156.302,238.922 156.692 C 238.780 157.081,238.334 157.829,237.932 158.354 C 237.021 159.542,236.983 161.553,237.861 162.195 C 238.917 162.967,238.136 163.662,236.548 163.364 C 235.479 163.163,235.041 163.265,234.646 163.805 C 234.203 164.411,233.942 164.443,232.724 164.041 C 230.687 163.369,226.075 165.435,227.169 166.529 C 228.446 167.806,226.333 168.006,224.292 166.801 C 223.276 166.202,222.295 166.017,220.369 166.060 C 218.956 166.092,216.599 165.978,215.131 165.807 C 210.568 165.274,204.493 167.323,200.699 170.674 C 199.873 171.403,199.023 172.000,198.809 172.000 C 198.270 172.000,197.324 173.932,196.989 175.718 C 196.567 177.968,196.166 177.896,193.619 175.117 C 191.767 173.096,190.581 172.233,187.939 170.981 L 184.600 169.400 179.400 169.400 C 175.177 169.400,173.912 169.538,172.666 170.135 C 170.815 171.022,169.438 170.768,168.252 169.321 C 167.784 168.749,166.275 167.105,164.900 165.669 C 163.525 164.232,162.400 162.913,162.400 162.736 C 162.400 162.560,161.692 160.925,160.827 159.104 C 159.961 157.282,159.061 155.344,158.826 154.796 C 158.592 154.248,157.582 152.360,156.583 150.600 C 155.584 148.840,154.065 145.960,153.207 144.200 C 152.349 142.440,151.176 140.566,150.601 140.036 C 150.025 139.506,149.307 138.593,149.004 138.007 C 148.481 136.996,145.186 134.580,141.166 132.260 C 138.162 130.526,132.455 128.684,129.800 128.592 C 128.480 128.546,126.950 128.409,126.400 128.287 C 125.850 128.165,123.060 128.392,120.200 128.792 M272.267 131.067 C 271.884 131.449,271.938 132.000,272.357 132.000 C 272.554 132.000,272.818 131.730,272.945 131.400 C 273.179 130.790,272.753 130.581,272.267 131.067 M254.000 139.322 C 254.000 139.608,253.415 140.383,252.700 141.042 C 249.652 143.854,249.190 143.731,251.414 140.700 C 252.747 138.882,254.000 138.215,254.000 139.322 M95.400 140.000 C 94.659 140.318,94.835 140.459,96.100 140.560 C 96.375 140.582,96.695 140.725,96.811 140.879 C 97.152 141.332,98.128 140.531,97.828 140.045 C 97.508 139.528,96.539 139.510,95.400 140.000 M243.645 151.715 C 243.318 152.042,243.200 151.997,243.200 151.547 C 243.200 150.752,243.738 150.214,243.937 150.810 C 244.021 151.063,243.890 151.470,243.645 151.715 M236.962 167.230 C 237.736 167.687,239.681 168.385,241.284 168.781 C 246.527 170.076,248.728 170.827,250.193 171.821 C 250.987 172.360,251.887 172.800,252.194 172.800 C 252.501 172.800,252.864 172.980,253.000 173.200 C 253.439 173.910,252.312 173.640,245.438 171.383 C 240.394 169.727,238.190 169.188,236.734 169.255 C 235.650 169.304,234.574 169.134,234.312 168.872 C 234.052 168.612,233.381 168.397,232.820 168.394 C 231.382 168.385,230.234 167.623,231.600 167.584 C 232.363 167.562,234.858 166.831,235.477 166.448 C 235.520 166.421,236.188 166.774,236.962 167.230 M269.600 195.064 C 269.600 195.671,276.136 201.200,276.854 201.200 C 277.043 201.200,277.963 201.865,278.899 202.679 C 280.253 203.855,280.151 203.689,278.400 201.861 C 277.190 200.598,275.210 198.904,274.000 198.097 C 272.790 197.289,271.305 196.184,270.700 195.640 C 270.095 195.095,269.600 194.836,269.600 195.064 M286.400 202.800 C 286.400 203.547,286.507 203.653,286.880 203.280 C 287.253 202.907,287.253 202.693,286.880 202.320 C 286.507 201.947,286.400 202.053,286.400 202.800 M287.856 207.878 C 287.442 208.292,287.563 210.330,288.019 210.612 C 288.987 211.210,289.759 210.439,289.015 209.617 C 288.634 209.195,288.432 208.672,288.567 208.453 C 288.852 207.993,288.237 207.496,287.856 207.878 \\\" stroke=\\\"none\\\" fill=\\\"#3d7c1a\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path4\\\" d=\\\"M201.541 58.283 C 200.936 58.375,200.398 58.764,200.287 59.188 C 200.180 59.597,199.367 60.390,198.480 60.949 C 197.593 61.509,196.751 62.155,196.610 62.384 C 196.200 63.047,195.711 62.869,195.476 61.970 C 195.168 60.792,194.436 61.284,190.477 65.335 C 188.649 67.204,186.399 69.091,185.477 69.528 C 180.399 71.933,169.650 85.106,165.281 94.277 C 164.673 95.555,163.137 98.441,161.869 100.692 C 160.601 102.943,159.362 105.373,159.116 106.092 C 158.263 108.579,156.821 110.068,155.539 109.787 C 154.445 109.546,154.399 109.597,154.370 111.068 C 154.327 113.299,154.073 114.397,153.167 116.268 C 152.441 117.767,151.499 124.377,151.551 127.600 C 151.559 128.150,151.202 129.472,150.756 130.538 C 150.048 132.231,150.017 132.560,150.517 133.138 C 151.985 134.836,152.789 139.028,151.787 139.760 C 151.172 140.210,152.963 144.167,157.148 151.600 C 157.829 152.810,158.582 154.248,158.820 154.796 C 159.058 155.344,159.961 157.282,160.827 159.104 C 161.692 160.925,162.400 162.560,162.400 162.736 C 162.400 162.913,163.525 164.232,164.900 165.669 C 166.275 167.105,167.791 168.758,168.270 169.340 C 168.748 169.923,169.352 170.400,169.611 170.400 C 169.871 170.400,169.514 169.753,168.820 168.961 C 167.234 167.155,167.344 166.178,169.126 166.260 C 170.694 166.333,171.553 166.990,172.246 168.648 L 172.768 169.897 174.884 169.504 C 182.002 168.182,189.256 170.356,193.619 175.117 C 196.166 177.896,196.567 177.968,196.989 175.718 C 197.324 173.932,198.270 172.000,198.809 172.000 C 199.023 172.000,199.873 171.403,200.699 170.674 C 204.493 167.323,210.567 165.275,215.131 165.807 C 220.934 166.483,223.602 166.008,228.200 163.480 C 229.463 162.785,230.411 162.609,232.700 162.641 C 234.891 162.672,235.600 162.550,235.600 162.141 C 235.600 161.843,235.960 161.600,236.400 161.600 C 236.983 161.600,237.200 161.333,237.200 160.619 C 237.200 160.079,237.400 159.199,237.644 158.662 C 237.941 158.012,237.958 157.455,237.698 156.990 C 236.957 155.665,235.454 157.724,235.761 159.644 C 236.045 161.422,235.764 161.684,235.191 160.176 C 234.690 158.859,236.037 155.721,237.318 155.224 C 238.726 154.677,239.551 153.623,241.377 150.041 C 244.398 144.112,248.932 139.037,256.714 132.873 C 261.756 128.880,262.000 128.578,262.000 126.344 C 262.000 125.134,262.155 124.449,262.395 124.597 C 262.774 124.831,262.716 124.445,262.139 122.900 C 261.995 122.515,261.804 121.750,261.715 121.200 C 261.625 120.650,261.209 119.615,260.790 118.900 C 260.370 118.185,260.212 117.600,260.437 117.600 C 260.666 117.600,260.708 117.379,260.534 117.100 C 260.361 116.825,260.272 116.285,260.335 115.900 C 260.418 115.394,260.181 115.200,259.481 115.200 C 258.595 115.200,258.491 115.398,258.272 117.500 C 257.008 129.664,256.550 131.733,255.790 128.700 C 255.417 127.210,255.456 126.390,256.121 121.800 C 257.395 112.996,257.385 111.320,256.073 114.200 C 255.133 116.263,254.670 115.353,254.931 111.959 C 255.149 109.141,255.105 108.781,254.596 109.204 C 253.389 110.205,252.677 109.352,252.957 107.242 C 253.187 105.508,253.126 105.274,252.401 105.084 C 251.767 104.919,251.611 104.593,251.694 103.608 C 251.789 102.473,251.648 102.292,250.300 101.820 C 249.475 101.531,248.800 101.399,248.800 101.527 C 248.800 101.655,248.603 101.563,248.363 101.323 C 247.862 100.822,248.388 99.563,249.702 98.119 L 250.504 97.238 248.552 94.275 C 247.478 92.645,245.520 89.867,244.200 88.100 C 240.360 82.960,238.000 79.680,238.000 79.483 C 238.000 79.383,237.551 78.783,237.003 78.150 C 236.455 77.518,235.005 75.740,233.780 74.200 C 224.536 62.571,215.226 57.341,211.067 61.443 C 209.598 62.893,207.991 63.024,208.289 61.669 C 208.424 61.060,205.683 58.800,204.810 58.800 C 204.390 58.800,203.936 58.620,203.800 58.400 C 203.550 57.996,203.445 57.990,201.541 58.283 M207.447 65.043 C 207.709 66.089,207.180 66.781,206.108 66.794 C 205.536 66.801,205.001 65.045,205.386 64.423 C 205.902 63.588,207.178 63.972,207.447 65.043 M199.526 65.286 C 199.907 65.667,199.655 66.098,198.355 67.286 C 196.377 69.094,196.322 69.107,196.553 67.700 C 196.653 67.095,196.749 66.478,196.767 66.329 C 196.908 65.169,198.723 64.483,199.526 65.286 M191.171 67.661 C 190.685 68.618,189.567 70.480,188.687 71.800 C 184.318 78.352,179.872 86.759,177.379 93.181 C 176.650 95.062,175.752 97.197,175.384 97.927 C 175.016 98.657,174.130 101.365,173.415 103.945 C 172.701 106.525,171.866 109.078,171.561 109.618 L 171.006 110.600 170.876 109.500 C 170.802 108.872,170.501 108.400,170.173 108.400 C 169.432 108.400,169.438 108.338,170.569 104.798 C 174.819 91.495,182.957 75.740,189.536 68.083 C 191.976 65.242,192.466 65.115,191.171 67.661 M205.866 67.827 C 205.998 68.172,205.902 68.658,205.653 68.907 C 205.404 69.156,205.200 70.022,205.200 70.831 C 205.200 71.651,204.934 72.523,204.600 72.800 C 203.642 73.595,202.535 70.669,203.251 69.235 C 204.321 67.089,205.366 66.526,205.866 67.827 M209.016 71.627 C 209.452 72.332,208.993 72.430,208.171 71.809 C 207.494 71.297,207.483 71.224,208.076 71.213 C 208.448 71.206,208.871 71.392,209.016 71.627 M215.428 73.400 C 216.707 74.170,217.909 74.800,218.100 74.800 C 218.970 74.800,227.948 83.277,228.752 84.858 C 229.048 85.439,230.091 86.879,231.070 88.058 C 232.050 89.236,233.189 90.847,233.602 91.639 C 234.016 92.430,235.378 94.320,236.630 95.839 C 237.882 97.357,239.142 99.154,239.430 99.832 C 239.718 100.509,240.257 101.315,240.628 101.623 C 242.289 103.002,251.031 123.102,250.291 123.842 C 249.753 124.380,246.400 118.998,246.400 117.597 C 246.400 116.932,243.748 113.586,243.454 113.880 C 242.858 114.476,243.285 116.908,244.400 119.264 C 245.060 120.659,245.600 122.253,245.600 122.806 C 245.600 123.359,245.983 124.527,246.452 125.401 C 248.429 129.089,249.837 138.226,248.500 138.692 C 248.160 138.811,248.000 138.403,248.000 137.417 C 248.000 136.620,247.635 135.252,247.188 134.376 C 246.741 133.501,245.953 130.763,245.435 128.292 C 244.918 125.822,244.007 122.450,243.411 120.800 C 240.209 111.930,239.774 109.850,241.405 111.204 C 242.213 111.874,242.105 111.307,241.068 109.428 C 240.013 107.518,239.084 107.047,239.359 108.562 C 239.462 109.133,239.382 109.600,239.180 109.600 C 238.678 109.600,236.717 105.658,236.995 105.208 C 237.406 104.543,236.212 101.524,235.194 100.657 C 233.981 99.623,232.806 97.997,230.336 93.933 C 228.675 91.198,222.489 84.483,218.200 80.758 C 215.756 78.634,213.010 75.467,213.477 75.309 C 213.883 75.173,216.666 77.439,218.146 79.113 C 219.936 81.136,231.747 92.786,231.877 92.657 C 232.618 91.915,221.164 78.433,219.772 78.408 C 219.536 78.404,218.525 77.635,217.525 76.700 C 216.525 75.765,215.053 74.497,214.254 73.883 C 213.454 73.269,212.800 72.594,212.800 72.383 C 212.800 71.832,212.867 71.858,215.428 73.400 M205.200 75.400 C 205.474 75.730,206.025 76.000,206.425 76.000 C 207.525 76.000,207.710 76.609,207.637 80.005 C 207.573 83.022,208.439 85.882,209.641 86.626 C 209.839 86.747,209.994 87.242,209.987 87.724 L 209.973 88.600 209.223 87.700 C 207.841 86.044,207.590 86.989,208.623 89.956 C 208.959 90.921,209.493 92.940,209.809 94.442 C 210.125 95.944,210.772 98.000,211.247 99.010 C 211.989 100.589,212.038 100.981,211.596 101.807 C 211.170 102.603,211.196 103.296,211.750 105.883 C 213.859 115.729,216.497 139.428,215.236 137.200 C 215.050 136.870,214.775 134.530,214.626 132.000 C 214.357 127.419,212.739 116.511,211.982 114.170 C 211.627 113.071,210.998 109.785,209.999 103.800 C 209.338 99.834,208.735 97.644,208.177 97.181 C 206.974 96.183,206.912 99.501,208.040 104.480 C 208.466 106.359,208.464 106.934,208.027 107.750 C 207.492 108.748,207.607 111.021,208.808 123.200 C 209.352 128.723,209.296 130.800,208.600 130.800 C 208.267 130.800,208.000 131.156,208.000 131.600 C 208.000 132.040,207.842 132.400,207.648 132.400 C 207.454 132.400,207.269 130.465,207.235 128.100 C 207.123 120.080,206.269 110.092,205.584 108.783 C 205.406 108.444,205.064 105.564,204.824 102.383 C 204.584 99.203,204.083 95.013,203.712 93.074 C 203.160 90.191,203.132 89.489,203.562 89.224 C 203.983 88.963,204.006 88.081,203.681 84.750 C 203.271 80.550,203.455 79.462,204.386 80.583 C 205.171 81.529,206.000 81.332,206.000 80.200 C 206.000 79.650,206.180 79.200,206.400 79.200 C 207.695 79.200,206.580 76.534,205.204 76.340 C 204.647 76.262,204.149 75.891,204.075 75.500 C 203.911 74.642,204.526 74.587,205.200 75.400 M228.800 78.427 C 228.800 78.996,228.533 78.885,227.421 77.854 C 226.024 76.559,226.134 76.156,227.600 77.200 C 228.260 77.670,228.800 78.222,228.800 78.427 M188.243 80.686 C 187.905 81.299,187.337 82.416,186.980 83.169 C 186.624 83.921,185.717 85.342,184.966 86.326 C 184.215 87.310,183.600 88.359,183.600 88.658 C 183.600 88.956,183.420 89.200,183.200 89.200 C 182.610 89.200,182.714 88.170,183.357 87.636 C 183.663 87.381,184.142 86.594,184.421 85.887 C 185.214 83.876,188.542 78.626,188.708 79.125 C 188.790 79.370,188.581 80.073,188.243 80.686 M178.045 80.515 C 177.718 80.842,177.600 80.797,177.600 80.347 C 177.600 79.552,178.138 79.014,178.337 79.610 C 178.421 79.863,178.290 80.270,178.045 80.515 M214.974 82.162 C 217.275 84.411,217.938 85.296,217.729 85.841 C 217.490 86.465,217.319 86.382,216.427 85.215 C 215.862 84.475,214.618 83.137,213.663 82.240 C 212.708 81.344,211.757 80.293,211.549 79.905 C 210.769 78.448,212.013 79.267,214.974 82.162 M230.423 80.100 C 231.499 81.390,231.372 81.745,230.200 80.725 C 229.260 79.908,228.905 79.200,229.436 79.200 C 229.566 79.200,230.010 79.605,230.423 80.100 M192.647 81.465 C 192.309 82.089,192.025 82.363,192.016 82.074 C 191.995 81.383,192.808 79.875,193.064 80.130 C 193.173 80.240,192.986 80.840,192.647 81.465 M200.366 82.500 C 200.554 82.995,200.642 83.471,200.563 83.557 C 200.300 83.845,199.200 82.710,199.200 82.151 C 199.200 81.275,199.993 81.512,200.366 82.500 M233.293 82.957 C 235.139 84.874,236.896 87.058,237.610 88.321 C 237.945 88.914,238.555 89.901,238.964 90.512 C 239.373 91.124,239.618 91.715,239.508 91.825 C 239.398 91.935,238.997 91.549,238.615 90.967 C 238.234 90.386,236.500 88.140,234.761 85.976 C 233.023 83.812,231.600 81.943,231.600 81.821 C 231.600 81.357,232.029 81.645,233.293 82.957 M176.519 83.400 C 176.152 84.170,175.705 84.800,175.526 84.800 C 175.046 84.800,175.122 84.456,175.886 83.162 C 176.850 81.531,177.325 81.710,176.519 83.400 M204.800 83.875 C 204.800 84.519,205.064 85.396,205.387 85.824 C 205.939 86.553,205.975 86.512,205.987 85.149 C 205.994 84.333,205.737 83.480,205.400 83.200 C 204.890 82.777,204.800 82.878,204.800 83.875 M171.807 87.499 C 171.224 88.543,170.508 90.477,170.217 91.798 C 169.925 93.119,169.192 95.820,168.587 97.800 C 166.821 103.583,166.440 105.107,165.388 110.600 C 164.840 113.460,164.128 116.970,163.806 118.400 C 163.484 119.830,162.992 123.070,162.712 125.600 C 162.253 129.748,162.175 130.023,161.920 128.400 C 161.247 124.132,162.024 115.726,163.694 109.200 C 164.566 105.790,165.370 102.550,165.481 102.000 C 165.656 101.128,166.995 97.350,167.750 95.600 C 167.892 95.270,168.354 94.460,168.775 93.800 C 169.197 93.140,169.555 92.116,169.571 91.524 C 169.587 90.932,169.760 90.349,169.955 90.228 C 170.150 90.107,170.420 89.422,170.556 88.704 C 170.859 87.099,172.457 84.408,172.695 85.101 C 172.790 85.377,172.390 86.456,171.807 87.499 M195.649 97.891 C 194.831 108.810,194.378 120.431,194.298 132.600 C 194.261 138.071,194.190 138.892,193.931 136.800 C 193.754 135.370,193.428 133.199,193.205 131.976 C 192.699 129.195,192.690 124.613,193.179 117.623 C 193.388 114.640,193.759 107.790,194.005 102.400 C 194.454 92.556,194.834 88.994,195.713 86.400 C 196.531 83.985,196.518 86.292,195.649 97.891 M194.185 86.353 C 194.531 87.444,193.132 91.400,192.400 91.400 C 191.635 91.400,191.730 89.640,192.620 87.300 C 193.319 85.462,193.808 85.166,194.185 86.353 M212.767 88.100 C 213.874 90.787,214.737 92.395,215.611 93.400 C 215.993 93.840,216.621 94.830,217.006 95.600 C 217.682 96.950,219.097 98.753,221.957 101.905 C 224.013 104.172,226.105 108.996,225.804 110.779 C 225.524 112.435,226.335 115.897,227.599 118.444 C 228.659 120.579,230.800 126.568,230.800 127.399 C 230.800 128.630,230.101 127.932,229.200 125.800 C 228.688 124.590,228.052 123.600,227.785 123.600 C 227.516 123.600,227.055 122.492,226.750 121.111 C 226.447 119.742,225.525 117.502,224.700 116.133 C 223.875 114.764,223.207 113.319,223.216 112.922 C 223.228 112.397,223.401 112.512,223.852 113.344 C 224.826 115.143,225.447 114.083,224.679 111.932 C 223.210 107.814,222.445 106.080,221.271 104.200 C 220.584 103.100,219.386 100.987,218.608 99.504 C 217.643 97.664,216.698 96.479,215.634 95.775 C 214.586 95.082,213.800 94.107,213.241 92.807 C 212.783 91.742,211.931 90.305,211.348 89.612 C 210.555 88.669,210.403 88.237,210.744 87.896 C 210.995 87.645,211.200 87.116,211.200 86.720 C 211.200 85.377,211.898 85.992,212.767 88.100 M229.096 92.800 C 229.784 93.790,230.550 95.410,230.799 96.400 C 231.048 97.390,231.606 99.168,232.039 100.350 C 232.756 102.310,232.772 102.584,232.212 103.438 C 231.694 104.228,231.673 104.661,232.078 106.175 C 232.647 108.303,232.236 108.975,231.169 107.660 C 230.189 106.452,229.036 102.655,229.593 102.469 C 230.288 102.237,230.051 101.443,228.610 99.181 C 227.762 97.850,227.216 96.487,227.210 95.684 C 227.199 94.187,226.297 92.281,224.253 89.429 C 223.476 88.346,222.939 87.299,223.059 87.104 C 223.358 86.620,227.551 90.577,229.096 92.800 M204.998 91.300 C 205.411 93.911,206.085 96.000,206.514 96.000 C 206.942 96.000,206.642 93.530,205.919 91.100 C 205.309 89.046,204.664 89.186,204.998 91.300 M199.239 94.500 C 199.260 96.535,199.254 102.340,199.226 107.400 C 199.174 116.878,199.547 125.996,200.586 140.600 C 200.914 145.220,201.187 150.922,201.192 153.271 C 201.200 157.531,201.461 158.420,202.839 158.880 C 203.289 159.030,201.512 167.248,200.770 168.448 C 200.073 169.576,199.921 168.270,200.258 164.046 C 200.451 161.629,200.472 157.615,200.305 155.126 C 200.139 152.637,199.743 146.545,199.425 141.588 C 199.107 136.632,198.647 132.049,198.401 131.404 C 197.917 130.129,197.795 97.866,198.257 93.300 C 198.633 89.587,199.194 90.273,199.239 94.500 M212.356 95.700 C 213.102 97.692,213.237 98.400,212.873 98.400 C 212.472 98.400,211.200 95.996,211.200 95.240 C 211.200 94.453,212.011 94.776,212.356 95.700 M183.617 98.300 C 183.215 99.565,182.674 101.632,182.416 102.893 C 182.113 104.372,181.346 106.077,180.256 107.693 C 178.263 110.652,177.465 112.538,176.827 115.800 C 176.569 117.120,176.082 119.370,175.744 120.800 C 175.370 122.384,175.078 125.902,174.998 129.800 C 174.926 133.320,174.739 137.745,174.584 139.634 C 174.237 143.845,175.417 146.824,176.076 143.400 C 176.161 142.960,176.240 145.660,176.251 149.400 C 176.265 154.118,176.487 157.363,176.976 160.000 C 178.053 165.796,178.194 167.949,177.449 167.200 C 175.663 165.405,173.087 150.189,173.217 142.200 C 173.316 136.109,173.222 134.216,172.843 134.620 C 172.357 135.136,171.606 138.858,171.572 140.920 C 171.556 141.844,171.374 142.960,171.167 143.400 C 170.924 143.915,170.872 141.724,171.021 137.246 C 171.188 132.230,171.411 130.049,171.822 129.423 C 172.441 128.478,173.306 124.195,174.211 117.600 C 174.883 112.703,175.340 110.659,176.291 108.307 L 176.980 106.600 177.190 107.767 C 177.700 110.601,179.664 107.223,181.590 100.200 C 182.373 97.343,183.160 96.000,184.050 96.000 C 184.214 96.000,184.019 97.035,183.617 98.300 M178.372 98.300 C 178.262 99.473,177.654 100.126,177.628 99.100 C 177.613 98.495,177.780 98.000,178.000 98.000 C 178.220 98.000,178.387 98.135,178.372 98.300 M215.888 100.896 C 216.384 102.758,216.234 103.475,215.665 101.955 C 214.914 99.952,214.758 99.200,215.090 99.200 C 215.280 99.200,215.638 99.963,215.888 100.896 M226.878 102.433 C 231.353 111.420,232.618 114.678,232.230 116.221 C 231.853 117.723,231.359 117.409,230.153 114.900 C 229.545 113.635,228.626 112.083,228.109 111.452 C 226.914 109.990,226.042 107.984,225.391 105.200 C 225.108 103.990,224.650 102.442,224.373 101.759 C 222.885 98.093,225.000 98.662,226.878 102.433 M164.367 100.687 C 164.140 101.285,163.804 101.960,163.620 102.187 C 163.436 102.414,163.200 102.870,163.095 103.200 C 162.989 103.530,162.957 103.350,163.023 102.800 C 163.200 101.310,163.926 99.600,164.380 99.600 C 164.644 99.600,164.639 99.971,164.367 100.687 M214.813 106.826 C 215.474 109.342,216.197 112.099,216.421 112.953 C 216.645 113.807,216.757 114.576,216.672 114.662 C 216.294 115.039,212.420 102.813,212.693 102.103 C 213.089 101.071,213.604 102.218,214.813 106.826 M162.034 106.926 C 161.516 107.444,161.433 106.479,161.896 105.333 C 162.157 104.688,162.209 104.713,162.330 105.546 C 162.406 106.067,162.272 106.688,162.034 106.926 M237.127 109.106 C 237.374 109.928,238.194 111.556,238.948 112.725 C 240.749 115.514,241.295 118.400,240.022 118.400 C 239.479 118.400,238.400 115.772,238.400 114.452 C 238.400 113.557,238.081 112.988,237.225 112.355 C 236.013 111.459,235.425 110.319,235.053 108.147 C 234.625 105.643,236.320 106.428,237.127 109.106 M204.053 109.033 C 204.444 110.839,204.431 121.731,204.038 122.353 C 202.833 124.255,201.563 111.048,202.672 108.156 C 203.019 107.253,203.771 107.730,204.053 109.033 M190.631 111.700 C 190.481 113.515,190.111 116.620,189.809 118.600 C 189.507 120.580,189.148 124.540,189.011 127.400 C 188.874 130.260,188.597 133.410,188.395 134.400 C 187.936 136.654,187.354 143.842,186.792 154.200 C 186.553 158.600,186.187 163.175,185.979 164.367 C 185.771 165.558,185.600 167.043,185.600 167.667 C 185.600 168.401,185.391 168.800,185.008 168.800 C 184.159 168.800,183.862 167.147,184.388 165.347 C 184.637 164.496,185.093 160.560,185.402 156.600 C 185.711 152.640,186.153 146.970,186.383 144.000 C 186.614 141.030,187.074 136.080,187.406 133.000 C 187.739 129.920,188.283 124.700,188.616 121.400 C 189.432 113.306,190.203 108.400,190.659 108.400 C 190.793 108.400,190.781 109.885,190.631 111.700 M160.348 112.223 C 159.873 113.362,159.852 113.370,159.696 112.462 C 159.607 111.946,159.774 110.956,160.067 110.262 C 160.596 109.010,160.601 109.008,160.719 110.023 C 160.785 110.586,160.618 111.576,160.348 112.223 M220.190 111.180 C 220.881 112.517,221.013 115.200,220.387 115.200 C 219.867 115.200,219.720 114.712,219.453 112.100 C 219.206 109.692,219.336 109.530,220.190 111.180 M242.428 111.900 C 242.524 112.927,243.048 113.541,243.558 113.226 C 244.250 112.799,243.847 111.600,243.013 111.600 C 242.676 111.600,242.413 111.735,242.428 111.900 M181.570 116.966 C 181.297 119.515,180.929 121.600,180.751 121.600 C 179.471 121.600,178.721 126.896,178.429 138.000 C 178.208 146.376,178.144 147.041,177.839 144.100 C 177.548 141.296,176.800 139.400,176.800 141.467 C 176.800 141.833,176.694 142.027,176.563 141.897 C 175.877 141.210,178.374 122.228,179.364 120.600 C 179.632 120.160,180.077 118.720,180.354 117.400 C 181.789 110.545,182.274 110.372,181.570 116.966 M237.282 116.261 C 238.637 119.496,239.723 124.800,239.030 124.800 C 238.413 124.800,234.430 114.190,234.407 112.486 C 234.387 111.034,235.956 113.093,237.282 116.261 M167.986 115.300 C 167.804 116.015,167.375 117.590,167.033 118.800 C 166.690 120.010,166.405 121.450,166.399 122.000 C 166.393 122.550,166.216 123.270,166.005 123.600 C 165.558 124.301,165.750 122.640,166.675 117.800 C 167.328 114.383,167.459 114.000,167.981 114.000 C 168.165 114.000,168.167 114.585,167.986 115.300 M219.380 121.100 C 220.066 123.767,221.199 129.118,221.200 129.700 C 221.200 129.865,221.020 130.000,220.800 130.000 C 220.580 130.000,220.400 129.562,220.400 129.026 C 220.400 128.490,220.201 127.545,219.958 126.926 C 219.610 126.039,218.000 119.144,218.000 118.539 C 218.000 117.454,218.845 119.023,219.380 121.100 M217.561 125.633 C 218.081 128.752,218.144 134.664,217.659 134.963 C 217.178 135.261,216.402 132.440,216.390 130.354 C 216.385 129.389,216.218 127.898,216.019 127.039 C 215.820 126.181,215.762 124.228,215.890 122.701 L 216.122 119.923 216.622 121.462 C 216.896 122.308,217.319 124.185,217.561 125.633 M232.224 123.788 C 232.517 125.348,232.110 126.417,231.556 125.543 C 231.081 124.792,231.105 121.894,231.585 122.190 C 231.796 122.321,232.084 123.040,232.224 123.788 M225.357 124.633 C 225.741 125.633,225.644 126.414,225.062 126.995 C 224.612 127.445,224.531 127.245,224.562 125.766 C 224.601 123.962,224.923 123.502,225.357 124.633 M251.788 126.300 C 252.974 128.611,252.959 128.705,251.644 127.200 C 250.972 126.430,250.417 125.575,250.411 125.300 C 250.390 124.348,251.021 124.806,251.788 126.300 M228.805 129.067 C 229.277 133.815,229.725 143.429,229.462 143.182 C 229.335 143.062,228.951 140.272,228.608 136.982 C 228.265 133.692,227.831 129.830,227.644 128.400 C 227.457 126.970,227.390 125.649,227.497 125.465 C 227.966 124.654,228.518 126.174,228.805 129.067 M213.350 127.250 C 213.738 129.190,213.648 137.677,213.242 137.426 C 212.642 137.055,211.894 130.512,212.185 128.182 C 212.489 125.746,212.972 125.360,213.350 127.250 M165.280 128.880 C 164.907 129.253,164.800 129.147,164.800 128.400 C 164.800 127.653,164.907 127.547,165.280 127.920 C 165.653 128.293,165.653 128.507,165.280 128.880 M152.400 132.200 C 152.400 132.530,152.231 132.800,152.024 132.800 C 151.519 132.800,151.158 132.175,151.478 131.856 C 151.928 131.405,152.400 131.581,152.400 132.200 M182.174 142.914 C 182.227 150.777,181.940 153.844,181.440 150.772 C 181.122 148.824,180.985 142.221,181.145 136.600 C 181.372 128.654,182.109 133.179,182.174 142.914 M164.757 139.900 C 164.723 145.912,164.635 147.043,164.314 145.600 C 163.949 143.960,164.236 132.400,164.642 132.400 C 164.729 132.400,164.781 135.775,164.757 139.900 M232.769 137.780 C 232.835 139.442,232.002 137.706,231.811 135.784 L 231.615 133.800 232.177 135.400 C 232.486 136.280,232.752 137.351,232.769 137.780 M196.412 158.600 C 195.991 163.806,195.168 168.965,194.682 169.452 C 194.189 169.944,194.928 156.536,195.466 155.215 C 195.776 154.454,196.158 152.744,196.315 151.415 L 196.600 149.000 196.733 151.000 C 196.806 152.100,196.662 155.520,196.412 158.600 M166.344 156.600 L 166.344 157.400 166.000 156.600 C 165.811 156.160,165.656 155.440,165.656 155.000 L 165.656 154.200 166.000 155.000 C 166.189 155.440,166.344 156.160,166.344 156.600 M168.116 155.600 C 168.231 156.039,168.162 156.500,167.962 156.623 C 167.763 156.746,167.600 156.387,167.600 155.824 C 167.600 154.598,167.828 154.499,168.116 155.600 M180.410 157.426 C 180.624 157.990,180.785 159.475,180.767 160.726 C 180.727 163.533,179.903 162.153,179.439 158.500 C 179.151 156.228,179.716 155.602,180.410 157.426 M261.891 159.355 C 260.741 160.540,259.049 161.995,258.130 162.588 C 257.212 163.181,256.369 163.904,256.258 164.194 C 255.929 165.050,262.099 160.186,263.317 158.628 C 264.944 156.548,264.293 156.880,261.891 159.355 M266.111 158.100 C 264.720 159.897,265.463 160.620,266.999 158.964 C 267.569 158.349,268.155 158.049,268.441 158.226 C 268.747 158.415,268.819 158.355,268.638 158.062 C 268.258 157.447,266.597 157.472,266.111 158.100 M140.637 158.696 C 140.201 159.133,141.246 160.351,142.891 161.323 C 144.369 162.197,151.244 169.370,152.981 171.851 C 153.681 172.851,157.530 175.403,157.852 175.081 C 158.043 174.890,154.377 170.616,152.450 168.782 C 152.092 168.442,150.630 166.916,149.200 165.392 C 144.543 160.426,141.380 157.953,140.637 158.696 M168.787 162.776 C 168.777 163.275,168.657 163.244,168.187 162.624 C 167.864 162.196,167.606 161.566,167.613 161.224 C 167.623 160.725,167.743 160.756,168.213 161.376 C 168.536 161.804,168.794 162.434,168.787 162.776 M273.153 161.876 C 273.074 163.084,273.247 163.771,273.789 164.400 C 274.416 165.127,275.600 169.134,275.600 170.529 C 275.600 171.178,274.890 172.312,273.600 173.724 C 272.500 174.927,271.600 176.022,271.600 176.156 C 271.600 176.793,273.616 176.318,274.006 175.589 C 274.245 175.143,274.585 174.867,274.763 174.977 C 275.120 175.198,277.508 172.392,277.687 171.540 C 277.749 171.243,277.952 170.889,278.138 170.753 C 278.323 170.617,278.174 169.923,277.805 169.210 C 277.399 168.425,277.234 167.520,277.386 166.915 C 277.703 165.650,276.732 164.103,275.510 163.928 C 274.807 163.827,274.623 163.571,274.701 162.799 C 274.780 162.020,274.716 161.932,274.407 162.400 C 274.066 162.918,274.011 162.907,274.006 162.324 C 273.998 161.392,273.211 160.980,273.153 161.876 M135.069 163.128 C 134.336 163.893,134.131 164.371,134.414 164.654 C 135.030 165.270,134.473 166.295,133.371 166.572 C 132.510 166.788,132.400 167.035,132.400 168.759 C 132.400 170.642,133.108 171.934,133.791 171.297 C 133.966 171.133,134.032 171.450,133.938 172.000 C 133.782 172.910,134.759 174.444,135.451 174.375 C 135.588 174.361,135.918 174.766,136.183 175.275 C 136.448 175.784,136.881 176.153,137.144 176.096 C 137.407 176.039,137.729 176.271,137.860 176.611 C 138.154 177.377,140.284 178.519,140.812 178.193 C 141.025 178.061,141.200 178.212,141.200 178.530 C 141.200 178.847,141.515 179.197,141.900 179.308 C 142.285 179.419,142.960 179.631,143.400 179.780 C 143.840 179.929,143.721 179.772,143.136 179.431 C 142.458 179.037,142.131 178.556,142.235 178.106 C 142.388 177.444,139.765 175.200,138.837 175.200 C 138.644 175.200,138.382 174.930,138.255 174.600 C 138.129 174.270,137.820 174.000,137.570 174.000 C 135.381 174.000,134.360 168.722,136.038 166.076 C 137.912 163.121,137.187 160.917,135.069 163.128 M256.000 165.567 C 256.000 166.524,258.494 166.652,259.251 165.735 C 259.747 165.133,259.716 165.114,258.926 165.535 C 258.323 165.856,257.734 165.879,257.026 165.610 C 256.462 165.395,256.000 165.376,256.000 165.567 M137.089 167.044 C 136.578 167.556,136.781 168.800,137.376 168.800 C 137.693 168.800,138.048 168.647,138.164 168.459 C 138.450 167.995,137.452 166.681,137.089 167.044 M195.867 181.067 C 194.794 182.139,195.636 183.144,197.100 182.538 C 198.999 181.750,199.106 181.638,198.388 181.184 C 197.701 180.750,196.251 180.682,195.867 181.067 M192.400 186.818 C 189.735 188.951,182.033 192.503,176.000 194.380 C 173.045 195.299,166.400 198.651,166.400 199.222 C 166.400 199.430,166.036 199.600,165.591 199.600 C 161.811 199.600,150.249 209.762,145.253 217.475 C 142.863 221.165,142.621 222.532,144.600 221.167 C 145.561 220.504,145.621 220.390,144.900 220.597 C 143.648 220.955,143.771 220.361,145.391 218.239 C 146.157 217.236,147.032 215.827,147.338 215.108 C 148.790 211.686,162.393 200.427,165.100 200.407 C 166.416 200.397,166.200 201.109,164.600 202.053 C 163.830 202.507,163.200 202.970,163.200 203.080 C 163.200 203.708,166.620 201.148,166.728 200.440 C 166.821 199.829,167.148 199.598,167.928 199.594 C 168.745 199.589,168.860 199.499,168.412 199.216 C 167.671 198.747,167.675 198.744,170.803 197.309 C 174.563 195.585,175.546 195.301,174.848 196.142 C 174.058 197.094,174.474 196.979,178.124 195.234 C 179.926 194.372,182.930 193.184,184.800 192.592 C 189.351 191.153,191.586 189.760,192.684 187.677 C 193.171 186.755,193.531 186.004,193.484 186.009 C 193.438 186.014,192.950 186.378,192.400 186.818 M251.800 187.378 C 253.206 188.064,254.359 188.199,253.768 187.608 C 253.552 187.392,252.751 187.120,251.988 187.004 L 250.600 186.792 251.800 187.378 M262.800 191.790 C 262.800 191.894,263.295 192.242,263.900 192.563 C 264.505 192.884,266.334 194.329,267.964 195.775 C 269.595 197.221,271.013 198.321,271.115 198.218 C 271.218 198.116,271.864 198.317,272.551 198.666 C 273.471 199.133,273.079 198.605,271.065 196.666 C 269.561 195.217,267.941 193.909,267.465 193.758 C 266.989 193.608,266.043 193.061,265.362 192.542 C 264.263 191.705,262.800 191.276,262.800 191.790 M172.400 197.389 C 171.850 197.706,170.970 198.158,170.445 198.394 C 169.919 198.630,169.594 198.928,169.723 199.057 C 169.852 199.185,170.912 198.734,172.079 198.054 C 173.245 197.374,174.020 196.816,173.800 196.815 C 173.580 196.813,172.950 197.071,172.400 197.389 M276.200 201.074 C 278.151 202.858,280.524 204.461,279.400 203.236 C 278.740 202.517,277.660 201.654,277.000 201.319 C 276.340 200.983,275.980 200.873,276.200 201.074 M287.867 211.832 C 287.042 212.964,287.497 214.000,288.820 214.000 C 289.602 214.000,289.925 213.124,289.669 211.700 C 289.458 210.527,288.781 210.577,287.867 211.832 M134.026 315.831 C 134.286 316.144,134.757 316.400,135.073 316.400 C 135.877 316.400,135.384 315.741,134.383 315.480 C 133.703 315.302,133.639 315.365,134.026 315.831 M275.144 316.300 C 274.202 317.438,273.736 318.309,274.545 317.419 C 274.955 316.968,275.480 316.600,275.712 316.600 C 275.944 316.600,276.208 316.375,276.300 316.100 C 276.545 315.365,275.814 315.491,275.144 316.300 M139.169 318.051 C 138.905 319.337,138.985 319.671,139.643 320.023 C 140.068 320.251,140.623 320.309,140.876 320.153 C 141.192 319.958,141.246 320.104,141.047 320.622 C 140.888 321.037,140.864 321.270,140.993 321.140 C 141.122 321.011,141.790 321.430,142.476 322.071 C 143.163 322.713,143.961 323.147,144.250 323.036 C 144.538 322.926,144.898 323.035,145.049 323.279 C 145.230 323.572,145.131 323.612,144.762 323.398 C 144.429 323.205,144.336 323.220,144.533 323.436 C 144.717 323.636,145.004 323.800,145.173 323.800 C 145.341 323.800,146.625 325.015,148.025 326.500 C 149.426 327.985,150.809 329.200,151.098 329.200 C 151.388 329.200,151.728 329.469,151.854 329.798 C 152.206 330.713,152.755 330.120,152.500 329.100 C 152.096 327.477,150.058 325.328,147.810 324.154 C 146.595 323.519,145.601 322.878,145.601 322.728 C 145.599 322.281,141.930 319.945,141.136 319.885 C 140.731 319.855,140.400 319.620,140.400 319.364 C 140.400 318.940,139.241 317.703,139.169 318.051 M269.400 320.014 C 267.640 321.087,265.930 322.097,265.600 322.259 C 263.809 323.136,261.161 325.610,261.765 325.842 C 262.114 325.976,262.400 326.257,262.400 326.466 C 262.400 326.676,262.249 326.754,262.065 326.640 C 261.423 326.243,260.000 327.637,260.000 328.664 L 260.000 329.682 261.089 328.441 C 261.688 327.759,262.331 327.200,262.518 327.200 C 262.704 327.200,263.127 326.930,263.457 326.600 C 263.787 326.270,263.925 326.000,263.763 326.000 C 263.602 326.000,264.489 325.270,265.735 324.378 C 266.981 323.486,268.000 322.592,268.000 322.391 C 268.000 322.190,268.243 322.119,268.541 322.233 C 268.841 322.348,269.642 321.802,270.341 321.006 C 271.033 320.217,271.600 319.675,271.600 319.800 C 271.600 319.926,271.960 319.835,272.400 319.600 C 273.154 319.196,273.547 317.964,272.900 318.031 C 272.735 318.048,271.160 318.940,269.400 320.014 M216.200 327.600 C 216.059 327.828,216.404 328.000,217.000 328.000 C 217.596 328.000,217.941 327.828,217.800 327.600 C 217.664 327.380,217.304 327.200,217.000 327.200 C 216.696 327.200,216.336 327.380,216.200 327.600 M153.200 330.200 C 153.200 330.567,153.393 330.802,153.630 330.723 C 153.867 330.645,154.060 330.409,154.060 330.200 C 154.060 329.991,153.867 329.755,153.630 329.677 C 153.393 329.598,153.200 329.833,153.200 330.200 M258.000 330.587 C 258.000 330.944,258.235 331.085,258.598 330.946 C 258.926 330.819,259.096 330.555,258.974 330.358 C 258.625 329.793,258.000 329.940,258.000 330.587 M168.800 335.405 C 168.800 336.543,169.828 337.047,171.813 336.882 C 174.042 336.697,175.921 338.048,174.099 338.525 C 173.467 338.690,173.465 338.712,174.076 338.754 C 174.448 338.779,174.864 338.620,175.000 338.400 C 175.475 337.632,178.030 337.949,178.775 338.869 C 179.453 339.705,179.588 339.719,182.431 339.250 C 184.923 338.838,185.448 338.851,185.798 339.330 C 186.294 340.008,189.846 340.721,189.438 340.061 C 189.293 339.827,188.908 339.737,188.583 339.862 C 188.173 340.019,188.063 339.901,188.226 339.477 C 188.414 338.985,188.003 338.819,186.130 338.630 C 184.849 338.501,182.690 338.126,181.334 337.798 C 179.978 337.469,178.358 337.200,177.734 337.200 C 177.110 337.200,175.617 336.826,174.415 336.369 C 173.214 335.913,171.815 335.619,171.306 335.716 C 170.797 335.813,170.285 335.737,170.167 335.546 C 169.939 335.177,168.800 335.060,168.800 335.405 M240.600 336.789 C 238.840 337.408,236.382 338.123,235.138 338.378 C 233.894 338.632,232.471 339.191,231.977 339.620 L 231.078 340.400 233.439 340.368 C 234.737 340.351,235.575 340.246,235.300 340.135 C 234.447 339.791,234.745 339.297,236.088 338.829 C 237.468 338.348,241.861 338.651,242.233 339.253 C 242.721 340.043,243.484 339.576,243.298 338.600 C 243.123 337.687,243.229 337.600,244.511 337.600 C 245.389 337.600,246.001 337.376,246.145 337.000 C 246.322 336.537,246.054 336.400,244.964 336.400 C 244.125 336.400,243.653 336.238,243.800 336.000 C 243.936 335.780,243.992 335.614,243.924 335.631 C 243.856 335.648,242.360 336.169,240.600 336.789 M193.421 339.961 C 192.873 340.175,193.498 340.382,195.521 340.656 C 197.104 340.870,198.400 341.003,198.400 340.951 C 198.400 339.872,195.249 339.246,193.421 339.961 M222.978 340.161 C 222.538 340.469,221.732 340.819,221.189 340.939 C 220.645 341.058,221.460 341.067,223.000 340.959 C 226.239 340.731,228.215 339.600,225.375 339.600 C 224.497 339.600,223.418 339.852,222.978 340.161 \\\" stroke=\\\"none\\\" fill=\\\"#753925\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path5\\\" d=\\\"M249.786 98.423 C 249.384 99.073,249.947 100.800,250.561 100.800 C 250.861 100.800,251.195 100.463,251.303 100.051 C 251.458 99.458,251.329 99.346,250.686 99.514 C 250.013 99.690,249.912 99.578,250.099 98.863 C 250.342 97.934,250.206 97.742,249.786 98.423 M256.954 111.376 C 256.832 111.692,256.923 112.277,257.154 112.676 C 257.512 113.291,257.578 113.205,257.588 112.100 C 257.601 110.729,257.324 110.412,256.954 111.376 M261.220 169.103 C 264.555 171.108,267.308 173.115,269.580 175.200 C 270.882 176.393,271.752 176.998,271.453 176.500 C 270.774 175.369,264.378 170.405,261.361 168.666 C 256.757 166.014,256.648 166.355,261.220 169.103 M156.600 176.266 C 155.720 176.581,154.157 177.666,153.127 178.677 L 151.255 180.516 148.744 180.288 C 147.364 180.163,145.911 180.233,145.517 180.444 C 144.677 180.894,144.548 182.400,145.350 182.400 C 145.653 182.400,146.008 182.940,146.140 183.600 C 146.451 185.153,146.953 185.112,148.956 183.371 C 151.493 181.165,156.513 177.077,157.612 176.321 C 158.779 175.519,158.700 175.514,156.600 176.266 M226.800 182.800 C 225.981 183.062,226.140 183.127,227.676 183.160 C 228.708 183.182,229.664 183.020,229.800 182.800 C 230.090 182.330,228.267 182.330,226.800 182.800 M242.665 184.004 C 243.059 184.373,246.709 185.006,246.367 184.646 C 246.239 184.511,245.278 184.241,244.232 184.046 C 243.186 183.850,242.481 183.831,242.665 184.004 M219.000 184.400 C 218.705 184.878,219.489 184.878,220.600 184.400 C 221.314 184.093,221.285 184.053,220.324 184.028 C 219.732 184.013,219.136 184.180,219.000 184.400 M238.122 184.284 C 237.860 184.376,237.735 184.687,237.845 184.974 C 238.670 187.122,197.566 189.541,195.287 187.478 C 194.268 186.556,193.878 186.625,194.417 187.631 C 195.542 189.733,191.127 193.216,186.188 194.123 C 171.439 196.832,196.064 199.127,221.341 197.401 C 226.149 197.072,230.199 196.873,230.341 196.958 C 230.802 197.233,238.924 196.406,241.600 195.812 C 243.030 195.494,245.534 195.115,247.164 194.970 C 248.794 194.825,250.736 194.451,251.481 194.140 C 252.226 193.829,252.979 193.664,253.155 193.772 C 253.331 193.881,254.088 193.814,254.838 193.624 C 255.587 193.433,256.695 193.167,257.300 193.031 C 257.905 192.896,258.400 192.617,258.400 192.411 C 258.400 191.375,252.947 190.227,251.200 190.895 C 248.681 191.858,246.334 192.339,245.119 192.142 C 244.269 192.004,243.592 192.090,243.427 192.356 C 243.276 192.600,242.528 192.800,241.764 192.800 C 240.999 192.800,239.705 193.082,238.887 193.427 C 237.903 193.841,236.453 194.018,234.600 193.949 C 232.981 193.888,231.431 194.046,230.926 194.322 C 229.938 194.863,225.200 194.980,225.200 194.464 C 225.200 193.818,229.652 192.766,233.000 192.622 C 234.100 192.574,235.450 192.351,236.000 192.125 C 236.550 191.899,237.980 191.587,239.177 191.433 C 240.374 191.278,241.544 191.028,241.777 190.876 C 242.010 190.724,242.830 190.560,243.600 190.511 C 244.370 190.461,245.972 190.307,247.159 190.168 L 249.319 189.915 246.759 188.779 C 245.352 188.155,242.985 187.437,241.500 187.186 C 238.756 186.720,238.140 186.263,239.622 185.793 C 240.074 185.650,240.380 185.340,240.301 185.104 C 240.124 184.572,238.763 184.060,238.122 184.284 M215.800 184.767 C 214.207 185.018,214.205 185.021,215.400 185.281 C 216.200 185.455,216.795 185.352,217.186 184.971 C 217.508 184.657,217.688 184.426,217.586 184.457 C 217.484 184.488,216.680 184.627,215.800 184.767 M249.400 185.580 C 250.940 185.984,252.263 186.256,252.339 186.185 C 252.566 185.973,248.328 184.798,247.427 184.823 C 246.972 184.836,247.860 185.177,249.400 185.580 M253.400 186.800 C 253.840 186.989,254.470 187.144,254.800 187.144 C 255.178 187.144,255.104 187.017,254.600 186.800 C 254.160 186.611,253.530 186.456,253.200 186.456 C 252.822 186.456,252.896 186.583,253.400 186.800 M258.600 188.822 C 260.360 189.677,261.980 190.371,262.200 190.365 C 262.420 190.360,261.090 189.645,259.243 188.777 C 257.397 187.910,255.777 187.215,255.643 187.234 C 255.510 187.253,256.840 187.967,258.600 188.822 M229.738 189.017 C 229.529 189.561,228.648 189.626,226.800 189.231 C 226.209 189.104,227.963 188.411,228.887 188.406 C 229.704 188.402,229.916 188.554,229.738 189.017 M204.389 189.585 C 205.224 190.113,204.112 190.505,202.338 190.308 L 201.000 190.159 202.000 189.705 C 203.251 189.137,203.649 189.117,204.389 189.585 M200.073 190.618 C 201.597 190.981,201.080 192.000,199.371 192.000 C 198.469 192.000,197.897 191.755,197.628 191.253 C 197.160 190.378,197.481 189.914,198.371 190.177 C 198.717 190.279,199.483 190.477,200.073 190.618 M265.222 191.921 C 267.868 193.589,268.000 193.663,268.000 193.465 C 268.000 193.205,264.198 190.800,263.787 190.800 C 263.598 190.800,264.244 191.305,265.222 191.921 M254.200 191.600 C 254.064 191.820,253.702 192.000,253.396 192.000 C 253.090 192.000,252.671 192.302,252.464 192.671 C 252.152 193.229,251.865 193.273,250.745 192.931 L 249.400 192.521 251.000 192.209 C 251.880 192.038,252.870 191.746,253.200 191.561 C 254.023 191.099,254.498 191.118,254.200 191.600 M249.134 193.551 C 249.537 193.806,249.453 193.945,248.795 194.117 C 247.809 194.375,246.800 194.092,246.800 193.557 C 246.800 193.106,248.425 193.101,249.134 193.551 M243.200 194.200 C 243.200 194.820,241.819 195.012,240.633 194.557 C 239.468 194.110,239.984 193.600,241.600 193.600 C 242.756 193.600,243.200 193.767,243.200 194.200 M222.700 194.217 C 224.371 194.585,223.615 195.088,220.989 195.357 C 218.443 195.618,214.164 195.302,214.582 194.884 C 215.117 194.350,221.077 193.860,222.700 194.217 M172.300 195.029 C 170.805 195.840,170.896 196.178,172.400 195.400 C 173.060 195.059,173.600 194.694,173.600 194.590 C 173.600 194.332,173.557 194.347,172.300 195.029 M195.200 195.031 C 196.850 195.094,199.170 195.337,200.355 195.572 C 201.540 195.808,203.538 196.000,204.796 196.000 C 208.482 196.000,212.388 196.499,211.200 196.817 C 209.173 197.361,196.781 197.273,196.895 196.715 C 197.005 196.174,196.403 196.165,191.859 196.636 C 189.485 196.882,187.912 196.336,189.523 195.825 C 189.965 195.684,190.434 195.288,190.566 194.943 C 190.728 194.523,191.036 194.416,191.503 194.617 C 191.887 194.782,193.550 194.968,195.200 195.031 M187.155 195.746 C 187.517 196.182,187.426 196.272,186.704 196.197 C 186.207 196.145,185.485 196.079,185.100 196.051 C 184.715 196.023,184.400 195.820,184.400 195.600 C 184.400 195.000,186.634 195.118,187.155 195.746 M165.200 198.800 C 164.430 199.222,163.944 199.574,164.120 199.583 C 164.544 199.605,166.800 198.432,166.800 198.190 C 166.800 197.928,166.777 197.937,165.200 198.800 M139.381 199.053 C 138.931 199.464,138.800 199.639,139.091 199.443 C 139.991 198.835,140.107 199.470,139.460 201.474 C 139.119 202.533,138.719 204.084,138.571 204.920 C 138.424 205.755,138.063 206.680,137.769 206.974 C 137.346 207.397,137.331 207.763,137.698 208.734 C 138.082 209.753,138.050 210.082,137.505 210.684 C 137.025 211.215,136.910 211.852,137.074 213.078 C 137.356 215.177,136.866 219.288,136.371 218.982 C 136.167 218.856,136.000 219.113,136.000 219.553 C 136.000 219.993,136.180 220.464,136.400 220.600 C 138.135 221.673,135.532 223.760,133.120 223.230 C 132.174 223.022,129.423 222.553,127.006 222.187 C 124.589 221.822,122.126 221.272,121.532 220.965 C 120.583 220.474,120.304 220.491,119.219 221.103 C 117.831 221.887,117.112 221.384,117.358 219.803 C 117.427 219.361,117.408 219.218,117.316 219.484 C 117.223 219.749,116.528 220.350,115.771 220.818 C 115.014 221.286,114.498 221.835,114.625 222.040 C 114.751 222.244,114.032 223.648,113.027 225.159 C 112.022 226.671,111.200 228.108,111.200 228.354 C 111.200 228.599,111.001 228.800,110.757 228.800 C 110.511 228.800,110.426 229.092,110.567 229.458 C 110.708 229.826,110.528 230.437,110.160 230.845 C 109.765 231.280,109.591 231.921,109.726 232.438 C 110.039 233.637,108.923 235.200,107.754 235.200 C 106.696 235.200,106.575 235.745,107.332 237.106 C 107.898 238.127,110.399 239.600,111.566 239.600 C 111.988 239.600,113.204 240.027,114.267 240.549 C 115.330 241.071,118.656 242.331,121.658 243.349 C 130.773 246.440,131.344 245.535,122.600 241.856 C 119.364 240.495,115.357 238.597,112.903 237.263 L 112.005 236.775 113.045 234.787 C 113.616 233.694,114.290 232.778,114.542 232.752 C 116.331 232.563,119.731 233.345,122.714 234.633 C 123.436 234.945,124.463 235.200,124.995 235.200 C 126.136 235.200,128.000 235.984,128.000 236.464 C 128.000 236.649,128.272 236.800,128.603 236.800 C 129.110 236.800,129.126 236.663,128.703 235.948 C 128.299 235.264,128.299 235.060,128.702 234.914 C 128.979 234.814,129.117 234.590,129.010 234.416 C 128.716 233.940,131.893 233.538,132.698 233.949 C 133.306 234.259,134.950 234.714,141.500 236.384 C 142.215 236.567,142.800 236.620,142.800 236.502 C 142.800 236.037,141.350 235.225,140.500 235.213 C 140.005 235.206,139.600 235.020,139.600 234.800 C 139.600 234.061,142.955 234.545,147.800 235.983 C 151.111 236.965,154.000 237.358,154.000 236.825 C 154.000 236.591,153.676 236.400,153.280 236.400 C 152.884 236.400,152.363 236.203,152.121 235.961 C 151.880 235.720,150.359 235.272,148.741 234.965 C 145.528 234.356,143.600 233.685,143.600 233.177 C 143.600 232.730,146.340 233.170,147.757 233.845 C 149.600 234.722,155.840 235.401,157.039 234.855 C 158.970 233.975,163.200 234.693,163.200 235.901 C 163.200 236.693,165.804 237.662,169.000 238.059 C 173.995 238.678,176.915 239.114,181.600 239.940 C 184.130 240.386,187.428 240.835,188.929 240.938 C 192.597 241.189,192.821 241.600,189.290 241.600 C 186.292 241.600,185.156 242.131,187.256 242.551 C 189.701 243.040,193.209 242.841,193.455 242.200 C 193.840 241.199,207.200 241.447,207.200 242.456 C 207.200 242.647,206.705 242.769,206.100 242.728 C 205.495 242.687,203.830 242.689,202.400 242.733 C 199.381 242.825,199.766 243.424,202.909 243.524 C 208.428 243.700,214.010 244.124,213.784 244.349 C 213.477 244.656,213.096 244.674,204.581 244.773 C 194.655 244.889,194.185 245.662,203.700 246.223 C 208.213 246.490,209.650 247.196,205.700 247.206 C 203.917 247.211,201.368 247.842,202.400 248.023 C 202.510 248.042,205.462 248.296,208.960 248.586 C 213.834 248.991,215.400 249.256,215.660 249.722 C 215.847 250.056,216.747 250.456,217.659 250.610 C 220.336 251.062,221.716 251.816,224.193 254.176 C 225.476 255.399,226.723 256.416,226.963 256.435 C 228.116 256.528,236.186 256.332,236.389 256.207 C 236.516 256.128,238.326 255.870,240.410 255.632 C 252.011 254.311,257.997 253.553,259.600 253.204 C 260.590 252.988,262.570 252.632,264.000 252.413 C 265.430 252.194,267.410 251.832,268.400 251.607 C 269.390 251.383,271.585 250.939,273.279 250.622 C 274.972 250.305,277.042 249.861,277.879 249.636 C 287.050 247.169,292.770 246.175,293.050 247.000 C 293.308 247.763,288.528 249.471,282.400 250.803 C 280.310 251.258,277.430 251.917,276.000 252.269 C 272.314 253.176,270.566 253.533,267.600 253.985 C 266.170 254.204,264.100 254.571,263.000 254.802 C 261.900 255.033,259.830 255.405,258.400 255.629 C 252.384 256.569,250.899 256.817,249.000 257.196 C 247.900 257.415,244.570 257.770,241.600 257.984 C 238.630 258.199,235.750 258.448,235.200 258.539 C 234.650 258.629,232.850 258.841,231.200 259.010 C 228.612 259.274,228.351 259.368,229.300 259.692 C 229.905 259.898,230.400 260.216,230.400 260.398 C 230.400 260.954,243.698 260.240,248.400 259.432 C 252.773 258.681,257.421 257.986,259.200 257.818 C 262.286 257.527,270.830 255.979,274.600 255.029 C 276.800 254.475,279.083 254.016,279.674 254.011 C 280.265 254.005,281.254 253.808,281.872 253.573 C 282.490 253.338,284.167 252.904,285.598 252.608 C 287.029 252.313,288.920 251.793,289.800 251.453 C 291.594 250.760,293.837 250.612,294.178 251.164 C 294.653 251.933,293.862 252.788,292.461 253.020 C 291.658 253.153,290.100 253.600,289.000 254.014 C 287.132 254.717,279.008 256.868,275.400 257.615 C 270.707 258.587,265.167 259.591,263.422 259.786 C 262.334 259.907,261.334 260.184,261.199 260.401 C 261.065 260.618,260.425 260.818,259.778 260.844 C 259.130 260.870,257.700 261.041,256.600 261.224 C 252.624 261.886,248.911 262.377,244.282 262.851 C 239.473 263.343,238.312 263.722,240.358 264.132 C 240.988 264.258,241.758 264.616,242.070 264.927 C 242.381 265.239,243.258 265.594,244.018 265.717 C 244.778 265.839,246.300 266.157,247.400 266.423 C 248.500 266.689,250.181 266.874,251.135 266.835 C 252.089 266.795,252.781 266.907,252.673 267.082 C 252.421 267.489,263.713 267.424,264.377 267.014 C 264.651 266.845,264.797 266.295,264.701 265.793 L 264.526 264.881 266.563 265.504 C 269.047 266.263,269.605 266.254,272.400 265.405 C 275.612 264.429,277.593 264.037,279.411 264.017 C 280.297 264.008,281.386 263.745,281.831 263.434 C 282.276 263.122,283.981 262.690,285.620 262.473 C 287.259 262.256,289.361 261.794,290.290 261.445 C 291.220 261.096,292.750 260.759,293.690 260.696 C 294.631 260.632,295.580 260.474,295.800 260.343 C 296.020 260.212,297.190 259.874,298.400 259.590 C 299.610 259.307,301.264 258.637,302.076 258.100 C 303.165 257.381,303.854 257.192,304.708 257.380 C 306.211 257.710,307.176 255.585,307.495 251.243 L 307.713 248.285 306.756 248.523 C 304.779 249.016,302.400 249.292,302.400 249.029 C 302.400 248.673,306.637 246.800,307.442 246.800 C 308.119 246.800,308.151 244.620,307.486 243.718 C 307.291 243.452,307.244 243.053,307.381 242.831 C 307.519 242.608,307.268 242.200,306.825 241.923 C 306.162 241.509,306.063 241.149,306.264 239.892 C 306.452 238.712,306.382 238.391,305.954 238.482 C 305.584 238.561,305.413 238.246,305.440 237.535 C 305.468 236.797,305.315 236.534,304.942 236.678 C 304.532 236.835,304.462 236.588,304.652 235.642 C 304.812 234.841,304.740 234.400,304.450 234.400 C 304.203 234.400,304.000 234.130,304.000 233.800 C 304.000 233.470,303.710 233.200,303.357 233.200 C 302.890 233.200,302.775 232.953,302.938 232.300 C 303.095 231.670,302.868 231.118,302.181 230.458 C 301.642 229.940,301.200 229.265,301.200 228.958 C 301.200 228.651,301.064 228.400,300.898 228.400 C 300.573 228.400,299.583 226.364,299.442 225.409 C 299.342 224.725,297.667 223.194,297.039 223.213 C 296.797 223.220,296.903 223.456,297.273 223.737 C 297.644 224.019,298.065 224.720,298.209 225.295 C 298.354 225.870,298.816 226.652,299.236 227.033 C 299.656 227.413,300.000 227.966,300.000 228.262 C 300.000 228.558,300.199 228.800,300.443 228.800 C 300.686 228.800,300.779 229.077,300.650 229.415 C 300.515 229.765,300.669 230.128,301.007 230.258 C 301.333 230.383,301.600 230.609,301.600 230.759 C 301.600 231.222,298.748 232.355,298.157 232.128 C 297.427 231.848,297.448 231.344,298.200 231.055 C 299.340 230.618,298.102 229.365,296.714 229.552 C 296.557 229.573,296.532 229.323,296.657 228.995 C 296.783 228.668,296.686 228.400,296.443 228.400 C 296.199 228.400,296.000 228.580,296.000 228.800 C 296.000 229.020,295.505 229.202,294.900 229.204 C 293.454 229.210,287.085 230.546,284.800 231.323 C 282.441 232.125,279.433 232.800,278.218 232.800 C 277.684 232.800,277.148 232.961,277.026 233.158 C 276.905 233.355,276.129 233.594,275.303 233.690 C 273.846 233.859,266.764 235.241,259.400 236.793 C 257.420 237.210,253.190 237.757,250.000 238.007 C 240.294 238.770,240.319 238.770,239.200 237.799 C 238.039 236.791,234.400 234.661,234.400 234.989 C 234.400 235.428,235.412 236.994,236.000 237.463 C 237.174 238.402,232.911 238.964,230.913 238.134 C 229.397 237.505,228.800 237.460,228.800 237.975 C 228.800 238.181,229.385 238.422,230.100 238.511 C 230.815 238.599,229.819 238.701,227.887 238.736 C 225.093 238.787,224.328 238.677,224.145 238.200 C 224.018 237.870,223.439 237.598,222.857 237.596 C 222.276 237.593,220.924 237.326,219.853 237.001 C 217.889 236.405,216.972 236.507,217.444 237.270 C 217.724 237.724,216.043 237.335,215.481 236.816 C 215.305 236.654,214.440 236.714,213.559 236.949 C 212.328 237.278,211.885 237.260,211.646 236.875 C 211.463 236.579,211.037 236.488,210.608 236.652 C 209.972 236.896,209.917 236.784,210.172 235.768 C 210.547 234.275,211.118 233.600,212.006 233.600 C 213.509 233.600,213.681 230.160,212.254 228.621 C 211.036 227.306,209.473 227.954,208.683 230.100 C 208.541 230.485,208.234 230.800,208.000 230.800 C 207.766 230.800,207.459 230.485,207.317 230.100 C 206.598 228.146,204.865 227.264,203.918 228.370 C 203.505 228.853,202.956 229.061,202.445 228.928 C 201.097 228.575,197.600 230.973,197.600 232.249 C 197.600 233.739,199.391 233.277,201.075 231.353 L 202.784 229.400 202.792 231.071 C 202.800 232.740,203.562 234.000,204.564 234.000 C 204.959 234.000,206.000 235.558,206.000 236.149 C 206.000 236.210,205.371 236.247,204.601 236.230 C 203.720 236.211,203.202 236.003,203.201 235.668 C 203.200 235.269,202.876 235.217,201.900 235.459 C 200.284 235.861,195.276 235.669,194.344 235.170 C 193.964 234.967,192.696 234.792,191.526 234.782 C 190.357 234.773,188.692 234.513,187.826 234.204 C 186.959 233.895,185.999 233.785,185.688 233.959 C 185.162 234.253,182.942 233.707,180.239 232.618 C 179.163 232.185,179.073 231.985,179.011 229.886 C 178.964 228.323,178.716 227.370,178.210 226.811 C 177.441 225.961,176.400 225.721,176.400 226.392 C 176.400 226.608,175.950 226.898,175.400 227.036 C 174.774 227.193,174.400 227.570,174.400 228.043 C 174.400 229.048,173.581 229.015,173.316 228.000 C 173.201 227.560,172.868 227.200,172.576 227.200 C 172.284 227.200,171.788 226.832,171.473 226.383 C 171.159 225.934,170.743 225.619,170.551 225.683 C 170.117 225.828,168.630 224.376,168.282 223.469 C 168.141 223.101,167.704 222.814,167.313 222.832 C 166.894 222.850,166.806 222.946,167.100 223.065 C 167.375 223.176,167.600 223.576,167.600 223.953 C 167.600 224.331,167.786 224.826,168.013 225.053 C 168.738 225.778,167.996 226.800,166.745 226.800 C 165.601 226.800,165.246 226.412,165.033 224.931 C 164.976 224.529,164.515 223.991,164.010 223.736 C 162.732 223.091,162.385 222.383,162.875 221.422 C 163.272 220.641,163.257 220.634,162.576 221.285 C 161.655 222.165,162.341 224.000,163.591 224.000 C 164.663 224.000,164.706 226.076,163.654 227.084 C 163.244 227.478,162.709 228.183,162.466 228.651 C 161.821 229.893,155.911 229.482,154.301 228.084 C 153.786 227.637,153.372 227.579,152.733 227.865 C 152.165 228.118,151.332 228.111,150.332 227.844 C 148.725 227.415,148.311 226.555,149.500 226.117 C 151.130 225.515,151.328 222.659,149.858 220.949 L 148.916 219.854 147.658 221.141 C 146.966 221.849,146.400 222.601,146.400 222.814 C 146.400 223.026,145.866 223.200,145.214 223.200 C 143.874 223.200,143.200 224.098,143.200 225.885 C 143.200 227.402,141.194 229.600,139.810 229.600 C 138.592 229.600,138.075 228.613,138.737 227.552 C 139.433 226.437,139.295 226.190,138.419 226.983 C 137.118 228.160,136.893 226.628,137.363 219.800 C 137.946 211.342,138.846 204.772,139.868 201.505 C 140.674 198.930,140.496 198.037,139.381 199.053 M255.400 199.665 C 253.860 200.110,251.070 200.714,249.200 201.008 C 242.993 201.983,237.441 202.792,234.000 203.223 C 232.130 203.457,228.981 203.919,227.003 204.250 C 224.342 204.695,220.749 204.830,213.203 204.770 C 200.761 204.670,197.835 204.453,186.200 202.768 C 184.660 202.545,182.320 202.208,181.000 202.020 C 179.680 201.831,177.340 201.390,175.800 201.039 C 172.488 200.283,168.403 200.163,169.081 200.841 C 169.650 201.410,174.172 202.595,178.000 203.177 C 179.650 203.429,181.810 203.795,182.800 203.992 C 183.790 204.188,185.500 204.438,186.600 204.546 L 188.600 204.743 186.800 204.337 C 181.818 203.216,184.363 203.017,191.717 203.954 C 195.492 204.435,195.511 204.790,191.767 204.857 L 188.600 204.915 192.000 205.266 C 202.835 206.385,237.572 205.301,240.054 203.767 C 240.232 203.657,242.317 203.314,244.688 203.005 C 252.970 201.924,259.583 200.385,260.454 199.335 C 261.120 198.533,258.798 198.684,255.400 199.665 M256.800 200.400 C 256.007 200.913,254.283 200.913,254.600 200.400 C 254.736 200.180,255.422 200.003,256.124 200.006 C 257.095 200.011,257.257 200.105,256.800 200.400 M176.000 201.621 C 176.990 201.812,178.768 202.148,179.951 202.368 C 183.029 202.940,183.058 203.356,180.000 203.062 C 176.671 202.742,171.470 201.464,171.869 201.064 C 172.038 200.895,172.631 200.873,173.188 201.015 C 173.745 201.157,175.010 201.429,176.000 201.621 M248.600 202.000 C 247.429 202.503,245.221 202.503,246.000 202.000 C 246.330 201.787,247.230 201.622,248.000 201.634 C 249.144 201.652,249.254 201.719,248.600 202.000 M237.780 203.544 C 237.312 203.967,232.196 204.802,230.123 204.794 C 227.929 204.785,229.268 204.028,231.600 203.959 C 232.590 203.929,233.940 203.768,234.600 203.600 C 236.307 203.166,238.236 203.131,237.780 203.544 M154.000 206.600 C 153.028 207.590,152.323 208.400,152.433 208.400 C 152.543 208.400,153.428 207.590,154.400 206.600 C 155.372 205.610,156.077 204.800,155.967 204.800 C 155.857 204.800,154.972 205.610,154.000 206.600 M149.978 210.300 L 148.600 211.800 150.100 210.422 C 151.496 209.138,151.784 208.800,151.478 208.800 C 151.412 208.800,150.737 209.475,149.978 210.300 M285.200 210.000 C 285.670 210.660,286.144 211.200,286.254 211.200 C 286.364 211.200,286.070 210.660,285.600 210.000 C 285.130 209.340,284.656 208.800,284.546 208.800 C 284.436 208.800,284.730 209.340,285.200 210.000 M273.083 211.951 C 274.005 212.837,274.625 213.087,274.201 212.402 C 274.066 212.183,273.560 211.801,273.078 211.553 L 272.200 211.101 273.083 211.951 M153.462 212.731 C 153.098 213.134,152.805 213.629,152.812 213.831 C 152.819 214.034,153.008 213.885,153.232 213.500 C 153.456 213.115,153.901 212.800,154.220 212.800 C 154.539 212.800,154.800 212.620,154.800 212.400 C 154.800 211.777,154.189 211.928,153.462 212.731 M278.881 214.382 C 279.433 215.266,279.822 215.155,279.462 214.217 C 279.332 213.878,279.038 213.600,278.809 213.600 C 278.546 213.600,278.572 213.887,278.881 214.382 M146.102 214.900 C 145.536 215.615,144.740 217.200,144.946 217.200 C 145.042 217.200,145.493 216.570,145.947 215.800 C 146.773 214.401,146.849 213.957,146.102 214.900 M215.700 215.065 C 215.153 215.285,215.003 216.400,215.520 216.400 C 215.696 216.400,216.056 216.184,216.320 215.920 C 217.201 215.039,216.876 214.590,215.700 215.065 M119.563 216.245 C 119.269 216.599,118.662 217.038,118.214 217.219 C 117.640 217.452,117.586 217.557,118.030 217.575 C 118.377 217.589,119.083 217.150,119.600 216.600 C 120.117 216.050,120.440 215.600,120.319 215.600 C 120.197 215.600,119.857 215.890,119.563 216.245 M133.590 216.380 C 133.815 216.801,134.373 217.264,134.830 217.409 C 136.231 217.854,136.112 217.345,134.607 216.457 C 133.261 215.663,133.203 215.659,133.590 216.380 M271.466 216.678 C 271.943 216.771,272.444 217.137,272.580 217.491 C 272.859 218.218,272.070 218.891,271.279 218.600 C 270.993 218.495,270.868 218.587,271.003 218.805 C 271.357 219.377,272.228 219.290,272.779 218.626 C 273.468 217.795,272.627 216.384,271.486 216.454 L 270.600 216.509 271.466 216.678 M232.590 219.630 C 232.446 220.087,232.433 220.567,232.563 220.697 C 232.694 220.827,232.800 220.736,232.800 220.495 C 232.800 220.254,233.083 219.774,233.429 219.429 C 233.976 218.881,233.980 218.800,233.456 218.800 C 233.125 218.800,232.735 219.174,232.590 219.630 M277.400 219.600 C 277.260 220.040,276.978 220.400,276.773 220.400 C 276.119 220.400,276.372 221.451,277.209 222.209 C 278.276 223.174,277.425 223.766,276.161 222.938 C 275.055 222.213,273.331 223.099,273.124 224.499 C 272.931 225.807,272.135 225.763,271.666 224.418 C 271.433 223.748,270.982 223.200,270.664 223.200 C 270.346 223.200,269.963 222.885,269.813 222.500 C 269.573 221.882,269.427 221.932,268.571 222.922 C 266.854 224.908,267.392 227.712,269.643 228.505 C 269.997 228.629,270.394 229.270,270.526 229.929 C 271.018 232.392,275.200 232.409,275.200 229.948 C 275.200 229.544,275.734 228.945,276.400 228.600 C 277.444 228.060,277.601 227.760,277.606 226.290 L 277.611 224.600 279.145 226.300 C 280.756 228.086,282.128 228.485,282.584 227.300 C 282.770 226.816,282.532 226.353,281.813 225.800 C 278.950 223.597,278.139 222.720,279.179 222.950 C 280.414 223.223,281.200 222.588,281.200 221.315 C 281.200 220.772,281.605 219.974,282.100 219.540 L 283.000 218.753 281.900 219.422 C 281.188 219.856,280.800 220.433,280.800 221.059 C 280.800 222.287,279.917 222.628,278.383 221.993 C 277.171 221.491,277.140 221.317,277.898 219.300 C 278.001 219.025,277.988 218.800,277.870 218.800 C 277.751 218.800,277.540 219.160,277.400 219.600 M294.400 219.864 C 294.400 220.082,294.895 220.697,295.500 221.230 L 296.600 222.200 295.600 221.000 C 295.050 220.340,294.555 219.725,294.500 219.633 C 294.445 219.542,294.400 219.645,294.400 219.864 M262.846 220.651 C 262.821 221.119,263.115 221.749,263.500 222.051 C 264.109 222.528,264.140 222.522,263.743 222.000 C 263.492 221.670,263.198 221.040,263.089 220.600 C 262.903 219.840,262.890 219.843,262.846 220.651 M266.695 220.703 C 266.829 221.053,266.612 221.548,266.189 221.858 C 265.653 222.250,265.607 222.397,266.024 222.387 C 267.083 222.364,268.127 220.527,267.216 220.288 C 266.661 220.143,266.522 220.253,266.695 220.703 M173.285 220.875 C 172.601 221.559,172.682 222.780,173.431 223.067 C 174.379 223.431,175.495 222.157,174.965 221.316 C 174.403 220.426,173.873 220.287,173.285 220.875 M185.849 220.984 C 185.981 221.329,185.844 221.923,185.545 222.305 C 185.052 222.934,185.067 222.948,185.700 222.451 C 186.473 221.844,186.616 220.981,186.005 220.603 C 185.777 220.462,185.711 220.624,185.849 220.984 M141.105 222.900 C 139.367 225.557,139.112 226.000,139.323 226.000 C 139.478 226.000,140.071 225.148,142.178 221.900 C 142.571 221.295,142.799 220.800,142.685 220.800 C 142.571 220.800,141.860 221.745,141.105 222.900 M149.986 221.574 C 150.596 222.714,150.490 224.296,149.763 224.884 C 149.413 225.168,148.414 226.091,147.544 226.936 C 146.059 228.377,145.907 228.435,145.081 227.875 C 144.006 227.147,143.965 224.822,145.016 224.200 C 145.388 223.980,146.406 223.125,147.279 222.300 C 149.092 220.586,149.411 220.500,149.986 221.574 M151.600 221.595 C 151.600 222.738,153.840 225.191,154.800 225.097 C 156.448 224.937,156.061 223.612,154.000 222.358 C 152.002 221.142,151.600 221.015,151.600 221.595 M206.800 223.131 C 206.800 224.374,207.546 224.949,208.622 224.536 C 209.735 224.109,209.182 222.221,207.900 222.073 C 206.919 221.961,206.800 222.075,206.800 223.131 M219.885 222.802 C 220.000 223.243,219.848 223.918,219.547 224.302 C 219.052 224.934,219.066 224.948,219.700 224.451 C 220.446 223.866,220.639 222.595,220.037 222.223 C 219.838 222.100,219.769 222.360,219.885 222.802 M242.100 222.432 C 242.904 222.900,243.046 224.659,242.300 224.909 C 242.012 225.006,242.054 225.059,242.400 225.034 C 243.682 224.943,243.143 221.977,241.851 222.012 C 241.603 222.019,241.715 222.208,242.100 222.432 M208.725 223.305 C 208.817 223.785,208.602 224.000,208.029 224.000 C 207.457 224.000,207.200 223.743,207.200 223.171 C 207.200 222.146,208.524 222.262,208.725 223.305 M253.600 223.920 C 253.600 224.316,253.375 224.867,253.100 225.144 C 252.699 225.548,252.739 225.595,253.300 225.381 C 253.909 225.149,254.356 223.200,253.800 223.200 C 253.690 223.200,253.600 223.524,253.600 223.920 M264.515 224.506 C 263.409 225.355,262.825 226.119,262.815 226.728 C 262.791 228.211,264.359 227.670,265.882 225.669 C 268.020 222.860,267.374 222.311,264.515 224.506 M270.700 223.935 C 271.085 224.339,271.599 225.013,271.842 225.432 C 272.339 226.290,273.600 225.648,273.600 224.538 C 273.600 223.351,275.334 223.185,276.322 224.277 C 277.549 225.633,277.365 227.220,275.900 227.919 C 275.295 228.208,274.800 228.684,274.800 228.978 C 274.800 231.314,271.545 231.623,271.086 229.330 C 270.928 228.541,270.492 228.059,269.648 227.740 C 268.318 227.239,267.745 225.871,268.164 224.200 C 268.467 222.995,269.684 222.868,270.700 223.935 M179.076 224.046 C 178.411 224.432,178.402 224.544,178.971 225.412 C 179.312 225.933,179.485 226.635,179.354 226.974 C 179.044 227.782,182.227 231.600,183.210 231.600 C 184.539 231.600,184.661 229.929,183.400 229.010 C 180.392 226.817,180.448 226.914,181.975 226.518 C 182.729 226.323,183.415 225.954,183.501 225.698 C 183.600 225.399,183.215 225.454,182.413 225.853 C 180.575 226.771,178.400 225.360,179.680 224.080 C 180.265 223.495,180.043 223.483,179.076 224.046 M235.968 225.555 C 236.606 226.451,236.679 226.799,236.295 227.106 C 234.815 228.290,232.434 227.914,232.368 226.486 C 232.348 226.032,232.266 225.977,232.127 226.323 C 231.411 228.111,234.692 228.962,236.555 227.472 L 237.711 226.547 236.637 225.474 C 235.234 224.071,234.937 224.107,235.968 225.555 M265.130 225.578 C 264.619 226.226,264.054 226.766,263.876 226.778 C 263.504 226.803,263.845 226.185,264.762 225.172 C 265.829 223.993,266.125 224.319,265.130 225.578 M246.952 225.805 L 246.104 226.726 246.936 227.558 C 247.607 228.230,247.671 228.489,247.263 228.896 C 246.855 229.302,246.602 229.205,245.963 228.400 L 245.168 227.400 244.535 228.300 C 244.187 228.795,243.663 229.200,243.371 229.200 C 243.079 229.200,242.651 229.515,242.420 229.900 C 242.020 230.567,241.980 230.567,241.580 229.900 C 241.349 229.515,240.921 229.200,240.629 229.200 C 240.337 229.200,239.835 228.804,239.513 228.320 L 238.929 227.440 238.196 228.296 C 237.653 228.931,237.174 229.095,236.350 228.930 C 235.572 228.774,234.902 228.967,234.119 229.571 C 233.504 230.046,232.552 230.769,232.003 231.179 C 231.020 231.914,231.017 231.935,231.765 232.762 C 232.855 233.966,233.306 233.821,234.757 231.800 C 236.330 229.609,236.715 229.555,236.876 231.500 C 236.977 232.725,237.220 233.098,238.200 233.534 C 238.860 233.828,239.670 234.638,240.000 235.334 C 241.065 237.581,243.302 237.254,244.594 234.661 C 244.829 234.191,245.376 233.740,245.810 233.657 C 246.845 233.461,247.186 232.882,247.194 231.313 C 247.202 229.708,247.854 229.885,249.120 231.833 C 249.855 232.965,250.256 233.224,251.120 233.125 C 252.684 232.944,252.527 231.652,250.800 230.492 C 249.273 229.467,248.831 228.803,249.667 228.794 C 250.604 228.783,251.205 228.178,251.582 226.864 C 251.809 226.072,251.806 225.673,251.574 225.816 C 251.368 225.943,251.200 226.390,251.200 226.810 C 251.200 227.870,249.899 228.494,248.665 228.025 C 247.266 227.493,247.035 226.911,247.775 225.782 C 248.576 224.560,248.087 224.573,246.952 225.805 M202.305 226.213 C 202.448 226.964,202.271 227.280,201.546 227.571 C 200.976 227.799,200.850 227.959,201.230 227.975 C 202.462 228.024,203.812 226.142,202.896 225.652 C 202.208 225.283,202.139 225.349,202.305 226.213 M213.024 225.813 C 212.231 226.412,212.968 227.546,214.176 227.587 C 214.384 227.594,214.210 227.349,213.792 227.043 C 213.145 226.570,213.110 226.390,213.564 225.843 C 214.221 225.052,214.043 225.042,213.024 225.813 M280.985 225.739 C 281.416 226.055,281.597 226.481,281.421 226.765 C 281.196 227.130,280.930 227.080,280.360 226.564 C 279.036 225.366,279.549 224.689,280.985 225.739 M178.235 228.227 C 178.890 229.857,178.328 231.200,176.992 231.200 C 176.206 231.200,175.859 231.484,175.546 232.384 C 174.827 234.447,172.405 234.317,171.589 232.171 C 171.384 231.631,170.755 230.980,170.192 230.724 C 169.180 230.262,169.061 228.471,169.977 227.485 C 170.427 227.001,172.298 227.863,172.790 228.781 C 173.353 229.833,174.413 229.836,174.688 228.786 C 175.196 226.841,177.530 226.473,178.235 228.227 M217.200 227.133 C 217.200 227.390,216.615 227.627,215.900 227.660 C 214.621 227.719,214.619 227.723,215.749 227.891 C 216.895 228.062,217.991 227.458,217.473 226.940 C 217.323 226.790,217.200 226.877,217.200 227.133 M207.074 230.650 C 207.441 231.606,208.472 231.250,209.805 229.708 C 211.281 228.000,212.125 228.239,212.623 230.505 C 212.901 231.771,211.616 233.504,210.782 232.989 C 210.597 232.875,210.145 233.416,209.778 234.191 C 208.868 236.107,206.967 236.226,206.281 234.410 C 206.011 233.694,205.393 233.067,204.730 232.836 C 203.307 232.339,202.870 230.763,203.774 229.383 L 204.437 228.372 205.650 229.236 C 206.317 229.711,206.958 230.347,207.074 230.650 M213.600 229.061 C 213.600 229.490,216.163 232.751,216.661 232.956 C 217.411 233.264,218.472 232.254,218.185 231.506 C 217.764 230.407,213.600 228.187,213.600 229.061 M246.443 230.387 C 246.976 232.164,246.508 233.200,245.173 233.200 C 244.772 233.200,244.209 233.678,243.922 234.263 C 242.854 236.440,241.084 236.533,240.358 234.451 C 240.077 233.647,239.608 233.222,238.829 233.066 C 237.187 232.737,236.764 230.007,238.265 229.431 C 238.880 229.195,240.972 230.107,241.398 230.797 C 241.805 231.455,242.728 231.256,242.982 230.457 C 243.212 229.732,244.517 228.881,245.484 228.827 C 245.750 228.812,246.182 229.514,246.443 230.387 M217.125 231.575 C 217.225 231.875,217.075 232.025,216.775 231.925 C 216.486 231.829,216.171 231.514,216.075 231.225 C 215.975 230.925,216.125 230.775,216.425 230.875 C 216.714 230.971,217.029 231.286,217.125 231.575 M251.125 231.975 C 251.225 232.275,251.075 232.425,250.775 232.325 C 250.486 232.229,250.171 231.914,250.075 231.625 C 249.975 231.325,250.125 231.175,250.425 231.275 C 250.714 231.371,251.029 231.686,251.125 231.975 M141.600 232.400 C 141.600 232.620,141.330 232.800,141.000 232.800 C 140.670 232.800,140.400 232.620,140.400 232.400 C 140.400 232.180,140.670 232.000,141.000 232.000 C 141.330 232.000,141.600 232.180,141.600 232.400 M287.200 232.353 C 287.200 232.548,286.840 232.801,286.400 232.916 C 285.614 233.122,285.342 232.791,285.867 232.267 C 286.255 231.879,287.200 231.940,287.200 232.353 M139.101 234.304 C 139.194 234.583,138.927 234.702,138.426 234.605 C 137.379 234.403,136.800 234.049,136.800 233.611 C 136.800 233.118,138.919 233.756,139.101 234.304 M165.200 233.800 C 165.530 234.197,166.425 234.400,167.849 234.400 C 170.174 234.400,170.350 234.550,169.338 235.669 C 168.214 236.911,163.600 235.246,163.600 233.597 C 163.600 232.992,164.639 233.124,165.200 233.800 M281.380 233.945 C 280.828 234.446,276.800 235.148,276.800 234.742 C 276.800 234.554,277.149 234.400,277.576 234.400 C 278.003 234.400,278.464 234.220,278.600 234.000 C 278.736 233.780,279.503 233.600,280.304 233.600 C 281.147 233.600,281.600 233.745,281.380 233.945 M129.941 235.236 C 129.560 235.472,129.683 235.657,130.397 235.921 C 131.634 236.378,132.806 236.320,132.825 235.800 C 132.845 235.267,130.602 234.828,129.941 235.236 M274.229 235.554 C 273.974 235.966,272.228 236.369,269.400 236.670 C 266.992 236.926,267.191 236.556,269.853 235.830 C 272.152 235.203,274.538 235.053,274.229 235.554 M284.800 235.527 C 284.800 235.959,280.826 237.200,279.441 237.200 C 277.876 237.200,278.522 236.510,280.720 235.834 C 282.836 235.183,284.800 235.035,284.800 235.527 M135.600 236.800 C 136.376 237.301,136.800 237.301,136.800 236.800 C 136.800 236.580,136.395 236.403,135.900 236.406 C 135.172 236.411,135.115 236.486,135.600 236.800 M275.741 237.913 C 273.772 238.678,270.514 238.926,271.179 238.261 C 271.741 237.698,275.518 236.913,276.541 237.146 C 277.089 237.271,276.881 237.471,275.741 237.913 M285.600 237.153 C 285.600 237.348,285.195 237.610,284.700 237.737 C 284.205 237.864,282.360 238.318,280.600 238.747 C 278.840 239.176,275.960 239.910,274.200 240.377 C 272.440 240.844,269.920 241.335,268.600 241.468 C 267.280 241.601,265.930 241.845,265.600 242.009 C 264.258 242.678,259.704 242.886,260.800 242.228 C 261.350 241.898,262.239 241.622,262.776 241.614 C 264.364 241.591,268.410 240.777,271.200 239.920 C 272.630 239.481,275.150 238.878,276.800 238.580 C 281.125 237.800,283.705 237.228,283.934 237.000 C 284.275 236.658,285.600 236.781,285.600 237.153 M262.400 238.000 C 261.602 238.516,259.481 238.516,259.800 238.000 C 259.936 237.780,260.712 237.603,261.524 237.606 C 262.624 237.611,262.847 237.711,262.400 238.000 M285.204 240.270 C 284.037 240.785,282.073 241.311,280.841 241.438 C 279.608 241.564,277.880 241.941,277.000 242.274 C 276.120 242.607,274.140 243.027,272.600 243.209 C 271.060 243.390,268.810 243.832,267.600 244.191 C 265.539 244.802,258.170 245.855,253.200 246.250 C 249.231 246.565,251.969 245.715,256.600 245.195 C 259.020 244.923,262.080 244.372,263.400 243.971 C 264.720 243.569,266.700 243.139,267.800 243.015 C 268.900 242.891,270.610 242.602,271.600 242.372 C 272.590 242.142,274.300 241.784,275.400 241.577 C 279.238 240.854,281.018 240.445,283.600 239.696 C 286.982 238.715,287.946 239.060,285.204 240.270 M266.642 239.533 C 266.448 239.846,263.233 240.489,259.200 241.021 C 256.650 241.358,257.614 240.528,260.384 240.003 C 261.569 239.778,262.628 239.506,262.736 239.397 C 263.080 239.054,266.857 239.185,266.642 239.533 M105.200 240.194 C 105.200 240.520,105.695 241.339,106.300 242.014 C 107.400 243.240,108.509 243.723,116.921 246.636 C 119.077 247.383,121.147 248.155,121.521 248.351 C 121.894 248.547,123.010 248.833,124.000 248.986 L 125.800 249.265 124.400 248.303 C 123.630 247.773,122.193 247.023,121.206 246.636 C 120.219 246.248,116.528 244.507,113.003 242.766 C 106.505 239.556,105.200 239.126,105.200 240.194 M168.600 240.000 C 168.453 240.239,168.937 240.400,169.800 240.400 C 170.663 240.400,171.147 240.239,171.000 240.000 C 170.864 239.780,170.324 239.600,169.800 239.600 C 169.276 239.600,168.736 239.780,168.600 240.000 M306.787 242.700 C 306.756 243.449,304.572 244.481,302.584 244.686 C 300.082 244.945,299.853 244.703,301.697 243.750 C 303.948 242.586,306.817 241.994,306.787 242.700 M255.200 243.563 C 253.987 244.249,249.654 244.504,250.800 243.823 C 251.350 243.496,252.700 243.227,253.800 243.226 C 255.098 243.225,255.589 243.343,255.200 243.563 M111.036 276.458 C 111.233 276.777,111.067 276.858,110.510 276.713 C 109.739 276.511,109.703 276.644,109.857 279.150 C 109.946 280.607,110.026 282.115,110.034 282.500 C 110.043 282.885,110.238 283.200,110.468 283.200 C 110.715 283.200,110.784 283.611,110.636 284.200 C 110.447 284.952,110.542 285.200,111.019 285.200 C 111.472 285.200,111.581 285.429,111.400 286.000 C 111.215 286.583,111.328 286.800,111.816 286.800 C 112.247 286.800,112.404 287.014,112.255 287.400 C 112.112 287.773,112.258 288.000,112.642 288.000 C 113.015 288.000,113.204 288.277,113.122 288.700 C 113.046 289.085,113.369 289.760,113.840 290.200 C 114.310 290.640,114.823 291.585,114.979 292.300 C 115.136 293.015,115.511 293.600,115.814 293.600 C 116.126 293.600,116.477 294.206,116.626 295.000 C 116.771 295.770,117.062 296.400,117.273 296.400 C 117.484 296.400,117.936 296.679,118.276 297.019 C 120.025 298.768,118.295 294.829,116.443 292.846 C 115.769 292.124,115.338 291.305,115.463 290.980 C 115.718 290.315,116.634 290.208,117.000 290.800 C 117.136 291.020,117.651 291.200,118.144 291.200 C 118.637 291.200,119.260 291.420,119.530 291.690 C 119.913 292.073,120.188 292.075,120.791 291.698 C 121.275 291.396,121.653 291.362,121.804 291.606 C 121.936 291.821,122.620 291.959,123.322 291.915 C 124.579 291.835,128.660 292.510,131.800 293.317 C 132.680 293.544,133.670 293.751,134.000 293.779 C 135.402 293.896,138.412 294.932,138.837 295.444 C 139.090 295.750,139.474 296.000,139.689 296.000 C 139.903 296.000,140.646 296.255,141.340 296.567 C 144.609 298.039,146.342 298.877,148.000 299.788 C 148.990 300.332,150.115 300.783,150.500 300.789 C 150.885 300.795,151.200 301.070,151.200 301.400 C 151.200 301.773,151.578 302.000,152.200 302.000 C 152.750 302.000,153.200 302.180,153.200 302.400 C 153.200 302.620,153.811 302.800,154.557 302.800 C 155.395 302.800,156.003 303.030,156.145 303.400 C 156.271 303.730,156.657 304.000,157.002 304.000 C 157.346 304.000,158.027 304.254,158.514 304.563 C 159.377 305.112,160.621 305.392,166.800 306.427 C 168.450 306.703,170.018 307.096,170.284 307.300 C 170.550 307.504,171.275 307.559,171.895 307.423 C 172.516 307.287,175.332 307.103,178.154 307.014 C 180.976 306.925,184.121 306.669,185.143 306.446 C 195.833 304.110,203.696 303.621,222.400 304.129 C 223.610 304.162,226.850 304.030,229.600 303.836 C 235.377 303.429,240.318 303.243,251.151 303.025 C 255.414 302.940,259.554 302.742,260.351 302.586 C 261.148 302.429,262.847 302.269,264.128 302.229 C 265.408 302.190,266.578 301.981,266.728 301.765 C 266.877 301.550,267.450 301.348,268.000 301.317 C 268.550 301.286,270.539 301.183,272.420 301.088 C 274.300 300.992,276.245 300.697,276.741 300.431 C 277.238 300.166,278.039 299.995,278.522 300.051 C 279.005 300.108,280.049 299.934,280.842 299.665 C 281.850 299.323,282.599 299.296,283.329 299.573 C 284.199 299.904,284.569 299.806,285.545 298.985 C 287.163 297.623,287.399 297.710,288.555 300.100 C 289.114 301.255,289.577 301.891,289.585 301.512 C 289.593 301.134,289.975 300.106,290.433 299.227 C 290.891 298.348,291.148 297.439,291.004 297.207 C 290.269 296.017,293.269 290.804,295.418 289.536 C 298.488 287.725,297.393 286.101,293.690 286.973 C 292.210 287.322,289.830 287.868,288.400 288.188 C 286.970 288.508,284.896 289.026,283.790 289.339 C 282.685 289.652,280.165 290.202,278.190 290.561 C 276.216 290.920,273.340 291.486,271.800 291.818 C 268.728 292.480,265.497 292.933,259.400 293.555 C 257.200 293.780,253.473 294.168,251.119 294.418 C 248.764 294.667,245.470 294.933,243.799 295.008 C 242.128 295.083,240.275 295.249,239.680 295.376 C 234.830 296.412,224.717 297.279,215.600 297.441 C 205.438 297.621,201.853 297.853,191.600 298.997 C 176.810 300.646,169.227 300.125,159.400 296.784 C 156.760 295.886,154.016 294.974,153.302 294.757 C 152.176 294.416,149.285 292.988,145.000 290.658 C 141.690 288.858,132.300 284.803,131.431 284.798 C 131.194 284.796,130.476 284.522,129.837 284.188 C 129.197 283.855,127.643 283.523,126.384 283.452 C 124.843 283.365,123.700 283.041,122.886 282.461 C 122.221 281.988,121.391 281.600,121.042 281.600 C 120.692 281.600,120.182 281.240,119.907 280.800 C 119.632 280.360,119.091 280.000,118.704 280.000 C 118.267 280.000,118.000 280.303,118.000 280.800 C 118.000 281.405,118.269 281.601,119.100 281.606 C 120.689 281.615,121.600 282.262,120.800 282.814 C 119.345 283.818,114.552 282.104,114.103 280.420 C 113.738 279.051,113.709 278.911,113.640 278.100 C 113.607 277.715,112.943 277.083,112.163 276.695 C 111.384 276.307,110.876 276.200,111.036 276.458 M127.968 284.562 C 128.462 285.156,128.180 287.042,127.538 287.438 C 126.424 288.127,125.478 285.482,126.480 284.480 C 127.101 283.859,127.398 283.875,127.968 284.562 M119.600 295.260 C 119.600 296.402,122.362 298.449,123.257 297.969 C 123.982 297.582,124.083 297.606,123.887 298.118 C 123.606 298.849,125.817 300.423,128.200 301.190 C 129.080 301.473,129.980 301.843,130.200 302.012 C 130.830 302.496,139.867 306.000,140.485 306.000 C 140.790 306.000,141.211 306.159,141.420 306.353 C 141.629 306.547,142.880 306.990,144.200 307.338 C 145.520 307.685,148.130 308.420,150.000 308.971 C 151.870 309.521,153.907 310.075,154.526 310.200 C 155.409 310.379,155.625 310.620,155.526 311.314 C 155.349 312.560,152.721 312.706,149.692 311.639 C 148.432 311.194,146.590 310.709,145.600 310.560 C 144.610 310.411,143.344 310.059,142.786 309.779 C 142.229 309.498,141.059 309.143,140.186 308.990 C 139.314 308.837,137.610 308.307,136.400 307.812 C 135.190 307.317,132.580 306.409,130.600 305.794 C 128.620 305.179,126.345 304.344,125.546 303.938 C 123.388 302.844,122.601 302.964,123.836 304.200 C 124.386 304.750,125.143 305.202,125.518 305.205 C 127.571 305.222,128.842 306.220,127.131 306.472 C 126.654 306.542,126.179 306.852,126.078 307.161 C 125.944 307.567,126.133 307.658,126.768 307.492 C 127.262 307.363,128.288 307.592,129.122 308.017 C 130.904 308.925,136.829 311.196,137.425 311.198 C 137.659 311.199,138.587 311.556,139.489 311.992 C 140.390 312.427,141.999 312.990,143.064 313.243 C 144.129 313.495,145.630 313.939,146.400 314.229 C 147.170 314.520,148.430 314.878,149.200 315.025 C 149.970 315.172,150.825 315.474,151.100 315.695 C 151.442 315.971,151.600 315.956,151.600 315.649 C 151.600 315.402,151.422 315.200,151.205 315.200 C 150.987 315.200,150.852 314.802,150.905 314.317 C 150.976 313.660,150.640 313.254,149.600 312.736 C 147.920 311.899,148.714 311.804,151.200 312.545 C 153.280 313.165,155.965 312.957,156.274 312.153 C 156.606 311.287,157.127 311.489,158.454 313.000 C 159.184 313.832,160.053 314.400,160.596 314.400 C 162.032 314.400,163.661 315.379,163.122 315.918 C 162.541 316.499,163.394 317.600,164.425 317.600 C 165.409 317.600,165.787 318.302,164.905 318.490 C 164.517 318.573,166.025 318.828,168.256 319.057 C 170.849 319.322,172.940 319.778,174.056 320.321 C 175.634 321.088,175.712 321.096,174.873 320.399 L 173.947 319.629 174.889 319.392 C 176.674 318.944,178.748 320.149,177.185 320.727 C 176.697 320.908,177.620 321.034,179.485 321.041 C 181.198 321.049,183.050 321.196,183.600 321.369 C 184.535 321.662,184.551 321.645,183.844 321.106 C 183.126 320.557,183.124 320.515,183.803 320.254 C 184.641 319.933,188.084 321.141,187.771 321.647 C 187.654 321.836,187.838 321.884,188.179 321.753 C 189.068 321.412,188.977 321.287,187.300 320.559 L 185.800 319.908 186.955 319.412 C 188.310 318.829,187.977 318.530,185.562 318.159 C 184.593 318.010,183.478 317.554,183.084 317.144 C 182.691 316.735,182.196 316.400,181.984 316.400 C 181.418 316.400,181.516 315.313,182.100 315.123 C 182.375 315.034,184.535 314.998,186.901 315.044 C 189.267 315.090,191.119 314.993,191.018 314.830 C 190.917 314.666,189.702 314.497,188.317 314.453 C 185.266 314.358,183.263 314.026,182.982 313.570 C 182.867 313.384,187.037 313.344,192.250 313.481 C 199.405 313.669,201.657 313.616,201.440 313.265 C 201.246 312.951,199.485 312.800,196.002 312.800 C 193.170 312.800,190.411 312.632,189.872 312.427 C 189.332 312.222,187.296 311.859,185.346 311.621 C 183.396 311.383,180.810 311.006,179.600 310.784 C 178.390 310.562,175.960 310.220,174.200 310.023 C 172.440 309.827,169.920 309.377,168.600 309.024 C 167.280 308.671,165.300 308.302,164.200 308.204 C 163.100 308.105,160.490 307.571,158.400 307.016 C 156.310 306.461,154.127 306.006,153.549 306.004 C 152.971 306.002,151.891 305.750,151.149 305.445 C 150.407 305.139,148.990 304.769,148.000 304.622 C 147.010 304.475,145.840 304.192,145.400 303.994 C 143.958 303.343,139.484 302.000,138.758 302.000 C 138.367 302.000,137.936 301.820,137.800 301.600 C 137.664 301.380,137.200 301.200,136.768 301.200 C 136.336 301.200,134.322 300.568,132.291 299.795 C 130.261 299.022,127.610 298.022,126.400 297.574 C 125.190 297.125,123.363 296.317,122.341 295.779 C 120.289 294.698,119.600 294.568,119.600 295.260 M274.800 303.381 C 270.680 304.513,266.227 305.588,264.600 305.844 C 263.940 305.948,261.150 306.556,258.400 307.196 C 252.531 308.563,247.377 309.516,243.200 310.007 C 241.550 310.201,238.760 310.555,237.000 310.793 C 235.240 311.032,232.360 311.395,230.600 311.601 C 228.840 311.807,226.430 312.161,225.245 312.388 C 224.060 312.614,220.820 312.813,218.045 312.830 C 215.270 312.846,212.190 313.017,211.200 313.210 C 210.057 313.432,213.694 313.513,221.162 313.429 C 232.422 313.304,236.266 313.751,228.111 314.237 C 226.180 314.352,223.520 314.615,222.200 314.820 C 220.880 315.026,214.040 315.213,207.000 315.237 C 197.971 315.268,194.671 315.392,195.800 315.661 C 197.335 316.025,214.846 315.860,226.100 315.374 C 230.958 315.165,231.200 315.191,231.200 315.931 C 231.200 316.977,229.541 318.000,227.847 318.000 C 224.622 318.000,224.301 319.030,227.405 319.418 C 229.899 319.730,230.728 320.376,228.724 320.446 C 227.996 320.472,227.715 320.575,228.100 320.676 C 228.820 320.864,229.031 321.404,228.500 321.701 C 228.335 321.793,228.470 321.783,228.800 321.679 C 229.130 321.574,230.660 321.360,232.200 321.203 C 233.740 321.046,234.493 320.891,233.873 320.859 C 232.938 320.810,232.789 320.664,233.000 320.000 C 233.213 319.328,233.073 319.201,232.127 319.206 C 231.216 319.211,231.115 319.295,231.600 319.644 C 232.098 320.002,232.075 320.035,231.463 319.836 C 231.057 319.704,230.292 319.488,229.763 319.355 C 228.469 319.030,228.555 318.790,230.434 317.490 C 231.918 316.464,232.103 316.426,232.908 316.990 C 233.420 317.350,234.645 317.600,235.889 317.600 C 238.277 317.600,238.780 318.286,236.531 318.476 C 234.515 318.646,234.330 319.514,236.275 319.674 C 237.453 319.771,237.787 319.963,237.742 320.514 C 237.701 321.020,237.822 321.114,238.156 320.837 C 238.415 320.621,239.770 320.261,241.167 320.036 C 242.563 319.811,243.803 319.531,243.921 319.412 C 244.039 319.294,244.571 319.482,245.103 319.831 C 245.997 320.417,246.226 320.403,248.135 319.649 C 249.271 319.200,250.740 318.763,251.400 318.677 L 252.600 318.520 251.333 318.460 C 250.636 318.427,249.219 318.763,248.183 319.207 C 246.691 319.847,246.179 319.915,245.720 319.533 C 245.039 318.968,247.035 317.690,248.800 317.560 C 249.475 317.510,249.290 317.407,248.231 317.243 C 246.335 316.949,245.908 316.126,247.472 315.781 C 248.092 315.644,249.257 315.286,250.061 314.985 C 252.065 314.234,254.318 314.624,254.479 315.749 C 254.545 316.217,254.870 316.618,255.200 316.639 C 257.252 316.773,257.232 316.760,256.704 317.605 C 256.428 318.047,255.976 318.317,255.701 318.205 C 254.088 317.545,253.868 317.582,254.800 318.354 C 256.073 319.408,256.515 319.407,257.005 318.347 C 257.418 317.454,261.252 316.233,267.462 315.016 C 269.036 314.707,270.656 314.284,271.062 314.076 C 272.178 313.505,274.559 312.802,275.428 312.787 C 276.250 312.774,277.868 311.735,277.555 311.422 C 277.327 311.194,274.170 312.097,273.760 312.507 C 273.599 312.668,272.822 312.792,272.033 312.783 L 270.600 312.766 272.000 312.000 C 272.770 311.579,274.252 311.114,275.293 310.967 C 277.795 310.613,279.408 309.467,277.000 309.754 C 274.571 310.044,271.052 310.741,268.496 311.440 C 267.233 311.785,264.850 312.328,263.200 312.647 C 261.550 312.966,259.660 313.391,259.000 313.592 C 256.840 314.250,252.926 314.528,252.628 314.046 C 252.212 313.372,251.242 313.509,250.109 314.400 C 249.550 314.840,248.643 315.200,248.093 315.200 C 247.544 315.200,246.528 315.550,245.835 315.978 C 243.983 317.123,233.739 317.372,233.051 316.289 C 232.448 315.337,233.277 314.814,235.403 314.806 C 236.284 314.803,237.634 314.615,238.403 314.389 C 239.171 314.164,241.690 313.802,244.000 313.585 C 246.310 313.368,249.460 312.903,251.000 312.550 C 252.540 312.197,255.510 311.585,257.600 311.189 C 263.553 310.063,268.438 308.925,270.400 308.209 C 271.390 307.847,273.100 307.324,274.200 307.048 C 276.879 306.373,278.112 305.670,277.844 304.970 C 277.717 304.641,278.039 304.131,278.609 303.757 C 280.883 302.267,279.390 302.120,274.800 303.381 M150.200 306.000 C 150.515 306.509,149.588 306.509,148.800 306.000 C 148.312 305.685,148.364 305.611,149.076 305.606 C 149.558 305.603,150.064 305.780,150.200 306.000 M132.624 307.787 C 133.244 308.257,133.275 308.377,132.776 308.387 C 132.434 308.394,131.804 308.136,131.376 307.813 C 130.756 307.343,130.725 307.223,131.224 307.213 C 131.566 307.206,132.196 307.464,132.624 307.787 M149.872 307.680 C 151.022 308.096,151.697 308.800,150.946 308.800 C 150.186 308.800,147.600 307.824,147.600 307.537 C 147.600 307.071,148.310 307.116,149.872 307.680 M158.555 307.982 C 160.330 308.658,159.455 308.975,157.401 308.400 C 155.331 307.821,154.390 306.937,156.238 307.308 C 156.877 307.437,157.920 307.740,158.555 307.982 M262.180 307.533 C 261.705 307.948,258.753 308.800,257.787 308.800 C 256.005 308.800,259.414 307.327,261.380 307.248 C 262.041 307.221,262.393 307.346,262.180 307.533 M158.121 310.200 C 157.991 310.861,157.036 310.863,156.192 310.205 C 155.439 309.616,155.468 309.591,156.800 309.693 C 157.570 309.752,158.165 309.980,158.121 310.200 M168.000 310.000 C 168.000 310.478,166.912 310.478,165.800 310.000 C 165.158 309.724,165.297 309.651,166.500 309.628 C 167.325 309.613,168.000 309.780,168.000 310.000 M250.400 310.000 C 249.607 310.513,247.883 310.513,248.200 310.000 C 248.336 309.780,249.022 309.603,249.724 309.606 C 250.695 309.611,250.857 309.705,250.400 310.000 M166.000 311.600 C 166.460 311.897,166.321 311.988,165.400 311.988 C 164.740 311.988,163.930 311.813,163.600 311.600 C 163.140 311.303,163.279 311.212,164.200 311.212 C 164.860 311.212,165.670 311.387,166.000 311.600 M252.200 311.600 C 252.064 311.820,251.593 312.000,251.153 312.000 C 250.713 312.000,250.464 311.820,250.600 311.600 C 250.736 311.380,251.207 311.200,251.647 311.200 C 252.087 311.200,252.336 311.380,252.200 311.600 M145.200 312.000 C 145.697 312.321,145.662 312.388,145.000 312.388 C 144.560 312.388,143.930 312.213,143.600 312.000 C 143.103 311.679,143.138 311.612,143.800 311.612 C 144.240 311.612,144.870 311.787,145.200 312.000 M164.400 312.388 C 165.390 312.624,168.180 313.082,170.600 313.405 C 179.271 314.565,180.625 315.051,178.980 316.417 C 178.169 317.089,171.725 316.970,169.918 316.248 C 169.193 315.959,167.269 315.481,165.643 315.186 C 163.402 314.780,162.640 314.475,162.496 313.925 C 162.272 313.068,162.217 313.057,161.229 313.675 C 160.474 314.146,158.426 312.823,158.407 311.850 C 158.399 311.452,161.726 311.750,164.400 312.388 M174.400 312.000 C 174.839 312.284,174.545 312.389,173.300 312.394 C 172.365 312.397,171.600 312.220,171.600 312.000 C 171.600 311.490,173.610 311.490,174.400 312.000 M244.600 312.000 C 244.464 312.220,243.543 312.400,242.553 312.400 C 241.455 312.400,240.849 312.244,241.000 312.000 C 241.136 311.780,242.057 311.600,243.047 311.600 C 244.145 311.600,244.751 311.756,244.600 312.000 M169.400 312.400 L 170.200 312.744 169.400 312.732 C 168.960 312.726,168.150 312.576,167.600 312.400 L 166.600 312.080 167.600 312.068 C 168.150 312.062,168.960 312.211,169.400 312.400 M248.400 312.400 C 247.610 312.911,246.284 312.911,246.600 312.400 C 246.736 312.180,247.332 312.003,247.924 312.006 C 248.766 312.011,248.869 312.097,248.400 312.400 M179.600 312.800 C 180.068 313.102,179.957 313.189,179.100 313.194 C 178.495 313.197,178.000 313.020,178.000 312.800 C 178.000 312.294,178.817 312.294,179.600 312.800 M238.200 312.800 C 238.064 313.020,237.288 313.187,236.476 313.172 C 235.287 313.149,235.155 313.077,235.800 312.800 C 236.923 312.317,238.498 312.317,238.200 312.800 M181.200 314.400 C 181.200 314.901,180.776 314.901,180.000 314.400 C 179.515 314.086,179.572 314.011,180.300 314.006 C 180.795 314.003,181.200 314.180,181.200 314.400 M156.000 315.152 C 156.000 315.397,156.585 315.864,157.300 316.189 C 158.568 316.765,158.531 316.776,155.800 316.604 L 153.000 316.429 155.800 316.952 C 157.340 317.239,159.140 317.597,159.800 317.746 C 160.961 318.010,160.968 318.003,160.000 317.552 L 159.000 317.085 160.107 316.663 C 161.559 316.109,161.284 315.423,159.566 315.312 C 158.815 315.263,157.705 315.107,157.100 314.965 C 156.404 314.802,156.000 314.870,156.000 315.152 M181.080 316.100 C 181.632 316.962,183.932 318.400,184.760 318.400 C 185.196 318.400,185.656 318.568,185.783 318.772 C 186.122 319.321,185.267 319.717,184.481 319.375 C 184.106 319.212,183.170 319.046,182.400 319.005 L 181.000 318.931 182.200 319.461 C 183.382 319.984,183.371 319.990,181.400 319.896 C 180.052 319.831,179.433 319.637,179.500 319.300 C 179.555 319.025,179.375 318.799,179.100 318.798 C 178.095 318.793,175.600 317.953,175.600 317.619 C 175.600 317.430,175.933 317.362,176.339 317.468 C 177.234 317.702,180.000 316.609,180.000 316.020 C 180.000 315.441,180.691 315.492,181.080 316.100 M251.000 316.800 C 250.864 317.020,251.123 317.200,251.576 317.200 C 252.029 317.200,252.400 317.020,252.400 316.800 C 252.400 316.580,252.141 316.400,251.824 316.400 C 251.507 316.400,251.136 316.580,251.000 316.800 M174.800 318.283 C 175.607 319.098,168.310 318.612,166.804 317.750 C 165.901 317.234,166.224 317.201,170.000 317.426 C 172.955 317.602,174.378 317.856,174.800 318.283 M204.800 317.765 C 204.800 318.362,203.833 318.576,199.000 319.049 C 197.460 319.200,196.380 319.378,196.600 319.444 C 198.205 319.930,203.144 320.632,202.969 320.351 C 202.850 320.158,202.268 319.997,201.676 319.994 C 201.084 319.991,200.330 319.796,200.000 319.563 C 199.531 319.230,199.638 319.175,200.493 319.312 C 201.094 319.408,202.534 319.238,203.693 318.935 C 205.521 318.456,206.047 318.464,207.671 318.990 C 208.700 319.324,209.825 319.489,210.171 319.356 C 210.517 319.223,210.800 319.302,210.800 319.531 C 210.800 319.760,210.305 320.019,209.700 320.108 C 209.095 320.197,210.490 320.185,212.800 320.082 C 219.077 319.803,221.194 319.302,216.400 319.231 C 211.059 319.153,206.708 318.536,206.296 317.800 C 205.871 317.041,204.800 317.015,204.800 317.765 M244.600 318.212 C 242.335 319.027,238.169 319.018,239.600 318.200 C 240.207 317.853,241.700 317.630,243.400 317.632 L 246.200 317.635 244.600 318.212 M199.478 321.500 C 199.081 321.592,198.822 321.866,198.903 322.109 C 199.119 322.758,200.044 322.968,199.913 322.338 C 199.831 321.946,200.397 321.779,202.000 321.724 C 204.042 321.653,204.103 321.676,202.856 322.046 C 201.004 322.597,201.424 322.800,203.592 322.402 C 205.041 322.137,207.387 322.303,210.351 322.883 C 210.892 322.988,212.800 322.294,212.800 321.992 C 212.800 321.352,201.863 320.949,199.478 321.500 M211.123 322.030 C 211.045 322.267,210.850 322.447,210.690 322.430 C 210.530 322.413,210.040 322.400,209.600 322.400 C 209.160 322.400,208.800 322.220,208.800 322.000 C 208.800 321.780,209.355 321.600,210.033 321.600 C 210.735 321.600,211.205 321.785,211.123 322.030 M199.846 332.068 L 194.293 332.415 192.393 334.005 C 189.332 336.569,189.845 340.433,193.160 339.785 C 193.952 339.631,195.590 339.505,196.800 339.506 C 198.590 339.508,198.745 339.461,197.632 339.254 C 195.169 338.797,195.529 338.338,201.000 334.971 C 204.947 332.541,211.091 333.299,214.585 336.648 C 215.582 337.603,216.850 338.498,217.403 338.636 C 217.955 338.775,218.506 339.049,218.627 339.244 C 218.951 339.768,220.239 339.678,221.808 339.022 L 223.191 338.445 222.382 336.557 C 220.881 333.056,219.685 332.572,211.800 332.276 C 208.940 332.169,206.330 332.000,206.000 331.900 C 205.670 331.801,202.901 331.876,199.846 332.068 \\\" stroke=\\\"none\\\" fill=\\\"#c17b17\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path6\\\" d=\\\"M189.536 68.083 C 182.957 75.740,174.819 91.495,170.569 104.798 C 169.438 108.338,169.432 108.400,170.173 108.400 C 170.501 108.400,170.802 108.872,170.876 109.500 L 171.006 110.600 171.561 109.618 C 171.866 109.078,172.701 106.525,173.415 103.945 C 174.130 101.365,175.016 98.657,175.384 97.927 C 175.752 97.197,176.650 95.062,177.379 93.181 C 179.872 86.759,184.318 78.352,188.687 71.800 C 192.415 66.209,192.874 64.196,189.536 68.083 M208.171 71.809 C 208.993 72.430,209.452 72.332,209.016 71.627 C 208.871 71.392,208.448 71.206,208.076 71.213 C 207.483 71.224,207.494 71.297,208.171 71.809 M212.800 72.383 C 212.800 72.594,213.454 73.269,214.254 73.883 C 215.053 74.497,216.525 75.765,217.525 76.700 C 218.525 77.635,219.536 78.404,219.772 78.408 C 221.164 78.433,232.618 91.915,231.877 92.657 C 231.747 92.786,219.936 81.136,218.146 79.113 C 216.666 77.439,213.883 75.173,213.477 75.309 C 213.010 75.467,215.756 78.634,218.200 80.758 C 222.489 84.483,228.675 91.198,230.336 93.933 C 232.806 97.997,233.981 99.623,235.194 100.657 C 236.212 101.524,237.406 104.543,236.995 105.208 C 236.717 105.658,238.678 109.600,239.180 109.600 C 239.382 109.600,239.462 109.133,239.359 108.562 C 239.084 107.047,240.013 107.518,241.068 109.428 C 242.105 111.307,242.213 111.874,241.405 111.204 C 239.774 109.850,240.209 111.930,243.411 120.800 C 244.007 122.450,244.918 125.822,245.435 128.292 C 245.953 130.763,246.741 133.501,247.188 134.376 C 247.635 135.252,248.000 136.620,248.000 137.417 C 248.000 138.403,248.160 138.811,248.500 138.692 C 249.837 138.226,248.429 129.089,246.452 125.401 C 245.983 124.527,245.600 123.359,245.600 122.806 C 245.600 122.253,245.060 120.659,244.400 119.264 C 243.285 116.908,242.858 114.476,243.454 113.880 C 243.748 113.586,246.400 116.932,246.400 117.597 C 246.400 118.998,249.753 124.380,250.291 123.842 C 251.031 123.102,242.289 103.002,240.628 101.623 C 240.257 101.315,239.718 100.509,239.430 99.832 C 239.142 99.154,237.882 97.357,236.630 95.839 C 235.378 94.320,234.016 92.430,233.602 91.639 C 233.189 90.847,232.050 89.236,231.070 88.058 C 230.091 86.879,229.048 85.439,228.752 84.858 C 227.948 83.277,218.970 74.800,218.100 74.800 C 217.909 74.800,216.707 74.170,215.428 73.400 C 212.867 71.858,212.800 71.832,212.800 72.383 M204.075 75.500 C 204.149 75.891,204.647 76.262,205.204 76.340 C 206.580 76.534,207.695 79.200,206.400 79.200 C 206.180 79.200,206.000 79.650,206.000 80.200 C 206.000 81.332,205.171 81.529,204.386 80.583 C 203.455 79.462,203.271 80.550,203.681 84.750 C 204.006 88.081,203.983 88.963,203.562 89.224 C 203.132 89.489,203.160 90.191,203.712 93.074 C 204.083 95.013,204.584 99.203,204.824 102.383 C 205.064 105.564,205.406 108.444,205.584 108.783 C 206.269 110.092,207.123 120.080,207.235 128.100 C 207.269 130.465,207.454 132.400,207.648 132.400 C 207.842 132.400,208.000 132.040,208.000 131.600 C 208.000 131.156,208.267 130.800,208.600 130.800 C 209.296 130.800,209.352 128.723,208.808 123.200 C 207.607 111.021,207.492 108.748,208.027 107.750 C 208.464 106.934,208.466 106.359,208.040 104.480 C 206.912 99.501,206.974 96.183,208.177 97.181 C 208.735 97.644,209.338 99.834,209.999 103.800 C 210.998 109.785,211.627 113.071,211.982 114.170 C 212.739 116.511,214.357 127.419,214.626 132.000 C 214.775 134.530,215.050 136.870,215.236 137.200 C 216.497 139.428,213.859 115.729,211.750 105.883 C 211.196 103.296,211.170 102.603,211.596 101.807 C 212.038 100.981,211.989 100.589,211.247 99.010 C 210.772 98.000,210.125 95.944,209.809 94.442 C 209.493 92.940,208.959 90.921,208.623 89.956 C 207.590 86.989,207.841 86.044,209.223 87.700 L 209.973 88.600 209.987 87.724 C 209.994 87.242,209.839 86.747,209.641 86.626 C 208.439 85.882,207.573 83.022,207.637 80.005 C 207.710 76.609,207.525 76.000,206.425 76.000 C 206.025 76.000,205.474 75.730,205.200 75.400 C 204.526 74.587,203.911 74.642,204.075 75.500 M226.400 76.627 C 226.400 76.925,228.316 78.800,228.621 78.800 C 229.186 78.800,228.636 77.937,227.600 77.200 C 226.940 76.730,226.400 76.472,226.400 76.627 M177.892 79.442 C 177.731 79.602,177.600 80.009,177.600 80.347 C 177.600 80.797,177.718 80.842,178.045 80.515 C 178.290 80.270,178.421 79.863,178.337 79.610 C 178.252 79.357,178.052 79.281,177.892 79.442 M211.549 79.905 C 211.757 80.293,212.708 81.344,213.663 82.240 C 214.618 83.137,215.862 84.475,216.427 85.215 C 217.319 86.382,217.490 86.465,217.729 85.841 C 217.938 85.296,217.275 84.411,214.974 82.162 C 212.013 79.267,210.769 78.448,211.549 79.905 M229.200 79.528 C 229.200 79.708,229.650 80.247,230.200 80.725 C 231.372 81.745,231.499 81.390,230.423 80.100 C 229.646 79.169,229.200 78.960,229.200 79.528 M192.432 80.739 C 192.195 81.184,192.007 81.784,192.016 82.074 C 192.025 82.363,192.309 82.089,192.647 81.465 C 192.986 80.840,193.173 80.240,193.064 80.130 C 192.954 80.021,192.670 80.295,192.432 80.739 M199.200 82.151 C 199.200 82.710,200.300 83.845,200.563 83.557 C 200.642 83.471,200.554 82.995,200.366 82.500 C 199.993 81.512,199.200 81.275,199.200 82.151 M231.600 81.821 C 231.600 81.943,233.023 83.812,234.761 85.976 C 236.500 88.140,238.234 90.386,238.615 90.967 C 238.997 91.549,239.398 91.935,239.508 91.825 C 239.618 91.715,239.373 91.124,238.964 90.512 C 238.555 89.901,237.945 88.914,237.610 88.321 C 236.198 85.821,231.600 80.849,231.600 81.821 M175.886 83.162 C 175.122 84.456,175.046 84.800,175.526 84.800 C 175.705 84.800,176.152 84.170,176.519 83.400 C 177.325 81.710,176.850 81.531,175.886 83.162 M205.987 85.149 C 205.975 86.512,205.939 86.553,205.387 85.824 C 204.559 84.729,204.570 82.511,205.400 83.200 C 205.737 83.480,205.994 84.333,205.987 85.149 M171.663 86.000 C 171.189 86.770,170.691 87.987,170.556 88.704 C 170.420 89.422,170.150 90.107,169.955 90.228 C 169.760 90.349,169.587 90.932,169.571 91.524 C 169.555 92.116,169.197 93.140,168.775 93.800 C 168.354 94.460,167.892 95.270,167.750 95.600 C 166.995 97.350,165.656 101.128,165.481 102.000 C 165.370 102.550,164.566 105.790,163.694 109.200 C 162.024 115.726,161.247 124.132,161.920 128.400 C 162.175 130.023,162.253 129.748,162.712 125.600 C 162.992 123.070,163.484 119.830,163.806 118.400 C 164.128 116.970,164.840 113.460,165.388 110.600 C 166.440 105.107,166.821 103.583,168.587 97.800 C 169.192 95.820,169.925 93.119,170.217 91.798 C 170.508 90.477,171.224 88.543,171.807 87.499 C 173.057 85.263,172.929 83.939,171.663 86.000 M195.713 86.400 C 194.834 88.994,194.454 92.556,194.005 102.400 C 193.759 107.790,193.388 114.640,193.179 117.623 C 192.690 124.613,192.699 129.195,193.205 131.976 C 193.428 133.199,193.754 135.370,193.931 136.800 C 194.190 138.892,194.261 138.071,194.298 132.600 C 194.378 120.431,194.831 108.810,195.649 97.891 C 196.518 86.292,196.531 83.985,195.713 86.400 M211.200 86.720 C 211.200 87.116,210.995 87.645,210.744 87.896 C 210.403 88.237,210.555 88.669,211.348 89.612 C 211.931 90.305,212.783 91.742,213.241 92.807 C 213.800 94.107,214.586 95.082,215.634 95.775 C 216.698 96.479,217.643 97.664,218.608 99.504 C 219.386 100.987,220.584 103.100,221.271 104.200 C 222.445 106.080,223.210 107.814,224.679 111.932 C 225.447 114.083,224.826 115.143,223.852 113.344 C 223.401 112.512,223.228 112.397,223.216 112.922 C 223.207 113.319,223.875 114.764,224.700 116.133 C 225.525 117.502,226.447 119.742,226.750 121.111 C 227.055 122.492,227.516 123.600,227.785 123.600 C 228.052 123.600,228.688 124.590,229.200 125.800 C 230.101 127.932,230.800 128.630,230.800 127.399 C 230.800 126.568,228.659 120.579,227.599 118.444 C 226.335 115.897,225.524 112.435,225.804 110.779 C 226.105 108.996,224.013 104.172,221.957 101.905 C 219.097 98.753,217.682 96.950,217.006 95.600 C 216.621 94.830,215.993 93.840,215.611 93.400 C 214.737 92.395,213.874 90.787,212.767 88.100 C 211.898 85.992,211.200 85.377,211.200 86.720 M205.919 91.100 C 206.642 93.530,206.942 96.000,206.514 96.000 C 206.085 96.000,205.411 93.911,204.998 91.300 C 204.664 89.186,205.309 89.046,205.919 91.100 M198.257 93.300 C 197.795 97.866,197.917 130.129,198.401 131.404 C 198.647 132.049,199.107 136.632,199.425 141.588 C 199.743 146.545,200.139 152.637,200.305 155.126 C 200.472 157.615,200.451 161.629,200.258 164.046 C 199.921 168.270,200.073 169.576,200.770 168.448 C 201.512 167.248,203.289 159.030,202.839 158.880 C 201.461 158.420,201.200 157.531,201.192 153.271 C 201.187 150.922,200.914 145.220,200.586 140.600 C 199.547 125.996,199.174 116.878,199.226 107.400 C 199.302 93.750,199.236 90.800,198.855 90.800 C 198.666 90.800,198.397 91.925,198.257 93.300 M211.200 95.240 C 211.200 95.996,212.472 98.400,212.873 98.400 C 213.237 98.400,213.102 97.692,212.356 95.700 C 212.011 94.776,211.200 94.453,211.200 95.240 M183.110 96.500 C 182.756 96.775,182.072 98.440,181.590 100.200 C 179.664 107.223,177.700 110.601,177.190 107.767 L 176.980 106.600 176.291 108.307 C 175.340 110.659,174.883 112.703,174.211 117.600 C 173.306 124.195,172.441 128.478,171.822 129.423 C 171.411 130.049,171.188 132.230,171.021 137.246 C 170.872 141.724,170.924 143.915,171.167 143.400 C 171.374 142.960,171.556 141.844,171.572 140.920 C 171.606 138.858,172.357 135.136,172.843 134.620 C 173.222 134.216,173.316 136.109,173.217 142.200 C 173.087 150.189,175.663 165.405,177.449 167.200 C 178.194 167.949,178.053 165.796,176.976 160.000 C 176.487 157.363,176.265 154.118,176.251 149.400 C 176.240 145.660,176.161 142.960,176.076 143.400 C 175.417 146.824,174.237 143.845,174.584 139.634 C 174.739 137.745,174.926 133.320,174.998 129.800 C 175.078 125.902,175.370 122.384,175.744 120.800 C 176.082 119.370,176.569 117.120,176.827 115.800 C 177.465 112.538,178.263 110.652,180.256 107.693 C 181.346 106.077,182.113 104.372,182.416 102.893 C 182.674 101.632,183.215 99.565,183.617 98.300 C 184.360 95.962,184.260 95.606,183.110 96.500 M177.628 99.100 C 177.653 100.075,177.695 100.109,178.000 99.400 C 178.469 98.307,178.469 98.000,178.000 98.000 C 177.780 98.000,177.613 98.495,177.628 99.100 M215.026 100.100 C 215.587 101.901,216.026 102.907,216.181 102.752 C 216.457 102.476,215.451 99.200,215.090 99.200 C 214.901 99.200,214.872 99.605,215.026 100.100 M163.561 100.700 C 163.330 101.305,163.088 102.250,163.023 102.800 C 162.957 103.350,162.989 103.530,163.095 103.200 C 163.200 102.870,163.436 102.414,163.620 102.187 C 164.273 101.379,164.795 99.600,164.380 99.600 C 164.160 99.600,163.792 100.095,163.561 100.700 M212.693 102.103 C 212.420 102.813,216.294 115.039,216.672 114.662 C 216.757 114.576,216.645 113.807,216.421 112.953 C 216.197 112.099,215.474 109.342,214.813 106.826 C 213.604 102.218,213.089 101.071,212.693 102.103 M161.896 105.333 C 161.433 106.479,161.516 107.444,162.034 106.926 C 162.272 106.688,162.406 106.067,162.330 105.546 C 162.209 104.713,162.157 104.688,161.896 105.333 M190.231 109.300 C 189.724 111.768,189.163 115.976,188.616 121.400 C 188.283 124.700,187.739 129.920,187.406 133.000 C 187.074 136.080,186.614 141.030,186.383 144.000 C 186.153 146.970,185.711 152.640,185.402 156.600 C 185.093 160.560,184.637 164.496,184.388 165.347 C 183.862 167.147,184.159 168.800,185.008 168.800 C 185.391 168.800,185.600 168.401,185.600 167.667 C 185.600 167.043,185.771 165.558,185.979 164.367 C 186.187 163.175,186.553 158.600,186.792 154.200 C 187.354 143.842,187.936 136.654,188.395 134.400 C 188.597 133.410,188.874 130.260,189.011 127.400 C 189.148 124.540,189.507 120.580,189.809 118.600 C 190.779 112.244,191.106 105.035,190.231 109.300 M160.067 110.262 C 159.774 110.956,159.607 111.946,159.696 112.462 C 159.926 113.800,160.891 111.500,160.719 110.023 C 160.601 109.008,160.596 109.010,160.067 110.262 M133.600 111.800 C 134.795 113.010,135.863 114.000,135.973 114.000 C 136.083 114.000,135.195 113.010,134.000 111.800 C 132.805 110.590,131.737 109.600,131.627 109.600 C 131.517 109.600,132.405 110.590,133.600 111.800 M243.871 112.240 C 244.006 112.593,243.866 113.036,243.558 113.226 C 243.048 113.541,242.524 112.927,242.428 111.900 C 242.373 111.314,243.629 111.611,243.871 112.240 M181.256 113.461 C 181.036 114.307,180.630 116.080,180.354 117.400 C 180.077 118.720,179.632 120.160,179.364 120.600 C 178.374 122.228,175.877 141.210,176.563 141.897 C 176.694 142.027,176.800 141.833,176.800 141.467 C 176.800 139.400,177.548 141.296,177.839 144.100 C 178.144 147.041,178.208 146.376,178.429 138.000 C 178.721 126.896,179.471 121.600,180.751 121.600 C 181.112 121.600,182.183 112.450,181.860 112.127 C 181.748 112.014,181.476 112.615,181.256 113.461 M167.467 114.300 C 167.261 114.642,166.173 120.201,165.843 122.600 C 165.692 123.700,165.742 124.012,166.005 123.600 C 166.216 123.270,166.393 122.550,166.399 122.000 C 166.405 121.450,166.690 120.010,167.033 118.800 C 168.155 114.837,168.320 114.000,167.981 114.000 C 167.798 114.000,167.566 114.135,167.467 114.300 M260.400 117.000 C 260.755 117.428,260.766 117.600,260.440 117.600 C 260.150 117.600,260.225 117.971,260.645 118.612 C 261.010 119.169,261.369 119.564,261.443 119.490 C 261.739 119.194,260.734 116.400,260.332 116.400 C 260.055 116.400,260.080 116.614,260.400 117.000 M218.000 118.539 C 218.000 119.144,219.610 126.039,219.958 126.926 C 220.201 127.545,220.400 128.490,220.400 129.026 C 220.400 129.562,220.580 130.000,220.800 130.000 C 221.310 130.000,221.307 129.940,220.637 126.600 C 219.712 121.992,218.707 118.400,218.343 118.400 C 218.154 118.400,218.000 118.463,218.000 118.539 M250.411 125.300 C 250.417 125.575,250.972 126.430,251.644 127.200 C 252.959 128.705,252.974 128.611,251.788 126.300 C 251.021 124.806,250.390 124.348,250.411 125.300 M227.497 125.465 C 227.390 125.649,227.457 126.970,227.644 128.400 C 227.831 129.830,228.265 133.692,228.608 136.982 C 229.404 144.618,229.776 145.000,229.405 137.800 C 228.892 127.846,228.307 124.063,227.497 125.465 M164.800 128.400 C 164.800 129.147,164.907 129.253,165.280 128.880 C 165.653 128.507,165.653 128.293,165.280 127.920 C 164.907 127.547,164.800 127.653,164.800 128.400 M181.145 136.600 C 180.896 145.350,181.289 152.750,181.947 151.686 C 182.387 150.974,182.171 134.774,181.700 133.200 C 181.343 132.005,181.262 132.502,181.145 136.600 M164.198 138.100 C 164.025 141.559,164.071 144.508,164.314 145.600 C 164.635 147.043,164.723 145.912,164.757 139.900 C 164.808 130.962,164.590 130.260,164.198 138.100 M231.811 135.784 C 231.919 136.875,232.186 137.946,232.404 138.164 C 232.972 138.732,232.857 137.339,232.177 135.400 L 231.615 133.800 231.811 135.784 M196.315 151.415 C 196.158 152.744,195.776 154.454,195.466 155.215 C 194.928 156.536,194.189 169.944,194.682 169.452 C 195.512 168.621,197.009 155.159,196.733 151.000 L 196.600 149.000 196.315 151.415 M165.656 155.000 C 165.656 155.440,165.811 156.160,166.000 156.600 L 166.344 157.400 166.344 156.600 C 166.344 156.160,166.189 155.440,166.000 155.000 L 165.656 154.200 165.656 155.000 M167.600 155.824 C 167.600 156.387,167.763 156.746,167.962 156.623 C 168.162 156.500,168.231 156.039,168.116 155.600 C 167.828 154.499,167.600 154.598,167.600 155.824 M179.439 158.500 C 179.903 162.153,180.727 163.533,180.767 160.726 C 180.802 158.297,180.289 156.400,179.596 156.400 C 179.318 156.400,179.264 157.120,179.439 158.500 M264.908 157.193 C 264.249 157.593,263.324 158.464,262.851 159.129 C 262.378 159.793,260.858 161.144,259.474 162.132 C 255.956 164.643,255.639 165.082,256.979 165.592 C 258.761 166.269,264.257 162.196,265.466 159.303 C 265.774 158.567,266.290 157.864,266.613 157.740 C 266.936 157.616,267.200 157.373,267.200 157.200 C 267.200 156.509,266.039 156.505,264.908 157.193 M167.613 161.224 C 167.606 161.566,167.864 162.196,168.187 162.624 C 168.657 163.244,168.777 163.275,168.787 162.776 C 168.794 162.434,168.536 161.804,168.213 161.376 C 167.743 160.756,167.623 160.725,167.613 161.224 M172.400 196.628 C 171.190 197.175,169.705 197.815,169.100 198.051 C 167.952 198.497,167.609 199.200,168.539 199.200 C 169.205 199.200,171.508 198.073,171.797 197.605 C 171.914 197.416,172.535 197.146,173.177 197.005 C 173.819 196.864,174.559 196.490,174.821 196.174 C 175.485 195.375,174.946 195.475,172.400 196.628 M161.314 202.107 C 157.693 204.232,148.220 213.120,147.146 215.400 C 146.731 216.280,145.821 217.763,145.124 218.695 C 143.867 220.375,143.770 221.030,144.843 220.591 C 145.886 220.163,150.198 214.363,150.400 213.115 C 150.565 212.097,150.987 211.682,152.800 210.754 C 154.010 210.135,156.530 208.351,158.400 206.789 C 160.270 205.228,162.745 203.322,163.900 202.554 C 167.894 199.898,165.719 199.522,161.314 202.107 M264.600 325.200 C 263.940 325.637,263.548 325.996,263.729 325.997 C 263.909 325.999,263.742 326.315,263.357 326.700 C 262.972 327.085,262.524 327.400,262.362 327.400 C 262.200 327.400,261.962 327.505,261.833 327.633 C 261.705 327.762,261.863 327.867,262.184 327.867 C 262.505 327.867,263.512 327.087,264.420 326.133 C 266.281 324.181,266.302 324.073,264.600 325.200 M259.294 326.812 C 258.575 327.465,257.666 328.000,257.274 328.000 C 256.881 328.000,256.389 328.149,256.180 328.330 C 255.971 328.512,254.990 328.905,254.000 329.202 C 253.010 329.500,252.020 329.863,251.800 330.008 C 250.834 330.645,248.387 330.317,247.795 329.472 C 247.468 329.004,247.200 328.774,247.200 328.960 C 247.200 329.146,246.932 329.076,246.605 328.804 C 245.148 327.595,244.125 329.668,245.500 331.043 C 246.561 332.105,246.504 335.127,245.419 335.286 C 244.969 335.352,244.411 335.164,244.180 334.868 C 243.856 334.454,243.760 334.568,243.760 335.365 C 243.760 336.267,243.928 336.400,245.067 336.400 C 246.065 336.400,246.320 336.542,246.145 337.000 C 246.001 337.373,245.392 337.600,244.529 337.600 C 243.335 337.600,243.162 337.720,243.272 338.468 C 243.430 339.537,245.248 339.895,246.115 339.028 C 246.439 338.703,246.808 338.541,246.934 338.668 C 247.247 338.981,253.521 335.270,253.938 334.525 C 254.122 334.197,254.371 333.989,254.491 334.064 C 255.145 334.469,258.314 331.559,258.102 330.748 C 257.940 330.127,258.032 329.949,258.439 330.096 C 258.748 330.208,258.944 330.548,258.876 330.850 C 258.807 331.153,259.302 330.804,259.976 330.075 C 260.649 329.347,261.194 328.627,261.187 328.475 C 261.180 328.324,260.910 328.549,260.587 328.976 C 260.023 329.722,260.000 329.712,260.000 328.699 C 260.000 327.639,261.409 326.235,262.065 326.640 C 262.249 326.754,262.400 326.676,262.400 326.466 C 262.400 326.109,261.461 325.586,260.867 325.612 C 260.720 325.618,260.012 326.158,259.294 326.812 M151.037 326.500 C 151.194 326.775,151.539 327.270,151.804 327.600 C 152.447 328.399,152.805 329.950,152.404 330.197 C 152.228 330.306,151.981 330.126,151.854 329.798 C 151.728 329.469,151.360 329.200,151.035 329.200 C 150.711 329.200,150.210 328.885,149.923 328.500 C 149.635 328.115,149.040 327.555,148.600 327.256 C 148.160 326.957,148.859 327.717,150.154 328.946 C 151.449 330.175,152.664 331.084,152.854 330.967 C 153.044 330.849,153.200 330.938,153.200 331.164 C 153.200 331.390,153.472 331.471,153.805 331.343 C 154.219 331.184,154.338 331.295,154.184 331.696 C 154.048 332.052,154.379 332.556,155.029 332.982 C 155.749 333.454,156.007 333.506,155.820 333.141 C 155.666 332.844,155.930 333.096,156.405 333.702 C 156.881 334.308,157.434 334.703,157.635 334.578 C 157.836 334.454,158.000 334.505,158.000 334.690 C 158.000 335.327,160.397 336.455,161.205 336.198 C 161.690 336.044,162.000 336.129,162.000 336.416 C 162.000 336.676,162.277 336.779,162.621 336.647 C 163.017 336.495,163.141 336.571,162.964 336.858 C 162.775 337.165,163.064 337.252,163.873 337.133 C 164.568 337.031,165.271 337.186,165.571 337.507 C 165.891 337.850,166.597 337.985,167.462 337.868 C 168.257 337.761,169.356 337.939,170.054 338.287 C 170.848 338.683,171.793 338.808,172.791 338.648 C 173.790 338.488,174.710 338.609,175.458 339.000 C 177.352 339.987,178.982 339.740,178.519 338.534 C 178.359 338.116,177.789 337.977,176.550 338.053 C 175.233 338.134,174.674 337.980,174.266 337.423 C 173.828 336.824,173.352 336.722,171.720 336.879 C 170.041 337.040,169.633 336.945,169.228 336.297 C 168.621 335.325,169.008 334.888,169.954 335.478 C 170.395 335.754,170.889 335.789,171.236 335.569 C 171.635 335.317,171.654 335.210,171.300 335.206 C 171.025 335.203,170.800 334.859,170.800 334.443 C 170.800 334.026,170.556 333.592,170.257 333.477 C 167.768 332.522,169.323 329.106,171.998 329.653 C 172.765 329.810,173.587 329.776,173.826 329.579 C 174.087 329.362,174.428 329.388,174.684 329.644 C 174.985 329.945,175.200 329.924,175.417 329.573 C 175.608 329.264,175.559 329.178,175.289 329.345 C 175.051 329.492,174.735 329.418,174.587 329.179 C 174.440 328.941,174.080 328.837,173.789 328.949 C 173.048 329.233,172.363 328.307,172.796 327.606 C 173.372 326.675,172.870 326.400,170.596 326.400 C 169.219 326.400,168.324 326.594,168.120 326.936 C 167.638 327.745,166.092 328.016,165.832 327.339 C 165.592 326.714,164.587 327.071,163.489 328.168 C 162.754 328.903,160.000 329.451,160.000 328.863 C 160.000 328.629,160.823 328.073,161.829 327.628 C 162.836 327.183,163.556 326.652,163.429 326.447 C 163.090 325.898,160.185 326.149,159.407 326.794 C 158.508 327.540,155.257 327.457,153.691 326.647 C 152.173 325.862,150.625 325.776,151.037 326.500 M194.400 329.101 C 194.400 330.398,195.984 331.108,197.495 330.489 C 198.209 330.196,198.652 329.228,198.100 329.167 C 196.546 328.997,195.334 328.677,194.910 328.325 C 194.516 327.998,194.400 328.175,194.400 329.101 M215.670 328.887 C 215.769 329.581,216.053 329.795,216.857 329.779 C 217.526 329.766,217.846 329.937,217.728 330.243 C 217.331 331.279,219.164 331.255,222.700 330.180 C 225.117 329.445,222.647 328.136,218.670 328.045 C 215.623 327.975,215.544 327.997,215.670 328.887 M241.614 328.774 C 241.040 329.846,241.092 330.053,241.900 329.918 C 242.689 329.785,243.185 329.242,243.194 328.500 C 243.203 327.718,242.074 327.914,241.614 328.774 M185.300 329.248 C 183.313 329.821,183.748 330.216,186.199 330.063 C 187.760 329.966,188.400 329.762,188.400 329.363 C 188.400 328.725,187.256 328.683,185.300 329.248 M190.000 329.348 C 190.000 330.006,190.718 330.615,191.074 330.259 C 191.196 330.138,191.004 329.747,190.648 329.390 C 190.088 328.831,190.000 328.825,190.000 329.348 M224.250 329.815 C 224.114 330.169,224.272 330.530,224.624 330.665 C 225.407 330.965,225.764 330.604,225.462 329.817 C 225.158 329.026,224.553 329.025,224.250 329.815 M154.060 330.200 C 154.060 330.409,153.867 330.645,153.630 330.723 C 153.393 330.802,153.200 330.567,153.200 330.200 C 153.200 329.833,153.393 329.598,153.630 329.677 C 153.867 329.755,154.060 329.991,154.060 330.200 M213.120 330.880 C 213.493 331.253,213.707 331.253,214.080 330.880 C 214.453 330.507,214.347 330.400,213.600 330.400 C 212.853 330.400,212.747 330.507,213.120 330.880 M235.900 338.851 C 234.318 339.449,234.540 339.870,236.600 340.179 C 239.386 340.597,243.336 339.804,242.107 339.073 C 241.366 338.633,236.899 338.473,235.900 338.851 M182.900 339.089 C 181.423 339.273,181.138 339.967,182.500 340.065 C 186.488 340.353,186.409 340.364,185.979 339.560 C 185.755 339.142,185.263 338.829,184.886 338.864 C 184.509 338.899,183.615 339.001,182.900 339.089 M226.259 340.335 C 225.623 341.037,225.673 341.073,227.365 341.137 C 229.682 341.225,231.792 340.472,230.600 339.984 C 229.135 339.384,226.961 339.559,226.259 340.335 M194.000 340.800 C 194.000 341.020,194.675 341.182,195.500 341.160 C 196.839 341.125,196.892 341.086,196.000 340.800 C 194.570 340.342,194.000 340.342,194.000 340.800 \\\" stroke=\\\"none\\\" fill=\\\"#6c2217\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path7\\\" d=\\\"M227.200 188.800 C 226.870 189.013,226.690 189.207,226.800 189.231 C 228.648 189.626,229.529 189.561,229.738 189.017 C 230.014 188.299,228.213 188.145,227.200 188.800 M202.000 189.705 L 201.000 190.159 202.338 190.308 C 204.112 190.505,205.224 190.113,204.389 189.585 C 203.649 189.117,203.251 189.137,202.000 189.705 M197.485 190.248 C 196.860 190.873,198.073 192.000,199.371 192.000 C 201.080 192.000,201.597 190.981,200.073 190.618 C 199.483 190.477,198.717 190.279,198.371 190.177 C 198.025 190.075,197.626 190.107,197.485 190.248 M253.200 191.561 C 252.870 191.746,251.880 192.038,251.000 192.209 L 249.400 192.521 250.745 192.931 C 251.865 193.273,252.152 193.229,252.464 192.671 C 252.671 192.302,253.090 192.000,253.396 192.000 C 253.702 192.000,254.064 191.820,254.200 191.600 C 254.498 191.118,254.023 191.099,253.200 191.561 M246.800 193.557 C 246.800 194.092,247.809 194.375,248.795 194.117 C 249.453 193.945,249.537 193.806,249.134 193.551 C 248.425 193.101,246.800 193.106,246.800 193.557 M240.000 193.957 C 240.000 194.419,241.008 194.800,242.233 194.800 C 242.826 194.800,243.200 194.568,243.200 194.200 C 243.200 193.767,242.756 193.600,241.600 193.600 C 240.720 193.600,240.000 193.761,240.000 193.957 M190.566 194.943 C 190.434 195.288,189.965 195.684,189.523 195.825 C 187.912 196.336,189.485 196.882,191.859 196.636 C 196.403 196.165,197.005 196.174,196.895 196.715 C 196.781 197.273,209.173 197.361,211.200 196.817 C 212.388 196.499,208.482 196.000,204.796 196.000 C 203.538 196.000,201.540 195.808,200.355 195.572 C 199.170 195.337,196.850 195.094,195.200 195.031 C 193.550 194.968,191.887 194.782,191.503 194.617 C 191.036 194.416,190.728 194.523,190.566 194.943 M184.400 195.600 C 184.400 195.820,184.715 196.023,185.100 196.051 C 185.485 196.079,186.207 196.145,186.704 196.197 C 187.426 196.272,187.517 196.182,187.155 195.746 C 186.634 195.118,184.400 195.000,184.400 195.600 M254.600 200.400 C 254.283 200.913,256.007 200.913,256.800 200.400 C 257.257 200.105,257.095 200.011,256.124 200.006 C 255.422 200.003,254.736 200.180,254.600 200.400 M171.869 201.064 C 171.470 201.464,176.671 202.742,180.000 203.062 C 183.058 203.356,183.029 202.940,179.951 202.368 C 176.026 201.639,174.211 201.275,173.188 201.015 C 172.631 200.873,172.038 200.895,171.869 201.064 M246.000 202.000 C 245.221 202.503,247.429 202.503,248.600 202.000 C 249.254 201.719,249.144 201.652,248.000 201.634 C 247.230 201.622,246.330 201.787,246.000 202.000 M183.660 203.375 C 184.166 203.917,189.438 204.800,192.167 204.800 C 193.688 204.800,194.821 204.688,194.683 204.550 C 194.206 204.073,183.218 202.901,183.660 203.375 M234.600 203.600 C 233.940 203.768,232.590 203.929,231.600 203.959 C 229.268 204.028,227.929 204.785,230.123 204.794 C 232.196 204.802,237.312 203.967,237.780 203.544 C 238.236 203.131,236.307 203.166,234.600 203.600 M269.793 208.023 C 269.649 208.476,269.097 209.011,268.566 209.213 C 267.559 209.596,267.158 211.679,267.992 212.195 C 268.576 212.556,269.910 211.714,270.200 210.800 C 270.554 209.686,271.301 209.800,272.798 211.198 C 274.217 212.524,274.800 212.456,274.800 210.966 C 274.800 210.302,274.496 209.865,273.870 209.627 C 273.358 209.432,272.634 208.807,272.261 208.236 C 271.446 206.994,270.155 206.882,269.793 208.023 M172.754 211.777 C 172.369 212.841,172.009 213.200,171.327 213.200 C 170.694 213.200,170.340 213.498,170.170 214.177 C 169.631 216.323,171.269 216.654,172.858 214.720 C 173.914 213.435,175.200 213.567,175.200 214.961 C 175.200 215.927,177.563 216.416,178.029 215.546 C 178.795 214.115,178.339 213.013,176.924 212.876 C 175.875 212.775,175.627 212.562,175.524 211.676 C 175.316 209.870,173.418 209.939,172.754 211.777 M207.332 211.110 C 207.074 211.274,206.742 211.893,206.593 212.486 C 206.402 213.248,205.924 213.695,204.961 214.013 C 203.542 214.481,203.123 215.827,203.977 217.177 C 204.497 217.999,206.297 217.124,206.798 215.805 C 207.291 214.508,209.200 214.352,209.200 215.609 C 209.200 216.525,210.810 217.435,211.774 217.065 C 213.023 216.586,212.559 214.464,211.124 214.092 C 210.187 213.849,209.766 213.457,209.541 212.615 C 209.132 211.088,208.280 210.507,207.332 211.110 M136.406 212.320 C 136.402 212.985,136.025 213.398,135.049 213.806 C 133.074 214.630,132.934 215.470,134.606 216.457 C 135.373 216.909,136.023 217.441,136.050 217.640 C 136.105 218.040,136.249 218.642,136.397 219.100 C 136.451 219.265,136.632 218.860,136.800 218.200 C 137.248 216.440,137.248 212.693,136.800 212.000 C 136.488 211.517,136.411 211.579,136.406 212.320 M240.906 212.083 C 240.675 212.367,240.420 212.959,240.338 213.397 C 240.241 213.919,239.778 214.265,238.995 214.399 C 237.686 214.623,237.111 216.328,237.988 217.385 C 238.583 218.102,240.619 217.134,240.918 215.993 C 241.228 214.807,242.406 215.032,242.913 216.374 C 243.311 217.431,244.172 217.979,245.457 217.995 C 246.908 218.012,246.385 214.901,244.906 214.723 C 244.342 214.655,243.756 214.330,243.603 214.000 C 242.794 212.248,242.461 211.789,241.920 211.683 C 241.594 211.618,241.137 211.798,240.906 212.083 M153.343 213.405 C 153.215 213.738,153.326 214.269,153.588 214.586 C 154.149 215.261,153.771 216.800,153.045 216.800 C 151.981 216.800,150.665 218.837,151.311 219.483 C 152.545 220.716,154.531 220.353,155.041 218.800 C 155.339 217.892,155.789 217.356,156.321 217.276 C 158.236 216.987,158.439 214.626,156.590 214.162 C 156.063 214.030,155.423 213.669,155.167 213.361 C 154.556 212.624,153.634 212.646,153.343 213.405 M263.467 213.867 C 263.320 214.013,263.200 214.460,263.200 214.859 C 263.200 215.296,262.809 215.683,262.216 215.832 C 260.066 216.371,260.071 218.390,262.224 219.209 C 262.872 219.456,263.200 219.892,263.200 220.510 C 263.200 222.252,264.718 222.933,266.194 221.854 C 267.115 221.181,266.418 218.987,265.157 218.586 C 264.156 218.269,264.186 216.949,265.200 216.684 C 266.622 216.312,266.329 213.600,264.867 213.600 C 264.243 213.600,263.613 213.720,263.467 213.867 M276.651 214.113 C 276.004 214.587,276.059 214.738,277.375 216.093 C 278.719 217.477,279.239 218.800,278.439 218.800 C 278.166 218.800,277.200 220.835,277.200 221.411 C 277.200 221.462,277.737 221.725,278.393 221.997 C 279.890 222.617,280.800 222.289,280.800 221.128 C 280.800 220.634,281.273 219.853,281.851 219.392 C 283.130 218.372,282.880 216.936,281.358 216.554 C 280.814 216.417,279.904 215.697,279.337 214.953 C 278.215 213.482,277.724 213.328,276.651 214.113 M270.872 217.669 C 271.016 218.648,271.553 218.943,272.314 218.462 C 273.039 218.002,272.471 216.800,271.529 216.800 C 270.951 216.800,270.778 217.029,270.872 217.669 M180.457 217.628 C 179.677 217.941,179.418 220.008,180.133 220.218 C 181.146 220.516,182.400 221.287,182.400 221.612 C 182.400 221.848,181.905 222.215,181.300 222.428 C 179.610 223.021,178.929 224.800,180.043 225.709 C 181.358 226.783,183.848 225.790,183.469 224.343 C 183.340 223.849,183.701 223.384,184.641 222.829 C 186.432 221.772,186.134 219.600,184.198 219.600 C 183.899 219.600,183.528 219.195,183.373 218.700 C 182.911 217.218,182.165 216.944,180.457 217.628 M164.974 219.400 C 164.652 220.170,164.128 220.800,163.809 220.800 C 162.205 220.800,162.349 222.897,164.010 223.736 C 164.515 223.991,164.976 224.529,165.033 224.931 C 165.246 226.412,165.601 226.800,166.745 226.800 C 167.996 226.800,168.738 225.778,168.013 225.053 C 167.786 224.826,167.600 224.359,167.600 224.016 C 167.600 223.673,167.245 223.171,166.811 222.900 C 165.968 222.373,166.108 221.200,167.013 221.200 C 167.623 221.200,168.894 218.875,168.570 218.351 C 167.928 217.313,165.557 218.005,164.974 219.400 M198.880 219.280 C 198.616 219.544,198.400 220.135,198.400 220.592 C 198.400 221.150,198.004 221.574,197.200 221.878 C 195.577 222.490,195.523 224.128,197.100 224.882 C 197.705 225.171,198.256 225.798,198.324 226.275 C 198.559 227.918,201.363 228.554,202.225 227.159 C 202.741 226.325,201.952 224.475,200.976 224.230 C 199.714 223.913,199.666 222.571,200.906 222.259 C 202.223 221.929,203.001 219.736,201.993 219.196 C 200.985 218.657,199.462 218.698,198.880 219.280 M214.301 219.300 C 213.374 220.012,213.813 221.917,214.942 222.078 C 216.197 222.257,216.339 223.900,215.126 224.204 C 213.777 224.544,212.956 226.432,213.867 227.099 C 215.128 228.021,217.151 227.736,217.437 226.596 C 217.576 226.043,218.209 225.221,218.844 224.768 C 220.283 223.744,220.337 222.537,218.973 221.915 C 218.409 221.658,217.698 220.852,217.394 220.124 C 216.795 218.691,215.533 218.355,214.301 219.300 M233.713 219.143 C 233.497 219.284,233.099 219.819,232.829 220.332 C 232.559 220.844,231.830 221.440,231.209 221.657 C 229.375 222.296,229.689 225.200,231.592 225.200 C 231.808 225.200,232.099 225.655,232.238 226.211 C 232.674 227.948,234.687 228.392,236.295 227.106 C 236.918 226.608,235.587 224.577,234.390 224.197 C 233.315 223.855,233.394 222.859,234.530 222.427 C 235.442 222.080,237.036 220.103,236.686 219.753 C 236.290 219.357,234.081 218.904,233.713 219.143 M247.736 219.798 C 246.904 220.406,247.344 221.814,248.630 222.657 C 249.891 223.483,249.854 223.842,248.365 225.233 C 246.961 226.544,246.998 227.175,248.522 227.918 C 249.813 228.548,251.200 227.973,251.200 226.808 C 251.200 226.368,251.667 225.821,252.300 225.519 C 253.970 224.722,254.051 222.901,252.443 222.294 C 251.629 221.987,251.149 221.479,250.991 220.760 C 250.723 219.538,248.848 218.984,247.736 219.798 M147.279 222.300 C 146.406 223.125,145.388 223.980,145.016 224.200 C 143.965 224.822,144.006 227.147,145.081 227.875 C 145.907 228.435,146.059 228.377,147.544 226.936 C 148.414 226.091,149.413 225.168,149.763 224.884 C 150.490 224.296,150.596 222.714,149.986 221.574 C 149.411 220.500,149.092 220.586,147.279 222.300 M207.200 223.171 C 207.200 223.743,207.457 224.000,208.029 224.000 C 208.602 224.000,208.817 223.785,208.725 223.305 C 208.524 222.262,207.200 222.146,207.200 223.171 M240.956 222.970 C 240.585 223.938,241.083 224.800,242.014 224.800 C 242.693 224.800,242.829 224.591,242.727 223.703 C 242.585 222.473,241.344 221.960,240.956 222.970 M268.164 224.200 C 267.745 225.871,268.318 227.239,269.648 227.740 C 270.492 228.059,270.928 228.541,271.086 229.330 C 271.545 231.623,274.800 231.314,274.800 228.978 C 274.800 228.684,275.295 228.208,275.900 227.919 C 277.365 227.220,277.549 225.633,276.322 224.277 C 275.334 223.185,273.600 223.351,273.600 224.538 C 273.600 225.648,272.339 226.290,271.842 225.432 C 270.481 223.086,268.602 222.456,268.164 224.200 M264.762 225.172 C 263.845 226.185,263.504 226.803,263.876 226.778 C 264.054 226.766,264.619 226.226,265.130 225.578 C 266.125 224.319,265.829 223.993,264.762 225.172 M279.600 225.538 C 279.600 226.257,281.108 227.273,281.421 226.765 C 281.597 226.481,281.416 226.055,280.985 225.739 C 280.143 225.124,279.600 225.045,279.600 225.538 M175.950 227.403 C 175.373 227.717,174.805 228.339,174.688 228.786 C 174.413 229.836,173.353 229.833,172.790 228.781 C 172.222 227.719,170.430 227.009,169.835 227.609 C 169.520 227.926,169.594 227.974,170.100 227.781 C 170.674 227.563,170.800 227.739,170.800 228.757 C 170.800 229.724,170.974 230.000,171.582 230.000 C 172.384 230.000,173.161 232.293,172.642 233.132 C 172.330 233.638,173.520 234.079,174.423 233.793 C 174.814 233.669,175.319 233.035,175.546 232.384 C 175.859 231.484,176.206 231.200,176.992 231.200 C 178.328 231.200,178.890 229.857,178.235 228.227 C 177.661 226.798,177.303 226.669,175.950 227.403 M203.774 229.383 C 202.870 230.763,203.307 232.339,204.730 232.836 C 205.393 233.067,206.011 233.694,206.281 234.410 C 206.967 236.226,208.868 236.107,209.778 234.191 C 210.145 233.416,210.597 232.875,210.782 232.989 C 211.616 233.504,212.901 231.771,212.623 230.505 C 212.125 228.239,211.281 228.000,209.805 229.708 C 208.472 231.250,207.441 231.606,207.074 230.650 C 206.958 230.347,206.317 229.711,205.650 229.236 L 204.437 228.372 203.774 229.383 M244.109 229.284 C 243.619 229.521,243.112 230.049,242.982 230.457 C 242.728 231.256,241.805 231.455,241.398 230.797 C 240.972 230.107,238.880 229.195,238.265 229.431 C 236.764 230.007,237.187 232.737,238.829 233.066 C 239.608 233.222,240.077 233.647,240.358 234.451 C 241.084 236.533,242.854 236.440,243.922 234.263 C 244.209 233.678,244.772 233.200,245.173 233.200 C 246.508 233.200,246.976 232.164,246.443 230.387 C 245.948 228.733,245.595 228.567,244.109 229.284 M171.338 231.787 C 171.592 232.330,171.862 232.594,171.938 232.374 C 172.134 231.805,171.695 230.800,171.250 230.800 C 171.041 230.800,171.079 231.235,171.338 231.787 M216.075 231.225 C 216.171 231.514,216.486 231.829,216.775 231.925 C 217.075 232.025,217.225 231.875,217.125 231.575 C 217.029 231.286,216.714 230.971,216.425 230.875 C 216.125 230.775,215.975 230.925,216.075 231.225 M250.075 231.625 C 250.171 231.914,250.486 232.229,250.775 232.325 C 251.075 232.425,251.225 232.275,251.125 231.975 C 251.029 231.686,250.714 231.371,250.425 231.275 C 250.125 231.175,249.975 231.325,250.075 231.625 M285.867 232.267 C 285.342 232.791,285.614 233.122,286.400 232.916 C 286.840 232.801,287.200 232.548,287.200 232.353 C 287.200 231.940,286.255 231.879,285.867 232.267 M278.600 234.000 C 278.464 234.220,278.003 234.400,277.576 234.400 C 277.149 234.400,276.800 234.554,276.800 234.742 C 276.800 235.148,280.828 234.446,281.380 233.945 C 281.600 233.745,281.147 233.600,280.304 233.600 C 279.503 233.600,278.736 233.780,278.600 234.000 M145.000 235.600 C 145.136 235.820,145.732 235.987,146.324 235.972 C 147.285 235.947,147.314 235.907,146.600 235.600 C 145.489 235.122,144.705 235.122,145.000 235.600 M269.853 235.830 C 267.191 236.556,266.992 236.926,269.400 236.670 C 272.228 236.369,273.974 235.966,274.229 235.554 C 274.538 235.053,272.152 235.203,269.853 235.830 M280.720 235.834 C 278.522 236.510,277.876 237.200,279.441 237.200 C 280.826 237.200,284.800 235.959,284.800 235.527 C 284.800 235.035,282.836 235.183,280.720 235.834 M142.898 236.500 C 142.988 236.775,143.756 237.058,144.604 237.128 C 145.966 237.242,146.085 237.184,145.624 236.628 C 144.993 235.868,142.654 235.758,142.898 236.500 M273.720 237.388 C 270.921 237.942,270.081 238.761,272.459 238.617 C 274.618 238.487,277.642 237.397,276.541 237.146 C 276.134 237.053,274.864 237.162,273.720 237.388 M283.934 237.000 C 283.705 237.228,281.125 237.800,276.800 238.580 C 275.150 238.878,272.630 239.481,271.200 239.920 C 268.410 240.777,264.364 241.591,262.776 241.614 C 262.239 241.622,261.350 241.898,260.800 242.228 C 259.704 242.886,264.258 242.678,265.600 242.009 C 265.930 241.845,267.280 241.601,268.600 241.468 C 269.920 241.335,272.440 240.844,274.200 240.377 C 275.960 239.910,278.840 239.176,280.600 238.747 C 282.360 238.318,284.205 237.864,284.700 237.737 C 285.195 237.610,285.600 237.348,285.600 237.153 C 285.600 236.781,284.275 236.658,283.934 237.000 M259.800 238.000 C 259.481 238.516,261.602 238.516,262.400 238.000 C 262.847 237.711,262.624 237.611,261.524 237.606 C 260.712 237.603,259.936 237.780,259.800 238.000 M174.305 239.083 C 174.802 239.179,175.522 239.175,175.905 239.075 C 176.287 238.975,175.880 238.896,175.000 238.901 C 174.120 238.905,173.807 238.987,174.305 239.083 M283.600 239.696 C 281.018 240.445,279.238 240.854,275.400 241.577 C 274.300 241.784,272.590 242.142,271.600 242.372 C 270.610 242.602,268.900 242.891,267.800 243.015 C 266.700 243.139,264.720 243.569,263.400 243.971 C 262.080 244.372,259.020 244.923,256.600 245.195 C 251.969 245.715,249.231 246.565,253.200 246.250 C 258.170 245.855,265.539 244.802,267.600 244.191 C 268.810 243.832,271.060 243.390,272.600 243.209 C 274.140 243.027,276.120 242.607,277.000 242.274 C 277.880 241.941,279.608 241.564,280.841 241.438 C 283.256 241.189,287.699 239.464,286.763 239.138 C 286.453 239.030,285.030 239.281,283.600 239.696 M167.200 239.508 C 167.200 240.072,168.322 240.450,168.611 239.983 C 168.942 239.447,170.545 239.505,171.113 240.073 C 171.374 240.334,171.710 240.424,171.860 240.273 C 172.364 239.769,171.614 239.467,169.400 239.283 C 168.056 239.172,167.200 239.259,167.200 239.508 M262.736 239.397 C 262.628 239.506,261.569 239.778,260.384 240.003 C 257.614 240.528,256.650 241.358,259.200 241.021 C 263.233 240.489,266.448 239.846,266.642 239.533 C 266.857 239.185,263.080 239.054,262.736 239.397 M183.298 240.631 C 183.679 241.012,185.595 241.116,185.365 240.744 C 185.248 240.555,184.683 240.400,184.110 240.400 C 183.536 240.400,183.171 240.504,183.298 240.631 M177.684 241.379 C 178.978 241.874,183.431 242.206,185.800 241.983 C 187.433 241.830,183.278 241.130,179.800 240.973 C 176.342 240.817,176.258 240.833,177.684 241.379 M193.600 241.995 C 193.600 242.232,193.195 242.589,192.700 242.788 C 191.896 243.111,191.949 243.155,193.200 243.203 C 196.336 243.323,196.184 243.944,193.000 244.019 C 191.240 244.061,189.260 244.216,188.600 244.365 L 187.400 244.635 188.433 244.908 C 192.346 245.944,198.896 245.527,198.133 244.291 C 197.956 244.005,199.364 243.976,202.638 244.197 C 209.257 244.645,213.605 244.716,213.812 244.380 C 213.969 244.126,208.630 243.707,202.909 243.524 C 199.766 243.424,199.381 242.825,202.400 242.733 C 203.830 242.689,205.495 242.687,206.100 242.728 C 206.705 242.769,207.200 242.637,207.200 242.433 C 207.200 241.906,202.239 241.444,200.479 241.807 C 198.465 242.223,196.882 242.243,195.100 241.874 C 194.103 241.668,193.600 241.708,193.600 241.995 M250.800 243.823 C 249.863 244.380,249.951 244.401,252.200 244.160 C 255.406 243.816,256.421 243.224,253.800 243.226 C 252.700 243.227,251.350 243.496,250.800 243.823 M290.200 246.666 C 289.760 246.771,287.150 247.389,284.400 248.041 C 281.650 248.693,278.715 249.411,277.879 249.636 C 277.042 249.861,274.972 250.305,273.279 250.622 C 271.585 250.939,269.390 251.383,268.400 251.608 C 267.410 251.833,265.520 252.177,264.200 252.373 C 262.880 252.569,260.360 253.011,258.600 253.354 C 256.840 253.698,252.790 254.265,249.600 254.614 C 246.410 254.963,242.450 255.427,240.800 255.643 C 239.150 255.860,235.939 256.144,233.664 256.273 C 229.235 256.525,228.705 257.247,233.000 257.176 C 234.320 257.155,235.760 257.166,236.200 257.203 C 237.377 257.299,232.871 258.356,231.000 258.423 C 230.120 258.454,228.950 258.638,228.400 258.831 C 227.408 259.179,232.414 258.978,235.000 258.566 C 235.660 258.460,238.630 258.199,241.600 257.984 C 244.570 257.770,247.900 257.415,249.000 257.196 C 250.899 256.817,252.384 256.569,258.400 255.629 C 259.830 255.405,261.900 255.033,263.000 254.802 C 264.100 254.571,266.170 254.204,267.600 253.985 C 270.566 253.533,272.314 253.176,276.000 252.269 C 277.430 251.917,280.310 251.258,282.400 250.803 C 288.515 249.473,293.298 247.767,293.062 247.000 C 292.924 246.552,291.419 246.377,290.200 246.666 M276.311 251.226 C 275.694 251.586,265.989 253.610,265.000 253.586 C 263.923 253.559,266.064 252.854,268.000 252.599 C 269.210 252.439,270.523 252.138,270.919 251.930 C 272.471 251.113,277.668 250.435,276.311 251.226 M289.800 251.453 C 288.920 251.793,287.029 252.313,285.598 252.608 C 284.167 252.904,282.490 253.338,281.872 253.573 C 281.254 253.808,280.265 254.005,279.674 254.011 C 279.083 254.016,276.800 254.475,274.600 255.029 C 270.830 255.979,262.286 257.527,259.200 257.818 C 257.423 257.986,252.779 258.680,248.400 259.432 C 245.304 259.963,240.328 260.351,233.703 260.576 C 232.329 260.623,231.098 260.769,230.966 260.901 C 230.477 261.389,234.643 261.701,238.262 261.447 C 242.347 261.159,243.303 261.660,240.174 262.448 C 237.632 263.088,238.492 263.590,241.400 263.164 C 242.720 262.971,245.600 262.626,247.800 262.398 C 250.000 262.170,252.970 261.800,254.400 261.576 C 255.830 261.353,257.892 261.082,258.982 260.976 C 260.072 260.870,261.072 260.608,261.203 260.394 C 261.335 260.181,262.334 259.907,263.422 259.786 C 265.167 259.591,270.707 258.587,275.400 257.615 C 279.008 256.868,287.132 254.717,289.000 254.014 C 290.100 253.600,291.658 253.153,292.461 253.020 C 293.862 252.788,294.653 251.933,294.178 251.164 C 293.837 250.612,291.594 250.760,289.800 251.453 M262.580 253.958 C 262.197 254.320,256.359 255.205,254.436 255.194 C 252.712 255.184,254.340 254.420,256.200 254.366 C 257.080 254.341,258.250 254.176,258.800 254.000 C 260.211 253.548,263.048 253.517,262.580 253.958 M284.400 254.400 C 282.948 254.865,280.718 254.865,281.800 254.400 C 282.240 254.211,283.230 254.062,284.000 254.068 C 285.273 254.079,285.309 254.109,284.400 254.400 M253.167 255.357 C 252.717 255.782,245.403 256.763,245.082 256.442 C 244.867 256.227,245.749 255.923,247.260 255.691 C 249.906 255.286,253.455 255.085,253.167 255.357 M279.017 255.573 C 278.890 255.778,277.754 256.151,276.493 256.403 C 275.232 256.654,272.580 257.208,270.600 257.633 C 268.620 258.058,266.280 258.399,265.400 258.391 C 262.931 258.368,264.443 257.773,268.800 257.054 C 270.890 256.709,273.410 256.163,274.400 255.840 C 276.436 255.177,279.367 255.007,279.017 255.573 M262.632 258.748 C 262.365 259.181,260.633 259.571,257.000 260.018 C 255.460 260.208,252.490 260.640,250.400 260.979 C 246.235 261.654,242.209 261.797,243.200 261.236 C 243.530 261.049,245.690 260.684,248.000 260.425 C 251.594 260.022,256.506 259.261,259.400 258.659 C 260.906 258.346,262.847 258.400,262.632 258.748 M109.524 274.209 C 109.218 274.515,109.633 276.373,110.067 276.641 C 111.124 277.294,111.655 276.417,110.938 275.203 C 110.236 274.014,109.932 273.801,109.524 274.209 M113.733 278.660 C 113.852 279.507,114.058 280.486,114.192 280.835 C 114.717 282.203,119.576 283.659,120.800 282.814 C 121.600 282.262,120.689 281.615,119.100 281.606 C 118.201 281.601,118.000 281.421,118.000 280.620 C 118.000 279.580,116.184 277.931,114.459 277.406 C 113.562 277.133,113.528 277.192,113.733 278.660 M126.480 284.480 C 125.478 285.482,126.424 288.127,127.538 287.438 C 128.180 287.042,128.462 285.156,127.968 284.562 C 127.398 283.875,127.101 283.859,126.480 284.480 M148.800 306.000 C 149.588 306.509,150.515 306.509,150.200 306.000 C 150.064 305.780,149.558 305.603,149.076 305.606 C 148.364 305.611,148.312 305.685,148.800 306.000 M147.600 307.537 C 147.600 307.824,150.186 308.800,150.946 308.800 C 151.697 308.800,151.022 308.096,149.872 307.680 C 148.310 307.116,147.600 307.071,147.600 307.537 M155.327 307.483 C 155.645 307.996,159.138 308.995,159.467 308.666 C 159.740 308.393,158.006 307.663,156.238 307.308 C 155.498 307.160,155.167 307.223,155.327 307.483 M258.919 307.762 C 256.189 308.756,257.130 309.191,260.154 308.333 C 261.059 308.075,261.971 307.715,262.180 307.533 C 262.731 307.051,260.428 307.212,258.919 307.762 M156.192 310.205 C 157.036 310.863,157.991 310.861,158.121 310.200 C 158.165 309.980,157.570 309.752,156.800 309.693 C 155.468 309.591,155.439 309.616,156.192 310.205 M165.800 310.000 C 166.912 310.478,168.000 310.478,168.000 310.000 C 168.000 309.780,167.325 309.613,166.500 309.628 C 165.297 309.651,165.158 309.724,165.800 310.000 M248.200 310.000 C 247.883 310.513,249.607 310.513,250.400 310.000 C 250.857 309.705,250.695 309.611,249.724 309.606 C 249.022 309.603,248.336 309.780,248.200 310.000 M163.600 311.600 C 163.930 311.813,164.740 311.988,165.400 311.988 C 166.321 311.988,166.460 311.897,166.000 311.600 C 165.670 311.387,164.860 311.212,164.200 311.212 C 163.279 311.212,163.140 311.303,163.600 311.600 M250.600 311.600 C 250.464 311.820,250.713 312.000,251.153 312.000 C 251.593 312.000,252.064 311.820,252.200 311.600 C 252.336 311.380,252.087 311.200,251.647 311.200 C 251.207 311.200,250.736 311.380,250.600 311.600 M156.274 312.153 C 155.965 312.957,153.280 313.165,151.200 312.545 C 148.714 311.804,147.920 311.899,149.600 312.736 C 150.640 313.254,150.976 313.660,150.905 314.317 C 150.852 314.802,151.010 315.200,151.256 315.200 C 151.553 315.200,151.616 315.739,151.443 316.818 C 151.174 318.502,152.445 318.591,153.081 316.933 C 153.273 316.433,153.806 316.362,155.958 316.550 C 158.530 316.774,158.566 316.764,157.300 316.189 C 155.688 315.456,155.548 314.601,157.100 314.965 C 157.705 315.107,158.815 315.263,159.566 315.312 C 161.281 315.422,161.564 316.116,160.107 316.633 L 159.000 317.025 160.913 317.955 C 162.337 318.646,163.184 318.817,164.224 318.622 C 165.631 318.358,165.780 317.600,164.425 317.600 C 163.394 317.600,162.541 316.499,163.122 315.918 C 163.661 315.379,162.032 314.400,160.596 314.400 C 160.053 314.400,159.184 313.832,158.454 313.000 C 157.127 311.489,156.606 311.287,156.274 312.153 M167.600 312.400 C 168.150 312.576,168.960 312.726,169.400 312.732 L 170.200 312.744 169.400 312.400 C 168.960 312.211,168.150 312.062,167.600 312.068 L 166.600 312.080 167.600 312.400 M246.600 312.400 C 246.284 312.911,247.610 312.911,248.400 312.400 C 248.869 312.097,248.766 312.011,247.924 312.006 C 247.332 312.003,246.736 312.180,246.600 312.400 M180.000 314.400 C 180.776 314.901,181.200 314.901,181.200 314.400 C 181.200 314.180,180.795 314.003,180.300 314.006 C 179.572 314.011,179.515 314.086,180.000 314.400 M250.000 314.976 C 249.230 315.282,248.092 315.643,247.472 315.780 C 245.908 316.126,246.335 316.949,248.231 317.243 C 249.290 317.407,249.475 317.510,248.800 317.560 C 247.035 317.690,245.039 318.968,245.720 319.533 C 246.179 319.915,246.691 319.847,248.183 319.207 C 249.219 318.763,250.580 318.400,251.207 318.400 C 251.835 318.400,252.821 318.220,253.400 318.000 C 254.120 317.726,254.707 317.736,255.259 318.032 C 255.904 318.377,256.172 318.317,256.600 317.732 C 257.246 316.849,257.198 316.787,255.744 316.635 C 254.929 316.549,254.563 316.268,254.472 315.657 C 254.400 315.175,254.051 314.798,253.672 314.795 C 253.302 314.792,252.640 314.706,252.200 314.605 C 251.760 314.504,250.770 314.671,250.000 314.976 M180.000 316.020 C 180.000 316.609,177.234 317.702,176.339 317.468 C 175.933 317.362,175.600 317.431,175.600 317.622 C 175.600 318.131,178.226 318.742,181.200 318.925 C 182.630 319.013,184.106 319.217,184.481 319.378 C 185.268 319.717,186.121 319.320,185.783 318.772 C 185.656 318.568,185.196 318.400,184.760 318.400 C 183.932 318.400,181.632 316.962,181.080 316.100 C 180.691 315.492,180.000 315.441,180.000 316.020 M230.836 317.229 C 230.306 317.671,229.587 318.191,229.239 318.386 C 228.195 318.970,229.140 319.405,231.256 319.315 C 232.979 319.241,233.215 319.322,233.025 319.921 C 232.711 320.912,236.676 321.895,237.532 321.039 C 238.353 320.218,237.756 319.600,236.143 319.600 C 234.239 319.600,234.570 318.642,236.531 318.476 C 238.786 318.285,238.274 317.600,235.876 317.600 C 234.629 317.600,233.433 317.358,232.976 317.013 C 231.993 316.269,231.989 316.269,230.836 317.229 M252.400 316.800 C 252.400 317.020,252.029 317.200,251.576 317.200 C 251.123 317.200,250.864 317.020,251.000 316.800 C 251.136 316.580,251.507 316.400,251.824 316.400 C 252.141 316.400,252.400 316.580,252.400 316.800 M203.486 318.969 C 202.433 319.252,201.083 319.406,200.486 319.310 C 199.635 319.175,199.530 319.229,200.000 319.563 C 200.330 319.796,201.059 319.991,201.620 319.994 C 202.181 319.997,202.829 320.189,203.059 320.419 C 203.351 320.711,203.771 320.705,204.446 320.397 C 205.039 320.127,205.770 320.089,206.336 320.298 C 207.360 320.677,210.800 320.036,210.800 319.466 C 210.800 319.273,210.512 319.225,210.161 319.360 C 209.809 319.495,208.723 319.334,207.747 319.003 C 205.690 318.304,205.950 318.306,203.486 318.969 M174.492 319.453 C 173.364 319.940,175.840 321.241,177.032 320.788 C 177.721 320.526,177.989 320.229,177.753 319.993 C 177.274 319.514,175.161 319.164,174.492 319.453 M183.607 320.387 C 182.943 320.807,185.278 322.000,186.764 322.000 C 188.239 322.000,187.989 321.305,186.279 320.651 C 184.294 319.893,184.375 319.901,183.607 320.387 M226.087 320.938 C 225.012 321.531,225.315 322.002,226.767 321.994 C 227.815 321.988,229.133 321.386,228.788 321.071 C 228.231 320.563,226.888 320.497,226.087 320.938 M199.798 322.003 C 199.343 322.739,200.700 322.864,202.462 322.247 L 204.200 321.638 202.124 321.619 C 200.982 321.609,199.935 321.781,199.798 322.003 M208.800 322.000 C 208.800 322.220,209.160 322.400,209.600 322.400 C 210.040 322.400,210.530 322.413,210.690 322.430 C 210.850 322.447,211.045 322.267,211.123 322.030 C 211.205 321.785,210.735 321.600,210.033 321.600 C 209.355 321.600,208.800 321.780,208.800 322.000 \\\" stroke=\\\"none\\\" fill=\\\"#d67810\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path8\\\" d=\\\"M205.000 54.156 C 204.340 54.410,203.388 54.848,202.885 55.131 C 202.382 55.413,201.603 55.528,201.155 55.386 C 199.539 54.873,190.016 61.269,186.277 65.380 C 185.663 66.056,185.500 66.087,185.184 65.587 C 184.828 65.026,184.615 65.354,184.786 66.200 C 184.830 66.420,184.728 66.461,184.559 66.292 C 184.191 65.925,181.200 68.744,181.200 69.458 C 181.200 69.730,180.992 70.081,180.738 70.238 C 180.428 70.430,180.382 70.339,180.598 69.962 C 180.775 69.653,180.270 70.014,179.476 70.763 C 178.681 71.513,178.128 72.283,178.245 72.473 C 178.363 72.664,178.243 72.770,177.978 72.710 C 177.713 72.649,177.463 72.964,177.422 73.408 C 177.326 74.446,175.286 76.500,174.706 76.142 C 174.421 75.966,174.355 76.105,174.519 76.534 C 174.701 77.008,174.560 77.200,174.030 77.200 C 173.276 77.200,172.630 78.201,172.999 78.798 C 173.109 78.977,172.377 79.995,171.371 81.062 C 170.365 82.128,169.648 82.787,169.777 82.528 C 169.907 82.268,169.802 81.925,169.545 81.766 C 169.262 81.591,169.183 81.649,169.347 81.914 C 169.495 82.154,169.298 82.531,168.908 82.751 C 168.343 83.069,168.300 83.252,168.697 83.652 C 169.316 84.277,167.872 86.000,166.730 86.000 C 166.026 86.000,165.825 86.408,165.977 87.530 C 166.084 88.317,165.153 89.268,164.515 89.023 C 164.209 88.905,164.068 88.987,164.203 89.205 C 164.337 89.422,164.212 89.603,163.924 89.606 C 163.544 89.611,163.565 89.717,164.000 89.992 C 164.524 90.323,164.509 90.462,163.886 91.086 C 163.311 91.660,163.106 91.695,162.841 91.266 C 162.590 90.860,162.461 90.923,162.302 91.532 C 162.187 91.973,162.297 92.554,162.546 92.825 C 162.895 93.204,162.843 93.263,162.320 93.079 C 161.839 92.910,161.706 93.010,161.863 93.420 C 161.996 93.766,161.846 94.000,161.492 94.000 C 161.165 94.000,160.670 94.274,160.392 94.609 C 159.966 95.123,159.998 95.176,160.598 94.945 C 161.108 94.750,161.251 94.832,161.105 95.236 C 160.992 95.546,160.698 95.755,160.450 95.700 C 160.203 95.645,160.000 95.881,160.000 96.224 C 160.000 96.567,159.837 96.746,159.637 96.623 C 159.438 96.500,159.369 96.759,159.484 97.199 C 159.650 97.833,159.495 98.001,158.747 98.006 C 157.989 98.011,157.920 98.090,158.400 98.400 C 158.730 98.613,158.865 98.813,158.700 98.844 C 158.535 98.875,158.220 98.945,158.000 99.000 C 157.780 99.055,157.465 99.125,157.300 99.156 C 157.135 99.187,157.251 99.371,157.558 99.566 C 158.225 99.988,157.853 101.242,157.115 101.059 C 156.832 100.989,156.735 101.007,156.900 101.099 C 157.345 101.348,157.264 102.400,156.800 102.400 C 156.580 102.400,156.400 102.642,156.400 102.939 C 156.400 103.894,155.176 105.964,154.681 105.846 C 154.416 105.783,154.335 105.807,154.500 105.899 C 154.858 106.099,154.900 107.366,154.561 107.706 C 154.107 108.160,153.200 107.512,153.200 106.734 C 153.200 106.304,153.036 106.054,152.836 106.178 C 152.260 106.534,151.177 105.965,151.466 105.458 C 151.610 105.206,151.585 105.130,151.409 105.288 C 151.234 105.447,150.542 105.186,149.873 104.710 C 149.203 104.233,148.789 104.058,148.951 104.321 C 149.114 104.585,149.057 104.800,148.824 104.800 C 148.591 104.800,148.400 104.547,148.400 104.237 C 148.400 103.858,148.119 103.748,147.537 103.900 C 146.946 104.055,146.765 103.980,146.961 103.663 C 147.148 103.360,146.907 103.200,146.266 103.200 C 145.727 103.200,145.185 102.939,145.063 102.619 C 144.934 102.283,144.486 102.106,144.000 102.200 C 143.527 102.291,143.067 102.119,142.947 101.806 C 142.830 101.501,142.497 101.341,142.207 101.453 C 141.918 101.564,141.550 101.443,141.390 101.185 C 141.175 100.836,141.012 100.854,140.756 101.257 C 140.485 101.685,140.411 101.658,140.406 101.129 C 140.401 100.622,140.116 100.494,139.234 100.606 C 138.506 100.698,137.989 100.549,137.858 100.208 C 137.743 99.908,137.323 99.747,136.924 99.850 C 136.526 99.954,135.850 99.781,135.422 99.467 C 134.714 98.948,132.829 99.177,132.012 99.881 C 131.598 100.237,133.085 100.788,134.476 100.794 C 135.288 100.797,136.064 100.980,136.200 101.200 C 136.336 101.420,136.966 101.600,137.600 101.600 C 138.234 101.600,138.875 101.797,139.024 102.038 C 139.173 102.280,139.807 102.402,140.432 102.310 C 141.170 102.202,141.646 102.344,141.788 102.714 C 141.937 103.100,142.330 103.204,143.004 103.035 C 143.576 102.891,144.000 102.958,144.000 103.191 C 144.000 103.603,147.791 105.600,148.575 105.600 C 148.809 105.601,149.540 106.071,150.200 106.645 C 155.257 111.046,157.464 110.909,159.116 106.092 C 159.362 105.373,160.601 102.943,161.869 100.692 C 163.137 98.441,164.673 95.555,165.281 94.277 C 166.423 91.881,167.252 90.539,172.282 82.949 C 175.574 77.982,182.498 70.939,185.477 69.528 C 186.399 69.091,188.649 67.204,190.477 65.335 C 194.436 61.284,195.168 60.792,195.476 61.970 C 195.711 62.869,196.200 63.047,196.610 62.384 C 196.751 62.155,197.593 61.509,198.480 60.949 C 199.367 60.390,200.177 59.608,200.281 59.212 C 200.496 58.391,203.143 57.783,203.770 58.410 C 203.985 58.625,204.478 58.800,204.866 58.800 C 205.698 58.800,208.419 61.081,208.289 61.669 C 207.991 63.024,209.598 62.893,211.067 61.443 C 215.226 57.341,224.536 62.571,233.780 74.200 C 235.005 75.740,236.455 77.518,237.003 78.150 C 237.551 78.783,238.000 79.383,238.000 79.483 C 238.000 79.681,240.386 82.996,244.200 88.097 C 247.341 92.299,249.530 95.537,250.145 96.893 L 250.642 97.985 253.021 95.218 C 254.329 93.695,255.685 92.439,256.033 92.425 C 256.382 92.411,257.192 91.865,257.833 91.211 C 258.475 90.557,259.205 90.017,259.456 90.011 C 259.706 90.005,260.321 89.668,260.823 89.262 L 261.734 88.524 260.167 88.579 C 259.305 88.608,258.597 88.806,258.594 89.016 C 258.581 89.828,257.913 90.400,256.980 90.400 C 256.440 90.400,255.784 90.756,255.507 91.200 C 255.232 91.640,254.770 92.000,254.480 92.000 C 254.190 92.000,254.035 92.135,254.134 92.300 C 254.371 92.691,253.360 93.626,253.043 93.309 C 252.909 93.176,252.800 93.277,252.800 93.533 C 252.800 93.790,252.530 94.000,252.200 94.000 C 251.870 94.000,251.621 94.135,251.647 94.300 C 251.761 95.019,251.571 95.600,251.223 95.600 C 251.016 95.600,250.924 95.195,251.020 94.700 C 251.134 94.105,250.889 93.551,250.297 93.065 C 249.804 92.661,249.644 92.458,249.941 92.615 C 250.894 93.114,248.548 89.763,246.900 88.271 C 246.405 87.823,246.000 87.128,246.000 86.728 C 246.000 86.328,245.717 86.000,245.371 86.000 C 244.396 86.000,243.708 85.081,243.873 83.999 C 243.991 83.226,243.919 83.121,243.534 83.506 C 242.968 84.072,241.800 81.846,242.268 81.091 C 242.432 80.824,242.285 80.758,241.877 80.915 C 241.377 81.107,241.124 80.815,240.811 79.683 C 240.323 77.922,239.616 76.676,239.606 77.562 C 239.601 77.994,239.417 77.958,238.809 77.409 C 238.375 77.015,238.112 76.542,238.226 76.358 C 238.340 76.174,238.151 75.478,237.806 74.812 C 237.127 73.498,236.663 73.168,237.087 74.300 C 237.314 74.904,237.260 74.927,236.699 74.471 C 236.333 74.173,236.155 73.663,236.292 73.305 C 236.441 72.915,236.373 72.770,236.114 72.929 C 235.882 73.073,235.476 72.667,235.210 72.024 C 234.944 71.382,234.473 70.760,234.163 70.641 C 233.854 70.522,233.600 70.160,233.600 69.836 C 233.600 69.512,233.422 69.137,233.205 69.003 C 232.969 68.857,232.913 69.050,233.066 69.479 C 233.244 69.978,232.935 69.838,232.061 69.024 C 231.144 68.170,230.935 67.761,231.299 67.530 C 231.757 67.240,231.435 67.037,230.700 67.153 C 230.535 67.179,230.445 66.979,230.500 66.709 C 230.555 66.440,230.184 66.156,229.676 66.078 C 229.167 66.001,228.653 65.683,228.534 65.371 C 228.414 65.060,228.155 64.904,227.958 65.026 C 227.761 65.148,227.600 64.792,227.600 64.236 C 227.600 63.510,227.434 63.289,227.010 63.451 C 226.358 63.702,225.585 63.066,224.832 61.661 C 224.561 61.153,224.119 60.822,223.851 60.925 C 223.582 61.028,222.562 60.566,221.584 59.899 C 220.259 58.996,219.132 58.612,217.173 58.397 C 214.304 58.082,209.920 56.229,208.139 54.578 C 206.983 53.507,206.767 53.478,205.000 54.156 M267.760 87.360 C 267.614 87.742,267.692 88.252,267.934 88.494 C 268.254 88.814,268.446 88.745,268.640 88.240 C 268.786 87.858,268.708 87.348,268.466 87.106 C 268.146 86.786,267.954 86.855,267.760 87.360 M264.286 93.319 C 263.937 94.228,264.706 95.144,265.193 94.400 C 265.410 94.070,265.534 93.631,265.468 93.425 C 265.271 92.799,264.512 92.731,264.286 93.319 M119.702 97.421 C 119.236 97.927,119.620 100.000,120.180 100.000 C 120.290 100.000,120.218 99.573,120.019 99.051 C 119.782 98.428,119.811 97.949,120.103 97.657 C 120.347 97.413,120.469 97.138,120.373 97.047 C 120.278 96.956,119.976 97.124,119.702 97.421 M250.400 101.400 C 250.400 101.730,250.580 102.000,250.800 102.000 C 251.020 102.000,251.200 101.730,251.200 101.400 C 251.200 101.070,251.020 100.800,250.800 100.800 C 250.580 100.800,250.400 101.070,250.400 101.400 M124.176 102.625 C 124.604 102.941,125.135 103.200,125.356 103.200 C 126.005 103.200,124.883 102.259,124.104 102.149 C 123.479 102.062,123.487 102.115,124.176 102.625 M252.297 103.250 C 251.914 103.464,251.600 103.901,251.600 104.220 C 251.600 105.107,252.711 104.910,253.010 103.970 C 253.341 102.925,253.176 102.758,252.297 103.250 M126.000 103.753 C 126.000 104.083,126.180 104.464,126.400 104.600 C 126.620 104.736,126.800 104.577,126.800 104.247 C 126.800 103.917,126.620 103.536,126.400 103.400 C 126.180 103.264,126.000 103.423,126.000 103.753 M253.335 107.824 C 253.035 108.607,253.396 108.964,254.183 108.662 C 254.974 108.358,254.975 107.753,254.185 107.450 C 253.831 107.314,253.470 107.472,253.335 107.824 M255.200 111.833 C 255.200 113.370,255.347 114.018,255.671 113.910 C 256.735 113.555,256.945 112.514,256.249 111.047 C 255.331 109.112,255.200 109.210,255.200 111.833 M312.935 113.024 C 312.606 113.883,312.882 114.022,313.712 113.415 C 314.338 112.957,314.348 112.866,313.797 112.654 C 313.429 112.513,313.073 112.666,312.935 113.024 M257.014 116.572 C 256.567 121.939,257.753 122.217,258.412 116.900 C 258.591 115.462,258.976 114.135,259.268 113.949 C 259.632 113.719,259.650 113.610,259.324 113.606 C 259.062 113.603,258.719 113.807,258.563 114.061 C 258.362 114.384,258.132 114.322,257.787 113.850 C 257.379 113.292,257.249 113.753,257.014 116.572 M137.071 113.900 C 136.905 114.181,137.440 116.001,137.687 115.999 C 137.749 115.999,137.838 115.459,137.884 114.799 C 137.961 113.699,137.493 113.182,137.071 113.900 M141.064 119.442 C 141.410 119.969,141.896 120.397,142.146 120.394 C 142.413 120.390,142.373 120.244,142.049 120.039 C 141.746 119.847,141.609 119.510,141.744 119.290 C 141.880 119.071,141.641 118.800,141.214 118.688 C 140.482 118.496,140.473 118.540,141.064 119.442 M295.200 121.000 C 295.200 121.330,295.440 121.600,295.733 121.600 C 296.027 121.600,296.267 121.330,296.267 121.000 C 296.267 120.670,296.027 120.400,295.733 120.400 C 295.440 120.400,295.200 120.670,295.200 121.000 M142.771 121.218 C 142.322 121.495,142.340 121.602,142.872 121.806 C 143.229 121.943,143.617 122.421,143.734 122.868 C 143.870 123.388,144.124 123.570,144.441 123.375 C 144.782 123.164,144.860 123.268,144.690 123.709 C 144.555 124.060,144.570 124.405,144.722 124.474 C 145.207 124.694,147.200 127.528,147.200 127.997 C 147.200 128.245,147.408 128.319,147.662 128.162 C 147.949 127.984,148.015 128.052,147.836 128.341 C 147.678 128.597,147.830 129.088,148.174 129.432 C 148.519 129.776,148.800 130.525,148.800 131.097 C 148.800 131.669,149.115 132.497,149.500 132.937 C 149.895 133.389,149.959 133.596,149.646 133.412 C 149.210 133.155,149.132 133.353,149.277 134.343 C 149.378 135.034,149.358 135.597,149.231 135.594 C 148.809 135.583,147.933 134.916,147.866 134.555 C 147.830 134.360,147.665 134.245,147.500 134.300 C 147.335 134.355,147.200 134.235,147.200 134.034 C 147.200 133.225,140.486 128.925,138.679 128.577 C 138.283 128.500,137.428 128.173,136.779 127.850 C 136.131 127.526,135.600 127.438,135.600 127.654 C 135.600 127.870,135.417 127.934,135.193 127.796 C 134.970 127.658,134.890 127.378,135.016 127.174 C 135.151 126.955,134.825 126.962,134.223 127.191 C 133.559 127.444,133.200 127.443,133.200 127.190 C 133.200 126.976,133.425 126.797,133.700 126.794 C 134.077 126.789,134.070 126.705,133.671 126.452 C 133.155 126.125,132.829 126.143,130.079 126.652 C 129.082 126.837,128.632 126.723,128.240 126.188 C 127.718 125.473,125.200 125.040,125.200 125.664 C 125.200 125.849,123.299 126.000,120.976 126.000 C 116.126 126.000,115.674 126.596,120.292 126.903 C 122.001 127.017,124.556 127.493,125.969 127.960 C 127.545 128.482,129.013 128.722,129.769 128.580 C 131.224 128.309,138.234 130.567,141.135 132.242 C 145.098 134.530,148.477 136.985,149.018 137.971 C 150.230 140.176,150.651 140.500,151.563 139.930 C 152.787 139.166,152.162 135.042,150.536 133.159 C 150.149 132.710,150.089 132.230,150.336 131.561 C 150.531 131.035,150.550 130.153,150.378 129.602 C 150.207 129.051,149.960 128.113,149.830 127.517 C 149.530 126.144,148.039 124.600,147.012 124.600 C 146.578 124.600,146.009 124.170,145.747 123.643 C 144.989 122.123,143.401 120.829,142.771 121.218 M290.200 123.676 C 289.320 124.139,288.365 124.851,288.077 125.259 C 287.790 125.666,287.326 126.000,287.045 126.000 C 286.292 126.000,281.588 130.379,281.175 131.465 C 280.980 131.979,280.552 132.400,280.224 132.400 C 279.633 132.400,278.800 133.555,278.800 134.374 C 278.800 135.062,279.780 134.864,280.725 133.984 C 281.206 133.536,281.600 133.311,281.600 133.484 C 281.601 133.658,282.024 133.308,282.541 132.707 C 283.058 132.106,283.568 131.701,283.674 131.807 C 283.935 132.068,287.827 127.923,287.700 127.519 C 287.645 127.344,287.825 127.245,288.100 127.300 C 288.375 127.355,288.552 127.165,288.493 126.879 C 288.358 126.221,289.176 125.389,290.311 125.028 C 290.791 124.876,291.166 124.627,291.145 124.476 C 291.039 123.735,291.248 123.456,291.551 123.934 C 291.808 124.340,291.941 124.268,292.107 123.634 C 292.374 122.613,292.217 122.616,290.200 123.676 M256.423 124.769 C 255.816 126.210,255.796 128.756,256.387 129.347 C 256.815 129.775,257.315 126.715,257.132 124.789 L 257.000 123.400 256.423 124.769 M262.243 124.233 C 262.109 124.581,262.000 125.650,262.000 126.609 C 262.000 127.568,261.820 128.464,261.600 128.600 C 261.380 128.736,261.207 129.152,261.216 129.524 C 261.228 130.007,261.570 129.805,262.416 128.815 C 263.722 127.288,263.903 126.246,263.017 125.360 C 262.696 125.039,262.536 124.512,262.660 124.188 C 262.784 123.865,262.796 123.600,262.686 123.600 C 262.576 123.600,262.376 123.885,262.243 124.233 M151.478 131.856 C 151.158 132.175,151.519 132.800,152.024 132.800 C 152.231 132.800,152.400 132.530,152.400 132.200 C 152.400 131.581,151.928 131.405,151.478 131.856 M268.984 134.827 C 268.617 135.420,268.962 135.666,269.740 135.368 C 270.101 135.229,270.296 134.955,270.174 134.758 C 269.875 134.274,269.305 134.306,268.984 134.827 M97.880 140.385 C 98.035 140.978,98.235 141.103,98.578 140.818 C 98.901 140.550,99.205 140.565,99.502 140.862 C 99.825 141.185,99.915 141.102,99.836 140.552 C 99.768 140.079,99.345 139.754,98.695 139.676 C 97.822 139.572,97.696 139.682,97.880 140.385 M243.492 150.642 C 243.331 150.802,243.200 151.209,243.200 151.547 C 243.200 151.997,243.318 152.042,243.645 151.715 C 243.890 151.470,244.021 151.063,243.937 150.810 C 243.852 150.557,243.652 150.481,243.492 150.642 M238.534 154.426 C 238.277 154.683,237.666 155.097,237.175 155.346 C 236.685 155.596,236.132 156.213,235.948 156.718 C 235.626 157.598,235.649 157.611,236.493 157.020 C 237.312 156.446,237.407 156.466,237.857 157.302 L 238.340 158.200 238.763 157.091 C 239.056 156.326,239.561 155.908,240.393 155.741 C 241.552 155.510,242.131 154.406,241.100 154.395 C 240.825 154.392,240.240 154.292,239.800 154.174 C 239.360 154.056,238.790 154.169,238.534 154.426 M235.093 158.503 C 234.821 159.209,235.452 161.482,235.817 161.116 C 235.925 161.009,235.866 160.219,235.688 159.360 C 235.448 158.209,235.292 157.984,235.093 158.503 M269.200 158.829 C 269.200 159.367,270.211 160.400,270.738 160.400 C 270.955 160.400,271.193 160.556,271.267 160.747 C 271.340 160.938,271.805 161.220,272.300 161.374 C 273.373 161.708,273.557 160.910,272.500 160.510 C 272.115 160.364,271.581 160.055,271.314 159.822 C 269.484 158.232,269.200 158.099,269.200 158.829 M136.977 161.367 C 136.550 161.679,136.310 162.044,136.443 162.177 C 136.839 162.572,138.000 161.960,138.000 161.357 C 138.000 160.665,137.936 160.666,136.977 161.367 M235.600 162.141 C 235.600 162.550,234.891 162.672,232.700 162.641 C 230.451 162.609,229.486 162.783,228.400 163.417 C 227.630 163.866,226.145 164.556,225.100 164.950 C 222.866 165.792,222.805 165.972,224.435 166.900 C 226.400 168.018,228.388 167.748,227.169 166.529 C 226.075 165.435,230.687 163.369,232.724 164.041 C 233.942 164.443,234.203 164.411,234.646 163.805 C 235.041 163.265,235.479 163.163,236.548 163.364 C 238.189 163.672,238.908 162.960,237.785 162.139 C 236.834 161.444,235.600 161.445,235.600 162.141 M274.800 162.887 C 274.800 163.232,275.096 163.628,275.457 163.767 C 276.386 164.123,276.411 163.918,275.548 163.030 C 274.929 162.393,274.800 162.369,274.800 162.887 M133.240 165.249 C 132.778 165.745,132.414 166.342,132.432 166.575 C 132.449 166.809,132.554 166.774,132.666 166.498 C 132.777 166.221,133.024 166.091,133.214 166.209 C 133.587 166.439,134.591 164.857,134.273 164.539 C 134.167 164.434,133.702 164.753,133.240 165.249 M277.433 166.613 C 277.130 167.820,277.870 170.127,278.446 169.771 C 278.957 169.456,278.882 168.286,278.256 166.797 L 277.711 165.502 277.433 166.613 M234.000 167.025 C 233.230 167.316,232.150 167.568,231.600 167.584 C 230.258 167.622,231.363 168.380,232.800 168.407 C 233.350 168.417,234.097 168.651,234.459 168.927 C 235.193 169.485,238.530 169.333,238.174 168.758 C 238.052 168.561,238.188 168.398,238.476 168.395 C 238.764 168.393,238.217 167.943,237.259 167.395 C 236.302 166.848,235.492 166.421,235.459 166.448 C 235.427 166.474,234.770 166.734,234.000 167.025 M237.000 168.400 C 237.136 168.620,236.887 168.800,236.447 168.800 C 236.007 168.800,235.536 168.620,235.400 168.400 C 235.264 168.180,235.513 168.000,235.953 168.000 C 236.393 168.000,236.864 168.180,237.000 168.400 M170.412 169.984 C 170.088 170.189,169.940 170.473,170.083 170.616 C 170.446 170.979,172.800 170.418,172.800 169.968 C 172.800 169.492,171.173 169.503,170.412 169.984 M132.542 171.393 C 132.684 171.763,132.800 172.141,132.800 172.233 C 132.800 172.325,133.070 172.400,133.400 172.400 C 134.258 172.400,134.141 171.880,133.142 171.257 C 132.382 170.782,132.314 170.798,132.542 171.393 M161.000 174.400 C 160.864 174.620,161.023 174.800,161.353 174.800 C 161.683 174.800,162.064 174.620,162.200 174.400 C 162.336 174.180,162.177 174.000,161.847 174.000 C 161.517 174.000,161.136 174.180,161.000 174.400 M197.900 182.120 C 196.710 182.590,196.397 183.600,197.441 183.600 C 197.794 183.600,199.729 184.185,201.741 184.899 C 205.785 186.335,214.564 186.672,221.600 185.661 C 223.250 185.424,227.390 185.119,230.800 184.984 C 237.709 184.710,238.715 184.555,238.033 183.873 C 237.138 182.978,224.980 183.086,221.887 184.016 C 220.395 184.464,219.032 184.743,218.858 184.636 C 218.685 184.529,218.065 184.689,217.482 184.991 C 216.742 185.375,216.026 185.438,215.111 185.200 C 214.390 185.012,212.450 184.751,210.800 184.619 C 205.321 184.183,203.417 183.790,201.449 182.690 C 199.297 181.487,199.442 181.510,197.900 182.120 M194.302 185.189 C 193.327 186.677,193.305 186.800,194.014 186.800 C 195.034 186.800,196.180 185.050,195.710 184.211 C 195.420 183.693,195.165 183.871,194.302 185.189 M138.934 197.850 C 139.076 198.104,138.445 198.803,137.493 199.449 C 136.562 200.081,135.710 200.689,135.600 200.800 C 135.490 200.910,134.898 201.260,134.285 201.576 C 133.335 202.066,133.266 202.205,133.818 202.514 C 134.281 202.773,134.722 202.637,135.359 202.038 C 135.850 201.577,136.430 201.200,136.647 201.200 C 137.600 201.200,139.773 198.412,139.221 197.899 C 138.915 197.616,138.791 197.595,138.934 197.850 M271.200 198.311 C 271.200 199.329,280.389 206.000,281.790 206.000 C 282.350 206.000,280.713 203.658,279.133 202.200 L 277.400 200.600 278.900 202.217 C 281.223 204.721,280.699 204.611,277.053 201.829 C 273.560 199.164,271.200 197.745,271.200 198.311 M285.600 200.600 C 285.600 200.930,285.780 201.200,286.000 201.200 C 286.220 201.200,286.400 200.930,286.400 200.600 C 286.400 200.270,286.220 200.000,286.000 200.000 C 285.780 200.000,285.600 200.270,285.600 200.600 M130.000 204.787 C 129.135 205.453,129.108 205.537,129.800 205.409 C 130.240 205.328,130.825 205.247,131.100 205.231 C 131.624 205.199,131.821 203.993,131.300 204.009 C 131.135 204.014,130.550 204.364,130.000 204.787 M287.042 205.835 C 286.909 206.181,287.075 206.855,287.412 207.333 C 288.008 208.179,288.021 208.168,287.924 206.870 C 287.813 205.370,287.404 204.891,287.042 205.835 M127.099 207.301 C 126.715 207.775,126.400 208.336,126.400 208.548 C 126.400 208.760,126.285 208.819,126.145 208.678 C 125.745 208.278,123.559 210.010,123.857 210.492 C 124.004 210.730,123.949 210.816,123.735 210.684 C 123.325 210.430,119.600 214.093,119.600 214.750 C 119.600 214.961,119.433 215.193,119.230 215.267 C 119.026 215.340,118.801 215.670,118.730 216.000 C 118.658 216.330,118.420 216.749,118.200 216.930 C 117.963 217.126,118.044 217.187,118.400 217.080 C 118.730 216.981,118.955 216.697,118.900 216.450 C 118.845 216.203,119.071 216.000,119.403 216.000 C 119.734 216.000,120.409 215.510,120.903 214.911 C 121.396 214.313,123.325 212.337,125.190 210.521 C 127.392 208.375,128.442 207.082,128.189 206.829 C 127.935 206.575,127.554 206.741,127.099 207.301 M287.200 210.487 C 287.200 211.625,287.781 212.278,288.196 211.607 C 288.333 211.384,288.166 210.801,287.823 210.312 L 287.200 209.422 287.200 210.487 M290.386 214.009 C 289.701 214.432,291.925 216.983,293.290 217.340 C 294.080 217.546,292.832 215.686,291.900 215.268 C 291.735 215.194,291.600 214.889,291.600 214.590 C 291.600 213.838,291.072 213.585,290.386 214.009 M115.628 219.547 C 115.408 219.958,115.335 220.402,115.467 220.533 C 115.851 220.918,117.200 220.025,117.200 219.386 C 117.200 218.549,116.102 218.661,115.628 219.547 M294.000 219.053 C 294.000 219.408,295.649 220.800,296.070 220.800 C 296.262 220.800,296.124 220.350,295.763 219.800 C 295.176 218.904,294.000 218.406,294.000 219.053 M113.278 222.596 C 112.798 223.148,112.522 223.600,112.665 223.600 C 112.807 223.600,112.581 224.005,112.162 224.500 C 111.401 225.399,111.401 225.399,112.231 224.700 C 112.689 224.315,113.267 224.000,113.517 224.000 C 114.170 224.000,114.952 222.392,114.513 221.953 C 114.298 221.738,113.798 221.998,113.278 222.596 M299.619 226.100 C 299.836 226.595,300.121 227.315,300.253 227.700 C 300.385 228.085,300.651 228.400,300.844 228.400 C 301.037 228.400,301.142 228.085,301.078 227.700 C 300.907 226.680,300.032 225.200,299.599 225.200 C 299.374 225.200,299.382 225.558,299.619 226.100 M301.528 228.705 C 301.343 229.360,301.484 229.724,302.036 230.019 C 302.559 230.299,302.800 230.298,302.800 230.014 C 302.800 229.786,302.633 229.600,302.428 229.600 C 302.223 229.600,301.994 229.195,301.920 228.700 L 301.784 227.800 301.528 228.705 M303.300 232.293 C 302.615 232.531,302.668 233.200,303.371 233.200 C 303.685 233.200,304.024 233.515,304.124 233.900 C 304.278 234.488,304.314 234.472,304.347 233.800 C 304.400 232.755,303.928 232.076,303.300 232.293 M304.651 235.812 C 304.486 236.241,304.582 236.669,304.886 236.862 C 306.047 237.598,306.357 237.041,305.464 235.820 C 304.949 235.115,304.918 235.115,304.651 235.812 M306.000 240.904 C 306.000 241.181,306.343 241.622,306.762 241.883 C 307.351 242.252,307.507 242.251,307.450 241.879 C 307.264 240.650,306.000 239.800,306.000 240.904 M307.867 247.867 C 307.720 248.013,307.603 250.488,307.606 253.367 C 307.612 258.547,307.924 260.286,308.640 259.143 C 309.116 258.384,309.227 248.864,308.764 248.578 C 308.557 248.450,308.491 248.177,308.617 247.972 C 308.879 247.548,308.271 247.462,307.867 247.867 M306.983 263.100 C 306.856 263.705,306.583 264.513,306.376 264.895 C 305.907 265.762,305.886 267.482,306.342 267.764 C 306.762 268.024,307.696 266.078,307.389 265.582 C 307.267 265.385,307.452 264.673,307.800 264.000 C 308.417 262.808,308.329 262.000,307.584 262.000 C 307.381 262.000,307.111 262.495,306.983 263.100 M305.600 273.121 C 305.600 273.371,305.330 273.471,305.000 273.345 C 304.348 273.095,304.112 274.575,304.742 274.964 C 305.126 275.201,306.149 273.216,305.815 272.882 C 305.697 272.763,305.600 272.871,305.600 273.121 M302.795 278.300 C 302.792 278.905,302.691 279.850,302.572 280.400 C 302.422 281.090,302.607 280.919,303.168 279.847 C 303.616 278.993,303.868 278.110,303.729 277.885 C 303.584 277.651,303.673 277.598,303.938 277.762 C 304.192 277.919,304.400 277.857,304.400 277.624 C 304.400 277.391,304.040 277.200,303.600 277.200 C 302.995 277.200,302.799 277.468,302.795 278.300 M300.100 284.217 C 299.825 284.519,299.600 285.134,299.600 285.583 C 299.600 286.032,299.420 286.400,299.200 286.400 C 298.980 286.400,298.800 286.760,298.800 287.200 C 298.800 287.640,298.620 288.000,298.400 288.000 C 298.180 288.000,298.000 288.450,298.000 289.000 C 298.000 289.550,297.809 290.000,297.576 290.000 C 297.343 290.000,297.281 290.207,297.437 290.460 C 297.604 290.730,298.255 289.820,299.016 288.255 C 299.728 286.789,300.539 285.315,300.818 284.978 C 301.474 284.188,300.788 283.461,300.100 284.217 M295.646 291.833 C 295.199 292.401,294.729 293.195,294.601 293.597 C 294.473 293.999,293.926 294.619,293.384 294.973 C 292.843 295.328,292.400 295.779,292.400 295.974 C 292.400 296.170,291.770 297.287,291.000 298.456 C 290.230 299.625,289.600 300.985,289.600 301.478 C 289.600 302.819,290.575 302.230,291.406 300.387 C 291.794 299.526,292.251 298.908,292.421 299.013 C 292.810 299.254,294.864 295.628,294.590 295.184 C 294.478 295.003,294.598 294.725,294.855 294.566 C 295.166 294.374,295.226 294.466,295.033 294.838 C 294.873 295.147,295.197 294.867,295.753 294.216 C 296.310 293.564,296.691 292.958,296.601 292.868 C 296.512 292.778,296.701 292.442,297.023 292.120 C 297.601 291.542,297.478 290.800,296.805 290.800 C 296.614 290.800,296.092 291.265,295.646 291.833 M117.398 296.803 C 117.261 297.024,117.430 297.313,117.772 297.445 C 118.115 297.576,118.295 297.846,118.172 298.045 C 118.050 298.243,118.231 298.514,118.575 298.646 C 118.919 298.778,119.200 299.108,119.200 299.381 C 119.200 300.012,120.724 301.410,121.053 301.080 C 121.190 300.944,120.682 300.230,119.925 299.495 C 119.167 298.759,118.619 297.942,118.707 297.679 C 118.795 297.415,118.571 297.200,118.210 297.200 C 117.848 297.200,117.664 297.020,117.800 296.800 C 117.936 296.580,117.957 296.400,117.847 296.400 C 117.737 296.400,117.535 296.581,117.398 296.803 M122.000 303.200 C 122.000 303.420,122.180 303.600,122.400 303.600 C 122.620 303.600,122.800 303.954,122.800 304.386 C 122.800 304.818,123.130 305.348,123.533 305.564 C 124.624 306.148,124.497 304.861,123.352 303.715 C 122.354 302.718,122.000 302.583,122.000 303.200 M125.200 307.000 C 125.200 307.110,125.560 307.560,126.000 308.000 C 126.440 308.440,126.800 308.607,126.800 308.371 C 126.800 308.136,126.543 307.686,126.229 307.371 C 125.652 306.795,125.200 306.632,125.200 307.000 M198.502 340.282 C 198.548 340.887,198.956 341.006,201.096 341.038 C 203.215 341.069,203.615 340.970,203.513 340.438 C 203.321 339.429,198.425 339.276,198.502 340.282 M218.100 339.865 C 217.193 340.231,217.580 340.897,218.588 340.704 C 219.131 340.601,219.481 340.670,219.364 340.858 C 219.248 341.046,219.440 341.200,219.790 341.200 C 220.304 341.200,220.345 341.044,220.000 340.400 C 219.578 339.611,219.078 339.470,218.100 339.865 \\\" stroke=\\\"none\\\" fill=\\\"#a0736e\\\" fill-rule=\\\"evenodd\\\"></path></g></svg>\");\n\n//# sourceURL=webpack://templates/./src/images/imageBetweenTables.svg?");

/***/ }),

/***/ "./src/images/left-image.svg":
/*!***********************************!*\
  !*** ./src/images/left-image.svg ***!
  \***********************************/
/***/ (() => {

eval("throw new Error(\"Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\\n> <svg id=\\\"svg\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" width=\\\"400\\\" height=\\\"408.9068825910931\\\" viewBox=\\\"0, 0, 400,408.9068825910931\\\"><g id=\\\"svgg\\\"><path id=\\\"path0\\\" d=\\\"M179.000 0.252 C 177.263 0.513,173.600 1.667,173.600 1.955 C 173.600 2.090,173.143 2.226,172.584 2.259 C 171.243 2.336,166.358 4.889,163.601 6.953 C 162.391 7.859,160.592 9.119,159.604 9.753 C 154.698 12.899,154.281 13.513,154.759 16.886 C 154.889 17.802,156.454 17.989,157.894 17.260 C 158.722 16.841,159.972 16.374,160.671 16.223 C 161.369 16.073,162.205 15.547,162.527 15.055 C 162.849 14.563,163.718 13.960,164.456 13.714 C 165.195 13.468,166.790 12.915,168.000 12.486 C 169.210 12.056,171.010 11.482,172.000 11.210 C 172.990 10.939,174.238 10.544,174.773 10.333 C 175.309 10.123,176.707 9.880,177.880 9.795 C 179.053 9.709,180.185 9.533,180.395 9.403 C 181.091 8.973,195.750 9.115,197.197 9.565 C 199.104 10.158,201.694 10.112,202.574 9.469 C 204.017 8.414,203.156 5.606,201.320 5.381 C 199.689 5.181,198.000 4.681,198.000 4.397 C 198.000 3.992,194.416 2.301,191.200 1.189 C 188.632 0.300,182.049 -0.205,179.000 0.252 M189.000 2.274 C 190.980 2.647,192.690 3.065,192.800 3.202 C 192.910 3.339,194.374 4.116,196.052 4.927 C 199.245 6.471,200.243 7.282,199.811 7.982 C 199.476 8.525,196.285 8.525,195.742 7.982 C 195.223 7.463,182.240 7.736,178.200 8.350 C 176.660 8.584,174.634 8.891,173.697 9.030 C 172.761 9.170,171.895 9.445,171.774 9.642 C 171.652 9.839,171.124 10.000,170.600 10.000 C 170.076 10.000,169.536 10.180,169.400 10.400 C 169.264 10.620,168.711 10.800,168.171 10.800 C 167.631 10.800,166.877 10.962,166.495 11.159 C 158.019 15.541,156.252 15.678,160.677 11.610 C 169.715 3.301,178.717 0.334,189.000 2.274 M187.200 14.065 C 186.650 14.313,185.030 14.479,183.600 14.433 C 181.882 14.377,180.118 14.627,178.400 15.169 C 176.970 15.620,175.395 15.992,174.900 15.995 C 174.405 15.998,174.000 16.180,174.000 16.400 C 174.000 16.620,173.761 16.800,173.469 16.800 C 173.177 16.800,171.830 17.250,170.477 17.800 C 169.123 18.350,167.494 18.800,166.857 18.800 C 166.219 18.800,165.480 19.063,165.213 19.385 C 164.946 19.706,164.339 20.086,163.864 20.229 C 163.389 20.373,162.550 20.891,162.000 21.381 C 161.040 22.237,156.057 25.350,153.261 26.840 C 152.525 27.232,151.715 27.806,151.461 28.115 C 151.208 28.424,149.248 29.982,147.107 31.577 C 144.966 33.173,141.159 36.441,138.648 38.839 C 136.136 41.238,133.881 43.200,133.636 43.200 C 132.302 43.200,130.002 46.197,130.259 47.600 C 130.710 50.061,131.693 50.177,135.024 48.163 C 143.456 43.062,153.863 38.258,160.926 36.204 C 162.177 35.841,163.200 35.421,163.200 35.272 C 163.200 35.122,163.674 34.973,164.253 34.939 C 164.831 34.906,165.416 34.726,165.552 34.539 C 165.689 34.353,166.425 34.169,167.190 34.131 C 167.954 34.093,168.644 33.867,168.724 33.629 C 168.803 33.390,169.012 33.284,169.187 33.392 C 169.682 33.698,176.000 32.332,176.000 31.919 C 176.000 31.718,176.173 31.659,176.384 31.790 C 176.594 31.920,178.452 31.756,180.511 31.424 C 195.151 29.069,207.586 28.974,224.400 31.089 C 227.370 31.463,230.385 31.776,231.100 31.784 C 231.815 31.793,232.400 31.935,232.400 32.100 C 232.400 32.803,234.034 32.321,234.605 31.449 C 235.447 30.163,234.795 28.770,232.837 27.669 C 232.022 27.211,230.714 26.327,229.931 25.704 C 227.740 23.963,214.574 17.552,211.691 16.823 C 210.871 16.615,209.480 16.243,208.600 15.996 C 201.530 14.011,189.683 12.941,187.200 14.065 M201.600 15.943 C 202.810 16.163,204.610 16.551,205.600 16.805 C 206.590 17.058,208.075 17.359,208.900 17.475 C 209.725 17.590,210.400 17.845,210.400 18.042 C 210.400 18.239,210.762 18.400,211.205 18.400 C 211.648 18.400,212.323 18.559,212.705 18.753 C 213.440 19.127,215.263 19.903,216.600 20.411 C 219.270 21.426,225.916 24.926,228.062 26.447 C 228.646 26.861,229.283 27.200,229.477 27.200 C 230.225 27.200,232.527 29.470,232.244 29.929 C 231.896 30.492,228.642 30.557,227.641 30.022 C 226.678 29.507,216.104 28.386,212.400 28.407 C 210.750 28.416,206.684 28.312,203.364 28.176 C 197.969 27.955,197.254 28.003,196.635 28.622 C 196.022 29.236,195.698 29.260,193.797 28.834 C 191.395 28.297,185.254 28.771,181.068 29.817 C 179.785 30.138,178.255 30.403,177.668 30.407 C 176.400 30.415,171.883 31.341,168.800 32.225 C 167.590 32.572,165.880 33.044,165.000 33.275 C 164.120 33.505,162.500 34.010,161.400 34.396 C 151.834 37.755,151.794 37.771,143.600 41.761 C 139.195 43.906,137.454 44.879,137.267 45.300 C 137.193 45.465,136.872 45.600,136.553 45.600 C 136.233 45.600,135.523 45.894,134.973 46.254 C 133.798 47.024,133.366 46.784,133.953 45.687 C 134.904 43.911,151.263 29.600,152.342 29.600 C 152.557 29.600,152.793 29.453,152.867 29.272 C 153.056 28.807,157.869 25.600,158.378 25.600 C 158.610 25.600,158.800 25.464,158.800 25.298 C 158.800 25.131,159.385 24.741,160.100 24.430 C 160.815 24.119,161.490 23.750,161.600 23.610 C 161.840 23.305,167.104 20.854,170.400 19.513 C 170.950 19.290,171.713 18.948,172.095 18.753 C 172.477 18.559,173.141 18.400,173.571 18.400 C 174.001 18.400,174.452 18.240,174.573 18.044 C 174.694 17.849,175.379 17.592,176.096 17.473 C 176.813 17.355,178.210 17.051,179.200 16.798 C 180.190 16.546,182.026 16.212,183.279 16.057 C 184.533 15.902,185.703 15.631,185.878 15.455 C 186.296 15.037,198.759 15.424,201.600 15.943 M188.200 34.033 C 186.880 34.240,184.319 34.691,182.510 35.035 C 180.700 35.378,179.046 35.552,178.834 35.421 C 178.623 35.290,178.303 35.412,178.125 35.692 C 177.773 36.242,174.767 37.463,172.200 38.098 C 171.320 38.315,170.330 38.653,170.000 38.848 C 169.670 39.043,168.950 39.384,168.400 39.606 C 167.850 39.828,166.708 40.368,165.862 40.805 C 165.016 41.242,163.992 41.600,163.585 41.600 C 163.178 41.600,162.610 41.926,162.323 42.324 C 161.833 43.002,159.011 44.893,155.045 47.200 C 154.100 47.750,152.533 48.875,151.563 49.701 C 150.593 50.526,147.892 52.715,145.559 54.566 C 143.227 56.416,140.503 58.734,139.507 59.716 C 138.510 60.698,137.539 61.569,137.348 61.651 C 136.662 61.945,132.800 66.721,132.800 67.274 C 132.800 69.108,134.784 69.221,137.422 67.537 C 142.401 64.359,157.414 57.628,159.574 57.606 C 159.889 57.603,160.879 57.260,161.774 56.845 C 162.668 56.430,163.850 55.967,164.400 55.818 C 164.950 55.668,166.030 55.368,166.800 55.150 C 170.176 54.197,171.181 53.959,174.200 53.404 C 175.960 53.080,178.077 52.811,178.905 52.807 C 179.733 52.803,180.723 52.631,181.105 52.424 C 181.487 52.217,182.295 51.944,182.900 51.817 C 185.210 51.330,184.224 50.281,181.700 50.540 C 179.547 50.761,178.427 50.954,173.100 52.020 C 171.945 52.252,170.324 52.541,169.497 52.663 C 168.671 52.785,167.895 53.045,167.774 53.242 C 167.652 53.439,167.111 53.600,166.571 53.600 C 166.031 53.600,165.277 53.762,164.895 53.961 C 164.513 54.160,163.390 54.540,162.400 54.807 C 160.556 55.303,159.133 55.822,157.905 56.447 C 157.523 56.641,156.859 56.800,156.429 56.800 C 155.999 56.800,155.536 56.980,155.400 57.200 C 155.264 57.420,154.891 57.600,154.572 57.600 C 153.734 57.600,142.906 62.673,139.206 64.799 C 137.752 65.635,136.400 65.851,136.400 65.248 C 136.400 64.751,143.217 58.346,146.840 55.439 C 152.480 50.915,152.891 50.601,153.646 50.239 C 154.061 50.040,154.400 49.725,154.400 49.539 C 154.400 49.352,154.636 49.200,154.925 49.200 C 155.213 49.200,155.798 48.885,156.225 48.500 C 160.094 45.007,173.858 38.549,180.800 36.969 C 186.920 35.577,187.960 35.472,195.400 35.489 C 202.425 35.505,204.235 35.670,209.200 36.749 C 215.459 38.108,225.466 42.325,231.146 45.997 C 232.511 46.878,233.709 47.600,233.809 47.600 C 233.909 47.600,234.308 47.865,234.695 48.190 C 235.083 48.514,236.378 49.459,237.573 50.290 C 238.768 51.120,239.758 51.980,239.773 52.200 C 239.811 52.767,237.631 52.945,236.635 52.456 C 236.176 52.230,235.080 51.950,234.200 51.834 C 233.320 51.718,231.430 51.428,230.000 51.189 C 225.583 50.452,222.747 50.293,222.284 50.756 C 221.618 51.422,222.132 51.658,225.077 52.044 C 226.575 52.241,228.790 52.580,230.000 52.799 C 239.368 54.492,241.286 54.660,241.961 53.847 C 242.735 52.914,242.202 51.501,240.773 50.697 C 240.086 50.310,239.430 49.635,239.315 49.197 C 239.200 48.758,238.880 48.400,238.602 48.400 C 238.325 48.400,237.889 48.148,237.633 47.839 C 237.377 47.531,236.697 47.160,236.122 47.016 C 235.547 46.872,234.319 46.232,233.393 45.595 C 232.466 44.958,231.470 44.383,231.179 44.318 C 230.888 44.253,230.279 43.812,229.825 43.337 C 228.920 42.390,221.067 38.801,219.671 38.695 C 219.192 38.659,218.800 38.519,218.800 38.384 C 218.800 37.675,206.363 34.245,204.611 34.471 C 204.165 34.528,203.530 34.403,203.200 34.193 C 202.394 33.679,191.212 33.560,188.200 34.033 M311.163 41.370 C 311.070 41.464,309.698 41.628,308.114 41.736 C 306.530 41.843,305.056 42.042,304.837 42.177 C 304.619 42.312,303.126 42.762,301.520 43.176 C 299.914 43.590,297.300 44.575,295.711 45.365 C 294.122 46.154,292.678 46.800,292.502 46.800 C 292.326 46.800,291.246 47.416,290.102 48.169 C 288.959 48.923,287.658 49.655,287.212 49.796 C 286.765 49.938,286.400 50.195,286.400 50.369 C 286.400 50.659,280.435 54.773,277.200 56.713 C 275.048 58.004,270.353 60.228,268.586 60.794 C 267.714 61.074,266.587 61.459,266.081 61.651 C 265.576 61.843,264.913 62.000,264.607 62.000 C 264.302 62.000,263.556 62.189,262.950 62.419 C 262.344 62.649,260.308 62.945,258.424 63.076 C 253.515 63.418,252.882 63.420,250.094 63.099 C 247.471 62.798,246.000 63.473,246.000 64.979 C 246.000 65.994,254.347 75.380,255.102 75.214 C 255.158 75.202,256.482 75.835,258.043 76.622 C 259.604 77.408,260.975 77.958,261.089 77.845 C 261.202 77.731,261.532 77.875,261.821 78.164 C 262.110 78.453,263.106 78.811,264.035 78.959 C 264.964 79.108,265.921 79.353,266.162 79.504 C 267.211 80.162,278.240 78.698,280.333 77.623 C 287.865 73.755,288.863 73.551,289.738 75.700 C 290.118 76.635,290.652 77.850,290.925 78.400 C 291.524 79.611,291.476 90.769,290.864 92.600 C 290.643 93.260,290.070 95.060,289.590 96.600 C 288.597 99.791,286.306 104.686,283.553 109.500 C 282.515 111.315,281.786 112.803,281.933 112.806 C 282.080 112.809,282.009 112.944,281.776 113.106 C 280.752 113.816,276.000 121.128,276.000 121.994 C 276.000 122.197,275.595 122.794,275.100 123.321 C 273.455 125.071,268.114 134.427,267.773 136.155 C 267.692 136.570,267.367 137.200,267.052 137.555 C 265.995 138.747,263.490 145.488,263.643 146.731 C 263.688 147.099,263.517 147.907,263.263 148.526 C 263.008 149.145,262.800 150.530,262.800 151.602 C 262.800 152.675,262.620 153.664,262.400 153.800 C 261.789 154.177,261.924 155.485,262.600 155.745 C 262.930 155.871,263.200 156.246,263.200 156.578 C 263.200 158.760,266.338 158.490,267.048 156.247 C 267.195 155.781,267.679 154.590,268.123 153.600 C 268.568 152.610,268.895 151.647,268.852 151.459 C 268.746 151.002,273.072 142.922,274.259 141.362 C 274.776 140.681,275.202 140.051,275.205 139.962 C 275.208 139.873,278.493 136.445,282.505 132.344 C 286.517 128.243,290.342 124.283,291.005 123.544 C 291.667 122.805,294.248 119.950,296.740 117.200 C 300.820 112.699,304.800 107.664,304.800 107.007 C 304.800 106.869,305.318 106.202,305.952 105.524 C 306.991 104.412,309.738 98.144,309.541 97.332 C 309.497 97.149,309.652 96.550,309.885 96.000 C 311.330 92.597,311.861 79.788,310.722 75.815 C 310.467 74.927,310.301 74.033,310.353 73.829 C 310.505 73.233,309.567 67.894,309.119 66.800 C 308.612 65.562,308.616 58.098,309.124 56.773 C 309.330 56.238,309.721 55.101,309.994 54.247 C 310.654 52.182,313.188 48.542,315.844 45.843 C 318.234 43.414,318.260 43.350,317.377 42.089 C 316.801 41.266,311.841 40.693,311.163 41.370 M315.716 43.177 C 315.889 43.339,315.348 44.175,314.514 45.036 C 313.679 45.896,312.556 47.230,312.017 48.000 C 311.479 48.770,310.926 49.490,310.789 49.600 C 310.300 49.993,308.709 53.324,307.606 56.266 C 307.040 57.774,307.282 65.965,307.981 69.000 C 309.117 73.925,309.312 75.922,309.467 84.165 C 309.574 89.905,309.487 93.073,309.215 93.345 C 308.987 93.573,308.800 94.318,308.800 95.000 C 308.800 95.682,308.651 96.411,308.470 96.620 C 308.288 96.829,307.890 97.810,307.585 98.800 C 307.280 99.790,306.529 101.463,305.915 102.518 C 305.302 103.572,304.800 104.546,304.800 104.681 C 304.800 105.141,297.160 114.905,295.623 116.409 C 295.280 116.744,293.656 118.454,292.013 120.209 C 290.371 121.964,286.501 126.024,283.413 129.232 C 272.260 140.820,271.646 141.666,266.622 152.379 C 266.060 153.577,265.600 154.792,265.600 155.079 C 265.600 155.808,264.936 155.731,264.643 154.967 C 264.241 153.921,264.370 148.066,264.800 147.800 C 265.020 147.664,265.200 147.170,265.200 146.703 C 265.200 143.174,270.980 131.835,278.415 120.777 C 279.727 118.827,280.800 117.044,280.800 116.815 C 280.800 116.587,280.980 116.400,281.200 116.400 C 281.420 116.400,281.600 116.207,281.600 115.972 C 281.600 115.737,282.101 114.792,282.712 113.872 C 283.324 112.952,284.089 111.660,284.412 111.000 C 284.735 110.340,285.094 109.710,285.210 109.600 C 285.455 109.368,289.501 101.083,290.094 99.600 C 290.314 99.050,290.652 98.287,290.847 97.905 C 291.041 97.523,291.200 96.769,291.200 96.229 C 291.200 95.689,291.380 95.136,291.600 95.000 C 291.820 94.864,292.000 94.169,292.000 93.456 C 292.000 92.743,292.208 91.952,292.462 91.698 C 293.119 91.041,293.131 79.510,292.475 79.292 C 292.214 79.205,292.000 78.613,292.000 77.978 C 292.000 76.934,290.615 73.396,289.689 72.075 C 289.398 71.658,288.914 71.784,287.361 72.679 C 284.747 74.185,282.524 75.179,279.400 76.238 C 274.115 78.030,265.948 78.306,262.200 76.819 C 256.637 74.612,252.211 71.220,249.267 66.912 C 247.693 64.607,247.986 64.486,255.190 64.445 C 258.735 64.425,261.976 64.227,262.391 64.005 C 262.807 63.782,263.654 63.597,264.274 63.594 C 265.430 63.588,268.170 62.763,268.659 62.274 C 268.810 62.123,269.234 62.000,269.603 62.000 C 270.458 62.000,277.280 58.534,279.697 56.871 C 280.713 56.172,281.737 55.600,281.972 55.600 C 282.207 55.600,282.400 55.420,282.400 55.200 C 282.400 54.980,282.625 54.800,282.900 54.799 C 283.175 54.799,284.030 54.259,284.800 53.600 C 285.570 52.941,286.425 52.401,286.700 52.401 C 286.975 52.400,287.200 52.250,287.200 52.068 C 287.200 51.885,287.695 51.480,288.300 51.168 C 288.905 50.856,289.490 50.511,289.600 50.401 C 290.036 49.964,294.607 47.614,297.000 46.598 C 300.763 45.000,301.996 44.600,304.800 44.069 C 306.010 43.840,308.170 43.387,309.600 43.063 C 312.089 42.498,315.047 42.553,315.716 43.177 M194.600 49.185 C 193.940 49.361,191.673 49.527,189.562 49.553 C 186.175 49.594,185.634 49.701,184.962 50.458 L 184.200 51.316 189.600 50.958 C 196.013 50.533,208.392 50.542,216.200 50.978 C 221.655 51.282,221.782 51.271,221.087 50.545 C 220.036 49.446,197.888 48.309,194.600 49.185 M175.422 55.015 C 174.666 55.716,174.445 56.180,174.708 56.515 C 174.918 56.782,175.204 57.481,175.345 58.069 C 175.485 58.657,176.070 59.697,176.644 60.380 C 177.219 61.063,177.828 62.202,177.998 62.911 C 178.169 63.620,178.428 64.490,178.575 64.844 C 178.812 65.414,178.602 65.444,176.721 65.104 C 175.555 64.894,174.285 64.701,173.900 64.675 C 173.515 64.649,173.200 64.487,173.200 64.314 C 173.200 64.141,172.949 64.000,172.643 64.000 C 172.336 64.000,171.999 63.775,171.893 63.500 C 171.486 62.440,166.808 63.153,165.321 64.502 C 162.968 66.638,166.153 73.952,169.077 73.124 C 169.255 73.074,169.940 73.336,170.600 73.708 L 171.800 74.383 170.500 74.307 C 169.785 74.264,169.200 74.088,169.200 73.915 C 169.200 73.173,165.842 73.626,164.638 74.529 C 163.957 75.041,163.060 75.585,162.645 75.738 C 161.656 76.104,161.962 80.053,163.074 81.282 C 164.338 82.679,168.720 84.443,172.289 84.992 C 175.261 85.449,178.000 86.133,178.000 86.417 C 178.000 86.576,178.360 86.801,178.800 86.916 C 179.311 87.049,179.602 87.464,179.605 88.063 C 179.616 89.887,180.080 90.624,182.588 92.800 C 183.982 94.010,184.947 95.109,184.731 95.243 C 183.079 96.264,187.577 102.000,190.031 102.000 C 192.284 102.000,194.164 99.645,193.873 97.186 C 193.684 95.595,193.755 95.200,194.229 95.200 C 194.554 95.200,194.991 94.750,195.200 94.200 C 195.409 93.650,195.753 93.200,195.963 93.200 C 196.174 93.200,196.460 92.840,196.600 92.400 C 196.740 91.960,197.168 91.600,197.551 91.600 C 198.204 91.600,199.176 88.308,199.233 85.900 C 199.245 85.383,199.584 85.200,200.527 85.200 C 201.229 85.200,203.063 84.733,204.602 84.162 C 206.141 83.591,207.985 82.953,208.700 82.743 C 209.415 82.534,210.000 82.180,210.000 81.958 C 210.000 81.735,210.189 81.669,210.419 81.812 C 210.966 82.150,213.528 79.426,213.843 78.172 C 214.588 75.204,212.230 72.594,208.821 72.614 L 206.378 72.628 207.889 71.868 C 211.097 70.254,212.169 68.595,211.739 65.911 C 211.077 61.766,207.003 60.599,202.268 63.197 C 200.988 63.900,199.823 64.357,199.680 64.213 C 199.189 63.722,200.975 61.004,201.873 60.876 C 202.375 60.804,202.749 60.463,202.752 60.076 C 202.755 59.704,202.869 58.949,203.006 58.399 C 203.199 57.626,202.949 57.043,201.913 55.844 L 200.570 54.291 199.277 54.960 C 197.186 56.041,193.611 61.608,194.133 62.969 C 194.482 63.878,193.505 66.000,192.738 66.000 C 192.361 66.000,191.545 66.193,190.926 66.428 C 190.307 66.663,188.577 66.895,187.082 66.944 C 185.499 66.995,184.706 66.905,185.182 66.728 C 186.285 66.320,186.213 65.680,185.000 65.127 C 184.311 64.813,183.998 64.349,183.994 63.636 C 183.986 62.325,183.246 60.208,182.143 58.346 C 181.671 57.550,181.150 56.472,180.984 55.951 C 180.295 53.778,177.300 53.274,175.422 55.015 M179.853 57.500 C 180.373 58.105,180.799 58.825,180.800 59.100 C 180.800 59.375,180.980 59.600,181.200 59.600 C 181.420 59.600,181.600 59.949,181.600 60.376 C 181.600 60.803,181.780 61.264,182.000 61.400 C 182.220 61.536,182.400 62.875,182.400 64.375 C 182.400 68.271,184.090 68.977,191.063 67.995 C 195.126 67.423,195.065 67.478,195.430 64.013 C 195.877 59.773,199.635 55.066,201.040 56.987 C 201.767 57.981,201.759 58.031,200.700 59.206 C 197.852 62.362,197.001 66.571,199.300 66.132 C 200.501 65.902,203.240 64.842,204.895 63.967 C 205.277 63.765,206.143 63.600,206.821 63.600 C 210.970 63.600,211.779 68.770,207.875 70.340 C 207.174 70.622,206.287 71.021,205.905 71.226 C 205.523 71.432,204.938 71.600,204.605 71.600 C 204.272 71.600,204.000 71.780,204.000 72.000 C 204.000 72.220,203.471 72.400,202.824 72.400 C 202.177 72.400,201.536 72.580,201.400 72.800 C 201.264 73.020,200.753 73.200,200.265 73.200 C 198.689 73.200,197.540 74.327,197.678 75.738 C 197.815 77.158,199.199 77.335,201.760 76.260 C 207.602 73.809,209.977 73.503,211.383 75.019 C 213.165 76.943,212.393 79.449,209.651 80.638 C 208.853 80.984,207.887 81.432,207.505 81.634 C 207.123 81.835,206.459 82.000,206.029 82.000 C 205.599 82.000,205.136 82.180,205.000 82.400 C 204.864 82.620,204.324 82.800,203.800 82.800 C 203.276 82.800,202.736 82.980,202.600 83.200 C 202.464 83.420,201.851 83.600,201.238 83.600 C 199.551 83.600,197.600 84.717,197.600 85.683 C 197.600 89.988,193.446 94.000,188.988 94.000 C 185.069 94.000,181.200 90.466,181.200 86.886 C 181.200 85.109,179.653 84.248,176.829 84.452 C 175.977 84.514,175.037 84.370,174.740 84.132 C 174.235 83.729,173.326 83.495,170.096 82.937 C 169.379 82.813,168.694 82.551,168.573 82.356 C 168.452 82.160,167.932 82.000,167.419 82.000 C 165.960 82.000,164.000 79.929,164.000 78.386 C 164.000 75.505,166.798 74.554,171.011 76.004 C 172.295 76.446,173.674 76.704,174.073 76.577 C 174.473 76.450,174.800 76.524,174.800 76.741 C 174.800 77.137,175.509 77.332,178.725 77.818 L 180.450 78.079 180.325 76.339 C 180.256 75.383,180.020 74.584,179.800 74.565 C 179.580 74.546,179.130 74.425,178.800 74.295 C 178.470 74.165,177.660 73.971,177.000 73.863 C 176.340 73.754,175.080 73.454,174.200 73.196 C 173.320 72.937,172.013 72.632,171.296 72.519 C 170.579 72.405,169.894 72.151,169.773 71.956 C 169.652 71.760,169.235 71.600,168.846 71.600 C 168.457 71.600,167.769 71.195,167.316 70.700 C 164.377 67.489,167.328 63.454,171.353 65.180 C 172.405 65.631,173.614 66.000,174.039 66.000 C 174.463 66.000,175.123 66.159,175.505 66.353 C 178.874 68.065,180.831 67.415,180.060 64.841 C 179.807 63.997,179.599 62.968,179.598 62.554 C 179.597 62.139,178.900 60.882,178.049 59.759 C 175.820 56.819,177.480 54.740,179.853 57.500 M52.800 58.115 C 50.547 59.249,51.146 61.631,54.278 63.994 C 58.475 67.161,61.999 72.327,62.000 75.313 C 62.000 75.924,62.225 76.513,62.500 76.620 C 62.799 76.736,63.017 77.621,63.041 78.824 C 63.064 79.929,63.308 81.254,63.584 81.769 C 63.944 82.443,63.981 83.197,63.715 84.453 C 63.317 86.330,63.765 97.696,64.268 98.510 C 64.431 98.773,64.516 99.537,64.459 100.207 C 64.401 100.878,64.572 101.960,64.839 102.613 C 65.106 103.266,65.283 104.133,65.231 104.540 C 65.179 104.947,65.309 105.757,65.521 106.340 C 65.732 106.923,66.234 108.435,66.636 109.700 C 67.037 110.965,67.508 112.000,67.683 112.000 C 67.857 112.000,67.970 112.135,67.934 112.300 C 67.349 114.975,80.694 131.583,82.880 130.900 C 83.056 130.845,83.200 130.966,83.200 131.168 C 83.200 131.537,89.311 136.641,93.783 140.006 C 104.655 148.190,110.400 153.042,110.400 154.043 C 110.400 154.504,110.807 154.975,111.400 155.200 C 111.950 155.409,112.400 155.773,112.400 156.008 C 112.400 156.244,112.842 156.878,113.381 157.418 C 115.299 159.336,117.209 162.141,117.023 162.766 C 116.813 163.469,118.068 165.200,118.788 165.200 C 119.040 165.200,119.156 165.348,119.044 165.528 C 118.182 166.924,121.534 169.106,122.720 167.920 C 123.304 167.336,123.371 162.153,122.800 161.800 C 122.580 161.664,122.400 161.034,122.400 160.400 C 122.400 159.766,122.220 159.136,122.000 159.000 C 121.780 158.864,121.600 158.422,121.600 158.018 C 121.600 155.153,113.933 143.561,106.548 135.258 C 105.639 134.236,104.199 132.549,103.348 131.510 C 95.240 121.607,93.224 119.042,91.725 116.726 C 90.774 115.255,89.720 113.777,89.383 113.440 C 89.047 113.104,88.789 112.727,88.809 112.603 C 88.830 112.478,88.398 111.437,87.849 110.288 C 85.191 104.731,84.643 102.944,83.751 96.934 C 83.486 95.153,84.244 91.176,84.932 90.730 C 85.209 90.551,85.167 90.242,84.807 89.809 C 83.583 88.334,85.447 87.486,88.006 88.353 C 94.957 90.707,101.865 91.571,105.200 90.503 C 105.970 90.256,107.410 89.822,108.400 89.539 C 109.390 89.255,111.190 88.472,112.400 87.799 C 113.610 87.126,114.926 86.641,115.325 86.722 C 115.796 86.817,116.007 86.665,115.925 86.288 C 115.856 85.969,116.718 84.882,117.840 83.871 C 122.343 79.816,126.247 72.555,124.580 71.336 C 123.740 70.721,120.348 70.612,119.779 71.181 C 117.498 73.462,103.420 72.433,95.348 69.395 C 93.946 68.867,92.797 68.563,92.794 68.718 C 92.791 68.873,92.649 68.781,92.479 68.514 C 92.149 67.994,85.959 65.012,79.400 62.212 C 74.500 60.121,69.209 58.779,66.119 58.844 C 62.926 58.911,57.627 58.368,57.367 57.947 C 57.045 57.426,53.941 57.541,52.800 58.115 M66.400 60.365 C 71.079 60.995,74.768 61.889,78.000 63.177 C 80.736 64.267,86.775 67.065,92.800 70.033 C 94.161 70.704,95.827 71.264,101.200 72.858 C 102.822 73.339,105.681 73.719,108.800 73.868 C 113.386 74.086,114.685 73.991,121.900 72.908 C 123.023 72.739,123.200 72.829,123.200 73.569 C 123.200 75.202,116.358 84.400,115.143 84.400 C 114.936 84.400,114.380 84.760,113.908 85.200 C 113.436 85.640,112.813 86.000,112.525 86.000 C 112.236 86.000,112.000 86.180,112.000 86.400 C 112.000 86.620,111.728 86.800,111.395 86.800 C 111.062 86.800,110.477 86.959,110.095 87.153 C 107.100 88.677,105.645 88.941,100.400 88.915 C 95.512 88.890,92.536 88.544,92.174 87.958 C 92.052 87.761,91.434 87.600,90.800 87.600 C 90.166 87.600,89.536 87.420,89.400 87.200 C 89.264 86.980,88.749 86.800,88.256 86.800 C 87.763 86.800,87.186 86.626,86.974 86.414 C 86.167 85.607,83.841 85.739,83.695 86.600 C 83.620 87.040,83.402 87.760,83.210 88.200 C 82.000 90.977,82.031 101.477,83.252 102.232 C 83.443 102.350,83.600 102.979,83.600 103.629 C 83.600 104.279,83.757 105.123,83.950 105.505 C 85.448 108.480,86.000 109.753,86.000 110.238 C 86.000 110.547,86.136 110.800,86.302 110.800 C 86.469 110.800,86.858 111.385,87.167 112.100 C 88.634 115.493,98.327 128.303,104.648 135.200 C 105.354 135.970,107.215 138.220,108.784 140.200 C 110.354 142.180,111.880 144.094,112.176 144.454 C 114.582 147.380,119.200 155.130,119.200 156.241 C 119.200 156.548,119.380 156.800,119.600 156.800 C 119.820 156.800,120.000 157.162,120.000 157.605 C 120.000 158.048,120.164 158.723,120.365 159.105 C 120.988 160.293,121.725 164.298,121.451 165.011 C 121.011 166.157,120.203 165.221,118.248 161.303 C 118.001 160.810,117.665 160.405,117.500 160.403 C 117.335 160.401,117.200 160.164,117.200 159.875 C 117.200 159.587,116.885 159.002,116.500 158.575 C 116.115 158.148,115.267 157.079,114.615 156.200 C 112.929 153.924,107.489 148.401,106.933 148.400 C 106.677 148.400,106.407 148.254,106.333 148.075 C 106.260 147.896,104.940 146.785,103.400 145.606 C 101.860 144.428,100.137 143.089,99.571 142.632 C 99.006 142.174,97.938 141.350,97.199 140.800 C 87.086 133.271,78.282 125.377,73.400 119.463 C 71.560 117.233,68.889 112.182,68.080 109.400 C 67.824 108.520,67.315 106.810,66.948 105.600 C 66.047 102.630,65.623 98.796,65.221 90.000 C 64.701 78.619,64.478 76.777,63.208 73.400 C 62.745 72.170,61.825 70.223,61.600 70.000 C 61.489 69.890,61.129 69.267,60.799 68.615 C 60.470 67.963,58.780 66.023,57.044 64.305 C 55.308 62.586,54.016 61.049,54.173 60.890 C 55.277 59.773,60.375 59.554,66.400 60.365 M231.517 60.900 C 230.584 61.634,230.320 62.937,230.934 63.777 C 231.310 64.292,231.382 65.003,231.174 66.143 C 230.979 67.206,231.059 68.265,231.403 69.187 C 231.694 69.964,232.038 71.590,232.169 72.800 C 232.300 74.010,232.597 76.794,232.828 78.988 C 233.059 81.181,233.379 83.161,233.540 83.388 C 233.701 83.614,233.735 85.330,233.616 87.200 L 233.400 90.600 232.111 89.270 C 231.153 88.281,230.610 88.006,229.995 88.202 C 229.540 88.346,228.230 88.192,227.084 87.860 C 225.938 87.527,223.830 87.032,222.400 86.760 C 220.970 86.488,219.672 86.072,219.517 85.836 C 219.320 85.538,219.082 85.558,218.737 85.903 C 218.463 86.177,217.601 86.406,216.820 86.414 C 212.796 86.455,207.258 88.632,202.913 91.882 C 201.649 92.827,200.297 93.600,199.908 93.600 C 199.519 93.600,199.200 93.887,199.200 94.239 C 199.200 94.590,198.468 95.709,197.573 96.725 C 196.679 97.741,195.299 99.929,194.508 101.587 C 193.717 103.244,192.829 104.744,192.535 104.920 C 192.241 105.096,192.000 105.743,192.000 106.359 C 192.000 107.911,190.776 109.200,189.302 109.200 C 187.843 109.200,185.200 110.250,185.200 110.829 C 185.200 111.059,185.026 111.140,184.814 111.009 C 184.602 110.877,183.765 111.769,182.954 112.990 C 180.794 116.244,181.021 121.495,183.361 122.385 C 183.897 122.589,184.501 123.052,184.704 123.414 C 184.906 123.776,185.236 124.058,185.436 124.041 C 186.995 123.908,187.193 124.462,186.100 125.896 C 183.895 128.786,184.896 133.903,188.028 135.753 C 189.181 136.434,189.232 138.025,188.136 139.122 C 186.926 140.331,187.584 143.220,189.549 145.327 C 190.455 146.299,190.600 146.805,190.600 148.993 C 190.600 150.389,190.735 151.667,190.900 151.832 C 191.065 151.998,191.200 152.543,191.200 153.043 C 191.200 153.543,191.380 154.064,191.601 154.201 C 191.828 154.341,191.896 155.108,191.758 155.973 C 191.588 157.038,191.708 157.794,192.158 158.481 C 192.513 159.021,192.700 159.566,192.575 159.692 C 192.032 160.234,195.498 169.488,197.172 171.966 C 197.556 172.535,198.656 174.170,199.616 175.600 C 201.448 178.329,202.681 179.548,207.600 183.487 C 213.466 188.184,218.582 191.212,231.400 197.573 C 239.982 201.831,245.869 205.104,247.800 206.689 C 248.460 207.231,249.805 208.333,250.789 209.137 C 253.348 211.230,255.538 213.553,256.694 215.400 C 259.174 219.365,261.171 220.432,263.100 218.823 C 264.035 218.043,264.294 217.200,263.600 217.200 C 263.380 217.200,263.200 216.829,263.200 216.377 C 263.200 215.924,262.678 214.889,262.041 214.077 C 261.403 213.264,260.747 212.150,260.583 211.600 C 260.419 211.050,259.890 210.060,259.407 209.400 C 258.925 208.740,258.222 207.525,257.846 206.700 C 257.470 205.875,256.906 205.200,256.592 205.200 C 256.277 205.200,255.756 204.688,255.432 204.061 C 255.108 203.435,253.720 202.130,252.347 201.161 C 250.975 200.193,249.390 198.947,248.826 198.394 C 248.262 197.840,247.277 197.156,246.638 196.874 C 246.000 196.592,244.560 195.766,243.438 195.039 C 242.317 194.312,240.320 193.120,239.000 192.391 C 211.519 177.216,203.095 169.428,198.205 154.673 C 197.271 151.853,196.302 149.342,196.053 149.093 C 195.384 148.424,195.488 146.800,196.200 146.800 C 196.530 146.800,196.800 146.660,196.800 146.489 C 196.800 146.318,197.317 145.612,197.950 144.919 C 200.281 142.367,199.659 138.552,196.566 136.433 C 195.217 135.509,195.204 135.473,195.998 134.917 C 199.308 132.598,198.979 126.903,195.376 124.155 C 194.189 123.249,194.052 123.003,194.572 122.712 C 194.918 122.518,195.200 122.099,195.200 121.780 C 195.200 121.461,195.375 121.200,195.590 121.200 C 197.070 121.200,197.429 117.874,196.549 112.300 C 196.358 111.090,196.437 110.800,196.956 110.800 C 197.310 110.800,197.600 110.649,197.600 110.464 C 197.600 110.032,199.646 109.035,200.300 109.148 C 200.575 109.196,200.800 108.903,200.800 108.497 C 200.800 107.709,203.512 103.260,205.004 101.600 C 205.499 101.050,206.025 99.916,206.173 99.080 C 206.503 97.229,209.577 93.863,210.585 94.250 C 210.981 94.401,211.588 94.098,212.192 93.447 C 212.725 92.871,213.440 92.400,213.781 92.400 C 214.121 92.400,214.400 92.241,214.400 92.046 C 214.400 91.851,215.566 91.786,216.992 91.900 C 219.147 92.073,219.626 91.998,219.835 91.454 C 220.123 90.704,222.218 90.573,224.172 91.184 C 224.847 91.395,226.276 91.800,227.348 92.084 C 228.723 92.448,229.396 92.864,229.638 93.500 C 230.039 94.556,230.669 94.643,231.627 93.776 C 232.865 92.655,233.600 94.968,233.600 99.981 C 233.600 104.462,233.095 106.045,232.223 104.297 C 231.982 103.812,231.364 103.206,230.850 102.950 C 230.336 102.694,229.710 102.078,229.458 101.581 C 229.206 101.085,228.730 100.554,228.400 100.402 C 228.070 100.250,226.990 99.737,226.000 99.262 C 225.010 98.787,223.969 98.398,223.686 98.399 C 223.403 98.400,222.728 98.109,222.186 97.754 C 221.278 97.159,221.122 97.159,220.214 97.754 C 219.672 98.109,218.547 98.402,217.714 98.404 C 216.120 98.409,213.068 99.214,211.534 100.035 C 211.034 100.303,210.170 100.539,209.613 100.561 C 208.970 100.586,208.456 100.929,208.205 101.500 C 207.988 101.995,207.538 102.404,207.205 102.409 C 206.141 102.425,204.652 103.837,204.932 104.566 C 205.080 104.953,204.802 105.859,204.271 106.717 C 203.009 108.757,201.877 111.903,202.150 112.613 C 202.273 112.936,202.246 113.201,202.087 113.203 C 201.673 113.208,200.784 115.251,201.026 115.642 C 201.138 115.823,201.291 117.643,201.365 119.686 C 201.501 123.398,201.502 123.400,202.520 123.290 C 203.081 123.229,203.654 123.364,203.794 123.590 C 204.115 124.110,212.500 124.136,214.172 123.622 C 218.193 122.384,219.930 121.998,220.498 122.216 C 220.860 122.355,221.471 122.144,221.903 121.731 C 223.023 120.661,224.279 120.000,225.195 120.000 C 225.644 120.000,226.000 119.735,226.000 119.400 C 226.000 119.070,225.826 118.800,225.613 118.800 C 225.399 118.800,225.329 118.530,225.455 118.200 C 225.582 117.870,225.936 117.600,226.243 117.600 C 226.549 117.600,226.800 117.326,226.800 116.990 C 226.800 116.655,227.261 116.205,227.824 115.991 C 228.387 115.777,228.734 115.417,228.595 115.191 C 228.125 114.431,229.316 112.435,230.189 112.520 C 230.891 112.589,230.988 112.393,230.907 111.061 C 230.834 109.836,230.971 109.480,231.580 109.321 C 232.033 109.203,232.257 108.893,232.130 108.561 C 232.011 108.252,232.139 108.000,232.413 108.000 C 232.929 108.000,232.893 108.561,232.012 114.400 C 231.796 115.830,231.412 117.900,231.160 119.000 C 230.907 120.100,230.666 121.369,230.623 121.820 C 230.581 122.271,230.405 122.869,230.232 123.148 C 229.760 123.911,228.305 129.616,228.206 131.087 C 228.159 131.794,227.899 132.640,227.629 132.965 C 227.358 133.291,227.179 133.972,227.229 134.479 C 227.280 134.985,227.100 135.940,226.829 136.600 C 226.248 138.019,225.744 147.589,226.195 148.659 C 226.367 149.067,226.470 150.063,226.425 150.873 C 226.380 151.683,226.573 152.763,226.855 153.273 C 227.137 153.783,227.320 154.437,227.260 154.726 C 227.130 155.366,228.274 158.952,229.135 160.600 C 229.480 161.260,229.720 162.017,229.668 162.282 C 229.581 162.725,230.572 164.743,232.698 168.449 C 233.155 169.246,234.760 171.645,236.264 173.782 C 237.769 175.918,239.194 178.006,239.431 178.422 C 239.669 178.838,240.659 180.100,241.631 181.227 C 245.746 185.994,246.314 186.675,247.429 188.174 C 248.073 189.039,249.200 190.385,249.933 191.165 C 251.520 192.852,254.652 196.890,258.906 202.733 C 260.615 205.080,262.278 207.315,262.602 207.700 C 262.927 208.085,263.102 208.400,262.993 208.400 C 262.883 208.400,263.810 210.425,265.052 212.900 C 270.699 224.147,272.205 234.343,269.481 242.882 C 268.940 244.577,268.596 246.062,268.716 246.182 C 268.835 246.302,268.723 246.400,268.467 246.400 C 268.210 246.400,268.000 246.642,268.000 246.938 C 268.000 248.353,262.655 255.134,261.075 255.724 C 260.676 255.873,260.471 256.191,260.620 256.432 C 260.935 256.942,258.436 259.669,257.937 259.361 C 257.751 259.246,257.600 258.713,257.600 258.176 C 257.600 257.639,257.420 257.200,257.200 257.200 C 256.694 257.200,256.684 256.201,257.181 255.295 C 259.925 250.295,260.251 239.862,257.882 232.900 C 257.638 232.185,257.295 231.600,257.120 231.600 C 256.944 231.600,256.796 231.195,256.791 230.700 C 256.786 230.205,256.430 229.350,256.000 228.800 C 255.570 228.250,255.214 227.639,255.209 227.441 C 255.175 226.067,246.213 217.200,244.859 217.200 C 244.606 217.200,244.400 217.030,244.400 216.821 C 244.400 216.137,237.697 212.000,236.588 212.000 C 236.265 212.000,236.000 211.842,236.000 211.648 C 236.000 211.454,234.155 210.387,231.900 209.278 C 227.457 207.091,213.204 200.400,212.988 200.400 C 212.672 200.400,206.833 197.628,199.800 194.139 C 177.478 183.066,162.247 170.603,152.213 155.200 C 150.708 152.890,149.324 150.940,149.138 150.867 C 148.952 150.793,148.800 150.508,148.800 150.233 C 148.800 149.958,148.098 148.398,147.241 146.767 C 146.383 145.135,144.845 141.838,143.823 139.440 C 142.801 137.043,141.754 134.703,141.497 134.240 C 141.240 133.778,141.075 133.246,141.129 133.057 C 141.184 132.868,140.755 131.428,140.175 129.857 C 139.596 128.286,138.981 126.460,138.808 125.800 C 138.636 125.140,138.230 123.790,137.905 122.800 C 137.581 121.810,137.097 120.190,136.831 119.200 C 136.564 118.210,136.178 116.847,135.973 116.172 C 135.768 115.496,135.597 114.506,135.594 113.972 C 135.589 113.137,134.964 110.918,134.137 108.800 C 134.008 108.470,133.937 107.272,133.979 106.138 C 134.020 105.004,133.878 103.744,133.663 103.338 C 133.448 102.932,132.962 100.080,132.583 97.000 C 132.203 93.920,131.739 91.203,131.550 90.963 C 131.361 90.723,131.294 90.440,131.400 90.334 C 131.816 89.918,131.701 80.135,131.270 79.331 C 130.292 77.503,127.901 78.225,127.432 80.490 C 126.660 84.216,126.573 86.019,127.012 89.124 C 127.400 91.864,128.172 90.961,128.400 87.500 C 128.807 81.322,130.051 84.738,130.621 93.600 C 130.741 95.470,130.998 97.900,131.191 99.000 C 131.385 100.100,131.765 102.530,132.037 104.400 C 132.308 106.270,132.681 107.971,132.865 108.180 C 133.049 108.389,133.198 109.109,133.196 109.780 C 133.191 111.144,134.690 117.818,135.243 118.895 C 135.440 119.277,135.600 119.943,135.600 120.376 C 135.600 120.808,135.757 121.576,135.949 122.081 C 136.141 122.587,136.513 123.720,136.775 124.600 C 137.038 125.480,137.400 126.560,137.579 127.000 C 137.758 127.440,138.320 129.115,138.828 130.723 C 139.335 132.330,139.897 133.736,140.075 133.846 C 140.254 133.957,140.400 134.399,140.400 134.829 C 140.400 135.259,140.560 135.923,140.756 136.305 C 140.952 136.687,141.470 137.810,141.906 138.800 C 143.096 141.496,145.203 146.016,146.008 147.600 C 146.690 148.941,147.414 150.259,149.232 153.469 C 150.223 155.220,153.231 159.716,153.600 160.000 C 153.744 160.110,154.297 160.845,154.830 161.633 C 157.495 165.571,166.451 174.557,171.400 178.259 C 172.500 179.082,173.490 179.864,173.600 179.997 C 173.710 180.130,174.430 180.671,175.200 181.200 C 175.970 181.729,176.690 182.272,176.800 182.407 C 177.120 182.800,180.719 185.200,180.989 185.200 C 181.123 185.200,181.620 185.560,182.092 186.000 C 182.564 186.440,183.187 186.800,183.475 186.800 C 183.764 186.800,184.000 186.959,184.000 187.153 C 184.000 187.348,184.315 187.607,184.700 187.729 C 185.405 187.952,187.628 189.220,188.000 189.610 C 188.110 189.725,189.100 190.265,190.200 190.810 C 191.300 191.354,192.290 191.891,192.400 192.002 C 192.583 192.188,194.898 193.414,199.000 195.499 C 201.090 196.561,209.171 200.401,210.200 200.821 C 210.640 201.000,212.936 202.059,215.303 203.174 C 217.669 204.288,219.711 205.200,219.839 205.200 C 220.260 205.200,236.145 213.139,238.419 214.486 C 245.978 218.962,254.400 226.702,254.400 229.172 C 254.400 229.407,254.541 229.600,254.714 229.600 C 255.086 229.600,256.231 232.525,257.061 235.600 C 257.911 238.749,258.130 249.479,257.367 250.569 C 257.055 251.014,256.800 251.700,256.800 252.094 C 256.800 252.488,256.641 253.123,256.447 253.505 C 256.252 253.887,255.851 254.740,255.556 255.400 C 252.582 262.038,244.050 270.034,235.706 274.004 C 234.555 274.552,233.610 275.135,233.606 275.300 C 233.603 275.465,233.328 275.600,232.996 275.600 C 232.444 275.600,229.607 276.733,227.905 277.633 C 227.523 277.835,226.859 278.000,226.429 278.000 C 225.999 278.000,225.536 278.180,225.400 278.400 C 225.264 278.620,224.724 278.800,224.200 278.800 C 223.676 278.800,223.136 278.980,223.000 279.200 C 222.864 279.420,222.401 279.600,221.971 279.600 C 221.541 279.600,220.877 279.763,220.495 279.963 C 219.235 280.621,212.783 282.055,207.600 282.830 C 198.128 284.244,185.454 284.598,178.000 283.656 C 175.910 283.392,173.300 283.074,172.200 282.951 C 171.100 282.827,170.029 282.563,169.820 282.363 C 169.611 282.163,168.767 282.000,167.944 282.000 C 167.121 282.000,166.336 281.820,166.200 281.600 C 166.064 281.380,165.434 281.200,164.800 281.200 C 164.166 281.200,163.536 281.020,163.400 280.800 C 163.264 280.580,162.711 280.400,162.171 280.400 C 161.631 280.400,160.877 280.235,160.495 280.033 C 159.092 279.291,155.998 278.000,155.622 278.000 C 155.409 278.000,154.319 277.460,153.200 276.800 C 152.081 276.140,151.081 275.600,150.978 275.600 C 148.030 275.600,139.244 265.888,136.751 259.874 C 136.096 258.293,135.401 256.640,135.207 256.200 C 134.820 255.321,134.613 254.187,133.966 249.400 C 132.442 238.113,136.704 226.983,144.185 222.715 C 146.562 221.359,149.258 220.193,151.000 219.767 C 152.960 219.288,164.492 219.118,165.388 219.555 C 165.835 219.772,166.920 220.058,167.800 220.191 C 168.680 220.323,170.076 220.533,170.903 220.658 C 171.729 220.782,172.505 221.045,172.626 221.242 C 172.748 221.439,173.287 221.600,173.824 221.600 C 174.598 221.600,174.800 221.806,174.800 222.600 C 174.800 223.498,174.638 223.600,173.224 223.600 C 172.357 223.600,171.536 223.780,171.400 224.000 C 171.264 224.220,170.724 224.400,170.200 224.400 C 169.676 224.400,169.136 224.580,169.000 224.800 C 168.864 225.020,168.478 225.200,168.142 225.200 C 166.451 225.200,162.041 227.958,159.158 230.818 C 156.466 233.488,155.704 234.604,154.389 237.800 C 153.408 240.186,152.918 246.232,153.532 248.389 C 153.753 249.165,154.150 250.610,154.415 251.600 C 155.051 253.979,157.778 259.539,159.016 260.979 C 159.557 261.609,160.000 262.255,160.000 262.414 C 160.000 263.349,169.953 272.400,170.981 272.400 C 171.132 272.400,172.041 272.940,173.000 273.600 C 173.959 274.260,174.880 274.800,175.046 274.800 C 175.212 274.800,176.107 275.168,177.036 275.617 C 185.430 279.681,200.198 280.348,212.600 277.224 C 216.107 276.341,218.633 275.500,219.059 275.074 C 219.210 274.923,219.689 274.800,220.123 274.800 C 221.124 274.800,228.822 271.089,231.191 269.464 C 233.992 267.544,234.405 267.193,237.689 263.944 C 240.954 260.714,242.236 258.505,244.844 251.614 C 245.702 249.347,245.474 242.601,244.462 240.297 C 242.181 235.105,234.856 227.622,229.220 224.725 C 228.659 224.437,228.110 224.111,228.000 224.001 C 227.890 223.890,227.395 223.575,226.900 223.300 C 226.405 223.025,225.595 222.575,225.100 222.300 C 224.605 222.025,224.110 221.710,224.000 221.600 C 223.890 221.490,222.630 220.782,221.200 220.027 C 218.755 218.736,217.648 218.182,211.544 215.200 C 210.193 214.540,208.843 214.000,208.544 214.000 C 208.245 214.000,208.000 213.864,208.000 213.698 C 208.000 213.531,207.415 213.155,206.700 212.861 C 205.156 212.227,199.206 209.420,197.146 208.353 C 196.346 207.939,195.401 207.600,195.046 207.600 C 194.690 207.600,194.400 207.420,194.400 207.200 C 194.400 206.980,194.206 206.800,193.970 206.800 C 193.414 206.800,177.679 198.918,174.800 197.197 C 173.590 196.474,171.610 195.339,170.400 194.673 C 168.293 193.516,158.815 187.325,158.400 186.836 C 158.290 186.706,157.390 185.972,156.400 185.206 C 155.410 184.439,154.249 183.539,153.820 183.206 C 145.734 176.927,138.063 165.488,133.966 153.600 C 133.474 152.170,132.920 150.829,132.735 150.620 C 132.551 150.411,132.396 149.871,132.392 149.420 C 132.387 148.969,131.926 147.070,131.368 145.200 C 130.053 140.794,129.538 138.226,128.362 130.200 C 127.700 125.690,127.327 113.385,127.518 102.400 C 127.692 92.446,127.678 92.217,126.948 92.915 C 126.168 93.660,126.145 94.140,125.918 114.600 C 125.843 121.293,126.155 125.823,126.737 126.525 C 127.102 126.964,127.190 127.675,127.011 128.734 C 126.720 130.455,127.398 136.266,128.085 137.938 C 128.325 138.522,128.479 139.421,128.427 139.937 C 128.375 140.452,128.507 141.352,128.720 141.937 C 128.933 142.521,129.334 143.810,129.611 144.800 C 131.810 152.650,135.927 163.161,138.265 166.892 C 138.779 167.713,139.200 168.532,139.200 168.712 C 139.200 168.892,140.010 170.153,141.000 171.514 C 141.990 172.874,142.800 174.130,142.800 174.305 C 142.800 174.479,143.295 175.075,143.900 175.629 C 144.505 176.183,146.014 177.708,147.254 179.018 C 148.493 180.328,150.462 182.210,151.629 183.200 C 152.796 184.190,154.482 185.630,155.375 186.400 C 156.269 187.170,157.284 187.980,157.630 188.200 C 157.977 188.420,160.587 190.157,163.430 192.060 C 166.274 193.963,169.770 196.146,171.200 196.912 C 172.630 197.678,175.060 199.007,176.600 199.866 C 178.140 200.724,181.830 202.633,184.800 204.108 C 187.770 205.582,190.470 206.956,190.800 207.160 C 191.130 207.364,192.390 207.974,193.600 208.515 C 194.810 209.056,198.171 210.597,201.070 211.939 C 203.968 213.282,206.578 214.429,206.870 214.490 C 207.161 214.550,207.490 214.700,207.600 214.823 C 207.710 214.945,210.590 216.416,214.000 218.091 C 223.389 222.704,234.093 229.393,237.323 232.667 C 238.870 234.236,242.796 239.835,242.798 240.476 C 242.799 240.848,242.960 241.252,243.156 241.373 C 243.351 241.494,243.613 242.179,243.737 242.896 C 243.861 243.613,244.081 244.787,244.227 245.504 C 244.378 246.246,244.309 247.028,244.067 247.319 C 243.834 247.601,243.598 248.589,243.543 249.515 C 243.488 250.442,243.299 251.200,243.122 251.200 C 242.945 251.200,242.797 251.515,242.794 251.900 C 242.787 252.718,241.873 255.461,241.474 255.859 C 241.323 256.010,241.200 256.386,241.200 256.695 C 241.200 261.665,226.074 272.194,215.174 274.812 C 213.099 275.310,211.040 275.855,210.600 276.024 C 207.572 277.181,187.200 278.195,187.200 277.189 C 187.200 277.031,186.435 276.782,185.500 276.635 C 181.940 276.076,174.624 273.176,172.537 271.495 C 171.912 270.992,170.863 270.314,170.206 269.990 C 166.657 268.237,159.235 259.349,157.021 254.200 C 156.642 253.320,156.168 252.287,155.966 251.905 C 155.765 251.523,155.600 250.679,155.600 250.029 C 155.600 249.379,155.434 248.744,155.230 248.619 C 154.810 248.359,154.912 243.281,155.404 240.008 C 156.101 235.371,160.259 230.559,166.000 227.745 C 168.933 226.307,170.074 225.917,173.471 225.192 C 176.280 224.592,178.000 223.715,178.000 222.882 C 178.000 222.128,176.848 220.800,176.194 220.800 C 176.006 220.800,175.420 220.395,174.892 219.900 C 174.143 219.198,173.434 218.992,171.666 218.965 C 170.420 218.945,168.320 218.702,167.000 218.424 C 163.519 217.692,154.257 217.433,152.030 218.006 C 148.802 218.836,144.800 220.377,144.800 220.790 C 144.800 220.919,144.359 221.062,143.819 221.107 C 137.903 221.596,129.576 241.741,132.051 249.579 C 132.229 250.140,132.836 252.458,133.401 254.729 C 135.855 264.587,141.789 272.326,150.603 277.161 C 154.185 279.125,155.104 279.564,157.400 280.402 C 158.720 280.884,160.160 281.423,160.600 281.600 C 162.392 282.320,168.034 283.699,168.261 283.472 C 168.395 283.338,168.835 283.404,169.237 283.620 C 174.434 286.401,199.056 286.591,209.800 283.933 C 210.680 283.715,211.760 283.549,212.200 283.564 C 213.326 283.602,218.326 282.493,220.000 281.834 C 220.770 281.530,222.300 281.006,223.400 280.668 C 227.893 279.289,232.133 277.632,232.451 277.132 C 232.636 276.839,232.791 276.735,232.794 276.899 C 232.800 277.185,241.985 272.537,242.400 272.038 C 242.510 271.906,243.406 271.258,244.391 270.599 C 245.376 269.939,247.847 267.789,249.882 265.821 C 254.689 261.171,255.498 260.689,254.164 263.270 C 252.145 267.175,260.038 264.444,264.281 259.770 C 264.765 259.237,265.315 258.800,265.503 258.800 C 266.293 258.800,272.071 252.580,274.235 249.400 C 275.948 246.881,278.123 242.401,277.938 241.770 C 277.879 241.566,278.020 241.040,278.251 240.600 C 279.088 239.011,279.714 234.120,279.460 231.146 C 279.032 226.138,277.762 219.767,276.964 218.628 C 276.654 218.185,276.396 217.547,276.391 217.211 C 276.350 214.351,262.359 191.463,257.500 186.306 C 256.895 185.664,256.393 185.017,256.385 184.869 C 256.377 184.721,255.307 183.250,254.007 181.600 C 245.363 170.627,241.167 163.377,240.426 158.134 C 239.737 153.263,240.060 138.951,240.961 134.410 C 241.331 132.545,241.587 130.655,241.529 130.210 C 241.472 129.764,241.569 129.167,241.746 128.883 C 241.923 128.599,242.119 127.687,242.181 126.856 C 242.243 126.026,242.514 124.935,242.783 124.432 C 243.052 123.930,243.184 123.183,243.077 122.774 C 242.970 122.364,243.112 121.839,243.392 121.606 C 243.673 121.374,244.008 120.242,244.137 119.092 C 244.266 117.941,244.566 116.100,244.804 115.000 C 245.555 111.527,246.002 109.064,246.256 107.000 C 246.391 105.900,246.668 104.790,246.872 104.534 C 247.323 103.965,247.247 84.368,246.791 83.800 C 246.614 83.580,246.272 81.980,246.031 80.244 C 245.738 78.135,245.354 76.874,244.873 76.444 C 244.478 76.090,243.461 74.540,242.614 73.000 C 239.001 66.434,234.042 60.400,232.258 60.400 C 232.200 60.400,231.867 60.625,231.517 60.900 M235.705 65.300 C 238.848 69.037,243.200 76.330,243.200 77.861 C 243.200 78.163,243.358 78.723,243.551 79.105 C 244.135 80.261,244.800 82.604,244.800 83.505 C 244.800 83.971,244.952 84.447,245.138 84.561 C 246.074 85.140,245.868 101.506,244.860 106.600 C 244.347 109.190,243.655 112.879,243.209 115.400 C 243.015 116.500,242.653 118.210,242.406 119.200 C 241.518 122.754,241.139 124.629,240.950 126.400 C 240.845 127.390,240.602 128.560,240.411 129.000 C 239.299 131.561,238.703 138.244,238.699 148.200 C 238.694 157.636,238.929 161.027,239.641 161.780 C 239.838 161.989,240.000 162.484,240.000 162.880 C 240.000 163.276,240.180 163.600,240.400 163.600 C 240.620 163.600,240.800 163.865,240.800 164.188 C 240.800 164.511,241.160 165.411,241.600 166.188 C 242.040 166.965,242.778 168.275,243.239 169.100 C 243.700 169.925,244.420 170.972,244.839 171.426 C 245.258 171.880,245.600 172.465,245.600 172.726 C 245.600 172.987,245.780 173.200,246.000 173.200 C 246.220 173.200,246.400 173.378,246.400 173.597 C 246.400 173.933,247.966 176.191,249.732 178.400 C 249.996 178.730,250.650 179.630,251.186 180.400 C 251.723 181.170,252.270 181.890,252.403 182.000 C 252.536 182.110,254.582 184.810,256.949 188.000 C 259.316 191.190,261.470 194.070,261.736 194.400 C 262.120 194.877,265.923 200.456,267.292 202.552 C 269.172 205.430,273.200 213.136,273.200 213.855 C 273.200 214.155,273.380 214.400,273.600 214.400 C 273.820 214.400,274.000 214.672,274.000 215.005 C 274.000 215.338,274.159 215.923,274.353 216.305 C 274.978 217.533,275.497 218.956,275.993 220.800 C 276.260 221.790,276.640 222.913,276.839 223.295 C 277.038 223.677,277.200 224.766,277.200 225.715 C 277.200 226.664,277.392 227.632,277.627 227.867 C 278.365 228.605,277.609 239.681,276.759 240.580 C 276.562 240.789,276.400 241.199,276.400 241.491 C 276.400 244.628,268.991 254.707,264.309 257.940 C 263.809 258.285,263.147 258.815,262.838 259.117 C 262.239 259.703,260.380 260.513,260.153 260.287 C 260.079 260.212,260.745 259.352,261.635 258.375 C 272.968 245.931,275.347 232.603,268.914 217.600 C 267.894 215.221,265.067 209.411,264.827 209.200 C 264.441 208.861,263.163 206.639,262.929 205.900 C 262.807 205.515,262.548 205.200,262.353 205.200 C 262.159 205.200,262.000 204.964,262.000 204.675 C 262.000 204.387,261.678 203.802,261.283 203.375 C 260.889 202.949,259.953 201.700,259.202 200.600 C 258.452 199.500,257.602 198.359,257.313 198.065 C 257.024 197.771,256.297 196.871,255.696 196.065 C 255.096 195.259,254.511 194.510,254.396 194.400 C 254.281 194.290,253.684 193.570,253.068 192.800 C 252.453 192.030,251.511 190.860,250.975 190.200 C 235.579 171.239,232.157 166.018,229.611 157.600 C 229.112 155.950,228.560 154.150,228.384 153.600 C 227.285 150.158,227.337 136.457,228.452 135.768 C 228.643 135.650,228.800 134.944,228.800 134.200 C 228.800 133.456,228.960 132.748,229.156 132.627 C 229.351 132.506,229.608 131.821,229.727 131.104 C 229.959 129.700,230.477 127.553,231.200 125.000 C 231.996 122.191,232.420 120.248,232.642 118.400 C 232.761 117.410,233.014 116.240,233.204 115.800 C 233.395 115.360,233.636 114.370,233.741 113.600 C 233.847 112.830,234.216 110.130,234.563 107.600 C 235.850 98.200,235.081 78.464,233.050 68.800 C 231.846 63.071,232.787 61.831,235.705 65.300 M205.774 73.242 C 205.652 73.439,205.239 73.600,204.856 73.600 C 204.473 73.600,203.989 73.757,203.780 73.948 C 203.183 74.495,201.088 74.905,201.390 74.416 C 201.532 74.187,201.989 74.000,202.408 74.000 C 202.826 74.000,203.379 73.775,203.636 73.500 C 204.168 72.930,206.111 72.696,205.774 73.242 M183.277 76.500 L 183.400 78.200 188.200 78.316 C 194.550 78.469,194.800 78.396,194.800 76.392 L 194.800 74.800 188.977 74.800 L 183.154 74.800 183.277 76.500 M249.900 77.232 C 248.801 77.872,248.991 78.480,252.561 85.753 C 254.410 89.519,256.321 93.860,256.808 95.400 C 257.295 96.940,257.928 98.920,258.213 99.800 C 260.444 106.678,261.124 110.045,261.394 115.542 C 261.517 118.040,261.798 120.423,262.020 120.838 C 262.319 121.397,262.248 121.860,261.744 122.630 C 261.173 123.501,261.153 123.724,261.620 124.013 C 261.953 124.218,262.183 125.052,262.192 126.078 C 262.219 129.348,263.884 129.796,266.354 127.200 C 267.191 126.320,268.139 125.600,268.461 125.600 C 268.783 125.600,269.369 124.867,269.764 123.972 C 270.159 123.077,271.115 121.772,271.888 121.072 C 273.964 119.194,281.200 109.175,281.200 108.179 C 281.200 108.034,281.740 107.116,282.400 106.138 C 283.060 105.160,283.600 104.217,283.600 104.041 C 283.600 103.866,283.894 103.134,284.253 102.415 C 284.612 101.695,285.047 100.542,285.221 99.853 C 285.394 99.164,285.833 97.520,286.195 96.200 C 289.873 82.814,289.105 76.996,284.004 79.598 C 281.614 80.817,278.950 81.633,278.243 81.361 C 277.865 81.216,277.511 81.366,277.372 81.729 C 277.243 82.065,276.431 82.460,275.569 82.605 C 274.706 82.751,274.000 83.014,274.000 83.191 C 274.000 83.797,276.826 84.042,278.314 83.565 C 280.801 82.768,283.029 81.899,284.495 81.153 C 286.923 79.918,287.410 82.809,286.020 90.200 C 285.772 91.520,285.467 93.276,285.342 94.103 C 285.217 94.929,284.955 95.705,284.758 95.826 C 284.561 95.948,284.400 96.489,284.400 97.029 C 284.400 97.569,284.241 98.323,284.047 98.705 C 283.852 99.087,283.471 99.940,283.200 100.600 C 282.929 101.260,282.548 102.113,282.353 102.495 C 282.159 102.877,282.000 103.462,282.000 103.795 C 282.000 104.128,281.820 104.400,281.600 104.400 C 281.380 104.400,281.200 104.760,281.200 105.200 C 281.200 105.640,281.054 106.000,280.875 106.000 C 280.696 106.000,280.302 106.630,280.000 107.400 C 279.698 108.170,279.304 108.800,279.125 108.800 C 278.946 108.800,278.800 108.988,278.800 109.218 C 278.800 109.598,274.981 115.527,274.432 116.000 C 274.305 116.110,273.218 117.370,272.018 118.800 C 268.280 123.254,264.540 126.934,264.055 126.634 C 263.785 126.467,263.600 125.212,263.600 123.539 C 263.600 119.606,262.776 111.077,262.352 110.620 C 262.159 110.411,262.000 109.524,262.000 108.648 C 262.000 107.773,261.832 106.504,261.627 105.828 C 261.422 105.153,261.041 103.790,260.781 102.800 C 260.520 101.810,260.169 100.550,260.000 100.000 C 259.831 99.450,259.461 98.190,259.177 97.200 C 258.893 96.210,258.512 95.229,258.330 95.020 C 258.149 94.811,258.000 94.316,258.000 93.920 C 258.000 93.524,257.820 93.200,257.600 93.200 C 257.380 93.200,257.200 92.761,257.200 92.224 C 257.200 91.687,257.020 91.136,256.800 91.000 C 256.580 90.864,256.400 90.403,256.400 89.976 C 256.400 89.549,256.220 89.200,256.000 89.200 C 255.780 89.200,255.600 88.840,255.600 88.400 C 255.600 87.960,255.420 87.600,255.200 87.600 C 254.980 87.600,254.800 87.347,254.800 87.038 C 254.800 86.521,253.262 83.262,252.800 82.800 C 252.249 82.249,250.826 79.081,251.002 78.797 C 251.113 78.617,252.688 79.197,254.502 80.085 C 258.639 82.112,259.675 82.516,263.400 83.552 C 265.508 84.139,272.200 84.327,272.200 83.800 C 272.200 83.579,271.270 83.420,270.120 83.445 C 268.197 83.487,268.011 83.408,267.659 82.398 C 267.258 81.248,266.243 80.990,260.675 80.623 C 259.366 80.537,257.574 79.905,255.075 78.648 C 251.123 76.660,250.959 76.615,249.900 77.232 M122.800 84.591 C 122.250 84.910,121.423 85.178,120.962 85.186 C 120.501 85.194,119.802 85.555,119.409 85.990 C 119.016 86.424,118.358 86.886,117.947 87.017 C 117.536 87.147,117.200 87.512,117.200 87.827 C 117.200 88.171,116.802 88.400,116.203 88.400 C 115.625 88.400,114.996 88.747,114.703 89.227 C 114.214 90.031,110.494 92.000,109.465 92.000 C 109.183 92.000,108.623 92.241,108.221 92.535 C 107.662 92.944,107.004 92.981,105.444 92.692 C 104.320 92.484,101.690 92.436,99.600 92.584 C 93.340 93.029,92.636 93.021,91.774 92.502 C 90.016 91.444,87.332 91.406,86.783 92.433 C 86.217 93.490,86.177 101.827,86.734 102.555 C 86.921 102.800,87.566 104.260,88.166 105.800 C 89.334 108.795,91.466 112.844,92.085 113.243 C 92.292 113.376,92.405 113.736,92.335 114.043 C 92.266 114.349,92.747 115.219,93.405 115.977 C 100.294 123.911,105.936 129.797,106.301 129.432 C 106.382 129.351,107.266 130.160,108.266 131.229 C 109.266 132.298,110.380 133.271,110.742 133.390 C 111.104 133.510,111.798 134.179,112.284 134.876 C 114.818 138.510,118.642 137.953,118.237 134.009 C 117.567 127.486,117.548 115.691,118.198 111.000 C 118.565 108.360,118.950 105.480,119.055 104.600 C 119.160 103.720,119.392 102.640,119.570 102.200 C 119.749 101.760,120.288 100.140,120.768 98.600 C 121.248 97.060,121.789 95.440,121.970 95.000 C 122.489 93.738,123.922 90.563,124.835 88.654 C 126.601 84.961,125.601 82.963,122.800 84.591 M184.000 86.760 C 184.000 91.946,191.724 92.844,194.169 87.942 C 195.510 85.253,195.418 85.200,189.400 85.200 L 184.000 85.200 184.000 86.760 M123.397 86.796 C 123.532 87.013,123.362 87.823,123.021 88.596 C 121.598 91.814,121.233 92.687,120.596 94.400 C 120.227 95.390,119.787 96.560,119.618 97.000 C 118.852 98.993,118.400 100.740,118.400 101.705 C 118.400 102.281,118.239 102.852,118.042 102.974 C 117.845 103.095,117.572 103.961,117.435 104.897 C 117.298 105.834,116.977 107.860,116.722 109.400 C 116.303 111.933,116.126 128.511,116.469 133.191 C 116.597 134.940,115.619 135.995,114.848 134.939 C 114.712 134.753,113.749 133.917,112.710 133.081 C 111.670 132.246,110.590 131.346,110.309 131.081 C 110.029 130.817,108.462 129.430,106.829 128.000 C 104.408 125.881,101.265 122.775,98.180 119.452 C 96.943 118.121,93.600 113.565,93.600 113.211 C 93.600 112.985,93.465 112.799,93.300 112.797 C 93.135 112.795,92.802 112.390,92.560 111.897 C 92.317 111.404,91.707 110.190,91.203 109.200 C 90.699 108.210,90.132 106.995,89.943 106.500 C 89.754 106.005,89.434 105.195,89.230 104.700 C 88.332 102.514,87.674 95.753,88.168 93.784 C 88.408 92.829,88.810 92.856,91.800 94.035 C 95.064 95.322,103.162 95.272,108.200 93.934 C 111.924 92.945,119.687 89.068,121.701 87.192 C 122.652 86.306,123.039 86.215,123.397 86.796 M152.690 87.593 C 152.405 88.000,151.131 88.699,149.858 89.146 C 145.394 90.715,143.817 92.286,145.394 93.595 C 146.031 94.124,148.219 93.736,150.095 92.761 C 151.144 92.216,152.286 92.327,152.545 93.000 C 152.804 93.675,154.221 93.813,154.600 93.200 C 154.971 92.600,157.963 92.729,159.985 93.433 C 161.514 93.965,161.830 93.974,162.185 93.492 C 162.669 92.836,163.250 92.980,165.288 94.261 C 166.246 94.862,166.697 95.403,166.553 95.778 C 166.402 96.171,166.797 96.555,167.771 96.962 C 168.563 97.293,169.312 97.887,169.435 98.282 C 169.558 98.677,169.825 99.313,170.029 99.695 C 170.819 101.175,170.497 102.111,169.300 101.814 C 168.695 101.664,168.140 101.374,168.067 101.170 C 167.993 100.967,167.616 100.800,167.229 100.800 C 166.841 100.800,166.218 100.461,165.843 100.048 C 165.096 99.222,163.494 99.156,162.161 99.897 C 161.568 100.226,161.198 100.238,160.896 99.936 C 160.376 99.416,155.245 99.395,154.729 99.911 C 154.309 100.331,152.498 100.082,152.176 99.560 C 152.058 99.370,151.659 99.376,151.281 99.575 C 150.907 99.772,149.925 100.226,149.100 100.585 C 148.275 100.944,147.596 101.454,147.591 101.719 C 147.586 101.983,147.001 102.485,146.291 102.834 C 145.469 103.238,144.950 103.819,144.862 104.434 C 144.786 104.965,144.574 105.582,144.392 105.805 C 144.027 106.250,144.814 109.200,145.298 109.200 C 145.464 109.200,145.600 109.555,145.600 109.988 C 145.600 110.421,145.967 111.429,146.416 112.228 C 147.052 113.361,147.128 113.804,146.764 114.244 C 146.389 114.695,146.586 115.081,147.748 116.177 C 148.547 116.930,149.200 117.823,149.200 118.161 C 149.200 118.878,151.323 120.555,152.317 120.623 C 153.337 120.693,154.800 121.254,154.800 121.576 C 154.800 121.833,155.492 122.207,159.511 124.124 C 160.495 124.594,162.392 124.774,167.111 124.846 L 173.400 124.942 174.320 123.171 C 175.159 121.557,175.230 120.966,175.120 116.499 C 175.054 113.804,175.135 111.599,175.300 111.599 C 175.465 111.600,175.600 111.343,175.600 111.029 C 175.600 110.156,176.864 110.084,178.200 110.881 C 180.185 112.065,181.891 111.625,182.150 109.860 C 182.197 109.541,182.459 109.011,182.733 108.681 C 183.375 107.908,183.228 102.785,182.556 102.528 C 182.294 102.427,181.432 101.295,180.640 100.012 C 177.618 95.116,170.745 90.058,164.800 88.355 C 163.810 88.071,162.877 87.659,162.726 87.438 C 162.170 86.624,153.272 86.762,152.690 87.593 M190.517 87.898 C 190.799 89.373,190.592 89.600,188.962 89.600 C 187.274 89.600,185.600 88.581,185.600 87.554 C 185.600 86.142,190.243 86.466,190.517 87.898 M222.000 88.358 C 222.829 88.662,220.724 89.093,218.124 89.153 C 216.982 89.179,215.936 89.380,215.800 89.600 C 215.664 89.820,215.201 90.000,214.772 90.000 C 212.157 90.000,205.674 95.308,204.198 98.658 C 200.256 107.600,196.615 110.958,195.224 106.935 C 193.988 103.360,198.773 95.860,204.417 92.526 C 205.068 92.142,205.600 91.686,205.600 91.514 C 205.600 91.341,205.960 91.200,206.400 91.200 C 206.840 91.200,207.200 91.020,207.200 90.800 C 207.200 90.580,207.472 90.400,207.805 90.400 C 208.138 90.400,208.723 90.241,209.105 90.047 C 212.481 88.329,219.435 87.419,222.000 88.358 M162.000 89.463 C 164.040 89.639,165.121 89.944,166.895 90.847 C 167.277 91.041,167.952 91.200,168.395 91.200 C 168.838 91.200,169.200 91.380,169.200 91.600 C 169.200 91.820,169.470 92.000,169.800 92.000 C 170.130 92.000,170.400 92.136,170.400 92.302 C 170.400 92.469,170.895 92.824,171.500 93.093 C 172.789 93.665,178.775 99.365,179.546 100.755 C 179.837 101.280,180.418 102.320,180.838 103.067 C 182.328 105.721,181.664 109.622,179.729 109.587 C 178.296 109.561,174.321 104.664,173.267 101.628 C 171.595 96.808,164.865 90.846,161.029 90.787 C 160.573 90.780,159.851 90.510,159.424 90.187 C 158.996 89.864,158.276 89.597,157.824 89.594 C 157.183 89.589,157.126 89.508,157.566 89.230 C 157.877 89.033,158.507 88.962,158.966 89.072 C 159.425 89.183,160.790 89.358,162.000 89.463 M192.147 96.511 C 192.927 97.560,192.936 97.682,192.318 98.711 C 190.858 101.138,187.600 100.594,187.600 97.922 C 187.600 95.176,190.488 94.279,192.147 96.511 M223.600 100.617 C 225.341 100.990,226.800 101.915,226.800 102.646 C 226.800 103.392,225.830 103.325,223.200 102.400 C 220.859 101.576,216.612 101.334,216.200 102.000 C 216.064 102.220,215.530 102.400,215.014 102.400 C 212.659 102.400,207.839 106.267,206.539 109.200 C 205.354 111.874,205.244 112.210,204.972 113.991 C 204.678 115.921,205.631 115.825,206.235 113.864 C 207.872 108.540,216.693 104.019,225.467 104.006 C 231.571 103.997,231.689 104.151,229.474 109.200 C 226.453 116.085,220.197 121.600,215.405 121.600 C 214.878 121.600,214.336 121.780,214.200 122.000 C 213.703 122.804,204.611 122.496,203.845 121.649 C 203.110 120.838,202.619 113.759,203.270 113.357 C 203.451 113.245,203.600 112.655,203.600 112.047 C 203.600 108.435,210.424 100.815,213.678 100.794 C 214.185 100.791,214.870 100.606,215.200 100.385 C 215.835 99.958,221.220 100.107,223.600 100.617 M162.322 101.571 C 167.479 103.457,170.776 106.541,172.398 111.000 C 173.377 113.689,173.600 115.027,173.600 118.197 C 173.600 123.190,173.588 123.200,167.266 123.200 C 162.674 123.200,160.570 122.893,158.705 121.951 C 158.323 121.758,157.738 121.600,157.405 121.600 C 157.072 121.600,156.800 121.464,156.800 121.298 C 156.800 121.131,156.215 120.740,155.500 120.427 C 153.927 119.739,149.852 115.617,149.127 113.980 C 148.840 113.331,148.469 112.800,148.302 112.800 C 148.136 112.800,148.000 112.440,148.000 112.000 C 148.000 111.560,147.820 111.200,147.600 111.200 C 147.380 111.200,147.200 110.870,147.200 110.467 C 147.200 110.063,147.077 109.610,146.926 109.459 C 145.016 107.549,145.860 105.235,148.475 105.213 C 149.829 105.201,149.944 105.110,149.875 104.116 C 149.794 102.941,151.656 101.659,153.500 101.619 C 153.995 101.609,154.400 101.420,154.400 101.200 C 154.400 100.476,160.049 100.741,162.322 101.571 M172.411 103.220 C 172.823 103.991,172.208 106.400,171.599 106.400 C 170.829 106.400,170.508 104.865,171.238 104.674 C 171.867 104.510,171.978 104.251,171.773 103.433 C 171.462 102.195,171.801 102.081,172.411 103.220 M154.200 103.091 C 153.760 103.198,153.220 103.422,153.000 103.588 C 152.780 103.754,152.098 104.010,151.484 104.157 C 149.450 104.643,150.717 105.073,154.941 105.332 C 160.892 105.696,167.568 109.395,169.728 113.525 C 171.204 116.345,171.531 116.835,171.730 116.514 C 172.495 115.276,169.449 108.241,167.368 106.442 C 164.484 103.948,159.061 102.054,158.558 103.365 C 158.424 103.714,158.143 104.000,157.934 104.000 C 157.724 104.000,157.664 103.820,157.800 103.600 C 157.939 103.374,157.615 103.200,157.056 103.200 C 156.511 103.200,155.826 103.131,155.533 103.048 C 155.240 102.964,154.640 102.983,154.200 103.091 M164.838 106.286 C 165.477 106.664,166.000 107.126,166.000 107.313 C 166.000 107.580,164.538 106.743,163.233 105.730 C 162.683 105.302,163.866 105.712,164.838 106.286 M221.858 105.907 C 221.754 106.075,221.837 107.110,222.042 108.207 C 222.672 111.560,221.115 116.000,219.311 116.000 C 219.030 116.000,218.800 116.180,218.800 116.400 C 218.800 116.620,218.451 116.800,218.024 116.800 C 217.597 116.800,217.136 116.980,217.000 117.200 C 216.864 117.420,215.683 117.600,214.376 117.600 C 213.059 117.600,212.000 117.422,212.000 117.200 C 212.000 116.980,211.681 116.800,211.291 116.800 C 210.901 116.800,209.937 116.268,209.149 115.618 L 207.715 114.437 207.311 115.318 C 206.422 117.258,206.052 118.249,205.823 119.300 L 205.585 120.400 208.192 120.400 C 209.761 120.400,210.800 120.231,210.800 119.976 C 210.800 119.743,210.998 119.675,211.240 119.825 C 211.527 120.002,211.511 119.780,211.193 119.188 C 210.767 118.391,210.791 118.311,211.386 118.539 C 211.760 118.683,212.124 118.800,212.195 118.800 C 212.267 118.800,212.231 119.160,212.116 119.600 C 211.884 120.485,214.457 120.786,215.905 120.044 C 216.287 119.848,217.500 119.263,218.600 118.744 C 221.518 117.367,224.750 114.411,225.864 112.100 C 226.209 111.385,226.651 110.800,226.846 110.800 C 227.041 110.800,227.200 110.440,227.200 110.000 C 227.200 109.560,227.380 109.200,227.600 109.200 C 227.820 109.200,228.000 108.786,228.000 108.280 C 228.000 107.774,228.200 107.160,228.445 106.915 C 229.346 106.014,228.325 105.600,225.200 105.600 C 223.466 105.600,221.962 105.738,221.858 105.907 M147.600 107.388 C 147.600 107.491,147.960 108.217,148.400 109.000 C 148.840 109.783,149.200 110.689,149.200 111.012 C 149.200 111.335,149.336 111.600,149.502 111.600 C 149.669 111.600,150.043 112.139,150.335 112.798 C 151.044 114.401,155.158 118.537,156.737 119.236 C 157.432 119.544,158.000 119.931,158.000 120.098 C 158.000 120.264,158.450 120.400,159.000 120.400 C 159.550 120.400,160.000 120.562,160.000 120.760 C 160.000 121.193,162.573 121.578,167.302 121.853 C 171.503 122.098,171.665 121.920,170.327 118.547 C 169.323 116.018,168.627 115.580,167.368 116.688 C 166.923 117.079,166.166 117.625,165.685 117.900 C 164.749 118.435,158.800 118.606,158.800 118.098 C 158.800 117.931,158.280 117.565,157.644 117.284 C 155.000 116.113,153.088 109.472,154.880 107.680 C 155.253 107.307,155.024 107.200,153.848 107.200 L 152.336 107.200 152.611 109.768 C 153.079 114.138,152.053 114.101,150.353 109.688 C 149.538 107.570,147.600 105.951,147.600 107.388 M216.400 107.967 C 216.400 108.782,217.075 109.202,217.900 108.898 C 218.866 108.543,218.471 107.200,217.400 107.200 C 216.681 107.200,216.400 107.416,216.400 107.967 M226.390 108.227 C 226.175 108.792,225.781 109.647,225.515 110.127 C 225.248 110.607,225.047 111.090,225.069 111.200 C 225.090 111.310,224.768 111.746,224.354 112.170 C 223.614 112.926,223.600 112.887,223.600 110.070 L 223.600 107.200 225.190 107.200 C 226.732 107.200,226.768 107.231,226.390 108.227 M158.529 108.640 C 158.394 108.993,158.535 109.440,158.842 109.634 C 159.742 110.204,160.000 110.063,160.000 109.000 C 160.000 107.867,158.927 107.605,158.529 108.640 M212.400 109.600 C 212.400 110.044,212.667 110.400,213.000 110.400 C 213.333 110.400,213.600 110.044,213.600 109.600 C 213.600 109.156,213.333 108.800,213.000 108.800 C 212.667 108.800,212.400 109.156,212.400 109.600 M163.041 110.236 C 162.667 111.213,163.145 111.658,164.050 111.173 C 164.690 110.831,164.756 110.629,164.377 110.172 C 163.759 109.428,163.344 109.448,163.041 110.236 M192.998 111.771 C 199.242 116.534,193.334 126.168,186.592 122.216 C 184.232 120.834,183.600 119.693,183.600 116.817 C 183.600 111.626,189.004 108.725,192.998 111.771 M193.240 124.868 C 196.345 125.935,197.834 129.366,196.351 132.034 C 194.057 136.159,189.127 136.228,186.744 132.168 C 185.975 130.857,185.793 128.975,186.400 128.600 C 186.620 128.464,186.800 128.085,186.800 127.758 C 186.800 127.431,187.216 126.767,187.724 126.282 C 189.749 124.348,190.883 124.057,193.240 124.868 M196.564 138.431 C 198.251 140.435,197.814 143.722,195.710 144.848 C 191.399 147.155,187.067 141.968,190.360 138.442 C 192.050 136.633,195.047 136.628,196.564 138.431 M195.200 150.513 C 195.200 150.742,198.023 159.025,198.365 159.800 C 198.560 160.240,199.035 161.320,199.421 162.200 C 199.807 163.080,200.546 164.357,201.062 165.038 C 201.578 165.719,202.000 166.502,202.000 166.778 C 202.000 168.795,222.599 186.000,225.015 186.000 C 225.159 186.000,225.754 186.339,226.338 186.753 C 227.335 187.460,228.211 187.978,231.900 190.038 C 232.725 190.498,233.571 191.038,233.780 191.238 C 233.989 191.437,234.484 191.600,234.880 191.600 C 235.276 191.600,235.600 191.747,235.600 191.926 C 235.600 192.105,236.275 192.617,237.100 193.064 C 246.094 197.936,253.731 203.878,256.782 208.376 C 261.259 214.976,262.417 220.783,258.064 214.810 C 254.402 209.782,248.493 204.660,243.400 202.099 C 242.520 201.656,240.585 200.643,239.099 199.847 C 237.613 199.051,233.293 196.808,229.499 194.863 C 220.765 190.386,218.218 189.010,216.807 188.005 C 216.185 187.562,215.524 187.200,215.338 187.200 C 215.152 187.199,214.477 186.749,213.838 186.200 C 213.199 185.650,212.536 185.200,212.366 185.200 C 212.196 185.200,211.819 184.975,211.529 184.700 C 211.238 184.425,210.280 183.664,209.400 183.009 C 206.814 181.085,201.182 175.533,200.059 173.800 C 198.875 171.973,195.600 165.323,195.600 164.745 C 195.600 164.534,195.240 163.616,194.800 162.706 C 194.360 161.795,194.000 160.644,194.000 160.148 C 194.000 159.653,193.820 159.136,193.600 159.000 C 193.159 158.728,193.037 151.096,193.467 150.667 C 193.723 150.411,195.200 150.280,195.200 150.513 M75.290 160.603 C 74.130 160.887,72.943 161.315,72.653 161.556 C 72.364 161.796,72.021 161.888,71.893 161.759 C 70.130 159.997,56.577 172.333,53.280 178.700 C 50.859 183.377,49.836 185.886,48.590 190.200 C 48.209 191.520,47.740 192.771,47.549 192.980 C 47.034 193.541,47.125 198.998,47.669 200.192 C 48.505 202.026,48.992 201.047,49.273 196.968 C 49.612 192.038,49.978 189.661,50.442 189.374 C 50.639 189.252,50.800 188.724,50.800 188.200 C 50.800 187.676,50.980 187.136,51.200 187.000 C 51.420 186.864,51.600 186.428,51.600 186.032 C 51.600 185.235,54.260 179.882,55.568 178.044 C 56.026 177.402,56.400 176.756,56.400 176.610 C 56.400 176.463,56.625 176.114,56.900 175.835 C 57.175 175.555,57.850 174.727,58.400 173.995 C 60.025 171.830,63.812 168.166,65.878 166.761 C 66.935 166.041,67.890 165.347,68.000 165.218 C 68.457 164.682,73.506 162.438,74.800 162.196 C 77.753 161.642,80.800 161.525,80.800 161.964 C 80.800 162.204,81.177 162.400,81.638 162.400 C 83.117 162.400,86.930 165.667,87.941 167.800 C 89.318 170.706,90.000 172.501,90.000 173.222 C 90.000 173.679,90.156 174.356,90.346 174.726 C 90.537 175.097,90.807 178.611,90.947 182.535 C 91.540 199.210,92.032 200.395,96.185 195.170 C 96.959 194.196,97.594 193.245,97.596 193.056 C 97.602 192.509,101.630 187.092,102.768 186.100 C 104.723 184.397,107.951 185.742,107.987 188.276 C 107.994 188.758,108.155 189.248,108.344 189.365 C 109.283 189.946,109.199 196.254,108.190 201.000 C 106.606 208.448,98.005 218.081,89.200 222.269 C 84.230 224.633,75.029 226.240,73.945 224.933 C 73.701 224.640,72.815 224.400,71.975 224.400 C 71.135 224.400,70.336 224.220,70.200 224.000 C 70.064 223.780,69.629 223.600,69.233 223.600 C 68.599 223.600,63.726 221.339,63.200 220.800 C 63.090 220.688,62.280 220.063,61.400 219.412 C 57.481 216.514,51.600 209.673,51.600 208.013 C 51.600 207.780,51.420 207.232,51.200 206.795 C 50.980 206.358,50.620 205.642,50.400 205.205 C 50.180 204.768,50.000 203.980,50.000 203.454 C 50.000 202.151,48.916 201.233,48.538 202.217 C 47.654 204.521,51.030 211.266,55.380 215.887 C 57.261 217.885,58.800 219.718,58.800 219.960 C 58.800 220.202,59.138 220.400,59.551 220.400 C 59.964 220.400,60.521 220.664,60.789 220.987 C 62.272 222.773,68.554 225.442,72.800 226.089 C 77.248 226.767,84.966 226.579,85.519 225.779 C 85.674 225.556,87.015 224.864,88.500 224.242 C 89.985 223.619,91.200 222.940,91.200 222.731 C 91.200 222.523,91.340 222.439,91.511 222.545 C 94.344 224.296,109.600 206.406,109.600 201.334 C 109.600 200.908,109.793 200.367,110.029 200.131 C 111.009 199.151,110.970 192.361,109.968 189.393 C 107.116 180.950,102.581 181.647,97.004 191.385 C 95.812 193.465,94.294 195.200,93.666 195.200 C 93.286 195.200,93.055 192.379,92.400 179.764 L 92.025 172.528 90.502 169.550 C 87.519 163.718,83.488 159.833,81.618 160.989 C 81.434 161.103,80.770 160.928,80.142 160.600 C 78.810 159.906,78.147 159.906,75.290 160.603 M312.300 163.467 C 311.915 163.572,311.600 163.836,311.600 164.053 C 311.600 164.270,311.433 164.344,311.230 164.219 C 310.652 163.861,308.950 164.761,304.275 167.898 C 301.897 169.494,299.794 170.800,299.603 170.800 C 298.992 170.800,292.052 178.870,290.679 181.177 C 286.791 187.708,287.085 192.780,291.635 197.678 C 292.716 198.841,293.600 199.939,293.600 200.119 C 293.600 200.824,288.123 205.200,287.241 205.200 C 285.109 205.200,280.623 212.563,280.635 216.043 C 280.652 221.127,289.252 230.000,294.163 230.000 C 294.519 230.000,295.123 230.162,295.505 230.361 C 300.086 232.742,314.005 232.308,320.300 229.589 C 320.795 229.375,321.605 229.040,322.100 228.843 C 327.437 226.729,334.291 222.448,337.200 219.413 C 337.970 218.609,339.161 217.415,339.848 216.759 C 343.012 213.735,350.000 202.079,350.000 199.826 C 350.000 199.350,350.150 198.789,350.333 198.580 C 352.287 196.347,351.830 186.965,349.676 185.094 C 348.547 184.113,345.624 183.841,345.366 184.694 C 345.123 185.500,341.536 192.791,340.492 194.601 C 338.389 198.249,335.757 201.697,333.318 204.000 C 329.137 207.947,329.016 208.013,326.500 207.668 C 324.893 207.449,325.976 204.297,328.487 201.885 C 338.227 192.531,336.985 186.421,322.110 170.524 C 319.807 168.062,317.625 165.452,317.261 164.724 C 316.591 163.383,314.520 162.858,312.300 163.467 M316.616 166.497 C 317.234 167.430,319.216 169.725,321.021 171.597 C 335.091 186.189,336.646 193.353,327.338 200.696 C 323.753 203.524,323.338 208.545,326.621 209.370 C 328.912 209.944,334.785 205.758,337.680 201.487 C 341.285 196.170,342.743 193.751,344.264 190.568 C 346.737 185.388,348.224 184.736,349.461 188.287 C 350.079 190.062,350.181 195.841,349.600 196.200 C 349.380 196.336,349.200 196.876,349.200 197.400 C 349.200 197.924,349.020 198.464,348.800 198.600 C 348.580 198.736,348.400 199.163,348.400 199.548 C 348.400 200.828,344.892 207.830,342.662 211.000 C 337.912 217.755,328.888 224.830,322.000 227.199 C 321.230 227.464,320.240 227.824,319.800 228.000 C 317.307 228.995,316.208 229.342,315.259 229.433 C 314.676 229.489,312.580 229.741,310.600 229.994 C 305.288 230.670,298.790 230.098,294.600 228.586 C 293.091 228.041,289.528 226.271,289.064 225.835 C 288.809 225.596,287.760 224.770,286.734 224.000 C 279.695 218.718,280.729 211.687,289.396 205.892 C 292.254 203.982,295.200 201.031,295.200 200.080 C 295.199 199.428,294.665 198.707,291.870 195.580 C 291.171 194.800,290.375 193.767,290.100 193.286 C 289.503 192.241,289.433 187.121,290.000 185.995 C 290.220 185.558,290.580 184.842,290.800 184.405 C 291.020 183.968,291.202 183.383,291.204 183.105 C 291.218 181.239,299.020 173.175,304.163 169.711 C 311.871 164.519,314.806 163.761,316.616 166.497 M119.166 204.030 C 118.855 204.227,118.189 204.391,117.687 204.394 C 117.186 204.397,116.672 204.669,116.546 204.998 C 116.419 205.326,116.180 205.511,116.014 205.409 C 115.848 205.306,114.675 206.027,113.408 207.011 C 112.141 207.995,110.754 208.800,110.326 208.800 C 109.273 208.800,108.001 209.518,107.997 210.114 C 107.991 211.337,101.778 218.200,100.100 218.838 C 99.605 219.026,99.200 219.416,99.200 219.704 C 99.200 219.992,98.690 220.529,98.066 220.897 C 97.442 221.266,96.207 222.340,95.321 223.284 C 94.435 224.228,93.473 225.056,93.183 225.124 C 92.893 225.192,92.183 225.585,91.605 225.996 C 91.027 226.408,89.754 227.047,88.777 227.416 C 87.800 227.785,86.410 228.349,85.689 228.668 C 84.968 228.987,83.258 229.428,81.889 229.647 C 80.520 229.867,79.229 230.216,79.020 230.423 C 78.359 231.078,77.012 230.832,76.465 229.955 C 75.972 229.166,75.719 229.129,72.612 229.388 C 70.377 229.574,69.200 229.523,69.020 229.232 C 68.873 228.995,67.766 228.800,66.559 228.800 C 64.722 228.800,64.384 228.690,64.482 228.126 C 64.608 227.405,61.970 226.572,60.882 226.990 C 60.578 227.107,59.871 226.842,59.311 226.401 C 58.750 225.960,57.911 225.597,57.446 225.594 C 56.981 225.591,55.807 225.312,54.839 224.975 C 52.025 223.995,50.936 225.521,52.778 227.862 C 53.205 228.406,53.456 229.110,53.335 229.426 C 53.185 229.816,53.392 230.000,53.980 230.000 C 54.456 230.000,56.122 231.074,57.682 232.387 C 59.242 233.700,60.671 234.679,60.859 234.564 C 61.047 234.448,61.200 234.522,61.200 234.729 C 61.200 235.781,68.531 239.897,73.459 241.612 C 85.394 245.766,95.474 240.923,107.206 225.400 C 117.979 211.144,117.469 211.739,121.108 209.213 C 123.918 207.263,124.576 205.974,123.352 204.813 C 122.474 203.978,119.983 203.512,119.166 204.030 M120.998 205.996 C 121.133 206.214,119.833 207.789,118.110 209.496 C 114.764 212.812,113.559 214.176,112.012 216.400 C 111.477 217.170,110.931 217.890,110.800 218.000 C 110.669 218.110,110.135 218.830,109.613 219.600 C 92.613 244.699,78.558 247.730,58.100 230.706 C 54.383 227.613,53.831 225.149,57.400 227.583 C 57.620 227.733,58.610 228.100,59.600 228.398 C 60.590 228.695,61.571 229.088,61.780 229.270 C 61.989 229.451,62.563 229.600,63.056 229.600 C 63.549 229.600,64.052 229.761,64.174 229.958 C 64.295 230.155,65.071 230.416,65.897 230.538 C 66.724 230.661,68.750 230.989,70.400 231.268 C 74.844 232.019,83.247 231.695,83.831 230.750 C 83.950 230.557,84.489 230.400,85.029 230.400 C 85.569 230.400,86.323 230.236,86.705 230.035 C 87.087 229.834,88.390 229.203,89.600 228.633 C 91.893 227.553,94.057 226.357,94.400 225.981 C 94.510 225.860,95.230 225.323,96.000 224.788 C 98.007 223.392,99.208 222.316,103.967 217.650 C 111.999 209.774,116.318 206.459,119.200 205.957 C 119.970 205.823,120.634 205.688,120.676 205.657 C 120.718 205.626,120.863 205.778,120.998 205.996 M312.000 233.281 C 311.450 233.504,310.397 233.730,309.660 233.784 C 308.923 233.838,308.203 234.043,308.060 234.241 C 307.917 234.438,307.350 234.631,306.800 234.668 C 304.846 234.800,300.593 236.051,300.156 236.621 C 299.912 236.939,299.536 237.200,299.320 237.200 C 297.187 237.200,298.337 241.145,300.509 241.281 C 301.219 241.326,302.340 241.393,303.000 241.431 C 303.660 241.469,304.726 241.710,305.369 241.966 C 306.012 242.223,306.755 242.349,307.020 242.248 C 307.285 242.146,307.659 242.212,307.851 242.395 C 308.379 242.898,312.449 244.017,312.849 243.769 C 313.042 243.650,313.200 243.740,313.200 243.969 C 313.200 244.198,313.695 244.503,314.300 244.649 C 320.801 246.208,331.358 254.263,335.942 261.162 C 338.595 265.155,341.600 272.454,341.600 274.903 C 341.600 275.480,341.780 276.064,342.000 276.200 C 342.547 276.538,342.513 285.903,341.956 288.294 C 339.504 298.829,334.304 309.198,329.141 313.848 C 328.624 314.314,326.962 316.067,325.449 317.743 C 319.840 323.958,308.289 331.847,295.239 338.375 C 287.980 342.005,281.876 344.800,281.204 344.800 C 280.982 344.800,280.800 344.941,280.800 345.113 C 280.800 345.285,280.353 345.463,279.806 345.508 C 279.260 345.553,278.045 345.937,277.106 346.361 C 276.168 346.786,274.680 347.350,273.800 347.615 C 272.920 347.881,271.887 348.256,271.505 348.449 C 271.123 348.642,270.538 348.800,270.205 348.800 C 269.872 348.800,269.600 348.935,269.599 349.100 C 269.599 349.265,268.840 349.452,267.913 349.516 C 266.986 349.580,266.089 349.850,265.920 350.116 C 265.751 350.382,265.609 350.494,265.606 350.363 C 265.600 350.116,263.452 350.456,260.400 351.188 C 255.142 352.449,241.846 352.969,237.200 352.096 C 235.990 351.868,234.280 351.564,233.400 351.420 C 231.230 351.065,228.683 350.333,228.220 349.930 C 228.011 349.749,227.541 349.600,227.175 349.600 C 225.745 349.600,217.641 345.657,214.000 343.190 C 208.720 339.612,201.224 332.046,197.734 326.772 C 195.143 322.856,192.831 324.847,193.351 330.546 C 194.103 338.782,194.330 340.490,194.725 340.885 C 194.962 341.122,195.058 341.808,194.938 342.409 C 194.818 343.011,194.955 343.929,195.242 344.451 C 195.529 344.973,195.722 345.678,195.671 346.018 C 195.619 346.358,196.125 347.963,196.794 349.586 C 198.393 353.462,197.504 355.447,194.815 354.008 C 194.343 353.755,193.561 353.580,193.078 353.619 C 191.357 353.756,191.302 353.657,191.023 349.900 C 190.693 345.470,190.152 339.213,189.779 335.500 C 189.607 333.796,189.653 332.800,189.904 332.800 C 190.438 332.800,190.043 329.117,189.454 328.600 C 189.204 328.380,188.643 327.525,188.208 326.700 C 187.065 324.531,184.400 324.705,184.400 326.949 C 184.400 327.382,184.105 328.062,183.745 328.460 C 183.012 329.270,182.844 332.333,183.510 332.744 C 183.908 332.990,183.844 333.862,182.967 340.200 C 182.846 341.080,182.509 342.340,182.219 343.000 C 181.929 343.660,181.380 345.550,180.998 347.200 C 180.617 348.850,179.786 351.156,179.153 352.325 C 178.519 353.493,178.000 354.680,178.000 354.963 C 178.000 355.245,177.640 355.802,177.200 356.200 C 176.760 356.598,176.400 357.097,176.400 357.309 C 176.400 357.521,175.881 358.286,175.246 359.008 C 174.612 359.731,174.027 360.478,173.946 360.668 C 172.346 364.451,158.309 368.787,153.200 367.078 C 152.870 366.968,151.318 366.583,149.750 366.224 C 136.621 363.216,120.123 353.574,102.253 338.464 C 92.926 330.577,79.178 314.951,77.019 309.783 C 76.657 308.918,76.028 307.848,75.619 307.405 C 74.429 306.114,71.019 299.341,69.375 295.000 C 68.542 292.800,67.757 290.910,67.630 290.800 C 67.504 290.690,67.379 290.240,67.353 289.800 C 67.327 289.360,67.011 287.650,66.650 286.000 C 65.549 280.963,64.989 272.171,65.551 268.744 C 66.759 261.380,69.383 253.045,71.108 251.096 C 71.451 250.709,71.747 249.641,71.766 248.723 C 71.804 246.871,71.808 246.873,66.032 245.578 C 63.197 244.942,60.111 243.318,59.076 241.918 C 58.621 241.303,58.030 240.800,57.761 240.800 C 57.492 240.800,56.462 239.860,55.472 238.710 C 52.784 235.591,51.236 236.610,48.643 243.200 C 48.253 244.190,47.704 245.540,47.423 246.200 C 46.200 249.073,46.000 249.691,46.000 250.595 C 46.000 251.122,45.839 251.652,45.642 251.774 C 45.445 251.895,45.188 252.671,45.069 253.497 C 44.951 254.324,44.576 256.170,44.235 257.600 C 43.577 260.366,43.298 277.165,43.900 277.766 C 44.065 277.931,44.524 279.626,44.920 281.533 C 45.317 283.440,45.823 285.720,46.046 286.600 C 46.269 287.480,46.664 289.226,46.925 290.480 C 47.186 291.735,47.625 292.986,47.900 293.260 C 48.175 293.535,48.400 293.896,48.400 294.062 C 48.400 294.673,52.112 303.033,52.832 304.045 C 53.242 304.620,53.487 305.180,53.377 305.289 C 53.184 305.483,57.078 312.401,57.605 312.800 C 57.750 312.910,58.074 313.598,58.324 314.330 C 58.574 315.061,59.189 316.164,59.690 316.780 C 60.190 317.395,60.914 318.417,61.298 319.050 C 63.691 322.990,68.776 329.474,73.089 334.084 C 74.470 335.560,75.600 336.915,75.600 337.095 C 75.600 337.275,77.175 338.838,79.100 340.569 C 81.025 342.300,83.787 344.816,85.239 346.158 C 86.690 347.501,89.093 349.590,90.578 350.800 C 92.064 352.010,93.889 353.512,94.635 354.137 C 96.218 355.465,98.071 356.760,107.800 363.336 C 110.817 365.376,113.205 366.800,113.606 366.800 C 113.865 366.800,114.554 367.140,115.138 367.555 C 120.086 371.075,135.637 377.749,146.000 380.800 C 147.650 381.286,149.450 381.831,150.000 382.011 C 151.568 382.526,155.022 383.256,155.430 383.159 C 155.634 383.110,156.340 383.292,156.999 383.563 C 157.658 383.834,158.645 383.970,159.192 383.865 C 159.738 383.761,160.639 383.909,161.193 384.194 C 165.154 386.231,174.883 386.046,178.800 383.859 C 179.570 383.429,180.739 382.963,181.398 382.823 C 182.149 382.663,182.651 382.276,182.745 381.784 C 182.827 381.353,183.407 380.353,184.033 379.561 C 185.308 377.949,188.000 373.039,188.000 372.326 C 188.000 372.071,188.252 371.579,188.560 371.231 C 189.321 370.373,190.100 365.820,190.293 361.100 C 190.494 356.209,191.224 355.854,193.788 359.402 C 194.661 360.611,195.605 361.600,195.885 361.600 C 196.606 361.600,198.399 364.212,199.751 367.230 C 200.384 368.643,201.245 370.552,201.665 371.471 C 202.979 374.351,203.635 378.839,203.250 382.315 C 203.062 384.012,202.984 385.535,203.078 385.700 C 203.171 385.865,203.057 386.000,202.824 386.000 C 202.591 386.000,202.400 386.199,202.400 386.442 C 202.400 386.686,201.826 387.610,201.124 388.496 C 197.872 392.602,192.517 392.579,185.649 388.430 C 182.575 386.572,181.385 386.524,180.955 388.238 C 180.726 389.150,182.382 392.326,183.300 392.733 C 183.465 392.807,183.600 393.083,183.600 393.347 C 183.600 395.863,192.848 404.738,197.800 406.973 C 198.680 407.370,199.977 407.960,200.682 408.284 C 208.050 411.673,220.306 404.563,222.201 395.800 C 223.139 391.461,223.274 384.314,222.434 383.474 C 222.195 383.235,222.000 382.582,222.000 382.022 C 222.000 377.314,212.519 365.271,204.700 360.047 C 202.995 358.908,201.600 357.799,201.600 357.582 C 201.600 357.366,202.278 357.637,203.107 358.186 C 203.935 358.734,205.240 359.286,206.007 359.412 C 207.752 359.700,210.471 360.460,211.000 360.807 C 211.220 360.951,212.197 361.108,213.171 361.155 C 214.145 361.202,215.111 361.345,215.318 361.473 C 216.481 362.192,238.614 363.077,246.200 362.708 C 255.088 362.276,260.982 361.588,269.400 360.001 C 273.702 359.190,275.895 358.688,278.200 357.986 C 279.520 357.585,281.320 357.065,282.200 356.831 C 287.666 355.381,293.341 353.424,294.354 352.641 C 294.659 352.405,295.109 352.200,295.354 352.185 C 296.852 352.093,298.505 351.426,305.600 348.051 C 323.541 339.519,337.787 327.845,346.472 314.561 C 350.586 308.268,354.800 298.962,354.800 296.168 C 354.800 295.489,354.923 294.810,355.074 294.659 C 356.194 293.540,356.985 285.209,356.028 284.617 C 355.444 284.256,355.192 284.963,354.785 288.092 C 354.578 289.691,354.216 291.900,353.982 293.000 C 353.747 294.100,353.456 295.587,353.334 296.304 C 353.212 297.021,352.951 297.706,352.756 297.827 C 352.560 297.948,352.400 298.373,352.400 298.770 C 352.400 301.138,345.271 315.120,343.207 316.800 C 343.072 316.910,342.528 317.630,341.998 318.400 C 337.124 325.480,320.553 339.075,311.900 343.092 C 311.075 343.475,310.400 343.926,310.400 344.094 C 310.400 344.262,310.085 344.404,309.700 344.409 C 309.315 344.414,308.550 344.770,308.000 345.200 C 307.450 345.630,306.868 345.986,306.707 345.991 C 306.547 345.996,304.837 346.738,302.907 347.639 C 300.978 348.541,298.995 349.441,298.500 349.639 C 296.102 350.601,295.346 350.921,294.705 351.247 C 294.323 351.441,293.736 351.600,293.400 351.600 C 293.064 351.600,292.387 351.808,291.895 352.062 C 289.974 353.056,289.584 353.200,288.829 353.200 C 288.399 353.200,287.936 353.380,287.800 353.600 C 287.664 353.820,287.034 354.000,286.400 354.000 C 285.766 354.000,285.136 354.180,285.000 354.400 C 284.864 354.620,284.324 354.800,283.800 354.800 C 283.276 354.800,282.736 354.980,282.600 355.200 C 282.464 355.420,281.834 355.600,281.200 355.600 C 280.566 355.600,279.948 355.761,279.826 355.958 C 279.705 356.155,278.929 356.410,278.103 356.525 C 277.276 356.640,275.790 356.939,274.800 357.189 C 271.731 357.964,269.501 358.426,266.800 358.848 C 265.370 359.071,263.120 359.429,261.800 359.643 C 260.480 359.857,258.050 360.218,256.400 360.445 C 252.574 360.971,225.557 361.509,224.924 361.071 C 224.663 360.890,222.863 360.569,220.924 360.358 C 217.482 359.982,214.953 359.599,210.700 358.811 C 209.545 358.597,207.880 358.304,207.000 358.160 C 206.120 358.016,204.922 357.561,204.338 357.149 C 203.754 356.737,203.124 356.398,202.938 356.396 C 200.816 356.370,196.330 345.498,195.761 339.000 C 195.665 337.900,195.403 334.945,195.179 332.434 C 194.625 326.225,195.242 325.765,198.364 330.057 C 204.805 338.912,216.354 347.818,225.000 350.597 C 226.100 350.951,227.360 351.391,227.800 351.575 C 229.691 352.365,233.911 353.241,239.657 354.037 C 245.156 354.798,257.942 353.733,264.200 351.992 C 265.080 351.747,266.497 351.399,267.349 351.218 C 268.200 351.037,269.035 350.666,269.204 350.394 C 269.373 350.121,269.710 350.021,269.954 350.172 C 270.642 350.597,285.097 345.315,286.431 344.151 C 286.779 343.848,287.323 343.600,287.640 343.600 C 288.427 343.600,302.152 336.699,302.800 335.977 C 302.910 335.855,303.585 335.518,304.300 335.229 C 305.015 334.940,305.600 334.589,305.600 334.449 C 305.600 334.310,306.185 333.942,306.900 333.632 C 307.615 333.323,308.952 332.559,309.872 331.935 C 310.792 331.311,311.722 330.800,311.939 330.800 C 312.156 330.800,312.393 330.653,312.467 330.472 C 312.540 330.292,313.770 329.357,315.200 328.394 C 316.630 327.432,318.041 326.406,318.335 326.116 C 318.629 325.826,319.529 325.102,320.335 324.507 C 326.398 320.036,338.000 306.211,338.000 303.457 C 338.000 303.096,338.160 302.800,338.355 302.800 C 338.550 302.800,339.213 301.585,339.827 300.100 C 340.441 298.615,341.091 297.229,341.272 297.020 C 341.452 296.811,341.600 296.237,341.600 295.744 C 341.600 295.251,341.760 294.748,341.956 294.627 C 342.366 294.374,342.819 292.121,342.926 289.800 C 342.967 288.920,343.174 287.930,343.386 287.600 C 343.993 286.655,344.147 279.801,343.622 277.073 C 342.946 273.556,342.376 271.126,342.010 270.200 C 338.557 261.465,336.117 257.955,328.591 250.900 C 328.297 250.625,327.864 250.400,327.629 250.400 C 327.393 250.400,327.200 250.250,327.200 250.068 C 327.200 249.885,326.705 249.480,326.100 249.168 C 325.495 248.855,324.672 248.305,324.271 247.943 C 323.598 247.337,317.916 244.429,315.600 243.505 C 315.050 243.286,314.287 242.948,313.905 242.753 C 313.523 242.559,312.859 242.400,312.429 242.400 C 311.999 242.400,311.548 242.240,311.427 242.044 C 311.215 241.701,309.989 241.422,306.600 240.944 C 305.720 240.820,304.829 240.556,304.620 240.359 C 304.411 240.162,303.567 240.000,302.744 240.000 C 301.921 240.000,301.138 239.824,301.005 239.608 C 300.651 239.035,301.528 237.600,302.233 237.600 C 302.566 237.600,303.584 237.240,304.494 236.800 C 305.405 236.360,306.556 236.000,307.052 236.000 C 307.547 236.000,308.064 235.820,308.200 235.600 C 308.336 235.380,309.031 235.200,309.744 235.200 C 310.457 235.200,311.245 234.995,311.496 234.744 C 311.800 234.440,314.160 234.289,318.600 234.289 C 323.040 234.289,325.400 234.440,325.704 234.744 C 325.955 234.995,326.653 235.200,327.256 235.200 C 327.859 235.200,328.464 235.380,328.600 235.600 C 328.736 235.820,329.187 236.000,329.602 236.000 C 332.753 236.000,346.000 246.196,346.000 248.621 C 346.000 248.738,346.360 249.220,346.800 249.692 C 347.240 250.164,347.600 250.787,347.600 251.075 C 347.600 251.364,347.735 251.601,347.900 251.601 C 348.065 251.602,348.650 252.592,349.200 253.800 C 349.750 255.008,350.335 255.998,350.500 255.999 C 350.665 255.999,350.800 256.326,350.800 256.725 C 350.800 257.124,351.160 258.195,351.600 259.106 C 352.040 260.016,352.400 261.029,352.400 261.357 C 352.400 261.685,352.560 262.052,352.756 262.173 C 352.951 262.294,353.212 262.979,353.334 263.696 C 353.456 264.413,353.747 265.900,353.982 267.000 C 354.905 271.336,355.237 274.006,355.461 278.900 C 355.590 281.705,355.831 284.000,355.998 284.000 C 357.007 284.000,357.288 282.662,357.025 279.100 C 356.291 269.146,356.149 268.171,354.621 262.614 C 351.107 249.830,340.712 238.139,329.459 234.314 C 325.509 232.971,314.390 232.313,312.000 233.281 M56.543 241.918 C 59.784 245.293,63.941 247.406,67.295 247.386 C 70.321 247.367,70.600 248.118,68.892 251.698 C 68.236 253.074,67.472 254.920,67.194 255.800 C 66.916 256.680,66.550 257.760,66.381 258.200 C 62.905 267.220,62.918 282.507,66.409 291.000 C 66.590 291.440,66.856 292.340,67.000 293.000 C 67.144 293.660,67.518 294.785,67.831 295.500 C 68.144 296.215,68.691 297.475,69.047 298.300 C 71.769 304.614,77.300 314.256,78.472 314.733 C 78.653 314.807,78.800 315.037,78.800 315.245 C 78.800 315.572,82.530 320.646,83.177 321.200 C 83.306 321.310,84.212 322.390,85.192 323.600 C 87.009 325.845,96.506 335.478,99.400 338.012 C 100.833 339.266,105.282 343.004,107.408 344.740 C 111.741 348.278,125.175 357.600,125.941 357.600 C 126.157 357.600,126.393 357.735,126.467 357.900 C 126.654 358.321,128.398 359.295,132.800 361.438 C 138.493 364.209,140.333 365.015,143.200 366.000 C 143.970 366.264,144.960 366.628,145.400 366.807 C 148.880 368.226,161.538 369.422,162.535 368.425 C 162.769 368.191,163.419 367.997,163.980 367.994 C 165.193 367.987,167.451 367.238,168.818 366.390 C 169.358 366.055,170.250 365.552,170.800 365.271 C 173.606 363.842,177.665 358.997,179.767 354.569 C 180.594 352.826,181.435 351.087,181.635 350.705 C 181.836 350.323,182.000 349.659,182.000 349.229 C 182.000 348.799,182.180 348.336,182.400 348.200 C 182.620 348.064,182.800 347.524,182.800 347.000 C 182.800 346.476,182.961 345.948,183.158 345.826 C 183.500 345.615,183.756 344.344,184.251 340.400 C 184.376 339.410,184.640 338.429,184.839 338.220 C 185.037 338.011,185.200 336.889,185.200 335.726 C 185.200 334.563,185.377 332.844,185.594 331.906 C 185.810 330.968,186.085 329.698,186.205 329.084 C 186.524 327.454,187.042 328.070,187.387 330.488 C 187.553 331.650,187.848 333.680,188.043 335.000 C 190.048 348.552,189.890 360.974,187.618 368.400 C 187.449 368.950,187.094 370.120,186.828 371.000 C 186.248 372.921,184.719 376.147,184.300 376.333 C 184.135 376.407,184.000 376.681,184.000 376.942 C 184.000 377.895,179.939 381.761,177.994 382.660 C 175.185 383.958,174.345 384.087,170.307 383.838 C 163.389 383.411,161.016 383.148,160.620 382.766 C 160.411 382.565,159.477 382.400,158.544 382.400 C 157.611 382.400,156.748 382.239,156.626 382.042 C 156.505 381.845,155.729 381.586,154.903 381.465 C 152.121 381.058,150.605 380.747,149.800 380.418 C 149.360 380.238,148.190 379.873,147.200 379.607 C 146.210 379.340,145.087 378.960,144.705 378.761 C 144.323 378.562,143.468 378.400,142.805 378.400 C 142.142 378.400,141.600 378.220,141.600 378.000 C 141.600 377.780,141.274 377.600,140.875 377.600 C 140.476 377.600,139.405 377.240,138.494 376.800 C 137.584 376.360,136.565 376.000,136.231 376.000 C 135.898 376.000,135.034 375.675,134.312 375.277 C 133.590 374.880,132.370 374.308,131.600 374.007 C 129.327 373.118,125.107 371.231,123.600 370.430 C 122.830 370.021,120.580 368.839,118.600 367.803 C 116.620 366.768,114.820 365.778,114.600 365.603 C 114.380 365.428,113.570 364.927,112.800 364.489 C 109.108 362.390,105.235 359.925,104.793 359.392 C 104.523 359.066,104.099 358.800,103.851 358.799 C 103.603 358.799,102.770 358.259,102.000 357.600 C 101.230 356.941,100.467 356.401,100.305 356.401 C 100.036 356.400,99.043 355.665,97.855 354.587 C 97.605 354.360,96.770 353.736,96.000 353.200 C 95.230 352.664,94.396 352.040,94.147 351.813 C 93.898 351.586,92.909 350.770,91.951 350.000 C 81.734 341.795,70.671 329.891,63.327 319.200 C 62.496 317.990,61.677 316.940,61.508 316.867 C 61.339 316.793,61.200 316.556,61.200 316.339 C 61.200 316.122,60.660 315.159,60.000 314.200 C 59.340 313.241,58.800 312.263,58.800 312.028 C 58.800 311.793,58.665 311.599,58.500 311.597 C 58.335 311.595,57.999 311.190,57.754 310.697 C 56.091 307.350,54.555 304.580,54.300 304.467 C 54.135 304.393,54.000 304.076,54.000 303.761 C 54.000 303.447,53.840 302.877,53.644 302.495 C 53.157 301.545,51.577 298.002,51.149 296.900 C 50.957 296.405,50.632 295.595,50.426 295.100 C 50.221 294.605,49.836 293.480,49.571 292.600 C 49.306 291.720,48.959 290.640,48.800 290.200 C 48.021 288.045,47.600 286.464,47.600 285.695 C 47.600 285.229,47.444 284.751,47.253 284.633 C 47.062 284.515,46.778 283.559,46.622 282.509 C 46.466 281.459,46.158 279.430,45.939 278.000 C 45.300 273.841,45.081 262.506,45.588 259.800 C 45.835 258.480,46.222 256.410,46.448 255.200 C 46.923 252.662,47.554 250.150,48.005 249.000 C 48.178 248.560,48.536 247.570,48.801 246.800 C 49.066 246.030,49.647 244.590,50.092 243.600 C 50.537 242.610,51.096 241.350,51.333 240.800 C 52.593 237.886,52.690 237.907,56.543 241.918 M107.678 248.919 C 106.446 250.191,106.099 251.166,106.674 251.741 C 107.077 252.144,107.987 254.886,107.994 255.719 C 107.997 256.115,108.450 256.855,109.000 257.365 C 109.806 258.112,110.000 258.674,110.000 260.266 C 110.000 261.352,110.149 262.411,110.330 262.620 C 110.512 262.829,110.884 263.810,111.158 264.800 C 111.431 265.790,111.830 267.230,112.046 268.000 C 113.108 271.800,118.011 281.743,120.996 286.151 C 122.318 288.104,123.829 290.342,124.353 291.125 C 125.984 293.562,136.075 303.411,138.631 305.062 C 139.969 305.925,141.949 307.270,143.031 308.050 C 145.489 309.821,151.410 312.856,151.748 312.518 C 151.887 312.380,152.000 312.455,152.000 312.685 C 152.000 313.086,156.226 314.871,156.955 314.777 C 157.151 314.752,157.421 314.898,157.555 315.100 C 157.840 315.529,163.762 317.672,164.263 317.528 C 164.448 317.474,165.007 317.656,165.505 317.932 C 166.002 318.207,166.632 318.388,166.905 318.333 C 167.177 318.277,167.812 318.460,168.316 318.739 C 168.819 319.017,169.539 319.204,169.916 319.155 C 170.292 319.106,171.050 319.255,171.600 319.487 C 172.946 320.055,177.101 320.800,178.924 320.800 C 179.736 320.800,180.400 320.969,180.400 321.175 C 180.400 321.382,180.805 321.518,181.300 321.478 C 181.795 321.438,186.070 321.548,190.800 321.724 C 196.598 321.938,200.638 321.896,203.200 321.593 C 205.290 321.346,208.350 321.000,210.000 320.823 C 214.116 320.383,218.105 319.683,220.116 319.047 C 221.042 318.755,222.520 318.322,223.400 318.087 C 228.142 316.816,234.400 314.688,234.400 314.346 C 234.400 314.130,234.557 314.050,234.750 314.169 C 235.522 314.646,244.873 310.366,250.132 307.128 C 251.854 306.068,253.497 305.200,253.783 305.200 C 254.068 305.200,254.535 304.919,254.821 304.575 C 255.106 304.232,256.299 303.313,257.473 302.534 C 258.646 301.755,259.953 300.677,260.377 300.138 C 260.801 299.600,261.263 299.185,261.405 299.216 C 261.546 299.247,262.578 298.492,263.699 297.537 C 264.819 296.581,266.053 295.620,266.441 295.400 C 266.828 295.180,267.563 294.426,268.073 293.725 C 269.376 291.933,272.942 287.699,274.747 285.800 C 275.584 284.920,276.386 283.930,276.530 283.600 C 276.675 283.270,277.697 281.380,278.802 279.400 C 282.848 272.153,285.072 265.805,285.877 259.209 C 285.997 258.225,286.352 257.231,286.666 257.001 C 287.415 256.454,287.155 251.671,286.348 251.160 C 284.922 250.256,281.831 252.458,281.807 254.395 C 281.803 254.728,281.395 255.178,280.900 255.395 C 280.002 255.789,279.642 256.800,280.400 256.800 C 281.172 256.800,280.779 257.786,278.336 261.975 C 271.950 272.926,261.045 284.350,251.257 290.344 C 249.575 291.373,247.840 292.436,247.400 292.705 C 242.522 295.692,231.882 300.120,224.500 302.235 C 223.125 302.629,222.000 303.109,222.000 303.303 C 222.000 303.496,221.681 303.553,221.291 303.429 C 220.901 303.305,219.326 303.473,217.791 303.803 C 209.553 305.571,196.994 306.345,189.200 305.564 C 186.450 305.288,183.075 305.049,181.700 305.032 C 180.325 305.014,179.200 304.881,179.200 304.735 C 179.200 304.589,178.435 304.355,177.500 304.214 C 172.501 303.461,165.547 301.500,160.480 299.415 C 159.094 298.844,157.789 298.483,157.580 298.612 C 157.371 298.741,157.200 298.677,157.200 298.469 C 157.200 298.260,155.985 297.579,154.500 296.954 C 150.549 295.291,142.224 290.428,139.123 287.970 C 138.311 287.327,137.568 286.800,137.471 286.800 C 137.373 286.800,136.597 286.125,135.744 285.300 C 134.892 284.475,133.386 283.073,132.397 282.185 C 130.523 280.501,124.000 273.596,124.000 273.297 C 124.000 273.202,122.944 271.656,121.654 269.862 C 117.423 263.981,112.582 253.920,113.075 252.035 C 113.215 251.499,113.065 251.123,112.645 250.962 C 112.290 250.826,112.000 250.405,112.000 250.027 C 112.000 247.787,109.417 247.125,107.678 248.919 M111.745 254.514 C 112.325 255.567,112.800 256.782,112.800 257.214 C 112.800 257.646,112.980 258.000,113.200 258.000 C 113.420 258.000,113.600 258.272,113.600 258.605 C 113.600 259.166,114.330 260.737,114.805 261.200 C 114.918 261.310,115.452 262.300,115.991 263.400 C 119.275 270.098,127.617 280.351,134.400 286.025 C 135.830 287.221,137.090 288.304,137.200 288.430 C 137.310 288.557,138.570 289.443,140.000 290.400 C 141.430 291.357,142.690 292.257,142.800 292.399 C 142.910 292.542,143.270 292.776,143.600 292.920 C 143.930 293.064,145.100 293.720,146.200 294.378 C 147.300 295.036,149.910 296.409,152.000 297.430 C 155.623 299.199,156.516 299.602,158.800 300.500 C 159.350 300.716,160.113 301.052,160.495 301.247 C 160.877 301.441,161.541 301.600,161.971 301.600 C 162.401 301.600,162.864 301.780,163.000 302.000 C 163.136 302.220,163.657 302.400,164.157 302.400 C 164.657 302.400,165.190 302.523,165.341 302.674 C 165.857 303.190,168.599 303.988,169.876 303.994 C 170.578 303.997,171.252 304.160,171.373 304.356 C 171.494 304.551,172.179 304.808,172.896 304.927 C 173.613 305.045,175.010 305.340,176.000 305.581 C 181.501 306.922,202.926 307.474,211.000 306.482 C 217.139 305.728,218.411 305.506,218.633 305.147 C 218.751 304.956,219.456 304.800,220.200 304.800 C 220.944 304.800,221.664 304.620,221.800 304.400 C 221.936 304.180,222.669 304.000,223.429 304.000 C 224.189 304.000,225.123 303.842,225.505 303.649 C 225.887 303.456,226.920 303.084,227.800 302.823 C 228.680 302.561,229.760 302.204,230.200 302.029 C 230.640 301.854,231.720 301.483,232.600 301.204 C 233.480 300.926,234.909 300.361,235.775 299.949 C 236.641 299.537,237.518 299.200,237.724 299.200 C 238.178 299.200,246.518 295.147,246.800 294.790 C 246.910 294.650,247.585 294.281,248.300 293.970 C 249.015 293.659,249.600 293.269,249.600 293.102 C 249.600 292.936,249.870 292.800,250.200 292.800 C 250.530 292.800,250.800 292.664,250.800 292.498 C 250.800 292.331,251.295 291.970,251.900 291.695 C 253.094 291.151,257.744 287.769,260.977 285.093 C 264.979 281.779,271.727 274.587,274.386 270.803 C 278.381 265.116,280.485 261.615,282.440 257.400 C 283.421 255.285,284.553 253.886,284.957 254.291 C 285.353 254.686,285.234 256.732,284.800 257.000 C 284.580 257.136,284.400 258.126,284.400 259.200 C 284.400 260.274,284.239 261.252,284.042 261.374 C 283.845 261.495,283.582 262.271,283.458 263.097 C 282.928 266.607,282.692 267.620,282.356 267.827 C 282.160 267.948,282.000 268.380,282.000 268.786 C 282.000 269.192,281.658 270.216,281.239 271.062 C 280.821 271.908,279.641 274.342,278.616 276.470 C 277.592 278.599,276.494 280.556,276.177 280.819 C 275.860 281.082,275.600 281.512,275.600 281.774 C 275.600 282.035,275.285 282.605,274.900 283.040 C 274.515 283.474,273.757 284.453,273.215 285.214 C 268.660 291.612,257.727 301.285,250.570 305.248 C 246.081 307.733,244.392 308.632,242.617 309.480 C 241.508 310.009,240.287 310.613,239.905 310.821 C 239.523 311.030,238.938 311.200,238.605 311.200 C 238.272 311.200,238.000 311.380,238.000 311.600 C 238.000 311.820,237.651 312.000,237.224 312.000 C 236.797 312.000,236.336 312.180,236.200 312.400 C 236.064 312.620,235.601 312.800,235.171 312.800 C 234.741 312.800,234.032 312.980,233.595 313.200 C 233.158 313.420,232.442 313.780,232.005 314.000 C 231.568 314.220,230.936 314.400,230.600 314.400 C 230.264 314.400,229.677 314.562,229.295 314.761 C 228.913 314.960,227.790 315.340,226.800 315.607 C 225.810 315.873,224.640 316.238,224.200 316.418 C 223.760 316.598,222.860 316.840,222.200 316.955 C 221.540 317.070,220.100 317.361,219.000 317.600 C 215.169 318.436,212.980 318.823,209.800 319.226 C 198.844 320.614,181.405 320.220,173.400 318.402 C 172.300 318.153,170.724 317.851,169.897 317.732 C 169.071 317.613,168.295 317.355,168.174 317.158 C 168.052 316.961,167.369 316.800,166.656 316.800 C 165.943 316.800,165.189 316.651,164.980 316.470 C 164.771 316.288,163.790 315.907,162.800 315.624 C 160.753 315.038,160.152 314.813,157.504 313.640 C 156.462 313.178,155.337 312.800,155.004 312.800 C 154.672 312.800,154.400 312.620,154.400 312.400 C 154.400 312.180,153.986 312.000,153.480 312.000 C 152.974 312.000,152.389 311.832,152.180 311.627 C 151.971 311.422,150.810 310.729,149.600 310.088 C 142.318 306.231,137.035 302.303,131.326 296.498 C 127.990 293.105,122.000 285.731,122.000 285.015 C 122.000 284.855,121.661 284.246,121.247 283.662 C 119.555 281.277,116.464 275.210,115.203 271.800 C 115.040 271.360,114.715 270.550,114.480 270.000 C 114.245 269.450,113.839 268.280,113.577 267.400 C 113.316 266.520,112.944 265.487,112.751 265.105 C 112.558 264.723,112.400 263.969,112.400 263.429 C 112.400 262.889,112.220 262.336,112.000 262.200 C 111.780 262.064,111.600 261.436,111.600 260.805 C 111.600 260.174,111.360 259.417,111.066 259.123 C 110.772 258.830,110.523 257.962,110.511 257.195 C 110.500 256.428,110.360 255.308,110.200 254.707 C 109.941 253.733,110.206 252.040,110.555 252.443 C 110.629 252.529,111.165 253.461,111.745 254.514 M194.965 258.147 C 194.827 258.506,194.324 258.800,193.846 258.800 C 192.566 258.800,190.316 261.002,190.473 262.103 C 190.753 264.076,196.352 265.452,200.000 264.444 C 201.700 263.974,201.535 258.800,199.819 258.800 C 199.515 258.800,199.207 258.622,199.133 258.405 C 198.875 257.643,195.245 257.417,194.965 258.147 M199.179 260.974 C 199.843 261.775,199.040 263.187,197.886 263.244 C 194.976 263.390,193.312 262.486,194.027 261.150 C 194.536 260.198,198.424 260.065,199.179 260.974 M196.000 356.353 C 196.000 356.548,196.315 356.810,196.700 356.936 C 200.665 358.233,210.894 366.415,214.818 371.428 C 217.300 374.599,218.802 377.438,220.402 381.982 C 221.522 385.165,221.902 394.452,220.944 395.246 C 220.645 395.495,220.400 395.928,220.400 396.208 C 220.400 397.361,217.822 401.517,216.088 403.161 C 209.066 409.818,198.541 408.418,190.400 399.742 C 187.536 396.691,185.203 393.882,185.201 393.483 C 185.201 393.309,184.855 392.796,184.433 392.344 C 183.666 391.520,182.999 389.668,183.345 389.322 C 183.446 389.221,184.670 389.715,186.064 390.420 C 187.459 391.126,188.913 391.860,189.295 392.051 C 189.677 392.243,190.431 392.400,190.971 392.400 C 191.511 392.400,192.064 392.580,192.200 392.800 C 192.336 393.020,193.339 393.200,194.430 393.200 C 205.063 393.200,208.374 380.488,201.323 366.730 C 200.570 365.262,199.695 363.845,199.377 363.581 C 199.060 363.318,198.800 362.910,198.800 362.676 C 198.800 362.442,198.022 361.249,197.070 360.025 C 194.881 357.210,194.698 356.889,195.000 356.400 C 195.306 355.905,196.000 355.873,196.000 356.353 M219.595 367.609 C 218.845 369.010,219.477 371.499,220.734 372.095 C 221.907 372.651,226.259 378.934,226.625 380.600 C 226.673 380.820,227.002 382.106,227.356 383.458 C 227.710 384.809,228.000 386.647,228.000 387.542 C 228.000 395.004,242.843 387.319,246.431 378.000 C 246.897 376.790,247.427 375.440,247.609 375.000 C 248.001 374.052,248.386 372.360,248.672 370.326 C 248.908 368.646,247.041 367.815,245.221 368.789 C 242.414 370.291,232.964 371.080,230.274 370.037 C 229.655 369.797,228.893 369.600,228.582 369.600 C 227.730 369.600,224.656 368.313,224.200 367.766 C 223.376 366.775,220.101 366.664,219.595 367.609 M224.454 369.844 C 225.634 370.198,226.960 370.628,227.400 370.800 C 231.773 372.507,242.506 372.427,244.259 370.674 C 245.219 369.714,247.479 370.913,246.783 372.013 C 246.579 372.336,246.409 373.084,246.406 373.676 C 246.403 374.268,246.220 374.864,246.000 375.000 C 245.780 375.136,245.600 375.591,245.600 376.011 C 245.600 376.702,245.315 377.313,243.538 380.435 C 242.696 381.913,239.123 385.600,238.532 385.600 C 238.240 385.600,238.000 385.780,238.000 386.000 C 238.000 386.220,237.730 386.400,237.400 386.400 C 237.070 386.400,236.800 386.536,236.800 386.702 C 236.800 386.869,236.215 387.244,235.500 387.536 C 234.785 387.828,233.840 388.217,233.400 388.400 C 230.655 389.543,229.600 389.090,229.600 386.770 C 229.600 385.927,229.443 384.824,229.251 384.319 C 229.059 383.813,228.687 382.680,228.424 381.800 C 227.852 379.889,226.321 376.654,225.900 376.467 C 225.735 376.393,225.599 376.123,225.598 375.867 C 225.597 375.610,224.892 374.471,224.032 373.336 C 220.772 369.037,220.807 368.750,224.454 369.844 \\\" stroke=\\\"none\\\" fill=\\\"#676767\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path1\\\" d=\\\"M176.290 3.626 C 172.269 4.772,166.812 7.692,164.225 10.083 C 163.798 10.478,163.303 10.800,163.125 10.800 C 162.946 10.800,162.800 10.952,162.800 11.138 C 162.800 11.324,165.095 10.697,167.900 9.745 C 175.348 7.219,183.437 6.164,191.900 6.618 C 197.595 6.923,197.684 6.864,194.100 5.150 C 189.206 2.811,181.474 2.149,176.290 3.626 M184.000 16.845 C 178.753 17.892,177.505 18.203,174.200 19.284 C 163.301 22.848,150.864 30.836,139.601 41.506 C 137.624 43.379,138.096 43.346,141.800 41.354 C 147.403 38.341,157.618 34.229,164.000 32.418 C 164.990 32.137,166.250 31.761,166.800 31.583 C 167.350 31.405,168.790 31.049,170.000 30.793 C 171.210 30.537,172.830 30.174,173.600 29.988 C 174.370 29.801,176.170 29.445,177.600 29.196 C 179.030 28.947,180.560 28.663,181.000 28.565 C 186.373 27.364,212.546 26.933,221.000 27.907 C 223.420 28.185,226.300 28.514,227.400 28.636 L 229.400 28.859 228.400 28.028 C 224.213 24.546,211.539 19.005,204.600 17.622 C 203.280 17.359,201.549 16.976,200.754 16.772 C 198.943 16.306,186.424 16.361,184.000 16.845 M189.800 36.628 C 183.310 37.465,179.936 38.195,176.000 39.615 C 175.230 39.892,174.240 40.249,173.800 40.408 C 169.718 41.876,162.460 45.605,158.234 48.403 C 156.575 49.501,155.115 50.400,154.988 50.400 C 154.217 50.400,140.591 61.924,140.944 62.277 C 141.033 62.366,143.152 61.474,145.653 60.294 C 148.154 59.115,150.830 57.918,151.600 57.634 C 152.370 57.351,153.360 56.975,153.800 56.799 C 160.427 54.143,166.840 52.276,174.800 50.684 C 191.027 47.441,211.433 47.174,228.600 49.979 C 237.932 51.504,237.735 51.542,233.905 48.984 C 231.412 47.319,229.776 46.350,225.000 43.710 C 222.736 42.458,213.538 38.919,211.200 38.401 C 205.434 37.123,196.977 35.919,194.723 36.056 C 194.216 36.087,192.000 36.344,189.800 36.628 M308.200 44.433 C 303.592 45.226,298.748 46.653,297.400 47.616 C 297.180 47.774,296.562 48.037,296.028 48.201 C 294.545 48.657,287.788 52.630,284.208 55.152 C 273.286 62.845,266.866 65.169,254.400 65.942 L 249.800 66.228 253.225 69.614 C 261.902 78.192,272.539 79.087,285.552 72.332 C 290.602 69.711,292.031 71.105,293.822 80.400 C 295.527 89.248,291.830 101.626,283.754 114.112 C 282.789 115.604,282.000 116.919,282.000 117.034 C 282.000 117.150,281.307 118.269,280.459 119.522 C 279.612 120.775,278.172 123.015,277.259 124.500 C 276.347 125.985,274.886 128.357,274.013 129.771 C 269.744 136.688,266.423 144.470,265.806 149.000 C 265.460 151.545,265.868 151.166,267.956 147.000 C 270.755 141.416,273.205 138.252,281.022 130.125 C 285.215 125.766,289.821 120.940,291.258 119.400 C 292.695 117.860,294.461 115.970,295.182 115.200 C 308.299 101.186,311.028 90.676,306.967 69.800 C 306.541 67.609,306.259 64.244,306.247 61.200 L 306.227 56.200 307.917 52.717 C 308.846 50.801,310.505 48.154,311.603 46.834 C 312.701 45.515,313.600 44.337,313.600 44.218 C 313.600 43.907,310.552 44.029,308.200 44.433 M178.943 58.900 C 179.485 59.615,179.989 60.636,180.064 61.169 C 180.139 61.701,180.426 62.212,180.703 62.303 C 181.094 62.432,181.111 62.215,180.780 61.334 C 180.242 59.904,178.703 57.606,178.280 57.603 C 178.103 57.601,178.402 58.185,178.943 58.900 M198.429 59.491 C 197.258 60.912,196.750 62.325,197.600 61.800 C 197.820 61.664,198.000 61.355,198.000 61.114 C 198.000 60.873,198.459 60.074,199.020 59.338 C 200.406 57.521,199.957 57.638,198.429 59.491 M56.000 61.393 C 56.000 61.499,57.128 62.714,58.506 64.093 C 62.113 67.701,64.166 71.704,65.536 77.800 C 65.784 78.900,66.170 84.300,66.394 89.800 C 66.618 95.300,66.969 100.520,67.173 101.400 C 68.235 105.982,68.557 107.199,69.287 109.400 C 72.484 119.041,77.489 124.167,102.660 143.582 C 110.589 149.698,114.602 153.866,119.258 160.818 C 119.910 161.791,119.913 161.786,119.628 160.200 C 119.199 157.811,116.716 152.795,114.022 148.876 C 111.667 145.449,110.467 143.957,98.600 129.691 C 89.465 118.710,86.748 114.603,83.589 107.000 C 81.017 100.809,80.577 93.050,82.476 87.367 C 83.539 84.185,83.813 84.085,87.539 85.530 C 100.426 90.527,115.029 87.126,119.746 78.028 C 120.039 77.463,120.618 76.427,121.032 75.726 C 121.969 74.141,121.787 73.949,119.789 74.413 C 117.496 74.944,104.772 74.888,102.506 74.336 C 97.282 73.064,92.669 71.248,83.473 66.844 C 77.731 64.094,72.916 62.483,67.827 61.608 C 65.456 61.200,56.000 61.028,56.000 61.393 M196.700 62.631 C 196.535 62.797,196.411 63.488,196.425 64.167 C 196.450 65.373,196.459 65.379,196.840 64.425 C 197.269 63.352,197.175 62.152,196.700 62.631 M181.200 65.453 C 181.200 68.940,179.170 69.247,172.647 66.748 C 169.251 65.447,166.945 66.184,167.268 68.467 C 167.402 69.418,170.541 71.280,172.793 71.744 C 179.198 73.067,180.528 73.471,181.197 74.297 C 181.820 75.066,181.980 75.105,182.407 74.592 C 182.784 74.138,183.886 73.999,187.149 73.998 C 189.487 73.997,192.088 73.804,192.929 73.571 C 194.165 73.228,194.642 73.267,195.415 73.773 C 196.299 74.352,196.402 74.344,196.765 73.666 C 197.005 73.217,198.526 72.488,200.679 71.792 C 207.367 69.627,209.182 68.590,209.194 66.929 C 209.210 64.686,206.809 64.306,203.078 65.961 C 199.023 67.760,196.810 68.017,196.794 66.692 C 196.791 66.422,196.566 66.632,196.294 67.159 C 195.563 68.579,192.952 69.188,187.600 69.188 C 182.062 69.188,181.963 69.136,181.722 66.149 C 181.484 63.206,181.200 62.827,181.200 65.453 M233.767 65.858 C 234.020 66.518,234.290 68.267,235.458 76.800 C 236.254 82.620,236.401 104.355,235.673 108.600 C 233.735 119.897,233.593 120.610,232.404 125.000 C 231.927 126.760,231.394 128.830,231.219 129.600 C 230.723 131.792,229.597 136.453,229.179 138.046 C 228.701 139.871,228.681 150.291,229.153 151.840 C 229.348 152.478,229.732 153.810,230.007 154.800 C 232.232 162.806,237.494 172.298,243.800 179.681 C 244.460 180.454,245.274 181.427,245.608 181.843 C 245.943 182.259,248.013 184.817,250.208 187.526 C 256.183 194.899,256.793 195.664,259.417 199.066 C 262.033 202.457,264.101 205.542,265.696 208.432 C 266.253 209.439,266.906 210.609,267.148 211.032 C 268.862 214.028,271.554 221.464,272.748 226.506 C 274.440 233.643,272.591 244.957,268.743 251.026 C 268.092 252.052,267.658 252.992,267.780 253.113 C 267.901 253.234,268.047 253.258,268.105 253.167 C 268.163 253.075,268.940 252.100,269.831 251.000 C 277.229 241.866,278.711 231.330,274.332 219.000 C 273.286 216.053,269.506 208.312,267.716 205.453 C 264.322 200.028,258.849 192.229,252.926 184.376 C 239.354 166.382,238.092 163.907,237.210 153.564 C 236.770 148.409,237.153 139.676,238.005 135.400 C 238.225 134.300,238.698 131.960,239.056 130.200 C 239.415 128.440,239.785 126.460,239.878 125.800 C 239.970 125.140,240.380 123.160,240.787 121.400 C 245.279 101.977,245.945 90.741,243.178 81.000 C 241.956 76.696,238.695 70.682,235.427 66.707 C 234.144 65.147,233.335 64.733,233.767 65.858 M207.200 75.396 C 206.650 75.708,205.210 76.266,204.000 76.634 C 202.790 77.003,201.029 77.551,200.086 77.852 C 197.901 78.550,197.619 78.541,196.731 77.738 C 196.063 77.133,196.000 77.132,196.000 77.724 C 196.000 78.925,194.311 79.341,188.685 79.524 L 183.170 79.704 182.697 78.452 C 182.204 77.145,181.600 76.778,181.600 77.786 C 181.600 79.385,178.102 79.178,171.400 77.183 C 168.013 76.174,166.135 76.223,165.405 77.337 C 164.163 79.232,165.512 80.432,170.400 81.776 C 171.830 82.170,174.140 82.838,175.534 83.262 C 176.927 83.686,178.389 83.931,178.781 83.806 C 179.856 83.465,181.648 84.299,181.899 85.256 C 182.119 86.097,182.124 86.096,182.833 85.156 C 183.520 84.246,183.769 84.206,189.335 84.118 C 195.492 84.021,195.757 84.094,196.107 86.000 C 196.249 86.771,196.304 86.671,196.346 85.568 C 196.408 83.928,196.948 83.538,200.400 82.634 C 207.705 80.723,210.932 79.165,211.130 77.455 C 211.385 75.250,209.342 74.180,207.200 75.396 M253.200 80.943 C 253.200 81.047,254.164 83.083,255.342 85.466 C 259.112 93.092,261.880 100.871,262.862 106.600 C 263.089 107.920,263.449 109.990,263.662 111.200 C 263.875 112.410,264.145 115.965,264.262 119.100 C 264.492 125.260,264.497 125.274,266.063 123.821 C 272.396 117.950,280.173 106.317,282.794 98.800 C 285.360 91.437,286.622 81.493,284.900 82.203 C 275.373 86.131,265.632 86.282,257.400 82.629 C 256.520 82.238,255.350 81.720,254.800 81.478 C 254.250 81.236,253.665 80.974,253.500 80.895 C 253.335 80.817,253.200 80.838,253.200 80.943 M182.409 87.628 C 182.390 89.819,186.290 93.086,188.462 92.698 C 189.187 92.569,189.025 92.461,187.749 92.222 C 185.769 91.852,184.174 90.467,183.163 88.241 C 182.517 86.820,182.416 86.738,182.409 87.628 M195.427 87.926 C 194.947 89.418,192.863 91.523,191.588 91.803 C 190.457 92.051,189.527 92.800,190.350 92.800 C 192.593 92.800,196.442 89.096,195.887 87.473 C 195.798 87.213,195.591 87.417,195.427 87.926 M118.981 90.275 C 109.614 95.967,100.482 97.552,91.480 95.046 C 90.205 94.691,89.080 94.400,88.980 94.400 C 88.510 94.400,88.897 98.939,89.611 101.800 C 91.919 111.041,99.494 120.799,113.066 132.014 C 115.448 133.982,115.797 133.670,115.237 130.066 C 114.379 124.532,114.989 111.455,116.370 105.800 C 116.585 104.920,116.950 103.300,117.181 102.200 C 117.759 99.451,118.855 95.879,119.263 95.420 C 119.448 95.211,119.600 94.714,119.600 94.315 C 119.600 93.916,119.765 93.277,119.966 92.895 C 122.118 88.816,121.981 88.452,118.981 90.275 M221.700 91.076 C 222.085 91.176,222.715 91.176,223.100 91.076 C 223.485 90.975,223.170 90.893,222.400 90.893 C 221.630 90.893,221.315 90.975,221.700 91.076 M204.400 93.953 C 198.658 98.241,195.385 103.364,196.258 106.700 C 196.794 108.749,199.396 105.940,202.056 100.440 C 203.390 97.681,204.750 95.559,206.092 94.140 C 208.610 91.477,207.831 91.391,204.400 93.953 M169.857 94.500 C 172.105 96.854,173.361 98.690,174.168 100.800 C 175.584 104.501,178.563 108.400,179.974 108.400 C 180.769 108.400,180.450 104.572,179.501 102.738 C 177.899 99.642,170.420 92.800,168.638 92.800 C 168.416 92.800,168.964 93.565,169.857 94.500 M129.006 95.000 C 128.444 96.203,128.238 119.998,128.757 123.800 C 128.997 125.560,129.379 128.620,129.605 130.600 C 130.054 134.521,130.552 137.290,131.475 141.000 C 131.803 142.320,132.209 144.030,132.376 144.800 C 137.079 166.408,150.737 182.994,174.200 195.590 C 175.960 196.535,178.660 197.971,180.200 198.781 C 181.740 199.591,183.360 200.459,183.800 200.710 C 184.986 201.386,199.644 208.400,199.871 208.400 C 200.787 208.400,226.343 221.514,227.631 222.646 C 227.979 222.950,228.394 223.200,228.553 223.200 C 229.427 223.200,238.049 229.682,240.064 231.853 C 251.488 244.160,247.145 261.046,229.859 271.537 C 228.352 272.452,227.050 273.200,226.965 273.200 C 226.881 273.200,225.698 273.740,224.335 274.400 C 222.973 275.060,221.566 275.600,221.209 275.600 C 220.852 275.600,220.389 275.757,220.180 275.950 C 219.714 276.379,215.379 277.739,212.400 278.391 C 211.190 278.656,209.570 279.028,208.800 279.217 C 198.757 281.688,183.567 280.220,175.206 275.971 C 173.938 275.327,172.786 274.800,172.646 274.800 C 172.506 274.800,171.449 274.144,170.296 273.342 C 163.889 268.885,159.747 264.616,156.829 259.464 C 156.373 258.659,155.669 257.415,155.265 256.700 C 152.461 251.739,151.608 241.873,153.562 237.000 C 156.121 230.620,163.466 224.681,170.642 223.191 C 173.482 222.602,173.081 222.299,167.906 221.130 C 152.011 217.537,139.781 223.092,136.044 235.600 C 135.749 236.590,135.348 237.922,135.153 238.560 C 133.684 243.382,135.281 254.370,138.418 261.012 C 144.720 274.358,162.024 282.278,186.600 283.064 C 197.045 283.398,204.528 282.626,215.891 280.042 C 248.774 272.563,265.473 249.797,253.261 229.096 C 250.929 225.143,241.377 216.400,239.390 216.400 C 239.255 216.400,238.384 215.877,237.455 215.238 C 236.526 214.599,232.354 212.429,228.183 210.416 C 217.865 205.435,218.108 205.548,211.911 202.829 C 208.893 201.505,206.103 200.244,205.711 200.027 C 205.320 199.810,202.300 198.298,199.000 196.667 C 195.700 195.036,192.010 193.110,190.800 192.388 C 189.590 191.666,188.233 190.878,187.785 190.638 C 167.085 179.524,151.500 162.812,141.866 141.400 C 137.856 132.487,133.587 119.179,132.243 111.400 C 132.129 110.740,131.846 109.300,131.615 108.200 C 131.383 107.100,130.911 104.220,130.565 101.800 C 129.503 94.377,129.435 94.082,129.006 95.000 M188.954 96.977 C 188.528 98.087,188.983 99.000,189.962 99.000 C 191.224 99.000,191.938 97.890,191.228 97.034 C 190.571 96.242,189.248 96.209,188.954 96.977 M218.670 105.863 C 218.525 106.008,218.598 106.357,218.832 106.639 C 219.481 107.420,219.102 109.242,218.163 109.862 C 217.149 110.531,215.200 109.287,215.200 107.971 C 215.200 107.547,214.930 107.200,214.600 107.200 C 214.270 107.200,214.000 107.470,214.000 107.800 C 214.000 108.130,214.180 108.400,214.400 108.400 C 215.154 108.400,214.839 110.751,214.026 111.186 C 213.138 111.661,211.407 111.157,211.072 110.326 C 210.928 109.968,210.389 110.292,209.391 111.337 L 207.921 112.874 209.061 114.086 C 212.807 118.073,219.170 116.811,221.193 111.679 C 222.175 109.189,220.108 104.425,218.670 105.863 M155.976 108.129 C 154.195 112.051,155.948 115.863,160.200 117.313 C 162.759 118.186,164.574 117.636,167.598 115.071 L 168.929 113.943 167.511 112.525 L 166.093 111.107 165.247 111.953 C 163.824 113.376,161.600 112.867,161.600 111.120 C 161.600 110.342,161.001 110.151,160.600 110.800 C 159.467 112.633,156.601 109.870,157.682 107.986 C 158.287 106.933,158.278 106.861,157.528 106.665 C 156.901 106.501,156.576 106.807,155.976 108.129 M125.714 109.400 C 125.717 110.500,125.795 110.903,125.887 110.295 C 125.979 109.686,125.977 108.786,125.882 108.295 C 125.787 107.803,125.711 108.300,125.714 109.400 M161.600 108.800 C 161.600 109.547,161.707 109.653,162.080 109.280 C 162.453 108.907,162.453 108.693,162.080 108.320 C 161.707 107.947,161.600 108.053,161.600 108.800 M223.728 110.400 C 223.728 111.830,223.801 112.415,223.889 111.700 C 223.978 110.985,223.978 109.815,223.889 109.100 C 223.801 108.385,223.728 108.970,223.728 110.400 M188.200 111.940 C 184.138 113.261,183.086 117.959,186.238 120.700 C 190.615 124.505,196.781 119.433,193.934 114.369 C 192.694 112.162,190.446 111.210,188.200 111.940 M165.700 125.094 C 166.745 125.176,168.455 125.176,169.500 125.094 C 170.545 125.012,169.690 124.944,167.600 124.944 C 165.510 124.944,164.655 125.012,165.700 125.094 M189.915 126.060 C 185.841 127.550,187.074 134.000,191.433 134.000 C 195.872 134.000,197.402 127.846,193.381 126.166 C 191.835 125.520,191.425 125.508,189.915 126.060 M191.229 139.054 C 189.538 141.203,190.812 144.400,193.359 144.400 C 195.098 144.400,196.400 143.005,196.400 141.144 C 196.400 138.271,192.944 136.874,191.229 139.054 M194.017 153.880 C 193.984 157.890,198.549 170.698,200.624 172.420 C 200.941 172.683,201.208 173.101,201.218 173.349 C 201.228 173.597,202.037 174.610,203.015 175.600 C 203.993 176.590,204.795 177.509,204.797 177.643 C 204.811 178.705,216.171 186.791,221.076 189.229 C 222.438 189.907,223.765 190.717,224.025 191.030 C 224.285 191.344,224.697 191.600,224.940 191.600 C 225.416 191.600,239.843 198.838,243.057 200.689 C 244.125 201.305,245.459 202.043,246.020 202.329 C 247.958 203.318,252.607 206.974,254.697 209.153 C 257.027 211.581,257.787 211.701,256.221 209.393 C 252.865 204.448,246.200 199.365,234.196 192.596 C 231.558 191.109,228.458 189.286,227.306 188.546 C 226.155 187.806,225.112 187.200,224.989 187.200 C 224.096 187.200,211.754 178.430,208.664 175.600 C 202.095 169.582,195.725 159.614,195.583 155.130 C 195.574 154.839,195.222 153.970,194.800 153.200 L 194.034 151.800 194.017 153.880 M75.800 163.151 C 63.588 165.274,50.400 183.148,50.400 197.576 C 50.400 210.995,62.238 222.975,76.385 223.874 C 94.343 225.015,113.102 203.138,106.776 188.433 C 105.285 184.966,103.948 185.438,100.519 190.642 C 95.516 198.236,94.625 199.144,92.660 198.651 C 90.887 198.206,90.400 196.476,90.403 190.639 C 90.414 173.673,86.665 163.200,80.581 163.200 C 80.097 163.200,79.183 163.126,78.550 163.036 C 77.918 162.946,76.680 162.998,75.800 163.151 M313.200 166.076 C 299.358 171.912,288.177 184.956,290.934 192.052 C 291.307 193.014,292.600 194.852,293.806 196.137 C 297.448 200.016,296.757 202.198,290.546 206.422 C 285.511 209.846,282.812 213.106,282.804 215.774 C 282.789 220.334,290.634 226.995,297.600 228.339 C 305.821 229.924,305.377 229.929,316.000 228.164 C 316.770 228.037,318.163 227.587,319.096 227.166 C 320.028 226.745,320.977 226.400,321.205 226.400 C 321.916 226.400,328.088 223.167,330.600 221.479 C 341.823 213.935,351.419 196.062,348.429 188.267 C 347.769 186.544,347.312 187.025,344.546 192.350 C 343.141 195.054,341.409 198.081,340.696 199.077 C 339.983 200.072,339.197 201.240,338.949 201.672 C 337.296 204.549,331.727 209.360,329.161 210.129 C 323.309 211.881,321.045 204.159,326.248 200.191 C 330.221 197.160,331.566 194.892,331.668 191.048 C 331.807 185.841,329.821 182.704,318.887 170.857 C 317.944 169.835,316.630 168.235,315.967 167.300 C 314.658 165.454,314.666 165.458,313.200 166.076 M294.975 175.300 L 293.800 176.600 295.100 175.425 C 295.815 174.779,296.400 174.194,296.400 174.125 C 296.400 173.816,296.070 174.088,294.975 175.300 M92.524 181.400 C 92.526 182.720,92.601 183.212,92.690 182.493 C 92.779 181.774,92.777 180.694,92.686 180.093 C 92.595 179.492,92.522 180.080,92.524 181.400 M116.001 208.638 C 113.449 210.096,111.409 211.842,105.864 217.307 C 98.586 224.482,94.580 227.581,89.569 229.917 C 87.216 231.014,86.275 231.324,81.954 232.430 C 80.068 232.912,72.601 232.906,70.131 232.420 C 69.069 232.211,67.120 231.831,65.800 231.576 C 64.480 231.320,63.220 230.982,63.000 230.826 C 62.417 230.409,59.152 229.515,58.951 229.716 C 58.184 230.482,68.385 236.885,73.400 238.786 C 84.318 242.924,94.128 238.438,104.719 224.466 C 113.492 212.892,115.040 210.903,115.970 210.000 C 117.109 208.894,118.181 207.597,117.949 207.605 C 117.867 207.607,116.990 208.072,116.001 208.638 M100.185 233.700 L 98.200 235.800 100.300 233.815 C 101.455 232.723,102.400 231.778,102.400 231.715 C 102.400 231.417,102.029 231.749,100.185 233.700 M236.000 231.725 C 236.000 231.794,236.585 232.379,237.300 233.025 L 238.600 234.200 237.425 232.900 C 236.330 231.688,236.000 231.416,236.000 231.725 M313.400 235.654 C 306.164 236.972,300.792 239.200,304.848 239.200 C 305.461 239.200,306.376 239.361,306.881 239.558 C 307.387 239.755,308.610 240.140,309.600 240.412 C 325.893 244.895,337.975 255.336,342.680 269.000 C 346.704 280.684,344.322 297.683,337.346 307.073 C 336.826 307.774,336.400 308.461,336.400 308.601 C 336.400 310.830,323.759 323.726,316.993 328.400 C 316.196 328.950,315.062 329.780,314.472 330.244 C 310.842 333.099,286.966 346.000,285.311 346.000 C 285.113 346.000,284.205 346.360,283.294 346.800 C 282.384 347.240,281.448 347.600,281.214 347.600 C 280.980 347.600,280.477 347.759,280.095 347.953 C 277.808 349.116,270.457 351.600,269.301 351.600 C 268.859 351.600,267.813 351.886,266.977 352.236 C 265.446 352.875,264.398 353.105,257.800 354.248 C 252.997 355.080,239.811 355.197,235.200 354.448 C 221.522 352.226,208.926 344.706,199.400 333.076 L 196.600 329.657 196.468 332.528 C 195.927 344.279,201.074 355.779,207.496 357.169 C 208.763 357.443,210.160 357.757,210.600 357.866 C 221.078 360.458,243.605 361.103,257.700 359.215 C 265.194 358.212,266.714 357.990,268.600 357.628 C 271.646 357.043,282.130 354.263,286.400 352.907 C 289.908 351.794,291.554 351.190,297.600 348.803 C 302.179 346.995,314.625 340.644,315.963 339.433 C 316.348 339.085,316.789 338.800,316.943 338.800 C 317.473 338.800,323.806 334.315,327.309 331.460 C 335.967 324.403,342.243 317.311,346.478 309.800 C 348.025 307.058,348.873 305.262,350.824 300.600 C 353.723 293.674,355.282 279.608,353.969 272.224 C 353.732 270.891,353.361 268.810,353.144 267.600 C 352.283 262.792,349.416 255.614,346.821 251.768 C 346.149 250.774,345.600 249.795,345.600 249.594 C 345.600 248.978,339.138 242.624,336.800 240.942 C 330.338 236.293,321.213 234.230,313.400 235.654 M51.781 242.235 C 51.194 243.536,50.473 245.140,50.178 245.800 C 46.269 254.562,45.138 273.619,47.936 283.600 C 48.152 284.370,48.714 286.422,49.186 288.160 C 49.657 289.899,50.483 292.405,51.021 293.729 C 51.560 295.054,52.000 296.265,52.000 296.421 C 52.000 297.036,56.898 306.991,58.208 309.039 C 58.973 310.236,59.600 311.298,59.600 311.398 C 59.600 311.685,64.551 319.160,66.357 321.600 C 67.253 322.810,68.302 324.250,68.689 324.800 C 69.076 325.350,70.005 326.471,70.753 327.291 C 71.501 328.112,72.396 329.192,72.743 329.691 C 74.454 332.157,85.072 342.786,90.000 346.966 C 99.714 355.206,110.337 362.343,121.219 367.939 C 122.879 368.793,124.589 369.676,125.019 369.902 C 129.254 372.127,142.398 377.207,147.200 378.475 C 147.970 378.679,149.230 379.024,150.000 379.242 C 176.465 386.741,184.385 383.024,188.012 361.400 C 188.803 356.687,188.121 339.609,186.975 335.400 L 186.648 334.200 186.336 335.600 C 186.165 336.370,185.739 338.600,185.390 340.556 C 184.666 344.617,182.063 352.762,180.757 355.055 C 180.273 355.905,179.500 357.298,179.038 358.150 C 171.252 372.549,152.467 373.624,129.591 360.979 C 102.423 345.963,76.110 319.295,67.846 298.400 C 67.455 297.410,66.900 296.060,66.614 295.400 C 65.622 293.111,63.904 286.751,63.206 282.783 C 62.587 279.258,62.556 268.729,63.158 265.995 C 64.550 259.668,65.739 255.876,67.565 251.935 C 69.059 248.711,69.055 248.800,67.728 248.800 C 66.637 248.800,64.360 248.185,63.105 247.551 C 62.723 247.358,62.216 247.200,61.977 247.200 C 61.185 247.200,57.832 244.721,55.324 242.280 L 52.848 239.871 51.781 242.235 M244.093 246.000 C 244.093 246.770,244.175 247.085,244.276 246.700 C 244.376 246.315,244.376 245.685,244.276 245.300 C 244.175 244.915,244.093 245.230,244.093 246.000 M283.084 258.673 C 282.582 259.509,281.032 262.336,280.135 264.052 C 279.589 265.096,278.885 266.163,278.571 266.424 C 278.257 266.685,277.999 267.101,277.998 267.349 C 277.997 267.597,276.962 269.168,275.698 270.840 C 263.165 287.418,245.899 299.107,225.800 304.619 C 223.389 305.280,222.463 305.504,218.400 306.409 C 205.840 309.207,187.930 309.214,174.800 306.425 C 171.125 305.645,170.540 305.503,167.800 304.732 C 156.229 301.473,142.002 294.168,134.600 287.684 C 125.892 280.056,119.701 272.506,115.016 263.800 C 112.508 259.140,112.073 259.491,113.769 264.802 C 117.838 277.539,123.584 287.169,132.398 296.020 C 139.904 303.559,146.274 307.675,159.000 313.210 C 172.748 319.190,197.183 320.872,215.800 317.120 C 221.359 316.000,222.218 315.793,225.400 314.805 C 226.940 314.327,228.560 313.840,229.000 313.724 C 231.079 313.174,240.843 309.268,242.600 308.285 C 243.040 308.038,244.930 307.006,246.800 305.990 C 251.314 303.539,254.135 301.761,256.800 299.690 C 258.010 298.749,259.900 297.284,261.000 296.435 C 263.527 294.483,269.190 288.624,271.947 285.106 C 274.840 281.417,277.555 276.650,280.345 270.367 C 281.819 267.047,284.225 256.773,283.084 258.673 M195.200 261.613 C 195.200 261.839,195.470 262.129,195.801 262.256 C 196.637 262.577,198.485 262.061,198.193 261.588 C 197.871 261.068,195.200 261.089,195.200 261.613 M356.514 273.400 C 356.517 274.500,356.595 274.903,356.687 274.295 C 356.779 273.686,356.777 272.786,356.682 272.295 C 356.587 271.803,356.511 272.300,356.514 273.400 M342.158 281.800 C 342.158 284.880,342.221 286.087,342.297 284.482 C 342.373 282.878,342.373 280.358,342.296 278.882 C 342.219 277.407,342.157 278.720,342.158 281.800 M356.528 286.000 C 356.528 287.430,356.601 288.015,356.689 287.300 C 356.778 286.585,356.778 285.415,356.689 284.700 C 356.601 283.985,356.528 284.570,356.528 286.000 M190.520 344.000 C 190.520 345.210,190.595 345.705,190.687 345.100 C 190.778 344.495,190.778 343.505,190.687 342.900 C 190.595 342.295,190.520 342.790,190.520 344.000 M240.700 352.689 C 241.415 352.778,242.585 352.778,243.300 352.689 C 244.015 352.601,243.430 352.528,242.000 352.528 C 240.570 352.528,239.985 352.601,240.700 352.689 M247.507 352.690 C 248.226 352.779,249.306 352.777,249.907 352.686 C 250.508 352.595,249.920 352.522,248.600 352.524 C 247.280 352.526,246.788 352.601,247.507 352.690 M190.528 359.600 C 190.528 361.030,190.601 361.615,190.689 360.900 C 190.778 360.185,190.778 359.015,190.689 358.300 C 190.601 357.585,190.528 358.170,190.528 359.600 M198.000 359.345 C 198.000 359.637,198.360 360.202,198.800 360.600 C 199.240 360.998,199.600 361.566,199.600 361.862 C 199.600 362.158,199.749 362.400,199.932 362.400 C 200.114 362.400,200.999 363.795,201.897 365.500 C 211.306 383.364,204.316 398.083,188.900 392.866 C 187.085 392.252,185.600 391.816,185.600 391.897 C 185.600 393.327,192.766 400.950,196.158 403.128 C 200.288 405.781,207.525 407.101,210.229 405.694 C 210.653 405.474,211.540 405.047,212.200 404.747 C 220.766 400.844,223.270 385.486,216.816 376.423 C 216.367 375.792,216.000 375.156,216.000 375.008 C 216.000 374.429,212.329 370.065,209.735 367.559 C 205.258 363.236,198.000 358.155,198.000 359.345 M223.305 362.287 C 223.914 362.379,224.814 362.377,225.305 362.282 C 225.797 362.187,225.300 362.111,224.200 362.114 C 223.100 362.117,222.697 362.195,223.305 362.287 M253.300 362.276 C 253.685 362.376,254.315 362.376,254.700 362.276 C 255.085 362.175,254.770 362.093,254.000 362.093 C 253.230 362.093,252.915 362.175,253.300 362.276 M234.700 363.093 C 235.635 363.177,237.165 363.177,238.100 363.093 C 239.035 363.009,238.270 362.940,236.400 362.940 C 234.530 362.940,233.765 363.009,234.700 363.093 M225.620 373.700 C 228.701 378.602,230.800 383.727,230.800 386.347 C 230.800 388.223,231.437 388.230,235.067 386.389 C 240.121 383.827,243.748 379.448,245.164 374.200 C 245.900 371.473,245.820 371.392,243.400 372.409 C 239.813 373.916,228.213 373.330,226.220 371.541 C 224.480 369.980,224.113 371.302,225.620 373.700 \\\" stroke=\\\"none\\\" fill=\\\"#040404\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path2\\\" d=\\\"M186.300 7.493 C 187.235 7.577,188.765 7.577,189.700 7.493 C 190.635 7.409,189.870 7.340,188.000 7.340 C 186.130 7.340,185.365 7.409,186.300 7.493 M198.707 27.890 C 199.426 27.979,200.506 27.977,201.107 27.886 C 201.708 27.795,201.120 27.722,199.800 27.724 C 198.480 27.726,197.988 27.801,198.707 27.890 M205.505 27.883 C 206.002 27.979,206.722 27.975,207.105 27.875 C 207.487 27.775,207.080 27.696,206.200 27.701 C 205.320 27.705,205.007 27.787,205.505 27.883 M194.505 35.487 C 195.114 35.579,196.014 35.577,196.505 35.482 C 196.997 35.387,196.500 35.311,195.400 35.314 C 194.300 35.317,193.897 35.395,194.505 35.487 M122.075 73.048 C 122.447 73.158,122.842 73.553,122.952 73.925 C 123.099 74.414,123.132 74.381,123.072 73.805 C 123.025 73.338,122.662 72.975,122.195 72.928 C 121.619 72.868,121.586 72.901,122.075 73.048 M268.707 77.890 C 269.426 77.979,270.506 77.977,271.107 77.886 C 271.708 77.795,271.120 77.722,269.800 77.724 C 268.480 77.726,267.988 77.801,268.707 77.890 M65.301 85.400 C 65.305 86.280,65.387 86.593,65.483 86.095 C 65.579 85.598,65.575 84.878,65.475 84.495 C 65.375 84.113,65.296 84.520,65.301 85.400 M235.320 86.400 C 235.320 87.610,235.395 88.105,235.487 87.500 C 235.578 86.895,235.578 85.905,235.487 85.300 C 235.395 84.695,235.320 85.190,235.320 86.400 M191.100 85.082 C 191.595 85.178,192.405 85.178,192.900 85.082 C 193.395 84.987,192.990 84.909,192.000 84.909 C 191.010 84.909,190.605 84.987,191.100 85.082 M214.944 88.749 C 214.755 88.887,214.545 89.255,214.477 89.568 C 214.387 89.989,214.490 90.026,214.877 89.711 C 215.165 89.477,215.760 89.214,216.200 89.127 C 216.971 88.973,216.969 88.959,216.144 88.733 C 215.674 88.604,215.134 88.611,214.944 88.749 M98.500 95.476 C 98.885 95.576,99.515 95.576,99.900 95.476 C 100.285 95.375,99.970 95.293,99.200 95.293 C 98.430 95.293,98.115 95.375,98.500 95.476 M235.301 102.200 C 235.305 103.080,235.387 103.393,235.483 102.895 C 235.579 102.398,235.575 101.678,235.475 101.295 C 235.375 100.913,235.296 101.320,235.301 102.200 M245.293 102.400 C 245.293 103.170,245.375 103.485,245.476 103.100 C 245.576 102.715,245.576 102.085,245.476 101.700 C 245.375 101.315,245.293 101.630,245.293 102.400 M223.891 105.489 C 224.601 105.577,225.861 105.579,226.691 105.492 C 227.521 105.405,226.940 105.333,225.400 105.331 C 223.860 105.329,223.181 105.400,223.891 105.489 M150.305 107.883 C 150.802 107.979,151.522 107.975,151.905 107.875 C 152.287 107.775,151.880 107.696,151.000 107.701 C 150.120 107.705,149.807 107.787,150.305 107.883 M132.893 110.400 C 132.893 111.170,132.975 111.485,133.076 111.100 C 133.176 110.715,133.176 110.085,133.076 109.700 C 132.975 109.315,132.893 109.630,132.893 110.400 M171.952 116.087 C 172.137 117.198,172.193 117.255,172.319 116.454 C 172.401 115.933,172.303 115.343,172.101 115.141 C 171.879 114.919,171.821 115.293,171.952 116.087 M204.046 115.276 C 203.985 116.170,204.749 116.612,205.335 116.021 C 205.689 115.664,205.642 115.613,205.135 115.806 C 204.691 115.975,204.407 115.816,204.281 115.329 C 204.120 114.704,204.086 114.696,204.046 115.276 M210.705 122.283 C 211.202 122.379,211.922 122.375,212.305 122.275 C 212.687 122.175,212.280 122.096,211.400 122.101 C 210.520 122.105,210.207 122.187,210.705 122.283 M77.800 124.400 C 78.883 125.500,79.860 126.400,79.970 126.400 C 80.080 126.400,79.283 125.500,78.200 124.400 C 77.117 123.300,76.140 122.400,76.030 122.400 C 75.920 122.400,76.717 123.300,77.800 124.400 M188.900 123.076 C 189.285 123.176,189.915 123.176,190.300 123.076 C 190.685 122.975,190.370 122.893,189.600 122.893 C 188.830 122.893,188.515 122.975,188.900 123.076 M102.000 123.325 C 102.000 123.394,102.585 123.979,103.300 124.625 L 104.600 125.800 103.425 124.500 C 102.330 123.288,102.000 123.016,102.000 123.325 M189.293 141.200 C 189.293 141.970,189.375 142.285,189.476 141.900 C 189.576 141.515,189.576 140.885,189.476 140.500 C 189.375 140.115,189.293 140.430,189.293 141.200 M238.124 142.600 C 238.126 143.920,238.201 144.412,238.290 143.693 C 238.379 142.974,238.377 141.894,238.286 141.293 C 238.195 140.692,238.122 141.280,238.124 142.600 M59.775 172.500 L 58.600 173.800 59.900 172.625 C 60.615 171.979,61.200 171.394,61.200 171.325 C 61.200 171.016,60.870 171.288,59.775 172.500 M203.600 177.800 C 204.346 178.570,205.047 179.200,205.157 179.200 C 205.267 179.200,204.746 178.570,204.000 177.800 C 203.254 177.030,202.553 176.400,202.443 176.400 C 202.333 176.400,202.854 177.030,203.600 177.800 M105.385 216.500 L 103.400 218.600 105.500 216.615 C 106.655 215.523,107.600 214.578,107.600 214.515 C 107.600 214.217,107.229 214.549,105.385 216.500 M77.505 225.083 C 78.002 225.179,78.722 225.175,79.105 225.075 C 79.487 224.975,79.080 224.896,78.200 224.901 C 77.320 224.905,77.007 224.987,77.505 225.083 M133.701 244.200 C 133.705 245.080,133.787 245.393,133.883 244.895 C 133.979 244.398,133.975 243.678,133.875 243.295 C 133.775 242.913,133.696 243.320,133.701 244.200 M110.178 253.635 C 110.031 253.874,110.090 254.250,110.310 254.470 C 110.576 254.736,110.799 254.725,110.978 254.435 C 111.126 254.196,111.046 254.000,110.800 254.000 C 110.554 254.000,110.464 253.820,110.600 253.600 C 110.736 253.380,110.757 253.200,110.647 253.200 C 110.537 253.200,110.326 253.396,110.178 253.635 M283.840 255.506 C 284.082 255.668,284.383 256.070,284.508 256.400 C 284.661 256.801,284.747 256.701,284.768 256.100 C 284.790 255.495,284.570 255.202,284.100 255.206 C 283.668 255.210,283.569 255.325,283.840 255.506 M162.000 265.325 C 162.000 265.394,162.585 265.979,163.300 266.625 L 164.600 267.800 163.425 266.500 C 162.330 265.288,162.000 265.016,162.000 265.325 M63.293 272.000 C 63.293 272.770,63.375 273.085,63.476 272.700 C 63.576 272.315,63.576 271.685,63.476 271.300 C 63.375 270.915,63.293 271.230,63.293 272.000 M355.301 279.000 C 355.305 279.880,355.387 280.193,355.483 279.695 C 355.579 279.198,355.575 278.478,355.475 278.095 C 355.375 277.713,355.296 278.120,355.301 279.000 M194.691 279.489 C 195.401 279.577,196.661 279.579,197.491 279.492 C 198.321 279.405,197.740 279.333,196.200 279.331 C 194.660 279.329,193.981 279.400,194.691 279.489 M202.100 283.476 C 202.485 283.576,203.115 283.576,203.500 283.476 C 203.885 283.375,203.570 283.293,202.800 283.293 C 202.030 283.293,201.715 283.375,202.100 283.476 M186.900 307.476 C 187.285 307.576,187.915 307.576,188.300 307.476 C 188.685 307.375,188.370 307.293,187.600 307.293 C 186.830 307.293,186.515 307.375,186.900 307.476 M204.900 307.476 C 205.285 307.576,205.915 307.576,206.300 307.476 C 206.685 307.375,206.370 307.293,205.600 307.293 C 204.830 307.293,204.515 307.375,204.900 307.476 M88.400 327.725 C 88.400 327.794,88.985 328.379,89.700 329.025 L 91.000 330.200 89.825 328.900 C 88.730 327.688,88.400 327.416,88.400 327.725 M157.900 369.082 C 158.395 369.178,159.205 369.178,159.700 369.082 C 160.195 368.987,159.790 368.909,158.800 368.909 C 157.810 368.909,157.405 368.987,157.900 369.082 M172.500 383.876 C 172.885 383.976,173.515 383.976,173.900 383.876 C 174.285 383.775,173.970 383.693,173.200 383.693 C 172.430 383.693,172.115 383.775,172.500 383.876 \\\" stroke=\\\"none\\\" fill=\\\"#444444\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path3\\\" d=\\\"M185.600 15.600 C 184.836 16.094,185.658 16.094,187.200 15.600 L 188.200 15.280 187.200 15.246 C 186.650 15.227,185.930 15.387,185.600 15.600 M197.400 15.600 C 199.092 16.031,200.544 16.031,199.200 15.600 C 198.650 15.424,197.750 15.283,197.200 15.287 C 196.302 15.294,196.322 15.326,197.400 15.600 M202.705 27.883 C 203.202 27.979,203.922 27.975,204.305 27.875 C 204.687 27.775,204.280 27.696,203.400 27.701 C 202.520 27.705,202.207 27.787,202.705 27.883 M193.800 28.373 C 192.611 28.649,192.615 28.655,194.294 28.960 C 195.609 29.199,196.131 29.126,196.623 28.634 C 197.340 27.917,196.212 27.813,193.800 28.373 M208.063 28.197 C 208.172 28.305,209.237 28.492,210.430 28.613 C 211.979 28.769,212.428 28.715,212.000 28.422 C 211.414 28.022,207.674 27.808,208.063 28.197 M231.315 28.631 C 232.391 29.937,232.164 30.108,229.596 29.922 C 228.275 29.827,227.420 29.892,227.696 30.068 C 228.452 30.548,231.913 30.465,232.225 29.960 C 232.375 29.717,232.077 29.132,231.563 28.660 C 230.686 27.852,230.671 27.850,231.315 28.631 M187.700 28.676 C 188.085 28.776,188.715 28.776,189.100 28.676 C 189.485 28.575,189.170 28.493,188.400 28.493 C 187.630 28.493,187.315 28.575,187.700 28.676 M177.505 30.283 C 178.002 30.379,178.722 30.375,179.105 30.275 C 179.487 30.175,179.080 30.096,178.200 30.101 C 177.320 30.105,177.007 30.187,177.505 30.283 M189.300 35.491 C 190.125 35.578,191.475 35.578,192.300 35.491 C 193.125 35.405,192.450 35.334,190.800 35.334 C 189.150 35.334,188.475 35.405,189.300 35.491 M197.905 35.483 C 198.402 35.579,199.122 35.575,199.505 35.475 C 199.887 35.375,199.480 35.296,198.600 35.301 C 197.720 35.305,197.407 35.387,197.905 35.483 M200.433 35.343 C 200.525 35.422,201.320 35.597,202.200 35.732 C 203.290 35.899,203.609 35.855,203.200 35.595 C 202.653 35.246,200.045 35.009,200.433 35.343 M205.300 36.276 C 205.685 36.376,206.315 36.376,206.700 36.276 C 207.085 36.175,206.770 36.093,206.000 36.093 C 205.230 36.093,204.915 36.175,205.300 36.276 M136.063 43.365 C 133.658 45.870,132.952 47.134,134.233 46.643 C 134.581 46.509,134.986 46.397,135.133 46.394 C 135.280 46.391,135.130 46.217,134.800 46.008 C 134.311 45.698,134.642 45.180,136.587 43.214 C 137.901 41.886,138.874 40.800,138.751 40.800 C 138.628 40.800,137.418 41.954,136.063 43.365 M192.800 49.200 C 191.456 49.631,192.908 49.631,194.600 49.200 C 195.678 48.926,195.698 48.894,194.800 48.887 C 194.250 48.883,193.350 49.024,192.800 49.200 M184.392 50.210 C 183.619 51.141,184.171 51.317,184.998 50.402 C 185.397 49.961,185.538 49.600,185.311 49.600 C 185.084 49.600,184.670 49.874,184.392 50.210 M220.854 50.363 C 221.372 50.783,221.943 51.035,222.122 50.925 C 222.526 50.675,221.199 49.630,220.456 49.613 C 220.143 49.605,220.313 49.925,220.854 50.363 M57.800 59.956 C 57.137 60.101,58.355 60.214,60.522 60.209 C 62.679 60.204,64.029 60.083,63.522 59.940 C 62.348 59.609,59.355 59.617,57.800 59.956 M233.600 63.325 C 233.600 63.394,234.185 63.979,234.900 64.625 L 236.200 65.800 235.025 64.500 C 233.930 63.288,233.600 63.016,233.600 63.325 M262.400 64.018 C 261.962 64.315,262.124 64.352,263.000 64.156 C 264.471 63.827,264.790 63.598,263.767 63.606 C 263.345 63.609,262.730 63.795,262.400 64.018 M138.893 64.580 C 137.639 65.272,137.262 65.701,138.212 65.355 C 139.198 64.995,140.714 63.986,140.189 64.039 C 139.975 64.061,139.392 64.304,138.893 64.580 M248.532 65.033 C 248.405 65.364,248.413 65.747,248.551 65.884 C 248.688 66.021,248.800 65.811,248.800 65.418 C 248.800 64.782,249.079 64.728,251.300 64.933 C 252.675 65.060,254.430 65.024,255.200 64.852 C 256.237 64.621,255.584 64.526,252.682 64.486 C 249.526 64.441,248.718 64.548,248.532 65.033 M232.909 67.600 C 232.909 68.590,232.987 68.995,233.082 68.500 C 233.178 68.005,233.178 67.195,233.082 66.700 C 232.987 66.205,232.909 66.610,232.909 67.600 M233.701 72.600 C 233.705 73.480,233.787 73.793,233.883 73.295 C 233.979 72.798,233.975 72.078,233.875 71.695 C 233.775 71.313,233.696 71.720,233.701 72.600 M109.113 74.295 C 110.276 74.376,112.076 74.376,113.113 74.293 C 114.151 74.211,113.200 74.145,111.000 74.146 C 108.800 74.147,107.951 74.214,109.113 74.295 M207.900 74.282 C 208.395 74.378,209.205 74.378,209.700 74.282 C 210.195 74.187,209.790 74.109,208.800 74.109 C 207.810 74.109,207.405 74.187,207.900 74.282 M193.877 74.659 C 194.502 74.795,194.803 75.214,194.929 76.125 C 195.098 77.355,195.103 77.350,195.052 76.000 C 195.008 74.806,194.853 74.590,194.000 74.534 C 193.165 74.480,193.145 74.500,193.877 74.659 M309.044 75.800 C 309.373 77.271,309.602 77.590,309.594 76.567 C 309.591 76.145,309.405 75.530,309.182 75.200 C 308.885 74.762,308.848 74.924,309.044 75.800 M180.493 76.400 C 180.493 77.170,180.575 77.485,180.676 77.100 C 180.776 76.715,180.776 76.085,180.676 75.700 C 180.575 75.315,180.493 75.630,180.493 76.400 M234.501 78.600 C 234.505 79.480,234.587 79.793,234.683 79.295 C 234.779 78.798,234.775 78.078,234.675 77.695 C 234.575 77.313,234.496 77.720,234.501 78.600 M185.700 78.691 C 186.525 78.778,187.875 78.778,188.700 78.691 C 189.525 78.605,188.850 78.534,187.200 78.534 C 185.550 78.534,184.875 78.605,185.700 78.691 M250.982 78.828 C 250.832 79.071,250.886 79.446,251.102 79.662 C 251.358 79.918,251.576 79.841,251.729 79.440 C 252.009 78.710,251.376 78.192,250.982 78.828 M64.412 81.200 C 64.412 81.530,64.587 82.070,64.800 82.400 C 65.145 82.933,65.188 82.933,65.188 82.400 C 65.188 82.070,65.013 81.530,64.800 81.200 C 64.455 80.667,64.412 80.667,64.412 81.200 M116.800 82.600 C 115.828 83.590,115.123 84.400,115.233 84.400 C 115.343 84.400,116.228 83.590,117.200 82.600 C 118.172 81.610,118.877 80.800,118.767 80.800 C 118.657 80.800,117.772 81.610,116.800 82.600 M272.500 83.700 C 272.571 84.054,271.937 84.198,270.333 84.191 C 269.086 84.187,268.152 84.322,268.257 84.491 C 268.538 84.947,272.328 84.866,273.226 84.386 C 274.232 83.847,274.218 83.200,273.200 83.200 C 272.760 83.200,272.445 83.425,272.500 83.700 M197.356 84.971 C 197.235 85.285,197.204 85.960,197.286 86.471 C 197.395 87.154,197.488 87.004,197.637 85.900 C 197.847 84.347,197.736 83.981,197.356 84.971 M128.501 86.200 C 128.505 87.080,128.587 87.393,128.683 86.895 C 128.779 86.398,128.775 85.678,128.675 85.295 C 128.575 84.913,128.496 85.320,128.501 86.200 M65.355 91.800 C 65.356 94.660,65.420 95.778,65.497 94.283 C 65.574 92.789,65.574 90.449,65.496 89.083 C 65.418 87.718,65.355 88.940,65.355 91.800 M214.200 88.371 C 213.703 88.582,214.686 88.663,216.800 88.584 C 219.386 88.487,219.769 88.531,218.400 88.768 L 216.600 89.080 218.400 89.093 C 220.656 89.109,222.835 88.664,222.000 88.358 C 221.010 87.996,215.061 88.005,214.200 88.371 M235.362 94.600 C 235.362 98.120,235.424 99.506,235.498 97.681 C 235.572 95.856,235.572 92.976,235.497 91.281 C 235.422 89.586,235.361 91.080,235.362 94.600 M157.554 89.237 C 157.131 89.505,157.191 89.589,157.811 89.594 C 158.257 89.597,159.022 89.880,159.511 90.223 C 160.343 90.806,160.400 90.793,160.400 90.023 C 160.400 89.570,160.175 89.186,159.900 89.169 C 159.625 89.153,159.109 89.082,158.754 89.013 C 158.398 88.943,157.858 89.044,157.554 89.237 M127.011 90.400 C 127.334 93.292,127.895 95.529,127.950 94.150 C 127.977 93.463,128.113 92.334,128.251 91.643 C 128.457 90.613,128.391 90.429,127.883 90.623 C 127.458 90.787,127.199 90.569,127.059 89.931 C 126.946 89.419,126.925 89.630,127.011 90.400 M130.006 90.700 C 130.011 91.501,130.109 91.647,130.369 91.236 C 130.565 90.926,130.633 90.431,130.520 90.136 C 130.196 89.290,129.999 89.506,130.006 90.700 M309.246 91.867 C 309.221 92.124,309.084 92.664,308.941 93.067 C 308.740 93.636,308.794 93.697,309.179 93.342 C 309.452 93.091,309.589 92.551,309.484 92.142 C 309.379 91.734,309.272 91.610,309.246 91.867 M130.520 94.400 C 130.520 95.610,130.595 96.105,130.687 95.500 C 130.778 94.895,130.778 93.905,130.687 93.300 C 130.595 92.695,130.520 93.190,130.520 94.400 M245.724 94.600 C 245.726 95.920,245.801 96.412,245.890 95.693 C 245.979 94.974,245.977 93.894,245.886 93.293 C 245.795 92.692,245.722 93.280,245.724 94.600 M93.633 94.544 C 93.725 94.623,94.340 94.808,95.000 94.956 C 95.876 95.152,96.038 95.115,95.600 94.818 C 95.060 94.453,93.232 94.198,93.633 94.544 M103.800 94.800 C 103.296 95.017,103.222 95.144,103.600 95.144 C 103.930 95.144,104.560 94.989,105.000 94.800 C 105.504 94.583,105.578 94.456,105.200 94.456 C 104.870 94.456,104.240 94.611,103.800 94.800 M200.575 95.700 L 199.400 97.000 200.700 95.825 C 201.415 95.179,202.000 94.594,202.000 94.525 C 202.000 94.216,201.670 94.488,200.575 95.700 M176.600 97.600 C 177.459 98.480,178.252 99.200,178.362 99.200 C 178.472 99.200,177.859 98.480,177.000 97.600 C 176.141 96.720,175.348 96.000,175.238 96.000 C 175.128 96.000,175.741 96.720,176.600 97.600 M217.100 100.293 C 218.035 100.377,219.565 100.377,220.500 100.293 C 221.435 100.209,220.670 100.140,218.800 100.140 C 216.930 100.140,216.165 100.209,217.100 100.293 M154.402 101.100 C 154.402 101.265,156.006 101.400,157.964 101.400 C 159.922 101.400,161.317 101.268,161.062 101.106 C 160.453 100.719,154.400 100.713,154.402 101.100 M212.245 101.128 C 212.133 101.308,212.573 101.377,213.221 101.282 C 213.870 101.187,214.400 101.040,214.400 100.955 C 214.400 100.650,212.443 100.807,212.245 101.128 M66.006 102.033 C 66.009 102.565,66.189 103.270,66.406 103.600 C 66.682 104.022,66.723 103.785,66.542 102.800 C 66.225 101.075,65.998 100.749,66.006 102.033 M217.700 101.487 C 218.305 101.578,219.295 101.578,219.900 101.487 C 220.505 101.395,220.010 101.320,218.800 101.320 C 217.590 101.320,217.095 101.395,217.700 101.487 M214.800 102.000 L 213.800 102.320 214.876 102.360 C 215.468 102.382,216.064 102.220,216.200 102.000 C 216.481 101.545,216.220 101.545,214.800 102.000 M150.016 102.981 C 149.502 103.600,149.801 105.200,150.430 105.200 C 150.637 105.200,150.580 104.829,150.303 104.376 C 149.874 103.672,149.914 103.467,150.576 102.976 C 151.004 102.659,151.161 102.400,150.925 102.400 C 150.690 102.400,150.281 102.661,150.016 102.981 M156.200 102.800 C 155.533 103.086,155.621 103.148,156.724 103.172 C 157.498 103.188,157.945 103.366,157.800 103.600 C 157.384 104.274,157.955 104.045,158.800 103.200 L 159.600 102.400 158.300 102.428 C 157.585 102.444,156.640 102.611,156.200 102.800 M168.600 105.600 C 169.459 106.480,170.252 107.200,170.362 107.200 C 170.472 107.200,169.859 106.480,169.000 105.600 C 168.141 104.720,167.348 104.000,167.238 104.000 C 167.128 104.000,167.741 104.720,168.600 105.600 M194.893 105.200 C 194.893 105.970,194.975 106.285,195.076 105.900 C 195.176 105.515,195.176 104.885,195.076 104.500 C 194.975 104.115,194.893 104.430,194.893 105.200 M223.116 104.297 C 224.499 104.375,226.659 104.374,227.916 104.295 C 229.172 104.216,228.040 104.152,225.400 104.153 C 222.760 104.153,221.732 104.218,223.116 104.297 M261.206 104.633 C 261.209 105.055,261.395 105.670,261.618 106.000 C 261.915 106.438,261.952 106.276,261.756 105.400 C 261.427 103.929,261.198 103.610,261.206 104.633 M206.929 105.300 C 206.484 105.795,205.976 106.470,205.801 106.800 C 205.463 107.437,205.555 107.350,207.176 105.500 C 207.706 104.895,208.049 104.400,207.939 104.400 C 207.829 104.400,207.375 104.805,206.929 105.300 M126.101 106.200 C 126.105 107.080,126.187 107.393,126.283 106.895 C 126.379 106.398,126.375 105.678,126.275 105.295 C 126.175 104.913,126.096 105.320,126.101 106.200 M157.200 105.756 C 157.200 105.842,157.817 105.985,158.572 106.073 C 159.327 106.161,159.856 106.090,159.748 105.916 C 159.555 105.603,157.200 105.455,157.200 105.756 M148.600 106.766 C 146.602 107.217,150.284 107.671,153.096 107.320 L 155.400 107.032 153.600 106.746 C 151.431 106.401,150.194 106.406,148.600 106.766 M127.342 110.600 C 127.341 112.580,127.408 113.440,127.492 112.512 C 127.576 111.584,127.577 109.964,127.495 108.912 C 127.412 107.860,127.343 108.620,127.342 110.600 M158.152 108.581 C 157.882 109.285,158.273 110.002,158.924 109.994 C 159.232 109.990,159.204 109.863,158.842 109.634 C 158.535 109.440,158.394 108.993,158.529 108.640 C 158.664 108.288,158.685 108.000,158.575 108.000 C 158.465 108.000,158.275 108.261,158.152 108.581 M195.862 108.500 C 195.964 108.665,196.386 108.800,196.800 108.800 C 197.214 108.800,197.636 108.665,197.738 108.500 C 197.840 108.335,197.418 108.200,196.800 108.200 C 196.182 108.200,195.760 108.335,195.862 108.500 M212.126 109.569 C 212.167 110.101,212.470 110.610,212.800 110.699 C 213.196 110.806,213.246 110.749,212.946 110.530 C 212.697 110.349,212.393 109.840,212.272 109.400 C 212.099 108.769,212.068 108.805,212.126 109.569 M204.085 110.013 C 203.818 110.440,203.600 111.321,203.600 111.971 C 203.600 112.621,203.420 113.264,203.200 113.400 C 202.980 113.536,202.801 113.952,202.802 114.324 C 202.804 114.752,203.024 114.579,203.402 113.854 C 203.731 113.224,204.000 112.225,204.000 111.634 C 204.000 111.043,204.213 110.347,204.473 110.087 C 204.734 109.826,204.862 109.529,204.758 109.425 C 204.655 109.321,204.352 109.586,204.085 110.013 M188.705 110.683 C 189.202 110.779,189.922 110.775,190.305 110.675 C 190.687 110.575,190.280 110.496,189.400 110.501 C 188.520 110.505,188.207 110.587,188.705 110.683 M171.152 113.287 C 171.337 114.398,171.393 114.455,171.519 113.654 C 171.601 113.133,171.503 112.543,171.301 112.341 C 171.079 112.119,171.021 112.493,171.152 113.287 M233.693 113.600 C 233.693 114.370,233.775 114.685,233.876 114.300 C 233.976 113.915,233.976 113.285,233.876 112.900 C 233.775 112.515,233.693 112.830,233.693 113.600 M173.000 117.798 C 173.000 120.286,173.135 122.239,173.300 122.137 C 173.687 121.899,173.681 114.347,173.294 113.737 C 173.132 113.482,173.000 115.310,173.000 117.798 M204.446 115.100 C 204.397 116.057,204.963 116.307,205.438 115.538 C 205.608 115.264,205.549 115.185,205.292 115.343 C 205.055 115.490,204.778 115.293,204.677 114.905 C 204.537 114.368,204.482 114.415,204.446 115.100 M224.575 116.500 L 223.400 117.800 224.700 116.625 C 225.415 115.979,226.000 115.394,226.000 115.325 C 226.000 115.016,225.670 115.288,224.575 116.500 M263.293 117.600 C 263.293 118.370,263.375 118.685,263.476 118.300 C 263.576 117.915,263.576 117.285,263.476 116.900 C 263.375 116.515,263.293 116.830,263.293 117.600 M151.200 116.925 C 151.200 116.994,151.785 117.579,152.500 118.225 L 153.800 119.400 152.625 118.100 C 151.530 116.888,151.200 116.616,151.200 116.925 M210.800 120.067 C 210.800 120.250,209.675 120.405,208.300 120.412 C 206.406 120.421,205.970 120.523,206.500 120.832 C 207.621 121.485,211.768 121.128,211.913 120.367 C 211.980 120.011,211.763 119.733,211.416 119.733 C 211.077 119.733,210.800 119.883,210.800 120.067 M203.200 120.649 C 203.200 121.329,204.702 122.503,205.277 122.273 C 205.626 122.133,205.575 122.053,205.123 122.032 C 204.750 122.014,204.165 121.600,203.823 121.111 C 203.480 120.622,203.200 120.414,203.200 120.649 M287.186 125.100 L 285.000 127.400 287.300 125.214 C 288.565 124.011,289.600 122.976,289.600 122.914 C 289.600 122.617,289.218 122.963,287.186 125.100 M189.852 124.716 C 189.744 124.890,190.273 124.961,191.028 124.873 C 191.783 124.785,192.400 124.642,192.400 124.556 C 192.400 124.255,190.045 124.403,189.852 124.716 M265.387 125.614 C 264.961 126.085,264.387 126.328,264.025 126.190 C 263.521 125.999,263.498 126.051,263.905 126.462 C 264.314 126.873,264.619 126.763,265.496 125.885 C 266.093 125.288,266.479 124.800,266.353 124.800 C 266.227 124.800,265.792 125.166,265.387 125.614 M80.000 126.525 C 80.000 126.594,80.585 127.179,81.300 127.825 L 82.600 129.000 81.425 127.700 C 80.330 126.488,80.000 126.216,80.000 126.525 M128.493 131.600 C 128.493 132.370,128.575 132.685,128.676 132.300 C 128.776 131.915,128.776 131.285,128.676 130.900 C 128.575 130.515,128.493 130.830,128.493 131.600 M116.501 133.400 C 116.505 134.280,116.587 134.593,116.683 134.095 C 116.779 133.598,116.775 132.878,116.675 132.495 C 116.575 132.113,116.496 132.520,116.501 133.400 M104.000 134.925 C 104.000 134.994,104.585 135.579,105.300 136.225 L 106.600 137.400 105.425 136.100 C 104.330 134.888,104.000 134.616,104.000 134.925 M276.181 136.500 L 274.600 138.200 276.300 136.619 C 277.881 135.148,278.184 134.800,277.881 134.800 C 277.816 134.800,277.051 135.565,276.181 136.500 M238.901 136.600 C 238.905 137.480,238.987 137.793,239.083 137.295 C 239.179 136.798,239.175 136.078,239.075 135.695 C 238.975 135.313,238.896 135.720,238.901 136.600 M228.267 135.867 C 228.120 136.013,228.015 136.598,228.034 137.167 C 228.068 138.181,228.075 138.179,228.421 137.020 C 228.785 135.803,228.731 135.402,228.267 135.867 M227.314 144.600 C 227.317 145.700,227.395 146.103,227.487 145.495 C 227.579 144.886,227.577 143.986,227.482 143.495 C 227.387 143.003,227.311 143.500,227.314 144.600 M238.144 148.400 C 238.144 150.490,238.212 151.345,238.294 150.300 C 238.376 149.255,238.376 147.545,238.294 146.500 C 238.212 145.455,238.144 146.310,238.144 148.400 M264.569 148.135 C 264.456 148.430,264.419 150.095,264.486 151.835 L 264.608 155.000 264.804 151.299 C 264.999 147.618,264.962 147.113,264.569 148.135 M110.000 150.925 C 110.000 150.994,110.585 151.579,111.300 152.225 L 112.600 153.400 111.425 152.100 C 110.330 150.888,110.000 150.616,110.000 150.925 M238.658 158.800 C 238.975 160.525,239.202 160.851,239.194 159.567 C 239.191 159.035,239.011 158.330,238.794 158.000 C 238.518 157.578,238.477 157.815,238.658 158.800 M76.800 161.825 C 78.227 162.140,80.800 162.195,80.800 161.911 C 80.800 161.740,79.765 161.621,78.500 161.646 C 77.235 161.672,76.470 161.752,76.800 161.825 M121.260 163.962 L 121.200 165.324 120.300 164.562 L 119.400 163.800 120.171 164.709 C 121.104 165.811,121.731 165.354,121.491 163.749 C 121.330 162.668,121.316 162.680,121.260 163.962 M163.000 171.200 C 164.306 172.520,165.465 173.600,165.575 173.600 C 165.685 173.600,164.706 172.520,163.400 171.200 C 162.094 169.880,160.935 168.800,160.825 168.800 C 160.715 168.800,161.694 169.880,163.000 171.200 M207.000 172.800 C 208.528 174.340,209.869 175.600,209.979 175.600 C 210.089 175.600,208.928 174.340,207.400 172.800 C 205.872 171.260,204.531 170.000,204.421 170.000 C 204.311 170.000,205.472 171.260,207.000 172.800 M322.600 173.600 C 323.683 174.700,324.660 175.600,324.770 175.600 C 324.880 175.600,324.083 174.700,323.000 173.600 C 321.917 172.500,320.940 171.600,320.830 171.600 C 320.720 171.600,321.517 172.500,322.600 173.600 M149.400 179.200 C 151.150 180.960,152.671 182.400,152.781 182.400 C 152.891 182.400,151.550 180.960,149.800 179.200 C 148.050 177.440,146.529 176.000,146.419 176.000 C 146.309 176.000,147.650 177.440,149.400 179.200 M295.375 177.300 L 294.200 178.600 295.500 177.425 C 296.215 176.779,296.800 176.194,296.800 176.125 C 296.800 175.816,296.470 176.088,295.375 177.300 M90.928 187.600 C 90.928 189.030,91.001 189.615,91.089 188.900 C 91.178 188.185,91.178 187.015,91.089 186.300 C 91.001 185.585,90.928 186.170,90.928 187.600 M332.909 190.800 C 332.909 191.790,332.987 192.195,333.082 191.700 C 333.178 191.205,333.178 190.395,333.082 189.900 C 332.987 189.405,332.909 189.810,332.909 190.800 M91.301 193.400 C 91.305 194.280,91.387 194.593,91.483 194.095 C 91.579 193.598,91.575 192.878,91.475 192.495 C 91.375 192.113,91.296 192.520,91.301 193.400 M108.909 194.800 C 108.909 195.790,108.987 196.195,109.082 195.700 C 109.178 195.205,109.178 194.395,109.082 193.900 C 108.987 193.405,108.909 193.810,108.909 194.800 M177.811 198.934 C 178.696 199.532,180.000 200.058,180.000 199.817 C 180.000 199.637,177.598 198.400,177.250 198.400 C 177.124 198.400,177.377 198.640,177.811 198.934 M48.667 201.067 C 48.520 201.213,48.400 201.513,48.400 201.733 C 48.400 201.953,48.518 202.015,48.663 201.870 C 48.808 201.725,49.197 201.830,49.529 202.103 C 50.054 202.536,50.069 202.485,49.651 201.700 C 49.127 200.716,49.060 200.673,48.667 201.067 M253.600 205.000 C 254.795 206.210,255.863 207.200,255.973 207.200 C 256.083 207.200,255.195 206.210,254.000 205.000 C 252.805 203.790,251.737 202.800,251.627 202.800 C 251.517 202.800,252.405 203.790,253.600 205.000 M324.093 206.000 C 324.093 206.770,324.175 207.085,324.276 206.700 C 324.376 206.315,324.376 205.685,324.276 205.300 C 324.175 204.915,324.093 205.230,324.093 206.000 M117.149 206.700 C 116.671 207.309,116.678 207.340,117.200 206.938 C 117.530 206.684,118.250 206.394,118.800 206.293 L 119.800 206.109 118.749 206.054 C 118.170 206.024,117.452 206.314,117.149 206.700 M109.775 212.100 L 108.600 213.400 109.900 212.225 C 111.112 211.130,111.384 210.800,111.075 210.800 C 111.006 210.800,110.421 211.385,109.775 212.100 M254.800 210.925 C 254.800 210.994,255.385 211.579,256.100 212.225 L 257.400 213.400 256.225 212.100 C 255.130 210.888,254.800 210.616,254.800 210.925 M98.581 215.700 L 97.000 217.400 98.700 215.819 C 100.281 214.348,100.584 214.000,100.281 214.000 C 100.216 214.000,99.451 214.765,98.581 215.700 M57.200 215.725 C 57.200 215.794,57.785 216.379,58.500 217.025 L 59.800 218.200 58.625 216.900 C 57.530 215.688,57.200 215.416,57.200 215.725 M336.575 217.700 L 335.400 219.000 336.700 217.825 C 337.415 217.179,338.000 216.594,338.000 216.525 C 338.000 216.216,337.670 216.488,336.575 217.700 M74.026 225.031 C 74.554 225.668,75.200 225.786,75.200 225.247 C 75.200 225.052,74.830 224.796,74.377 224.678 C 73.702 224.502,73.639 224.565,74.026 225.031 M54.800 227.325 C 54.800 227.614,55.385 228.379,56.100 229.025 L 57.400 230.200 56.350 229.000 C 55.772 228.340,55.382 227.575,55.483 227.300 C 55.584 227.025,55.472 226.800,55.233 226.800 C 54.995 226.800,54.800 227.036,54.800 227.325 M158.581 230.900 L 157.000 232.600 158.700 231.019 C 160.281 229.548,160.584 229.200,160.281 229.200 C 160.216 229.200,159.451 229.965,158.581 230.900 M304.311 230.293 C 305.251 230.378,306.691 230.377,307.511 230.291 C 308.330 230.205,307.560 230.136,305.800 230.137 C 304.040 230.139,303.370 230.209,304.311 230.293 M79.400 231.600 C 78.896 231.817,78.822 231.944,79.200 231.944 C 79.530 231.944,80.160 231.789,80.600 231.600 C 81.104 231.383,81.178 231.256,80.800 231.256 C 80.470 231.256,79.840 231.411,79.400 231.600 M272.520 234.000 C 272.520 235.210,272.595 235.705,272.687 235.100 C 272.778 234.495,272.778 233.505,272.687 232.900 C 272.595 232.295,272.520 232.790,272.520 234.000 M317.705 234.287 C 318.314 234.379,319.214 234.377,319.705 234.282 C 320.197 234.187,319.700 234.111,318.600 234.114 C 317.500 234.117,317.097 234.195,317.705 234.287 M311.452 234.716 C 311.344 234.890,311.918 234.967,312.728 234.887 C 314.942 234.669,315.205 234.467,313.324 234.432 C 312.402 234.414,311.559 234.542,311.452 234.716 M323.200 234.556 C 323.200 234.642,323.817 234.785,324.572 234.873 C 325.327 234.961,325.856 234.890,325.748 234.716 C 325.555 234.403,323.200 234.255,323.200 234.556 M300.900 239.200 C 300.991 239.538,301.571 239.828,302.231 239.863 C 303.238 239.918,303.261 239.899,302.400 239.723 C 301.850 239.611,301.251 239.312,301.070 239.060 C 300.849 238.752,300.793 238.799,300.900 239.200 M304.590 240.384 C 304.732 240.613,305.317 240.800,305.890 240.800 C 307.144 240.800,306.999 240.608,305.466 240.240 C 304.723 240.062,304.421 240.111,304.590 240.384 M56.400 242.200 C 57.146 242.970,57.847 243.600,57.957 243.600 C 58.067 243.600,57.546 242.970,56.800 242.200 C 56.054 241.430,55.353 240.800,55.243 240.800 C 55.133 240.800,55.654 241.430,56.400 242.200 M80.105 241.487 C 80.714 241.579,81.614 241.577,82.105 241.482 C 82.597 241.387,82.100 241.311,81.000 241.314 C 79.900 241.317,79.497 241.395,80.105 241.487 M257.728 244.000 C 257.728 245.430,257.801 246.015,257.889 245.300 C 257.978 244.585,257.978 243.415,257.889 242.700 C 257.801 241.985,257.728 242.570,257.728 244.000 M341.583 243.700 C 342.564 244.745,343.419 245.600,343.483 245.600 C 343.784 245.600,343.466 245.241,341.700 243.583 L 339.800 241.800 341.583 243.700 M245.392 246.153 C 245.396 247.565,245.532 248.513,245.694 248.260 C 246.059 247.689,246.040 245.244,245.664 244.293 C 245.510 243.904,245.388 244.741,245.392 246.153 M133.693 246.800 C 133.693 247.570,133.775 247.885,133.876 247.500 C 133.976 247.115,133.976 246.485,133.876 246.100 C 133.775 245.715,133.693 246.030,133.693 246.800 M257.646 249.076 C 257.621 249.558,257.420 250.064,257.200 250.200 C 256.980 250.336,256.800 250.657,256.800 250.913 C 256.800 251.169,257.083 250.975,257.428 250.482 C 257.773 249.989,257.974 249.273,257.874 248.893 C 257.737 248.367,257.682 248.411,257.646 249.076 M110.267 252.667 C 110.120 252.813,110.000 253.113,110.000 253.333 C 110.000 253.553,110.112 253.621,110.250 253.484 C 110.387 253.346,110.848 253.631,111.273 254.117 C 112.046 254.998,112.046 254.997,111.345 253.800 C 110.958 253.140,110.618 252.555,110.588 252.500 C 110.558 252.445,110.413 252.520,110.267 252.667 M283.858 254.825 C 283.137 255.527,283.141 255.540,284.016 255.312 C 284.812 255.103,284.894 255.198,284.716 256.126 C 284.606 256.703,284.670 257.081,284.858 256.964 C 285.279 256.704,285.314 254.512,284.900 254.275 C 284.735 254.180,284.266 254.427,283.858 254.825 M260.471 259.635 C 259.915 260.525,261.234 260.446,262.200 259.531 C 262.455 259.290,262.322 259.259,261.834 259.444 C 261.300 259.648,261.156 259.595,261.358 259.268 C 261.517 259.011,261.500 258.800,261.320 258.800 C 261.140 258.800,260.758 259.176,260.471 259.635 M237.178 264.700 L 235.800 266.200 237.300 264.822 C 238.696 263.538,238.984 263.200,238.678 263.200 C 238.612 263.200,237.937 263.875,237.178 264.700 M63.829 269.029 C 63.681 269.615,63.638 270.172,63.732 270.266 C 63.827 270.360,64.024 269.958,64.171 269.371 C 64.319 268.785,64.362 268.228,64.268 268.134 C 64.173 268.040,63.976 268.442,63.829 269.029 M171.200 272.820 C 172.587 273.761,173.378 274.035,172.400 273.236 C 171.850 272.786,171.220 272.417,171.000 272.415 C 170.780 272.413,170.870 272.596,171.200 272.820 M63.293 274.400 C 63.293 275.170,63.375 275.485,63.476 275.100 C 63.576 274.715,63.576 274.085,63.476 273.700 C 63.375 273.315,63.293 273.630,63.293 274.400 M45.256 274.000 C 45.256 274.330,45.411 274.960,45.600 275.400 C 45.817 275.904,45.944 275.978,45.944 275.600 C 45.944 275.270,45.789 274.640,45.600 274.200 C 45.383 273.696,45.256 273.622,45.256 274.000 M355.293 276.400 C 355.293 277.170,355.375 277.485,355.476 277.100 C 355.576 276.715,355.576 276.085,355.476 275.700 C 355.375 275.315,355.293 275.630,355.293 276.400 M126.800 279.000 C 127.546 279.770,128.247 280.400,128.357 280.400 C 128.467 280.400,127.946 279.770,127.200 279.000 C 126.454 278.230,125.753 277.600,125.643 277.600 C 125.533 277.600,126.054 278.230,126.800 279.000 M355.272 282.433 C 355.216 284.184,355.330 284.667,355.800 284.667 C 356.130 284.667,356.400 284.517,356.400 284.333 C 356.400 284.150,356.230 284.000,356.022 284.000 C 355.814 284.000,355.576 283.145,355.494 282.100 L 355.344 280.200 355.272 282.433 M213.200 281.600 C 212.376 281.864,212.341 281.926,213.000 281.954 C 213.440 281.973,214.070 281.813,214.400 281.600 C 215.101 281.147,214.614 281.147,213.200 281.600 M185.721 284.298 C 187.877 284.371,191.297 284.370,193.321 284.298 C 195.344 284.225,193.580 284.166,189.400 284.167 C 185.220 284.167,183.564 284.226,185.721 284.298 M268.378 290.700 L 267.000 292.200 268.500 290.822 C 269.896 289.538,270.184 289.200,269.878 289.200 C 269.812 289.200,269.137 289.875,268.378 290.700 M264.981 294.100 L 263.400 295.800 265.100 294.219 C 266.035 293.349,266.800 292.584,266.800 292.519 C 266.800 292.216,266.452 292.519,264.981 294.100 M181.705 306.687 C 182.314 306.779,183.214 306.777,183.705 306.682 C 184.197 306.587,183.700 306.511,182.600 306.514 C 181.500 306.517,181.097 306.595,181.705 306.687 M207.800 306.785 C 207.330 306.978,208.073 307.026,209.600 306.902 C 211.030 306.787,212.275 306.626,212.367 306.546 C 212.704 306.251,208.574 306.467,207.800 306.785 M192.721 307.499 C 194.988 307.570,198.588 307.570,200.721 307.498 C 202.855 307.426,201.000 307.368,196.600 307.368 C 192.200 307.368,190.455 307.427,192.721 307.499 M326.788 318.700 L 324.200 321.400 326.900 318.812 C 329.408 316.407,329.783 316.000,329.488 316.000 C 329.427 316.000,328.212 317.215,326.788 318.700 M205.600 319.600 C 204.776 319.864,204.741 319.926,205.400 319.954 C 205.840 319.973,206.470 319.813,206.800 319.600 C 207.501 319.147,207.014 319.147,205.600 319.600 M194.100 320.287 C 194.705 320.378,195.695 320.378,196.300 320.287 C 196.905 320.195,196.410 320.120,195.200 320.120 C 193.990 320.120,193.495 320.195,194.100 320.287 M194.893 328.800 C 194.893 329.570,194.975 329.885,195.076 329.500 C 195.176 329.115,195.176 328.485,195.076 328.100 C 194.975 327.715,194.893 328.030,194.893 328.800 M92.400 331.725 C 92.400 331.794,92.985 332.379,93.700 333.025 L 95.000 334.200 93.825 332.900 C 92.730 331.688,92.400 331.416,92.400 331.725 M195.293 333.200 C 195.293 333.970,195.375 334.285,195.476 333.900 C 195.576 333.515,195.576 332.885,195.476 332.500 C 195.375 332.115,195.293 332.430,195.293 333.200 M195.606 339.233 C 195.609 339.985,195.777 340.861,195.979 341.179 C 196.216 341.554,196.265 341.130,196.118 339.979 C 195.835 337.770,195.598 337.425,195.606 339.233 M84.400 343.325 C 84.400 343.394,84.985 343.979,85.700 344.625 L 87.000 345.800 85.825 344.500 C 84.730 343.288,84.400 343.016,84.400 343.325 M188.909 345.200 C 188.909 346.190,188.987 346.595,189.082 346.100 C 189.178 345.605,189.178 344.795,189.082 344.300 C 188.987 343.805,188.909 344.210,188.909 345.200 M189.351 352.400 C 189.351 354.930,189.416 355.965,189.496 354.700 C 189.575 353.435,189.575 351.365,189.496 350.100 C 189.416 348.835,189.351 349.870,189.351 352.400 M188.893 358.800 C 188.893 359.570,188.975 359.885,189.076 359.500 C 189.176 359.115,189.176 358.485,189.076 358.100 C 188.975 357.715,188.893 358.030,188.893 358.800 M224.000 360.695 C 224.330 360.800,224.816 361.061,225.079 361.275 C 225.391 361.528,225.810 361.517,226.279 361.244 C 226.897 360.884,226.907 360.823,226.350 360.812 C 225.993 360.805,225.183 360.733,224.550 360.652 C 223.918 360.570,223.670 360.589,224.000 360.695 M251.400 360.800 C 250.322 361.074,250.302 361.106,251.200 361.113 C 251.750 361.117,252.650 360.976,253.200 360.800 C 254.544 360.369,253.092 360.369,251.400 360.800 M114.773 365.767 C 115.181 366.259,116.800 366.918,116.800 366.592 C 116.800 366.519,116.242 366.180,115.560 365.840 C 114.622 365.372,114.430 365.355,114.773 365.767 M210.800 367.325 C 210.800 367.394,211.385 367.979,212.100 368.625 L 213.400 369.800 212.225 368.500 C 211.130 367.288,210.800 367.016,210.800 367.325 M150.833 368.144 C 150.925 368.223,151.540 368.408,152.200 368.556 C 153.076 368.752,153.238 368.715,152.800 368.418 C 152.260 368.053,150.432 367.798,150.833 368.144 M234.100 372.294 C 235.145 372.376,236.855 372.376,237.900 372.294 C 238.945 372.212,238.090 372.144,236.000 372.144 C 233.910 372.144,233.055 372.212,234.100 372.294 M160.600 382.800 C 160.736 383.020,161.242 383.187,161.724 383.172 C 162.569 383.145,162.571 383.131,161.800 382.800 C 160.699 382.327,160.308 382.327,160.600 382.800 M229.654 387.220 C 229.600 388.249,230.225 389.200,230.956 389.200 C 231.175 389.200,231.061 388.975,230.705 388.700 C 230.348 388.425,229.978 387.750,229.883 387.200 L 229.709 386.200 229.654 387.220 M221.320 389.200 C 221.320 390.410,221.395 390.905,221.487 390.300 C 221.578 389.695,221.578 388.705,221.487 388.100 C 221.395 387.495,221.320 387.990,221.320 389.200 M205.100 407.482 C 205.595 407.578,206.405 407.578,206.900 407.482 C 207.395 407.387,206.990 407.309,206.000 407.309 C 205.010 407.309,204.605 407.387,205.100 407.482 \\\" stroke=\\\"none\\\" fill=\\\"#4c4c4c\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path4\\\" d=\\\"M182.700 1.882 C 183.195 1.978,184.005 1.978,184.500 1.882 C 184.995 1.787,184.590 1.709,183.600 1.709 C 182.610 1.709,182.205 1.787,182.700 1.882 M182.300 7.482 C 182.795 7.578,183.605 7.578,184.100 7.482 C 184.595 7.387,184.190 7.309,183.200 7.309 C 182.210 7.309,181.805 7.387,182.300 7.482 M192.105 7.487 C 192.714 7.579,193.614 7.577,194.105 7.482 C 194.597 7.387,194.100 7.311,193.000 7.314 C 191.900 7.317,191.497 7.395,192.105 7.487 M176.900 8.276 C 177.285 8.376,177.915 8.376,178.300 8.276 C 178.685 8.175,178.370 8.093,177.600 8.093 C 176.830 8.093,176.515 8.175,176.900 8.276 M190.691 15.489 C 191.401 15.577,192.661 15.579,193.491 15.492 C 194.321 15.405,193.740 15.333,192.200 15.331 C 190.660 15.329,189.981 15.400,190.691 15.489 M195.505 27.883 C 196.002 27.979,196.722 27.975,197.105 27.875 C 197.487 27.775,197.080 27.696,196.200 27.701 C 195.320 27.705,195.007 27.787,195.505 27.883 M208.500 27.887 C 209.105 27.978,210.095 27.978,210.700 27.887 C 211.305 27.795,210.810 27.720,209.600 27.720 C 208.390 27.720,207.895 27.795,208.500 27.887 M191.505 28.283 C 192.002 28.379,192.722 28.375,193.105 28.275 C 193.487 28.175,193.080 28.096,192.200 28.101 C 191.320 28.105,191.007 28.187,191.505 28.283 M213.505 28.283 C 214.002 28.379,214.722 28.375,215.105 28.275 C 215.487 28.175,215.080 28.096,214.200 28.101 C 213.320 28.105,213.007 28.187,213.505 28.283 M134.600 45.600 C 134.308 46.073,134.699 46.073,135.800 45.600 C 136.571 45.269,136.569 45.255,135.724 45.228 C 135.242 45.213,134.736 45.380,134.600 45.600 M182.600 50.000 C 181.493 50.282,181.477 50.309,182.400 50.347 C 182.950 50.369,183.670 50.213,184.000 50.000 C 184.681 49.560,184.329 49.560,182.600 50.000 M222.046 50.037 C 222.565 50.365,225.929 50.572,225.567 50.253 C 225.475 50.172,224.521 50.012,223.446 49.896 C 222.251 49.768,221.707 49.822,222.046 50.037 M141.578 60.300 L 140.200 61.800 141.700 60.422 C 142.525 59.663,143.200 58.988,143.200 58.922 C 143.200 58.616,142.862 58.904,141.578 60.300 M306.893 64.800 C 306.893 65.570,306.975 65.885,307.076 65.500 C 307.176 65.115,307.176 64.485,307.076 64.100 C 306.975 63.715,306.893 64.030,306.893 64.800 M249.067 65.067 C 248.920 65.213,248.803 65.528,248.806 65.767 C 248.810 66.060,248.907 66.053,249.106 65.746 C 249.268 65.497,249.760 65.203,250.200 65.093 C 250.974 64.899,250.973 64.891,250.167 64.846 C 249.708 64.821,249.213 64.920,249.067 65.067 M186.100 68.691 C 186.925 68.778,188.275 68.778,189.100 68.691 C 189.925 68.605,189.250 68.534,187.600 68.534 C 185.950 68.534,185.275 68.605,186.100 68.691 M185.700 74.696 C 186.965 74.775,189.035 74.775,190.300 74.696 C 191.565 74.616,190.530 74.551,188.000 74.551 C 185.470 74.551,184.435 74.616,185.700 74.696 M197.301 75.800 C 197.305 76.680,197.387 76.993,197.483 76.495 C 197.579 75.998,197.575 75.278,197.475 74.895 C 197.375 74.513,197.296 74.920,197.301 75.800 M166.245 75.528 C 166.133 75.708,166.573 75.777,167.221 75.682 C 167.870 75.587,168.400 75.440,168.400 75.355 C 168.400 75.050,166.443 75.207,166.245 75.528 M186.505 79.087 C 187.114 79.179,188.014 79.177,188.505 79.082 C 188.997 78.987,188.500 78.911,187.400 78.914 C 186.300 78.917,185.897 78.995,186.505 79.087 M128.846 85.600 C 128.827 86.150,128.987 86.870,129.200 87.200 C 129.694 87.964,129.694 87.142,129.200 85.600 L 128.880 84.600 128.846 85.600 M185.500 85.093 C 186.435 85.177,187.965 85.177,188.900 85.093 C 189.835 85.009,189.070 84.940,187.200 84.940 C 185.330 84.940,184.565 85.009,185.500 85.093 M216.305 88.683 C 216.802 88.779,217.522 88.775,217.905 88.675 C 218.287 88.575,217.880 88.496,217.000 88.501 C 216.120 88.505,215.807 88.587,216.305 88.683 M213.274 89.031 C 214.267 89.211,214.421 89.350,213.974 89.661 C 213.562 89.948,213.550 90.021,213.930 89.920 C 214.974 89.644,214.575 88.998,213.300 88.900 L 212.000 88.800 213.274 89.031 M161.700 89.876 C 162.085 89.976,162.715 89.976,163.100 89.876 C 163.485 89.775,163.170 89.693,162.400 89.693 C 161.630 89.693,161.315 89.775,161.700 89.876 M188.500 93.876 C 188.885 93.976,189.515 93.976,189.900 93.876 C 190.285 93.775,189.970 93.693,189.200 93.693 C 188.430 93.693,188.115 93.775,188.500 93.876 M101.105 95.483 C 101.602 95.579,102.322 95.575,102.705 95.475 C 103.087 95.375,102.680 95.296,101.800 95.301 C 100.920 95.305,100.607 95.387,101.105 95.483 M127.744 101.200 C 127.744 103.290,127.812 104.145,127.894 103.100 C 127.976 102.055,127.976 100.345,127.894 99.300 C 127.812 98.255,127.744 99.110,127.744 101.200 M215.280 100.880 C 214.639 101.521,214.670 102.025,215.333 101.770 C 215.627 101.658,215.867 101.303,215.867 100.983 C 215.867 100.280,215.878 100.282,215.280 100.880 M221.755 100.700 C 221.926 100.992,221.829 101.211,221.524 101.225 C 221.236 101.239,221.431 101.423,221.958 101.634 C 223.246 102.149,223.391 101.892,222.334 100.964 C 221.855 100.544,221.594 100.425,221.755 100.700 M155.400 101.506 C 154.486 102.177,154.790 102.818,155.897 102.553 C 157.374 102.200,157.656 102.014,157.383 101.572 C 157.109 101.130,155.964 101.092,155.400 101.506 M158.749 101.877 C 158.393 102.315,158.373 102.450,158.692 102.258 C 158.962 102.096,159.547 102.158,159.992 102.396 C 160.880 102.871,161.078 102.438,160.320 101.680 C 159.679 101.039,159.400 101.074,158.749 101.877 M181.301 106.200 C 181.305 107.080,181.387 107.393,181.483 106.895 C 181.579 106.398,181.575 105.678,181.475 105.295 C 181.375 104.913,181.296 105.320,181.301 106.200 M147.400 105.600 C 146.686 105.907,146.678 105.947,147.324 105.972 C 147.722 105.987,147.956 106.147,147.845 106.328 C 147.733 106.508,148.175 106.577,148.826 106.482 C 149.477 106.386,150.108 106.149,150.229 105.954 C 150.349 105.759,150.932 105.603,151.524 105.606 C 152.264 105.610,152.434 105.718,152.068 105.950 C 151.693 106.187,151.915 106.363,152.818 106.544 C 154.629 106.906,155.286 106.863,155.000 106.400 C 154.864 106.180,155.168 105.979,155.676 105.954 C 156.224 105.927,155.948 105.773,155.000 105.577 C 152.920 105.147,148.423 105.160,147.400 105.600 M262.093 107.600 C 262.093 108.370,262.175 108.685,262.276 108.300 C 262.376 107.915,262.376 107.285,262.276 106.900 C 262.175 106.515,262.093 106.830,262.093 107.600 M147.200 108.024 C 147.200 108.257,146.975 108.312,146.700 108.147 C 146.356 107.940,146.370 108.056,146.745 108.519 C 147.373 109.293,148.074 109.059,147.740 108.187 C 147.476 107.501,147.200 107.417,147.200 108.024 M211.200 108.436 C 210.397 109.092,210.367 109.172,211.047 108.841 C 211.513 108.614,211.978 108.512,212.081 108.614 C 212.183 108.716,212.267 108.530,212.267 108.200 C 212.267 107.870,212.252 107.604,212.233 107.609 C 212.215 107.614,211.750 107.986,211.200 108.436 M180.983 108.428 C 180.837 108.663,180.332 109.012,179.859 109.203 C 179.273 109.439,179.203 109.557,179.638 109.575 C 179.989 109.589,180.602 109.240,181.000 108.800 C 181.398 108.360,181.617 108.000,181.486 108.000 C 181.354 108.000,181.128 108.193,180.983 108.428 M163.770 109.558 C 164.194 109.724,164.677 110.206,164.844 110.630 C 165.087 111.247,165.135 111.182,165.087 110.300 C 165.036 109.397,164.844 109.205,164.013 109.228 C 163.135 109.252,163.103 109.296,163.770 109.558 M172.450 113.324 C 172.414 114.416,172.258 114.768,171.900 114.567 C 171.625 114.413,171.711 114.617,172.090 115.020 C 173.018 116.003,173.153 115.732,172.799 113.600 L 172.500 111.800 172.450 113.324 M203.354 114.177 C 202.803 115.612,203.438 116.203,204.130 114.900 C 204.740 113.752,204.748 113.600,204.198 113.600 C 203.855 113.600,203.475 113.859,203.354 114.177 M115.767 121.600 C 115.767 125.890,115.826 127.645,115.898 125.500 C 115.970 123.355,115.970 119.845,115.898 117.700 C 115.826 115.555,115.767 117.310,115.767 121.600 M224.378 116.300 L 223.000 117.800 224.500 116.422 C 225.896 115.138,226.184 114.800,225.878 114.800 C 225.812 114.800,225.137 115.475,224.378 116.300 M127.731 119.800 C 127.733 121.340,127.805 121.921,127.892 121.091 C 127.979 120.261,127.977 119.001,127.889 118.291 C 127.800 117.581,127.729 118.260,127.731 119.800 M213.700 117.476 C 214.085 117.576,214.715 117.576,215.100 117.476 C 215.485 117.375,215.170 117.293,214.400 117.293 C 213.630 117.293,213.315 117.375,213.700 117.476 M263.742 122.200 C 263.741 124.180,263.808 125.040,263.892 124.112 C 263.976 123.184,263.977 121.564,263.895 120.512 C 263.812 119.460,263.743 120.220,263.742 122.200 M216.600 120.000 C 216.464 120.220,215.474 120.400,214.400 120.400 C 213.326 120.400,212.336 120.580,212.200 120.800 C 211.837 121.387,206.275 121.302,205.599 120.700 C 205.126 120.278,205.117 120.304,205.541 120.867 C 205.959 121.422,205.927 121.555,205.347 121.667 C 204.965 121.740,207.103 121.773,210.100 121.741 C 214.378 121.694,215.745 121.543,216.463 121.041 C 216.966 120.688,217.203 120.397,216.989 120.394 C 216.775 120.391,216.870 120.213,217.200 120.000 C 217.561 119.767,217.610 119.610,217.324 119.606 C 217.062 119.603,216.736 119.780,216.600 120.000 M158.600 120.768 C 159.040 120.940,159.400 121.330,159.400 121.635 C 159.400 121.940,159.760 122.235,160.200 122.291 L 161.000 122.393 160.200 121.990 C 159.581 121.678,159.802 121.628,161.179 121.766 C 162.351 121.884,162.761 121.820,162.379 121.579 C 162.061 121.377,161.316 121.209,160.724 121.206 C 160.132 121.203,159.536 121.020,159.400 120.800 C 159.264 120.580,158.848 120.413,158.476 120.428 C 157.933 120.451,157.957 120.517,158.600 120.768 M215.300 121.082 C 214.805 121.178,213.995 121.178,213.500 121.082 C 213.005 120.987,213.410 120.909,214.400 120.909 C 215.390 120.909,215.795 120.987,215.300 121.082 M165.500 122.293 C 166.435 122.377,167.965 122.377,168.900 122.293 C 169.835 122.209,169.070 122.140,167.200 122.140 C 165.330 122.140,164.565 122.209,165.500 122.293 M207.500 122.282 C 207.995 122.378,208.805 122.378,209.300 122.282 C 209.795 122.187,209.390 122.109,208.400 122.109 C 207.410 122.109,207.005 122.187,207.500 122.282 M240.380 126.690 C 240.271 127.619,240.333 128.227,240.520 128.040 C 240.706 127.854,240.796 127.094,240.719 126.351 C 240.583 125.033,240.575 125.042,240.380 126.690 M278.400 133.800 C 277.428 134.790,276.723 135.600,276.833 135.600 C 276.943 135.600,277.828 134.790,278.800 133.800 C 279.772 132.810,280.477 132.000,280.367 132.000 C 280.257 132.000,279.372 132.810,278.400 133.800 M237.714 148.200 C 237.717 149.300,237.795 149.703,237.887 149.095 C 237.979 148.486,237.977 147.586,237.882 147.095 C 237.787 146.603,237.711 147.100,237.714 148.200 M228.101 150.200 C 228.105 151.080,228.187 151.393,228.283 150.895 C 228.379 150.398,228.375 149.678,228.275 149.295 C 228.175 148.913,228.096 149.320,228.101 150.200 M206.400 172.600 C 207.595 173.810,208.663 174.800,208.773 174.800 C 208.883 174.800,207.995 173.810,206.800 172.600 C 205.605 171.390,204.537 170.400,204.427 170.400 C 204.317 170.400,205.205 171.390,206.400 172.600 M148.000 177.400 C 148.746 178.170,149.447 178.800,149.557 178.800 C 149.667 178.800,149.146 178.170,148.400 177.400 C 147.654 176.630,146.953 176.000,146.843 176.000 C 146.733 176.000,147.254 176.630,148.000 177.400 M289.714 189.800 C 289.717 190.900,289.795 191.303,289.887 190.695 C 289.979 190.086,289.977 189.186,289.882 188.695 C 289.787 188.203,289.711 188.700,289.714 189.800 M349.728 192.800 C 349.728 194.230,349.801 194.815,349.889 194.100 C 349.978 193.385,349.978 192.215,349.889 191.500 C 349.801 190.785,349.728 191.370,349.728 192.800 M90.893 193.200 C 90.893 193.970,90.975 194.285,91.076 193.900 C 91.176 193.515,91.176 192.885,91.076 192.500 C 90.975 192.115,90.893 192.430,90.893 193.200 M49.314 197.800 C 49.317 198.900,49.395 199.303,49.487 198.695 C 49.579 198.086,49.577 197.186,49.482 196.695 C 49.387 196.203,49.311 196.700,49.314 197.800 M260.273 215.845 C 260.465 216.347,260.394 216.444,260.006 216.204 C 259.654 215.986,259.572 216.031,259.762 216.338 C 259.919 216.592,260.217 216.800,260.424 216.800 C 260.923 216.800,260.908 215.714,260.405 215.403 C 260.170 215.258,260.116 215.437,260.273 215.845 M154.305 219.483 C 154.802 219.579,155.522 219.575,155.905 219.475 C 156.287 219.375,155.880 219.296,155.000 219.301 C 154.120 219.305,153.807 219.387,154.305 219.483 M277.731 232.200 C 277.733 233.740,277.805 234.321,277.892 233.491 C 277.979 232.661,277.977 231.401,277.889 230.691 C 277.800 229.981,277.729 230.660,277.731 232.200 M262.487 257.786 C 262.016 258.328,261.789 258.870,261.984 258.990 C 262.178 259.110,262.608 258.667,262.938 258.004 C 263.667 256.543,263.597 256.509,262.487 257.786 M45.351 267.600 C 45.351 270.130,45.416 271.165,45.496 269.900 C 45.575 268.635,45.575 266.565,45.496 265.300 C 45.416 264.035,45.351 265.070,45.351 267.600 M143.600 269.800 C 144.346 270.570,145.047 271.200,145.157 271.200 C 145.267 271.200,144.746 270.570,144.000 269.800 C 143.254 269.030,142.553 268.400,142.443 268.400 C 142.333 268.400,142.854 269.030,143.600 269.800 M354.893 276.800 C 354.893 277.570,354.975 277.885,355.076 277.500 C 355.176 277.115,355.176 276.485,355.076 276.100 C 354.975 275.715,354.893 276.030,354.893 276.800 M354.893 282.000 C 354.893 282.770,354.975 283.085,355.076 282.700 C 355.176 282.315,355.176 281.685,355.076 281.300 C 354.975 280.915,354.893 281.230,354.893 282.000 M177.505 283.483 C 178.002 283.579,178.722 283.575,179.105 283.475 C 179.487 283.375,179.080 283.296,178.200 283.301 C 177.320 283.305,177.007 283.387,177.505 283.483 M194.305 283.883 C 194.802 283.979,195.522 283.975,195.905 283.875 C 196.287 283.775,195.880 283.696,195.000 283.701 C 194.120 283.705,193.807 283.787,194.305 283.883 M128.800 293.710 C 128.800 293.771,130.195 295.166,131.900 296.810 L 135.000 299.800 132.010 296.700 C 129.233 293.821,128.800 293.417,128.800 293.710 M195.100 307.889 C 195.815 307.978,196.985 307.978,197.700 307.889 C 198.415 307.801,197.830 307.728,196.400 307.728 C 194.970 307.728,194.385 307.801,195.100 307.889 M326.585 319.300 L 324.600 321.400 326.700 319.415 C 328.651 317.571,328.983 317.200,328.685 317.200 C 328.622 317.200,327.677 318.145,326.585 319.300 M201.107 319.890 C 201.826 319.979,202.906 319.977,203.507 319.886 C 204.108 319.795,203.520 319.722,202.200 319.724 C 200.880 319.726,200.388 319.801,201.107 319.890 M195.693 335.600 C 195.693 336.370,195.775 336.685,195.876 336.300 C 195.976 335.915,195.976 335.285,195.876 334.900 C 195.775 334.515,195.693 334.830,195.693 335.600 M188.493 340.400 C 188.493 341.170,188.575 341.485,188.676 341.100 C 188.776 340.715,188.776 340.085,188.676 339.700 C 188.575 339.315,188.493 339.630,188.493 340.400 M188.946 351.800 C 188.947 354.000,189.014 354.849,189.095 353.687 C 189.176 352.524,189.176 350.724,189.093 349.687 C 189.011 348.649,188.945 349.600,188.946 351.800 M195.200 357.176 C 195.200 357.383,195.408 357.681,195.662 357.838 C 195.968 358.027,196.014 357.946,195.799 357.599 C 195.558 357.208,195.695 357.132,196.338 357.300 C 196.813 357.424,197.100 357.362,196.977 357.163 C 196.680 356.683,195.200 356.694,195.200 357.176 M153.700 369.076 C 154.085 369.176,154.715 369.176,155.100 369.076 C 155.485 368.975,155.170 368.893,154.400 368.893 C 153.630 368.893,153.315 368.975,153.700 369.076 \\\" stroke=\\\"none\\\" fill=\\\"#3c3c3c\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path5\\\" d=\\\"M192.900 27.876 C 193.285 27.976,193.915 27.976,194.300 27.876 C 194.685 27.775,194.370 27.693,193.600 27.693 C 192.830 27.693,192.515 27.775,192.900 27.876 M212.305 27.883 C 212.802 27.979,213.522 27.975,213.905 27.875 C 214.287 27.775,213.880 27.696,213.000 27.701 C 212.120 27.705,211.807 27.787,212.305 27.883 M199.505 35.883 C 200.002 35.979,200.722 35.975,201.105 35.875 C 201.487 35.775,201.080 35.696,200.200 35.701 C 199.320 35.705,199.007 35.787,199.505 35.883 M313.399 43.080 C 314.058 43.186,314.747 43.481,314.929 43.736 C 315.153 44.049,315.209 44.005,315.100 43.600 C 315.000 43.231,314.412 42.978,313.569 42.944 C 312.315 42.892,312.301 42.903,313.399 43.080 M196.713 48.695 C 197.876 48.776,199.676 48.776,200.713 48.693 C 201.751 48.611,200.800 48.545,198.600 48.546 C 196.400 48.547,195.551 48.614,196.713 48.695 M206.500 48.691 C 207.325 48.778,208.675 48.778,209.500 48.691 C 210.325 48.605,209.650 48.534,208.000 48.534 C 206.350 48.534,205.675 48.605,206.500 48.691 M186.707 49.490 C 187.426 49.579,188.506 49.577,189.107 49.486 C 189.708 49.395,189.120 49.322,187.800 49.324 C 186.480 49.326,185.988 49.401,186.707 49.490 M216.291 49.489 C 217.001 49.577,218.261 49.579,219.091 49.492 C 219.921 49.405,219.340 49.333,217.800 49.331 C 216.260 49.329,215.581 49.400,216.291 49.489 M57.300 60.676 C 57.685 60.776,58.315 60.776,58.700 60.676 C 59.085 60.575,58.770 60.493,58.000 60.493 C 57.230 60.493,56.915 60.575,57.300 60.676 M138.812 62.987 C 137.657 64.180,137.564 64.411,138.151 64.637 C 138.527 64.781,138.947 64.787,139.084 64.649 C 139.221 64.512,138.998 64.400,138.588 64.400 C 137.978 64.400,138.089 64.147,139.200 63.000 C 139.946 62.230,140.467 61.600,140.357 61.600 C 140.247 61.600,139.552 62.224,138.812 62.987 M182.109 65.600 C 182.109 66.590,182.187 66.995,182.282 66.500 C 182.378 66.005,182.378 65.195,182.282 64.700 C 182.187 64.205,182.109 64.610,182.109 65.600 M195.701 65.400 C 195.705 66.280,195.787 66.593,195.883 66.095 C 195.979 65.598,195.975 64.878,195.875 64.495 C 195.775 64.113,195.696 64.520,195.701 65.400 M251.700 65.491 C 252.525 65.578,253.875 65.578,254.700 65.491 C 255.525 65.405,254.850 65.334,253.200 65.334 C 251.550 65.334,250.875 65.405,251.700 65.491 M252.383 70.100 C 254.041 71.866,254.400 72.184,254.400 71.883 C 254.400 71.819,253.545 70.964,252.500 69.983 L 250.600 68.200 252.383 70.100 M121.600 73.492 C 121.930 73.617,122.332 73.918,122.494 74.160 C 122.675 74.431,122.790 74.332,122.794 73.900 C 122.798 73.430,122.505 73.210,121.900 73.232 C 121.299 73.253,121.199 73.339,121.600 73.492 M195.168 75.500 C 195.359 76.881,195.387 76.909,195.519 75.851 C 195.598 75.219,195.505 74.545,195.312 74.352 C 195.110 74.150,195.049 74.640,195.168 75.500 M309.350 84.600 C 309.351 87.020,309.416 87.958,309.496 86.685 C 309.576 85.412,309.575 83.432,309.494 82.285 C 309.414 81.138,309.349 82.180,309.350 84.600 M264.900 84.276 C 265.285 84.376,265.915 84.376,266.300 84.276 C 266.685 84.175,266.370 84.093,265.600 84.093 C 264.830 84.093,264.515 84.175,264.900 84.276 M128.812 87.200 C 128.812 87.530,128.987 88.070,129.200 88.400 C 129.545 88.933,129.588 88.933,129.588 88.400 C 129.588 88.070,129.413 87.530,129.200 87.200 C 128.855 86.667,128.812 86.667,128.812 87.200 M245.359 94.000 C 245.359 97.190,245.421 98.495,245.497 96.900 C 245.573 95.305,245.573 92.695,245.497 91.100 C 245.421 89.505,245.359 90.810,245.359 94.000 M99.091 89.089 C 99.801 89.177,101.061 89.179,101.891 89.092 C 102.721 89.005,102.140 88.933,100.600 88.931 C 99.060 88.929,98.381 89.000,99.091 89.089 M162.946 91.002 C 164.405 91.763,164.775 91.768,163.776 91.013 C 163.349 90.690,162.730 90.421,162.400 90.415 C 162.070 90.410,162.316 90.674,162.946 91.002 M187.300 91.476 C 187.685 91.576,188.315 91.576,188.700 91.476 C 189.085 91.375,188.770 91.293,188.000 91.293 C 187.230 91.293,186.915 91.375,187.300 91.476 M65.701 93.800 C 65.705 94.680,65.787 94.993,65.883 94.495 C 65.979 93.998,65.975 93.278,65.875 92.895 C 65.775 92.513,65.696 92.920,65.701 93.800 M81.734 95.200 C 81.734 96.850,81.805 97.525,81.891 96.700 C 81.978 95.875,81.978 94.525,81.891 93.700 C 81.805 92.875,81.734 93.550,81.734 95.200 M188.105 93.487 C 188.714 93.579,189.614 93.577,190.105 93.482 C 190.597 93.387,190.100 93.311,189.000 93.314 C 187.900 93.317,187.497 93.395,188.105 93.487 M88.124 96.600 C 88.126 97.920,88.201 98.412,88.290 97.693 C 88.379 96.974,88.377 95.894,88.286 95.293 C 88.195 94.692,88.122 95.280,88.124 96.600 M175.200 96.525 C 175.200 96.594,175.785 97.179,176.500 97.825 L 177.800 99.000 176.625 97.700 C 175.530 96.488,175.200 96.216,175.200 96.525 M215.800 100.800 C 215.643 101.054,216.737 101.200,218.800 101.200 C 220.863 101.200,221.957 101.054,221.800 100.800 C 221.664 100.580,220.314 100.400,218.800 100.400 C 217.286 100.400,215.936 100.580,215.800 100.800 M157.400 101.600 C 157.536 101.820,157.896 102.000,158.200 102.000 C 158.504 102.000,158.864 101.820,159.000 101.600 C 159.141 101.372,158.796 101.200,158.200 101.200 C 157.604 101.200,157.259 101.372,157.400 101.600 M212.411 101.926 C 212.141 102.216,212.052 102.576,212.214 102.726 C 212.377 102.877,212.590 102.775,212.688 102.500 C 212.786 102.225,213.302 102.000,213.833 102.000 C 214.365 102.000,214.800 101.839,214.800 101.642 C 214.800 101.106,212.975 101.323,212.411 101.926 M222.800 101.419 C 222.800 101.627,225.559 102.800,226.049 102.800 C 226.763 102.800,226.371 102.084,225.500 101.797 C 224.339 101.415,222.800 101.199,222.800 101.419 M153.920 102.480 C 154.293 102.853,154.507 102.853,154.880 102.480 C 155.253 102.107,155.147 102.000,154.400 102.000 C 153.653 102.000,153.547 102.107,153.920 102.480 M162.600 102.800 C 162.998 103.240,163.386 103.600,163.462 103.600 C 163.746 103.600,163.385 102.589,163.000 102.306 C 162.173 101.699,161.904 102.031,162.600 102.800 M209.500 103.357 C 209.115 103.649,208.800 104.162,208.800 104.497 C 208.800 104.833,208.422 105.206,207.960 105.326 C 207.454 105.459,207.233 105.730,207.405 106.008 C 207.753 106.572,210.267 104.269,210.267 103.386 C 210.267 103.064,210.252 102.806,210.233 102.813 C 210.215 102.820,209.885 103.065,209.500 103.357 M165.902 103.866 C 166.179 103.977,166.312 104.219,166.199 104.402 C 165.946 104.812,167.899 106.400,168.655 106.400 C 168.956 106.400,168.505 105.770,167.653 105.000 C 166.800 104.230,165.945 103.614,165.752 103.632 C 165.558 103.649,165.626 103.754,165.902 103.866 M229.884 105.199 C 230.001 105.647,229.896 106.000,229.647 106.000 C 229.401 106.000,229.200 106.349,229.200 106.776 C 229.200 107.203,229.028 107.659,228.817 107.789 C 228.607 107.919,228.536 108.288,228.659 108.609 C 228.782 108.931,228.606 109.300,228.267 109.430 C 227.928 109.560,227.739 109.898,227.848 110.181 C 227.957 110.465,227.769 110.803,227.430 110.933 C 227.065 111.073,226.912 111.428,227.056 111.801 C 227.212 112.209,227.103 112.391,226.749 112.316 C 226.416 112.246,226.247 112.478,226.319 112.906 C 226.388 113.316,226.220 113.568,225.919 113.506 C 225.610 113.443,225.451 113.700,225.527 114.140 C 225.612 114.639,225.494 114.782,225.165 114.578 C 224.834 114.374,224.780 114.443,224.995 114.793 C 225.337 115.346,226.254 114.386,227.281 112.400 C 227.566 111.850,227.889 111.310,228.000 111.200 C 228.111 111.090,228.447 110.460,228.747 109.800 C 229.048 109.140,229.429 108.324,229.596 107.987 C 230.176 106.810,230.445 104.875,230.061 104.638 C 229.839 104.501,229.764 104.741,229.884 105.199 M127.762 111.000 C 127.762 114.520,127.824 115.906,127.898 114.081 C 127.972 112.256,127.972 109.376,127.897 107.681 C 127.822 105.986,127.761 107.480,127.762 111.000 M216.800 105.714 C 215.943 106.412,215.900 107.151,216.728 106.935 C 217.113 106.834,217.429 106.402,217.429 105.976 C 217.429 105.549,217.422 105.206,217.414 105.213 C 217.406 105.220,217.130 105.445,216.800 105.714 M169.013 107.764 C 169.387 108.334,169.986 108.794,170.346 108.787 C 170.944 108.776,170.945 108.732,170.360 108.287 C 170.008 108.019,169.703 107.620,169.681 107.400 C 169.660 107.180,169.348 106.939,168.989 106.864 C 168.393 106.741,168.395 106.820,169.013 107.764 M211.903 108.191 C 211.300 108.722,210.953 109.247,211.132 109.358 C 211.437 109.547,212.273 108.776,212.949 107.683 C 213.380 106.985,213.142 107.101,211.903 108.191 M205.280 108.880 C 205.016 109.144,204.800 109.673,204.800 110.056 C 204.800 110.439,204.620 110.864,204.400 111.000 C 203.885 111.318,203.876 113.600,204.390 113.600 C 204.606 113.600,204.678 113.089,204.552 112.458 C 204.382 111.610,204.498 111.248,205.003 111.054 C 205.393 110.905,205.587 110.543,205.458 110.208 C 205.335 109.886,205.509 109.348,205.846 109.012 C 206.182 108.675,206.300 108.400,206.109 108.400 C 205.917 108.400,205.544 108.616,205.280 108.880 M147.376 109.238 C 147.227 109.479,147.339 110.113,147.624 110.646 C 148.171 111.666,148.928 111.200,148.507 110.103 C 148.327 109.633,148.222 109.626,147.910 110.066 C 147.639 110.447,147.587 110.342,147.728 109.700 C 147.942 108.724,147.805 108.545,147.376 109.238 M154.501 111.400 C 154.505 112.280,154.587 112.593,154.683 112.095 C 154.779 111.598,154.775 110.878,154.675 110.495 C 154.575 110.113,154.496 110.520,154.501 111.400 M166.000 110.125 C 166.000 110.194,166.585 110.779,167.300 111.425 L 168.600 112.600 167.425 111.300 C 166.330 110.088,166.000 109.816,166.000 110.125 M171.200 111.400 C 171.474 111.730,171.878 112.000,172.098 112.000 C 172.321 112.000,172.278 111.735,172.000 111.400 C 171.726 111.070,171.322 110.800,171.102 110.800 C 170.879 110.800,170.922 111.065,171.200 111.400 M148.690 111.709 C 148.569 112.026,148.812 112.806,149.232 113.443 C 149.962 114.550,149.995 114.560,149.997 113.676 C 149.999 113.073,149.838 112.853,149.532 113.042 C 149.227 113.230,149.145 113.121,149.295 112.729 C 149.422 112.398,149.388 111.904,149.219 111.630 C 148.982 111.248,148.860 111.266,148.690 111.709 M171.606 113.476 C 171.603 113.958,171.780 114.464,172.000 114.600 C 172.509 114.915,172.509 113.988,172.000 113.200 C 171.685 112.712,171.611 112.764,171.606 113.476 M206.104 114.800 C 205.466 116.274,204.000 117.093,204.000 115.976 C 204.000 115.743,203.850 115.646,203.666 115.759 C 203.483 115.873,203.324 116.738,203.313 117.683 C 203.297 119.139,203.333 119.218,203.550 118.205 C 203.828 116.909,205.069 116.350,205.646 117.261 C 205.989 117.802,206.209 117.208,206.026 116.237 C 205.989 116.037,206.178 115.737,206.447 115.571 C 206.855 115.319,207.270 113.200,206.912 113.200 C 206.849 113.200,206.486 113.920,206.104 114.800 M219.775 114.900 L 218.600 116.200 219.900 115.025 C 220.615 114.379,221.200 113.794,221.200 113.725 C 221.200 113.416,220.870 113.688,219.775 114.900 M150.546 114.300 C 150.723 114.594,150.642 114.800,150.349 114.800 C 150.075 114.800,150.366 115.338,150.996 115.996 C 151.626 116.654,152.228 117.105,152.334 116.999 C 152.624 116.709,153.620 117.644,153.400 118.000 C 153.131 118.435,154.254 119.294,154.881 119.133 C 155.181 119.056,154.313 117.904,152.822 116.400 C 151.404 114.970,150.380 114.025,150.546 114.300 M223.419 115.979 C 222.814 116.648,222.808 116.728,223.369 116.646 C 224.249 116.517,224.968 115.751,224.488 115.455 C 224.279 115.325,223.797 115.561,223.419 115.979 M169.500 115.840 C 169.775 115.965,170.000 116.300,170.000 116.584 C 170.000 116.869,170.270 117.326,170.600 117.600 C 171.015 117.944,171.200 117.959,171.200 117.649 C 171.200 117.402,171.012 117.200,170.782 117.200 C 170.553 117.200,170.418 116.892,170.482 116.515 C 170.557 116.081,170.306 115.789,169.800 115.722 C 169.360 115.662,169.225 115.716,169.500 115.840 M172.400 116.567 C 172.400 117.098,172.175 117.624,171.900 117.735 C 171.588 117.861,171.651 117.949,172.067 117.968 C 172.433 117.986,172.824 118.225,172.935 118.500 C 173.046 118.775,173.151 118.235,173.168 117.300 C 173.186 116.365,173.020 115.600,172.800 115.600 C 172.580 115.600,172.400 116.035,172.400 116.567 M183.693 116.800 C 183.693 117.570,183.775 117.885,183.876 117.500 C 183.976 117.115,183.976 116.485,183.876 116.100 C 183.775 115.715,183.693 116.030,183.693 116.800 M263.701 117.400 C 263.705 118.280,263.787 118.593,263.883 118.095 C 263.979 117.598,263.975 116.878,263.875 116.495 C 263.775 116.113,263.696 116.520,263.701 117.400 M221.230 117.764 C 220.516 118.624,221.397 118.907,222.267 118.098 C 222.679 117.714,222.842 117.535,222.628 117.700 C 222.065 118.135,221.511 118.068,221.800 117.600 C 222.170 117.002,221.766 117.118,221.230 117.764 M291.586 119.900 L 289.400 122.200 291.700 120.014 C 292.965 118.811,294.000 117.776,294.000 117.714 C 294.000 117.417,293.618 117.763,291.586 119.900 M161.305 118.287 C 161.914 118.379,162.814 118.377,163.305 118.282 C 163.797 118.187,163.300 118.111,162.200 118.114 C 161.100 118.117,160.697 118.195,161.305 118.287 M218.881 119.206 C 218.014 119.675,217.739 120.004,218.081 120.165 C 218.366 120.299,218.169 120.327,217.642 120.227 C 216.934 120.092,216.802 120.162,217.134 120.494 C 217.690 121.050,219.712 120.104,219.321 119.472 C 219.169 119.227,219.330 119.164,219.722 119.315 C 220.081 119.452,220.473 119.405,220.594 119.210 C 221.028 118.507,220.174 118.505,218.881 119.206 M156.847 120.371 C 156.472 120.603,156.558 120.748,157.166 120.907 C 157.625 121.027,158.000 120.973,158.000 120.786 C 158.000 120.241,157.404 120.027,156.847 120.371 M205.034 121.145 C 204.738 121.624,207.137 122.173,208.260 121.883 C 208.667 121.779,208.361 121.672,207.580 121.646 C 206.799 121.621,205.964 121.404,205.725 121.165 C 205.428 120.868,205.209 120.862,205.034 121.145 M101.800 122.800 C 102.659 123.680,103.452 124.400,103.562 124.400 C 103.672 124.400,103.059 123.680,102.200 122.800 C 101.341 121.920,100.548 121.200,100.438 121.200 C 100.328 121.200,100.941 121.920,101.800 122.800 M161.109 122.065 C 160.754 122.290,160.849 122.390,161.420 122.394 C 161.871 122.397,162.426 122.586,162.654 122.814 C 162.906 123.066,164.780 123.178,167.434 123.099 L 171.800 122.970 167.200 122.857 C 164.465 122.790,162.924 122.617,163.399 122.432 C 164.083 122.165,164.012 122.093,162.909 121.931 C 162.199 121.826,161.389 121.887,161.109 122.065 M76.000 122.125 C 76.000 122.194,76.585 122.779,77.300 123.425 L 78.600 124.600 77.425 123.300 C 76.330 122.088,76.000 121.816,76.000 122.125 M266.378 124.300 L 265.000 125.800 266.500 124.422 C 267.896 123.138,268.184 122.800,267.878 122.800 C 267.812 122.800,267.137 123.475,266.378 124.300 M283.381 128.500 L 281.800 130.200 283.500 128.619 C 285.081 127.148,285.384 126.800,285.081 126.800 C 285.016 126.800,284.251 127.565,283.381 128.500 M275.375 136.900 L 274.200 138.200 275.500 137.025 C 276.215 136.379,276.800 135.794,276.800 135.725 C 276.800 135.416,276.470 135.688,275.375 136.900 M228.101 141.800 C 228.105 142.680,228.187 142.993,228.283 142.495 C 228.379 141.998,228.375 141.278,228.275 140.895 C 228.175 140.513,228.096 140.920,228.101 141.800 M228.093 147.600 C 228.093 148.370,228.175 148.685,228.276 148.300 C 228.376 147.915,228.376 147.285,228.276 146.900 C 228.175 146.515,228.093 146.830,228.093 147.600 M237.701 151.400 C 237.705 152.280,237.787 152.593,237.883 152.095 C 237.979 151.598,237.975 150.878,237.875 150.495 C 237.775 150.113,237.696 150.520,237.701 151.400 M265.251 153.160 C 264.949 153.351,264.784 153.753,264.884 154.053 C 265.011 154.432,265.212 154.325,265.547 153.699 C 266.079 152.705,266.051 152.654,265.251 153.160 M164.000 172.525 C 164.000 172.594,164.585 173.179,165.300 173.825 L 166.600 175.000 165.425 173.700 C 164.330 172.488,164.000 172.216,164.000 172.525 M203.000 176.800 C 203.859 177.680,204.652 178.400,204.762 178.400 C 204.872 178.400,204.259 177.680,203.400 176.800 C 202.541 175.920,201.748 175.200,201.638 175.200 C 201.528 175.200,202.141 175.920,203.000 176.800 M332.509 190.800 C 332.509 191.790,332.587 192.195,332.682 191.700 C 332.778 191.205,332.778 190.395,332.682 189.900 C 332.587 189.405,332.509 189.810,332.509 190.800 M108.520 194.800 C 108.520 196.010,108.595 196.505,108.687 195.900 C 108.778 195.295,108.778 194.305,108.687 193.700 C 108.595 193.095,108.520 193.590,108.520 194.800 M253.600 205.400 C 254.346 206.170,255.047 206.800,255.157 206.800 C 255.267 206.800,254.746 206.170,254.000 205.400 C 253.254 204.630,252.553 204.000,252.443 204.000 C 252.333 204.000,252.854 204.630,253.600 205.400 M116.800 209.800 C 115.828 210.790,115.123 211.600,115.233 211.600 C 115.343 211.600,116.228 210.790,117.200 209.800 C 118.172 208.810,118.877 208.000,118.767 208.000 C 118.657 208.000,117.772 208.810,116.800 209.800 M57.600 215.800 C 58.346 216.570,59.047 217.200,59.157 217.200 C 59.267 217.200,58.746 216.570,58.000 215.800 C 57.254 215.030,56.553 214.400,56.443 214.400 C 56.333 214.400,56.854 215.030,57.600 215.800 M337.178 216.700 L 335.800 218.200 337.300 216.822 C 338.125 216.063,338.800 215.388,338.800 215.322 C 338.800 215.016,338.462 215.304,337.178 216.700 M157.500 219.489 C 158.215 219.578,159.385 219.578,160.100 219.489 C 160.815 219.401,160.230 219.328,158.800 219.328 C 157.370 219.328,156.785 219.401,157.500 219.489 M76.505 224.687 C 77.114 224.779,78.014 224.777,78.505 224.682 C 78.997 224.587,78.500 224.511,77.400 224.514 C 76.300 224.517,75.897 224.595,76.505 224.687 M276.901 226.600 C 276.905 227.480,276.987 227.793,277.083 227.295 C 277.179 226.798,277.175 226.078,277.075 225.695 C 276.975 225.313,276.896 225.720,276.901 226.600 M55.800 228.000 C 55.936 228.220,56.532 228.387,57.124 228.372 C 58.085 228.347,58.114 228.307,57.400 228.000 C 56.289 227.522,55.505 227.522,55.800 228.000 M238.200 231.200 C 239.059 232.080,239.852 232.800,239.962 232.800 C 240.072 232.800,239.459 232.080,238.600 231.200 C 237.741 230.320,236.948 229.600,236.838 229.600 C 236.728 229.600,237.341 230.320,238.200 231.200 M98.185 232.900 L 96.200 235.000 98.300 233.015 C 99.455 231.923,100.400 230.978,100.400 230.915 C 100.400 230.617,100.029 230.949,98.185 232.900 M317.907 234.690 C 318.626 234.779,319.706 234.777,320.307 234.686 C 320.908 234.595,320.320 234.522,319.000 234.524 C 317.680 234.526,317.188 234.601,317.907 234.690 M80.500 241.076 C 80.885 241.176,81.515 241.176,81.900 241.076 C 82.285 240.975,81.970 240.893,81.200 240.893 C 80.430 240.893,80.115 240.975,80.500 241.076 M152.924 243.400 C 152.926 244.720,153.001 245.212,153.090 244.493 C 153.179 243.774,153.177 242.694,153.086 242.093 C 152.995 241.492,152.922 242.080,152.924 243.400 M134.134 244.800 C 134.134 246.450,134.205 247.125,134.291 246.300 C 134.378 245.475,134.378 244.125,134.291 243.300 C 134.205 242.475,134.134 243.150,134.134 244.800 M330.400 252.200 C 331.146 252.970,331.847 253.600,331.957 253.600 C 332.067 253.600,331.546 252.970,330.800 252.200 C 330.054 251.430,329.353 250.800,329.243 250.800 C 329.133 250.800,329.654 251.430,330.400 252.200 M268.175 253.700 L 267.000 255.000 268.300 253.825 C 269.015 253.179,269.600 252.594,269.600 252.525 C 269.600 252.216,269.270 252.488,268.175 253.700 M110.956 255.371 C 110.835 255.685,110.804 256.360,110.886 256.871 C 110.995 257.554,111.088 257.404,111.237 256.300 C 111.447 254.747,111.336 254.381,110.956 255.371 M284.109 258.400 C 284.109 259.390,284.187 259.795,284.282 259.300 C 284.378 258.805,284.378 257.995,284.282 257.500 C 284.187 257.005,284.109 257.410,284.109 258.400 M46.093 258.400 C 46.093 259.170,46.175 259.485,46.276 259.100 C 46.376 258.715,46.376 258.085,46.276 257.700 C 46.175 257.315,46.093 257.630,46.093 258.400 M262.984 257.627 C 262.839 257.861,262.828 258.161,262.960 258.293 C 263.092 258.425,263.200 258.313,263.200 258.043 C 263.200 257.773,263.368 257.656,263.572 257.783 C 263.777 257.909,264.058 257.830,264.196 257.607 C 264.334 257.383,264.177 257.200,263.847 257.200 C 263.517 257.200,263.129 257.392,262.984 257.627 M196.100 260.676 C 196.485 260.776,197.115 260.776,197.500 260.676 C 197.885 260.575,197.570 260.493,196.800 260.493 C 196.030 260.493,195.715 260.575,196.100 260.676 M238.975 263.300 L 237.800 264.600 239.100 263.425 C 240.312 262.330,240.584 262.000,240.275 262.000 C 240.206 262.000,239.621 262.585,238.975 263.300 M162.000 265.725 C 162.000 265.794,162.585 266.379,163.300 267.025 L 164.600 268.200 163.425 266.900 C 162.330 265.688,162.000 265.416,162.000 265.725 M46.101 277.400 C 46.105 278.280,46.187 278.593,46.283 278.095 C 46.379 277.598,46.375 276.878,46.275 276.495 C 46.175 276.113,46.096 276.520,46.101 277.400 M354.901 279.400 C 354.905 280.280,354.987 280.593,355.083 280.095 C 355.179 279.598,355.175 278.878,355.075 278.495 C 354.975 278.113,354.896 278.520,354.901 279.400 M200.900 279.476 C 201.285 279.576,201.915 279.576,202.300 279.476 C 202.685 279.375,202.370 279.293,201.600 279.293 C 200.830 279.293,200.515 279.375,200.900 279.476 M194.691 279.889 C 195.401 279.977,196.661 279.979,197.491 279.892 C 198.321 279.805,197.740 279.733,196.200 279.731 C 194.660 279.729,193.981 279.800,194.691 279.889 M344.124 282.200 C 344.126 283.520,344.201 284.012,344.290 283.293 C 344.379 282.574,344.377 281.494,344.286 280.893 C 344.195 280.292,344.122 280.880,344.124 282.200 M205.500 282.682 C 205.995 282.778,206.805 282.778,207.300 282.682 C 207.795 282.587,207.390 282.509,206.400 282.509 C 205.410 282.509,205.005 282.587,205.500 282.682 M187.315 283.896 C 188.588 283.976,190.568 283.975,191.715 283.894 C 192.862 283.814,191.820 283.749,189.400 283.750 C 186.980 283.751,186.042 283.816,187.315 283.896 M343.354 288.977 C 343.232 289.294,343.203 289.879,343.289 290.277 C 343.387 290.728,343.524 290.512,343.654 289.700 C 343.871 288.338,343.730 287.996,343.354 288.977 M192.100 307.876 C 192.485 307.976,193.115 307.976,193.500 307.876 C 193.885 307.775,193.570 307.693,192.800 307.693 C 192.030 307.693,191.715 307.775,192.100 307.876 M199.500 307.882 C 199.995 307.978,200.805 307.978,201.300 307.882 C 201.795 307.787,201.390 307.709,200.400 307.709 C 199.410 307.709,199.005 307.787,199.500 307.882 M179.300 319.076 C 179.685 319.176,180.315 319.176,180.700 319.076 C 181.085 318.975,180.770 318.893,180.000 318.893 C 179.230 318.893,178.915 318.975,179.300 319.076 M207.300 319.076 C 207.685 319.176,208.315 319.176,208.700 319.076 C 209.085 318.975,208.770 318.893,208.000 318.893 C 207.230 318.893,206.915 318.975,207.300 319.076 M185.700 319.876 C 186.085 319.976,186.715 319.976,187.100 319.876 C 187.485 319.775,187.170 319.693,186.400 319.693 C 185.630 319.693,185.315 319.775,185.700 319.876 M190.900 319.897 C 192.605 319.972,195.395 319.972,197.100 319.897 C 198.805 319.822,197.410 319.761,194.000 319.761 C 190.590 319.761,189.195 319.822,190.900 319.897 M195.246 328.900 C 195.284 329.622,195.330 329.656,195.481 329.071 C 195.596 328.628,195.900 328.430,196.256 328.566 C 196.584 328.692,196.734 328.617,196.597 328.395 C 196.129 327.637,195.199 327.984,195.246 328.900 M92.400 332.200 C 93.146 332.970,93.847 333.600,93.957 333.600 C 94.067 333.600,93.546 332.970,92.800 332.200 C 92.054 331.430,91.353 330.800,91.243 330.800 C 91.133 330.800,91.654 331.430,92.400 332.200 M195.693 333.200 C 195.693 333.970,195.775 334.285,195.876 333.900 C 195.976 333.515,195.976 332.885,195.876 332.500 C 195.775 332.115,195.693 332.430,195.693 333.200 M201.600 334.910 C 201.600 334.971,202.995 336.366,204.700 338.010 L 207.800 341.000 204.810 337.900 C 202.033 335.021,201.600 334.617,201.600 334.910 M83.800 342.400 C 84.659 343.280,85.452 344.000,85.562 344.000 C 85.672 344.000,85.059 343.280,84.200 342.400 C 83.341 341.520,82.548 340.800,82.438 340.800 C 82.328 340.800,82.941 341.520,83.800 342.400 M255.700 353.876 C 256.085 353.976,256.715 353.976,257.100 353.876 C 257.485 353.775,257.170 353.693,256.400 353.693 C 255.630 353.693,255.315 353.775,255.700 353.876 M243.513 354.695 C 244.676 354.776,246.476 354.776,247.513 354.693 C 248.551 354.611,247.600 354.545,245.400 354.546 C 243.200 354.547,242.351 354.614,243.513 354.695 M231.100 361.089 C 231.815 361.178,232.985 361.178,233.700 361.089 C 234.415 361.001,233.830 360.928,232.400 360.928 C 230.970 360.928,230.385 361.001,231.100 361.089 M237.907 361.090 C 238.626 361.179,239.706 361.177,240.307 361.086 C 240.908 360.995,240.320 360.922,239.000 360.924 C 237.680 360.926,237.188 361.001,237.907 361.090 M244.500 361.087 C 245.105 361.178,246.095 361.178,246.700 361.087 C 247.305 360.995,246.810 360.920,245.600 360.920 C 244.390 360.920,243.895 360.995,244.500 361.087 M210.200 367.200 C 211.059 368.080,211.852 368.800,211.962 368.800 C 212.072 368.800,211.459 368.080,210.600 367.200 C 209.741 366.320,208.948 365.600,208.838 365.600 C 208.728 365.600,209.341 366.320,210.200 367.200 M233.700 372.676 C 234.085 372.776,234.715 372.776,235.100 372.676 C 235.485 372.575,235.170 372.493,234.400 372.493 C 233.630 372.493,233.315 372.575,233.700 372.676 M240.575 383.300 L 239.400 384.600 240.700 383.425 C 241.415 382.779,242.000 382.194,242.000 382.125 C 242.000 381.816,241.670 382.088,240.575 383.300 M220.780 393.090 C 220.671 394.019,220.733 394.627,220.920 394.440 C 221.106 394.254,221.196 393.494,221.119 392.751 C 220.983 391.433,220.975 391.442,220.780 393.090 M193.491 393.489 C 194.201 393.577,195.461 393.579,196.291 393.492 C 197.121 393.405,196.540 393.333,195.000 393.331 C 193.460 393.329,192.781 393.400,193.491 393.489 M190.783 399.700 C 192.441 401.466,192.800 401.784,192.800 401.483 C 192.800 401.419,191.945 400.564,190.900 399.583 L 189.000 397.800 190.783 399.700 M205.100 407.082 C 205.595 407.178,206.405 407.178,206.900 407.082 C 207.395 406.987,206.990 406.909,206.000 406.909 C 205.010 406.909,204.605 406.987,205.100 407.082 \\\" stroke=\\\"none\\\" fill=\\\"#2e2e2e\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path6\\\" d=\\\"M182.300 2.282 C 182.795 2.378,183.605 2.378,184.100 2.282 C 184.595 2.187,184.190 2.109,183.200 2.109 C 182.210 2.109,181.805 2.187,182.300 2.282 M187.100 7.082 C 187.595 7.178,188.405 7.178,188.900 7.082 C 189.395 6.987,188.990 6.909,188.000 6.909 C 187.010 6.909,186.605 6.987,187.100 7.082 M193.300 15.876 C 193.685 15.976,194.315 15.976,194.700 15.876 C 195.085 15.775,194.770 15.693,194.000 15.693 C 193.230 15.693,192.915 15.775,193.300 15.876 M198.500 16.276 C 198.885 16.376,199.515 16.376,199.900 16.276 C 200.285 16.175,199.970 16.093,199.200 16.093 C 198.430 16.093,198.115 16.175,198.500 16.276 M230.749 28.900 C 231.238 29.523,231.194 29.605,230.349 29.646 C 229.604 29.683,229.560 29.734,230.142 29.884 C 231.253 30.170,231.765 29.429,230.917 28.763 C 230.263 28.250,230.249 28.262,230.749 28.900 M224.900 29.076 C 225.285 29.176,225.915 29.176,226.300 29.076 C 226.685 28.975,226.370 28.893,225.600 28.893 C 224.830 28.893,224.515 28.975,224.900 29.076 M139.381 40.900 L 137.800 42.600 139.500 41.019 C 140.435 40.149,141.200 39.384,141.200 39.319 C 141.200 39.016,140.852 39.319,139.381 40.900 M135.992 44.210 C 135.332 45.005,135.740 45.390,136.670 44.849 C 137.102 44.598,137.186 44.419,136.876 44.412 C 136.588 44.405,136.464 44.220,136.600 44.000 C 136.982 43.381,136.558 43.528,135.992 44.210 M192.900 48.676 C 193.285 48.776,193.915 48.776,194.300 48.676 C 194.685 48.575,194.370 48.493,193.600 48.493 C 192.830 48.493,192.515 48.575,192.900 48.676 M211.300 48.676 C 211.685 48.776,212.315 48.776,212.700 48.676 C 213.085 48.575,212.770 48.493,212.000 48.493 C 211.230 48.493,210.915 48.575,211.300 48.676 M237.762 51.138 C 237.944 51.433,237.713 51.617,237.124 51.646 C 236.381 51.684,236.345 51.730,236.942 51.884 C 237.872 52.123,238.678 51.419,237.973 50.983 C 237.653 50.785,237.578 50.841,237.762 51.138 M141.775 60.500 L 140.600 61.800 141.900 60.625 C 143.112 59.530,143.384 59.200,143.075 59.200 C 143.006 59.200,142.421 59.785,141.775 60.500 M60.105 60.687 C 60.714 60.779,61.614 60.777,62.105 60.682 C 62.597 60.587,62.100 60.511,61.000 60.514 C 59.900 60.517,59.497 60.595,60.105 60.687 M197.200 65.376 C 197.200 66.133,197.338 66.838,197.507 66.943 C 197.676 67.047,197.748 66.428,197.665 65.566 C 197.481 63.632,197.200 63.518,197.200 65.376 M196.901 75.800 C 196.905 76.680,196.987 76.993,197.083 76.495 C 197.179 75.998,197.175 75.278,197.075 74.895 C 196.975 74.513,196.896 74.920,196.901 75.800 M268.905 77.487 C 269.514 77.579,270.414 77.577,270.905 77.482 C 271.397 77.387,270.900 77.311,269.800 77.314 C 268.700 77.317,268.297 77.395,268.905 77.487 M274.645 84.328 C 274.533 84.508,274.973 84.577,275.621 84.482 C 276.270 84.387,276.800 84.240,276.800 84.155 C 276.800 83.850,274.843 84.007,274.645 84.328 M65.746 88.600 C 65.747 90.800,65.814 91.649,65.895 90.487 C 65.976 89.324,65.976 87.524,65.893 86.487 C 65.811 85.449,65.745 86.400,65.746 88.600 M269.091 85.089 C 269.801 85.177,271.061 85.179,271.891 85.092 C 272.721 85.005,272.140 84.933,270.600 84.931 C 269.060 84.929,268.381 85.000,269.091 85.089 M293.693 86.800 C 293.693 87.570,293.775 87.885,293.876 87.500 C 293.976 87.115,293.976 86.485,293.876 86.100 C 293.775 85.715,293.693 86.030,293.693 86.800 M235.757 94.000 C 235.757 96.970,235.820 98.185,235.897 96.700 C 235.974 95.215,235.974 92.785,235.897 91.300 C 235.820 89.815,235.757 91.030,235.757 94.000 M211.421 89.561 C 210.660 89.859,210.660 89.870,211.453 90.077 C 211.899 90.194,212.598 90.044,213.008 89.745 C 213.890 89.100,212.895 88.984,211.421 89.561 M162.200 90.289 C 162.640 90.398,163.209 90.655,163.464 90.862 C 163.755 91.098,164.016 91.097,164.162 90.861 C 164.444 90.406,163.460 89.983,162.267 90.046 C 161.457 90.090,161.452 90.106,162.200 90.289 M151.000 103.200 C 150.864 103.420,151.023 103.600,151.353 103.600 C 151.683 103.600,152.064 103.420,152.200 103.200 C 152.336 102.980,152.177 102.800,151.847 102.800 C 151.517 102.800,151.136 102.980,151.000 103.200 M163.400 103.200 C 163.536 103.420,163.917 103.600,164.247 103.600 C 164.577 103.600,164.736 103.420,164.600 103.200 C 164.464 102.980,164.083 102.800,163.753 102.800 C 163.423 102.800,163.264 102.980,163.400 103.200 M209.762 103.662 L 209.000 104.524 210.100 103.816 C 211.234 103.086,211.449 102.800,210.862 102.800 C 210.676 102.800,210.181 103.188,209.762 103.662 M221.000 104.803 C 220.340 104.969,220.012 105.127,220.272 105.153 C 220.532 105.179,220.822 105.605,220.918 106.100 L 221.091 107.000 221.146 106.100 C 221.197 105.244,221.362 105.200,224.500 105.195 C 226.315 105.192,228.205 105.081,228.700 104.948 C 229.260 104.798,229.600 104.884,229.600 105.177 C 229.600 105.437,229.377 105.521,229.100 105.365 C 228.703 105.141,228.702 105.192,229.093 105.615 C 229.669 106.236,230.195 105.884,229.887 105.084 C 229.650 104.465,223.159 104.260,221.000 104.803 M207.100 106.032 C 206.348 106.470,206.152 107.200,206.786 107.200 C 206.998 107.200,207.365 106.840,207.600 106.400 C 208.087 105.490,208.062 105.472,207.100 106.032 M221.701 110.200 C 221.705 111.080,221.787 111.393,221.883 110.895 C 221.979 110.398,221.975 109.678,221.875 109.295 C 221.775 108.913,221.696 109.320,221.701 110.200 M171.606 112.300 C 171.624 113.177,172.388 113.759,172.394 112.900 C 172.397 112.405,172.220 112.000,172.000 112.000 C 171.780 112.000,171.603 112.135,171.606 112.300 M115.346 120.600 C 115.347 122.800,115.414 123.649,115.495 122.487 C 115.576 121.324,115.576 119.524,115.493 118.487 C 115.411 117.449,115.345 118.400,115.346 120.600 M287.186 124.300 L 285.000 126.600 287.300 124.414 C 288.565 123.211,289.600 122.176,289.600 122.114 C 289.600 121.817,289.218 122.163,287.186 124.300 M163.705 122.687 C 164.314 122.779,165.214 122.777,165.705 122.682 C 166.197 122.587,165.700 122.511,164.600 122.514 C 163.500 122.517,163.097 122.595,163.705 122.687 M278.400 133.400 C 277.428 134.390,276.723 135.200,276.833 135.200 C 276.943 135.200,277.828 134.390,278.800 133.400 C 279.772 132.410,280.477 131.600,280.367 131.600 C 280.257 131.600,279.372 132.410,278.400 133.400 M228.109 144.800 C 228.109 145.790,228.187 146.195,228.282 145.700 C 228.378 145.205,228.378 144.395,228.282 143.900 C 228.187 143.405,228.109 143.810,228.109 144.800 M237.301 148.200 C 237.305 149.080,237.387 149.393,237.483 148.895 C 237.579 148.398,237.575 147.678,237.475 147.295 C 237.375 146.913,237.296 147.320,237.301 148.200 M264.870 151.300 C 264.803 153.111,265.223 153.734,265.838 152.738 C 266.010 152.461,265.948 152.385,265.685 152.547 C 265.401 152.723,265.193 152.218,265.093 151.109 L 264.940 149.400 264.870 151.300 M120.446 162.324 C 120.417 162.913,120.233 163.144,119.938 162.962 C 119.641 162.778,119.585 162.853,119.783 163.173 C 120.219 163.878,120.923 163.072,120.684 162.142 C 120.530 161.545,120.484 161.581,120.446 162.324 M161.400 170.400 C 162.483 171.500,163.460 172.400,163.570 172.400 C 163.680 172.400,162.883 171.500,161.800 170.400 C 160.717 169.300,159.740 168.400,159.630 168.400 C 159.520 168.400,160.317 169.300,161.400 170.400 M207.000 173.600 C 207.859 174.480,208.652 175.200,208.762 175.200 C 208.872 175.200,208.259 174.480,207.400 173.600 C 206.541 172.720,205.748 172.000,205.638 172.000 C 205.528 172.000,206.141 172.720,207.000 173.600 M148.400 177.400 C 149.146 178.170,149.847 178.800,149.957 178.800 C 150.067 178.800,149.546 178.170,148.800 177.400 C 148.054 176.630,147.353 176.000,147.243 176.000 C 147.133 176.000,147.654 176.630,148.400 177.400 M150.800 179.725 C 150.800 179.794,151.385 180.379,152.100 181.025 L 153.400 182.200 152.225 180.900 C 151.130 179.688,150.800 179.416,150.800 179.725 M90.509 182.800 C 90.509 183.790,90.587 184.195,90.682 183.700 C 90.778 183.205,90.778 182.395,90.682 181.900 C 90.587 181.405,90.509 181.810,90.509 182.800 M49.720 197.600 C 49.720 198.810,49.795 199.305,49.887 198.700 C 49.978 198.095,49.978 197.105,49.887 196.500 C 49.795 195.895,49.720 196.390,49.720 197.600 M323.693 206.000 C 323.693 206.770,323.775 207.085,323.876 206.700 C 323.976 206.315,323.976 205.685,323.876 205.300 C 323.775 204.915,323.693 205.230,323.693 206.000 M259.479 214.679 C 259.726 215.337,259.682 215.348,258.975 214.800 C 258.258 214.245,258.241 214.252,258.749 214.900 C 259.051 215.285,259.456 215.600,259.649 215.600 C 260.129 215.600,260.094 214.505,259.605 214.203 C 259.367 214.056,259.317 214.246,259.479 214.679 M282.501 216.200 C 282.505 217.080,282.587 217.393,282.683 216.895 C 282.779 216.398,282.775 215.678,282.675 215.295 C 282.575 214.913,282.496 215.320,282.501 216.200 M248.800 223.000 C 249.546 223.770,250.247 224.400,250.357 224.400 C 250.467 224.400,249.946 223.770,249.200 223.000 C 248.454 222.230,247.753 221.600,247.643 221.600 C 247.533 221.600,248.054 222.230,248.800 223.000 M158.575 230.100 L 157.400 231.400 158.700 230.225 C 159.912 229.130,160.184 228.800,159.875 228.800 C 159.806 228.800,159.221 229.385,158.575 230.100 M277.331 232.200 C 277.333 233.740,277.405 234.321,277.492 233.491 C 277.579 232.661,277.577 231.401,277.489 230.691 C 277.400 229.981,277.329 230.660,277.331 232.200 M307.105 229.883 C 307.602 229.979,308.322 229.975,308.705 229.875 C 309.087 229.775,308.680 229.696,307.800 229.701 C 306.920 229.705,306.607 229.787,307.105 229.883 M257.354 243.600 C 257.354 246.350,257.418 247.475,257.496 246.100 C 257.574 244.725,257.574 242.475,257.496 241.100 C 257.418 239.725,257.354 240.850,257.354 243.600 M246.114 246.200 C 246.117 247.300,246.195 247.703,246.287 247.095 C 246.379 246.486,246.377 245.586,246.282 245.095 C 246.187 244.603,246.111 245.100,246.114 246.200 M45.693 264.000 C 45.693 264.770,45.775 265.085,45.876 264.700 C 45.976 264.315,45.976 263.685,45.876 263.300 C 45.775 262.915,45.693 263.230,45.693 264.000 M143.583 269.300 C 145.241 271.066,145.600 271.384,145.600 271.083 C 145.600 271.019,144.745 270.164,143.700 269.183 L 141.800 267.400 143.583 269.300 M62.924 273.400 C 62.926 274.720,63.001 275.212,63.090 274.493 C 63.179 273.774,63.177 272.694,63.086 272.093 C 62.995 271.492,62.922 272.080,62.924 273.400 M344.114 278.200 C 344.117 279.300,344.195 279.703,344.287 279.095 C 344.379 278.486,344.377 277.586,344.282 277.095 C 344.187 276.603,344.111 277.100,344.114 278.200 M267.781 279.300 L 266.200 281.000 267.900 279.419 C 268.835 278.549,269.600 277.784,269.600 277.719 C 269.600 277.416,269.252 277.719,267.781 279.300 M129.000 282.000 C 130.750 283.760,132.271 285.200,132.381 285.200 C 132.491 285.200,131.150 283.760,129.400 282.000 C 127.650 280.240,126.129 278.800,126.019 278.800 C 125.909 278.800,127.250 280.240,129.000 282.000 M203.300 279.476 C 203.685 279.576,204.315 279.576,204.700 279.476 C 205.085 279.375,204.770 279.293,204.000 279.293 C 203.230 279.293,202.915 279.375,203.300 279.476 M181.905 283.483 C 182.402 283.579,183.122 283.575,183.505 283.475 C 183.887 283.375,183.480 283.296,182.600 283.301 C 181.720 283.305,181.407 283.387,181.905 283.483 M195.905 283.483 C 196.402 283.579,197.122 283.575,197.505 283.475 C 197.887 283.375,197.480 283.296,196.600 283.301 C 195.720 283.305,195.407 283.387,195.905 283.483 M344.101 285.800 C 344.105 286.680,344.187 286.993,344.283 286.495 C 344.379 285.998,344.375 285.278,344.275 284.895 C 344.175 284.513,344.096 284.920,344.101 285.800 M268.175 290.100 L 267.000 291.400 268.300 290.225 C 269.512 289.130,269.784 288.800,269.475 288.800 C 269.406 288.800,268.821 289.385,268.175 290.100 M131.800 296.400 C 133.550 298.160,135.071 299.600,135.181 299.600 C 135.291 299.600,133.950 298.160,132.200 296.400 C 130.450 294.640,128.929 293.200,128.819 293.200 C 128.709 293.200,130.050 294.640,131.800 296.400 M195.111 308.293 C 196.051 308.378,197.491 308.377,198.311 308.291 C 199.130 308.205,198.360 308.136,196.600 308.137 C 194.840 308.139,194.170 308.209,195.111 308.293 M326.800 319.400 C 325.828 320.390,325.123 321.200,325.233 321.200 C 325.343 321.200,326.228 320.390,327.200 319.400 C 328.172 318.410,328.877 317.600,328.767 317.600 C 328.657 317.600,327.772 318.410,326.800 319.400 M86.400 326.125 C 86.400 326.194,86.985 326.779,87.700 327.425 L 89.000 328.600 87.825 327.300 C 86.730 326.088,86.400 325.816,86.400 326.125 M195.693 330.800 C 195.693 331.570,195.775 331.885,195.876 331.500 C 195.976 331.115,195.976 330.485,195.876 330.100 C 195.775 329.715,195.693 330.030,195.693 330.800 M79.400 338.000 C 80.928 339.540,82.269 340.800,82.379 340.800 C 82.489 340.800,81.328 339.540,79.800 338.000 C 78.272 336.460,76.931 335.200,76.821 335.200 C 76.711 335.200,77.872 336.460,79.400 338.000 M188.514 344.600 C 188.517 345.700,188.595 346.103,188.687 345.495 C 188.779 344.886,188.777 343.986,188.682 343.495 C 188.587 343.003,188.511 343.500,188.514 344.600 M85.200 343.325 C 85.200 343.394,85.785 343.979,86.500 344.625 L 87.800 345.800 86.625 344.500 C 85.530 343.288,85.200 343.016,85.200 343.325 M239.100 354.682 C 239.595 354.778,240.405 354.778,240.900 354.682 C 241.395 354.587,240.990 354.509,240.000 354.509 C 239.010 354.509,238.605 354.587,239.100 354.682 M250.105 354.687 C 250.714 354.779,251.614 354.777,252.105 354.682 C 252.597 354.587,252.100 354.511,251.000 354.514 C 249.900 354.517,249.497 354.595,250.105 354.687 M188.520 359.200 C 188.520 360.410,188.595 360.905,188.687 360.300 C 188.778 359.695,188.778 358.705,188.687 358.100 C 188.595 357.495,188.520 357.990,188.520 359.200 M223.300 360.276 C 223.685 360.376,224.315 360.376,224.700 360.276 C 225.085 360.175,224.770 360.093,224.000 360.093 C 223.230 360.093,222.915 360.175,223.300 360.276 M252.100 360.276 C 252.485 360.376,253.115 360.376,253.500 360.276 C 253.885 360.175,253.570 360.093,252.800 360.093 C 252.030 360.093,251.715 360.175,252.100 360.276 M241.700 361.076 C 242.085 361.176,242.715 361.176,243.100 361.076 C 243.485 360.975,243.170 360.893,242.400 360.893 C 241.630 360.893,241.315 360.975,241.700 361.076 M220.931 389.000 C 220.933 390.540,221.005 391.121,221.092 390.291 C 221.179 389.461,221.177 388.201,221.089 387.491 C 221.000 386.781,220.929 387.460,220.931 389.000 \\\" stroke=\\\"none\\\" fill=\\\"#242424\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path7\\\" d=\\\"M197.743 6.708 C 197.890 6.945,197.693 7.222,197.305 7.323 C 196.768 7.463,196.815 7.518,197.500 7.554 C 198.457 7.603,198.707 7.037,197.938 6.562 C 197.664 6.392,197.585 6.451,197.743 6.708 M183.705 7.087 C 184.314 7.179,185.214 7.177,185.705 7.082 C 186.197 6.987,185.700 6.911,184.600 6.914 C 183.500 6.917,183.097 6.995,183.705 7.087 M190.300 7.082 C 190.795 7.178,191.605 7.178,192.100 7.082 C 192.595 6.987,192.190 6.909,191.200 6.909 C 190.210 6.909,189.805 6.987,190.300 7.082 M195.913 27.495 C 197.076 27.576,198.876 27.576,199.913 27.493 C 200.951 27.411,200.000 27.345,197.800 27.346 C 195.600 27.347,194.751 27.414,195.913 27.495 M205.916 27.497 C 207.299 27.575,209.459 27.574,210.716 27.495 C 211.972 27.416,210.840 27.352,208.200 27.353 C 205.560 27.353,204.532 27.418,205.916 27.497 M185.905 28.283 C 186.402 28.379,187.122 28.375,187.505 28.275 C 187.887 28.175,187.480 28.096,186.600 28.101 C 185.720 28.105,185.407 28.187,185.905 28.283 M219.705 28.287 C 220.314 28.379,221.214 28.377,221.705 28.282 C 222.197 28.187,221.700 28.111,220.600 28.114 C 219.500 28.117,219.097 28.195,219.705 28.287 M194.307 35.890 C 195.026 35.979,196.106 35.977,196.707 35.886 C 197.308 35.795,196.720 35.722,195.400 35.724 C 194.080 35.726,193.588 35.801,194.307 35.890 M199.700 36.276 C 200.085 36.376,200.715 36.376,201.100 36.276 C 201.485 36.175,201.170 36.093,200.400 36.093 C 199.630 36.093,199.315 36.175,199.700 36.276 M312.800 43.353 C 312.800 43.438,313.250 43.593,313.800 43.698 C 314.350 43.803,314.800 43.734,314.800 43.545 C 314.800 43.355,314.350 43.200,313.800 43.200 C 313.250 43.200,312.800 43.269,312.800 43.353 M139.670 62.526 C 138.724 63.532,138.575 64.000,139.200 64.000 C 139.420 64.000,139.600 63.789,139.600 63.531 C 139.600 63.274,139.898 62.734,140.262 62.331 C 141.232 61.260,140.693 61.437,139.670 62.526 M252.400 69.800 C 253.595 71.010,254.663 72.000,254.773 72.000 C 254.883 72.000,253.995 71.010,252.800 69.800 C 251.605 68.590,250.537 67.600,250.427 67.600 C 250.317 67.600,251.205 68.590,252.400 69.800 M185.491 69.089 C 186.201 69.177,187.461 69.179,188.291 69.092 C 189.121 69.005,188.540 68.933,187.000 68.931 C 185.460 68.929,184.781 69.000,185.491 69.089 M195.062 74.000 C 195.316 74.330,195.606 75.050,195.707 75.600 L 195.891 76.600 195.946 75.549 C 195.976 74.970,195.686 74.252,195.300 73.949 C 194.691 73.471,194.660 73.478,195.062 74.000 M108.118 74.698 C 109.833 74.773,112.533 74.772,114.118 74.697 C 115.703 74.621,114.300 74.559,111.000 74.560 C 107.700 74.561,106.403 74.622,108.118 74.698 M182.556 74.971 C 182.435 75.285,182.404 75.960,182.486 76.471 C 182.595 77.154,182.688 77.004,182.837 75.900 C 183.047 74.347,182.936 73.981,182.556 74.971 M181.301 76.600 C 181.305 77.480,181.387 77.793,181.483 77.295 C 181.579 76.798,181.575 76.078,181.475 75.695 C 181.375 75.313,181.296 75.720,181.301 76.600 M185.700 79.491 C 186.525 79.578,187.875 79.578,188.700 79.491 C 189.525 79.405,188.850 79.334,187.200 79.334 C 185.550 79.334,184.875 79.405,185.700 79.491 M286.109 83.200 C 286.109 84.190,286.187 84.595,286.282 84.100 C 286.378 83.605,286.378 82.795,286.282 82.300 C 286.187 81.805,286.109 82.210,286.109 83.200 M235.734 86.000 C 235.734 87.650,235.805 88.325,235.891 87.500 C 235.978 86.675,235.978 85.325,235.891 84.500 C 235.805 83.675,235.734 84.350,235.734 86.000 M192.900 84.276 C 193.285 84.376,193.915 84.376,194.300 84.276 C 194.685 84.175,194.370 84.093,193.600 84.093 C 192.830 84.093,192.515 84.175,192.900 84.276 M183.280 84.880 C 183.016 85.144,182.821 85.819,182.847 86.380 C 182.891 87.326,182.913 87.313,183.149 86.200 C 183.376 85.133,183.604 84.973,185.202 84.760 L 187.000 84.520 185.380 84.460 C 184.489 84.427,183.544 84.616,183.280 84.880 M187.905 84.683 C 188.402 84.779,189.122 84.775,189.505 84.675 C 189.887 84.575,189.480 84.496,188.600 84.501 C 187.720 84.505,187.407 84.587,187.905 84.683 M195.293 86.000 C 195.293 86.770,195.375 87.085,195.476 86.700 C 195.576 86.315,195.576 85.685,195.476 85.300 C 195.375 84.915,195.293 85.230,195.293 86.000 M196.501 86.200 C 196.505 87.080,196.587 87.393,196.683 86.895 C 196.779 86.398,196.775 85.678,196.675 85.295 C 196.575 84.913,196.496 85.320,196.501 86.200 M99.705 88.687 C 100.314 88.779,101.214 88.777,101.705 88.682 C 102.197 88.587,101.700 88.511,100.600 88.514 C 99.500 88.517,99.097 88.595,99.705 88.687 M128.800 90.776 C 128.800 91.669,128.980 92.400,129.200 92.400 C 129.420 92.400,129.600 91.781,129.600 91.024 C 129.600 90.267,129.420 89.536,129.200 89.400 C 128.958 89.251,128.800 89.796,128.800 90.776 M164.795 91.379 C 165.819 91.946,166.590 91.831,166.183 91.172 C 166.056 90.968,165.468 90.806,164.876 90.814 L 163.800 90.828 164.795 91.379 M188.500 91.876 C 188.885 91.976,189.515 91.976,189.900 91.876 C 190.285 91.775,189.970 91.693,189.200 91.693 C 188.430 91.693,188.115 91.775,188.500 91.876 M98.300 95.893 C 99.235 95.977,100.765 95.977,101.700 95.893 C 102.635 95.809,101.870 95.740,100.000 95.740 C 98.130 95.740,97.365 95.809,98.300 95.893 M130.093 97.200 C 130.093 97.970,130.175 98.285,130.276 97.900 C 130.376 97.515,130.376 96.885,130.276 96.500 C 130.175 96.115,130.093 96.430,130.093 97.200 M174.800 96.525 C 174.800 96.594,175.385 97.179,176.100 97.825 L 177.400 99.000 176.225 97.700 C 175.130 96.488,174.800 96.216,174.800 96.525 M66.501 99.800 C 66.505 100.680,66.587 100.993,66.683 100.495 C 66.779 99.998,66.775 99.278,66.675 98.895 C 66.575 98.513,66.496 98.920,66.501 99.800 M235.731 101.800 C 235.733 103.340,235.805 103.921,235.892 103.091 C 235.979 102.261,235.977 101.001,235.889 100.291 C 235.800 99.581,235.729 100.260,235.731 101.800 M180.901 106.600 C 180.905 107.480,180.987 107.793,181.083 107.295 C 181.179 106.798,181.175 106.078,181.075 105.695 C 180.975 105.313,180.896 105.720,180.901 106.600 M159.200 107.237 C 159.200 107.437,159.545 107.600,159.967 107.600 C 160.388 107.600,160.793 107.774,160.867 107.987 C 160.940 108.200,161.230 108.232,161.510 108.057 C 161.854 107.844,161.561 107.599,160.610 107.308 C 159.819 107.065,159.200 107.034,159.200 107.237 M209.570 110.300 L 208.600 111.400 209.800 110.400 C 210.460 109.850,211.075 109.355,211.167 109.300 C 211.258 109.245,211.155 109.200,210.936 109.200 C 210.718 109.200,210.103 109.695,209.570 110.300 M194.901 117.000 C 194.905 117.880,194.987 118.193,195.083 117.695 C 195.179 117.198,195.175 116.478,195.075 116.095 C 194.975 115.713,194.896 116.120,194.901 117.000 M292.378 118.700 L 291.000 120.200 292.500 118.822 C 293.896 117.538,294.184 117.200,293.878 117.200 C 293.812 117.200,293.137 117.875,292.378 118.700 M100.200 120.800 C 101.059 121.680,101.852 122.400,101.962 122.400 C 102.072 122.400,101.459 121.680,100.600 120.800 C 99.741 119.920,98.948 119.200,98.838 119.200 C 98.728 119.200,99.341 119.920,100.200 120.800 M204.071 120.267 C 204.142 120.634,204.430 120.980,204.710 121.037 C 204.990 121.094,205.046 121.052,204.832 120.944 C 204.619 120.836,204.544 120.490,204.665 120.174 C 204.786 119.858,204.673 119.600,204.413 119.600 C 204.154 119.600,204.000 119.900,204.071 120.267 M171.640 121.072 C 171.609 122.057,171.397 122.383,170.700 122.518 C 169.838 122.684,169.836 122.693,170.651 122.746 C 171.793 122.819,172.338 122.019,171.976 120.800 C 171.696 119.856,171.678 119.871,171.640 121.072 M76.800 122.600 C 77.546 123.370,78.247 124.000,78.357 124.000 C 78.467 124.000,77.946 123.370,77.200 122.600 C 76.454 121.830,75.753 121.200,75.643 121.200 C 75.533 121.200,76.054 121.830,76.800 122.600 M167.105 122.683 C 167.602 122.779,168.322 122.775,168.705 122.675 C 169.087 122.575,168.680 122.496,167.800 122.501 C 166.920 122.505,166.607 122.587,167.105 122.683 M266.181 124.100 L 264.600 125.800 266.300 124.219 C 267.881 122.748,268.184 122.400,267.881 122.400 C 267.816 122.400,267.051 123.165,266.181 124.100 M264.101 124.200 C 264.105 125.080,264.187 125.393,264.283 124.895 C 264.379 124.398,264.375 123.678,264.275 123.295 C 264.175 122.913,264.096 123.320,264.101 124.200 M105.200 125.800 C 105.946 126.570,106.647 127.200,106.757 127.200 C 106.867 127.200,106.346 126.570,105.600 125.800 C 104.854 125.030,104.153 124.400,104.043 124.400 C 103.933 124.400,104.454 125.030,105.200 125.800 M115.324 126.600 C 115.326 127.920,115.401 128.412,115.490 127.693 C 115.579 126.974,115.577 125.894,115.486 125.293 C 115.395 124.692,115.322 125.280,115.324 126.600 M283.200 128.200 C 282.228 129.190,281.523 130.000,281.633 130.000 C 281.743 130.000,282.628 129.190,283.600 128.200 C 284.572 127.210,285.277 126.400,285.167 126.400 C 285.057 126.400,284.172 127.210,283.200 128.200 M274.981 136.900 L 273.400 138.600 275.100 137.019 C 276.681 135.548,276.984 135.200,276.681 135.200 C 276.616 135.200,275.851 135.965,274.981 136.900 M192.705 137.883 C 193.202 137.979,193.922 137.975,194.305 137.875 C 194.687 137.775,194.280 137.696,193.400 137.701 C 192.520 137.705,192.207 137.787,192.705 137.883 M237.724 141.400 C 237.726 142.720,237.801 143.212,237.890 142.493 C 237.979 141.774,237.977 140.694,237.886 140.093 C 237.795 139.492,237.722 140.080,237.724 141.400 M237.293 150.800 C 237.293 151.570,237.375 151.885,237.476 151.500 C 237.576 151.115,237.576 150.485,237.476 150.100 C 237.375 149.715,237.293 150.030,237.293 150.800 M237.709 155.600 C 237.709 156.590,237.787 156.995,237.882 156.500 C 237.978 156.005,237.978 155.195,237.882 154.700 C 237.787 154.205,237.709 154.610,237.709 155.600 M320.800 172.600 C 321.546 173.370,322.247 174.000,322.357 174.000 C 322.467 174.000,321.946 173.370,321.200 172.600 C 320.454 171.830,319.753 171.200,319.643 171.200 C 319.533 171.200,320.054 171.830,320.800 172.600 M296.981 176.500 L 295.400 178.200 297.100 176.619 C 298.681 175.148,298.984 174.800,298.681 174.800 C 298.616 174.800,297.851 175.565,296.981 176.500 M202.000 175.325 C 202.000 175.394,202.585 175.979,203.300 176.625 L 204.600 177.800 203.425 176.500 C 202.330 175.288,202.000 175.016,202.000 175.325 M90.514 186.200 C 90.517 187.300,90.595 187.703,90.687 187.095 C 90.779 186.486,90.777 185.586,90.682 185.095 C 90.587 184.603,90.511 185.100,90.514 186.200 M90.534 192.400 C 90.534 194.050,90.605 194.725,90.691 193.900 C 90.778 193.075,90.778 191.725,90.691 190.900 C 90.605 190.075,90.534 190.750,90.534 192.400 M349.293 192.800 C 349.293 193.570,349.375 193.885,349.476 193.500 C 349.576 193.115,349.576 192.485,349.476 192.100 C 349.375 191.715,349.293 192.030,349.293 192.800 M253.000 205.200 C 254.083 206.300,255.060 207.200,255.170 207.200 C 255.280 207.200,254.483 206.300,253.400 205.200 C 252.317 204.100,251.340 203.200,251.230 203.200 C 251.120 203.200,251.917 204.100,253.000 205.200 M109.978 212.700 L 108.600 214.200 110.100 212.822 C 111.496 211.538,111.784 211.200,111.478 211.200 C 111.412 211.200,110.737 211.875,109.978 212.700 M98.581 214.900 L 97.000 216.600 98.700 215.019 C 100.281 213.548,100.584 213.200,100.281 213.200 C 100.216 213.200,99.451 213.965,98.581 214.900 M258.368 214.111 C 259.420 215.291,259.930 215.302,259.249 214.130 C 259.015 213.729,258.819 213.557,258.812 213.749 C 258.805 213.941,258.485 213.856,258.100 213.561 C 257.715 213.266,257.836 213.513,258.368 214.111 M57.200 215.000 C 57.946 215.770,58.647 216.400,58.757 216.400 C 58.867 216.400,58.346 215.770,57.600 215.000 C 56.854 214.230,56.153 213.600,56.043 213.600 C 55.933 213.600,56.454 214.230,57.200 215.000 M74.900 224.276 C 75.285 224.376,75.915 224.376,76.300 224.276 C 76.685 224.175,76.370 224.093,75.600 224.093 C 74.830 224.093,74.515 224.175,74.900 224.276 M78.305 224.283 C 78.802 224.379,79.522 224.375,79.905 224.275 C 80.287 224.175,79.880 224.096,79.000 224.101 C 78.120 224.105,77.807 224.187,78.305 224.283 M272.924 231.400 C 272.926 232.720,273.001 233.212,273.090 232.493 C 273.179 231.774,273.177 230.694,273.086 230.093 C 272.995 229.492,272.922 230.080,272.924 231.400 M239.000 231.600 C 240.083 232.700,241.060 233.600,241.170 233.600 C 241.280 233.600,240.483 232.700,239.400 231.600 C 238.317 230.500,237.340 229.600,237.230 229.600 C 237.120 229.600,237.917 230.500,239.000 231.600 M304.500 229.876 C 304.885 229.976,305.515 229.976,305.900 229.876 C 306.285 229.775,305.970 229.693,305.200 229.693 C 304.430 229.693,304.115 229.775,304.500 229.876 M98.400 232.200 C 97.428 233.190,96.723 234.000,96.833 234.000 C 96.943 234.000,97.828 233.190,98.800 232.200 C 99.772 231.210,100.477 230.400,100.367 230.400 C 100.257 230.400,99.372 231.210,98.400 232.200 M272.901 237.000 C 272.905 237.880,272.987 238.193,273.083 237.695 C 273.179 237.198,273.175 236.478,273.075 236.095 C 272.975 235.713,272.896 236.120,272.901 237.000 M134.501 240.200 C 134.505 241.080,134.587 241.393,134.683 240.895 C 134.779 240.398,134.775 239.678,134.675 239.295 C 134.575 238.913,134.496 239.320,134.501 240.200 M80.500 240.676 C 80.885 240.776,81.515 240.776,81.900 240.676 C 82.285 240.575,81.970 240.493,81.200 240.493 C 80.430 240.493,80.115 240.575,80.500 240.676 M152.493 245.200 C 152.493 245.970,152.575 246.285,152.676 245.900 C 152.776 245.515,152.776 244.885,152.676 244.500 C 152.575 244.115,152.493 244.430,152.493 245.200 M134.501 249.400 C 134.505 250.280,134.587 250.593,134.683 250.095 C 134.779 249.598,134.775 248.878,134.675 248.495 C 134.575 248.113,134.496 248.520,134.501 249.400 M329.600 250.925 C 329.600 250.994,330.185 251.579,330.900 252.225 L 332.200 253.400 331.025 252.100 C 329.930 250.888,329.600 250.616,329.600 250.925 M268.175 253.300 L 267.000 254.600 268.300 253.425 C 269.512 252.330,269.784 252.000,269.475 252.000 C 269.406 252.000,268.821 252.585,268.175 253.300 M111.246 256.200 C 111.315 257.840,111.820 259.099,112.048 258.200 C 112.159 257.760,112.017 256.950,111.731 256.400 C 111.287 255.546,111.217 255.517,111.246 256.200 M264.355 256.489 C 263.897 257.348,263.913 257.366,264.635 256.813 C 265.056 256.490,265.457 256.193,265.527 256.153 C 265.596 256.113,265.470 255.967,265.247 255.829 C 265.023 255.691,264.622 255.988,264.355 256.489 M45.728 267.600 C 45.728 269.030,45.801 269.615,45.889 268.900 C 45.978 268.185,45.978 267.015,45.889 266.300 C 45.801 265.585,45.728 266.170,45.728 267.600 M236.175 266.500 L 235.000 267.800 236.300 266.625 C 237.015 265.979,237.600 265.394,237.600 265.325 C 237.600 265.016,237.270 265.288,236.175 266.500 M354.555 279.800 C 354.556 282.660,354.620 283.778,354.697 282.283 C 354.774 280.789,354.774 278.449,354.696 277.083 C 354.618 275.718,354.555 276.940,354.555 279.800 M62.901 277.000 C 62.905 277.880,62.987 278.193,63.083 277.695 C 63.179 277.198,63.175 276.478,63.075 276.095 C 62.975 275.713,62.896 276.120,62.901 277.000 M177.300 283.076 C 177.685 283.176,178.315 283.176,178.700 283.076 C 179.085 282.975,178.770 282.893,178.000 282.893 C 177.230 282.893,176.915 282.975,177.300 283.076 M262.975 284.100 L 261.800 285.400 263.100 284.225 C 263.815 283.579,264.400 282.994,264.400 282.925 C 264.400 282.616,264.070 282.888,262.975 284.100 M185.712 283.495 C 186.764 283.577,188.384 283.576,189.312 283.492 C 190.240 283.408,189.380 283.341,187.400 283.342 C 185.420 283.343,184.660 283.412,185.712 283.495 M192.100 283.487 C 192.705 283.578,193.695 283.578,194.300 283.487 C 194.905 283.395,194.410 283.320,193.200 283.320 C 191.990 283.320,191.495 283.395,192.100 283.487 M186.707 307.890 C 187.426 307.979,188.506 307.977,189.107 307.886 C 189.708 307.795,189.120 307.722,187.800 307.724 C 186.480 307.726,185.988 307.801,186.707 307.890 M204.100 307.887 C 204.705 307.978,205.695 307.978,206.300 307.887 C 206.905 307.795,206.410 307.720,205.200 307.720 C 203.990 307.720,203.495 307.795,204.100 307.887 M88.400 328.525 C 88.400 328.594,88.985 329.179,89.700 329.825 L 91.000 331.000 89.825 329.700 C 88.730 328.488,88.400 328.216,88.400 328.525 M93.400 333.600 C 94.706 334.920,95.865 336.000,95.975 336.000 C 96.085 336.000,95.106 334.920,93.800 333.600 C 92.494 332.280,91.335 331.200,91.225 331.200 C 91.115 331.200,92.094 332.280,93.400 333.600 M204.200 338.000 C 205.728 339.540,207.069 340.800,207.179 340.800 C 207.289 340.800,206.128 339.540,204.600 338.000 C 203.072 336.460,201.731 335.200,201.621 335.200 C 201.511 335.200,202.672 336.460,204.200 338.000 M97.200 336.925 C 97.200 336.994,97.785 337.579,98.500 338.225 L 99.800 339.400 98.625 338.100 C 97.530 336.888,97.200 336.616,97.200 336.925 M83.600 341.800 C 84.346 342.570,85.047 343.200,85.157 343.200 C 85.267 343.200,84.746 342.570,84.000 341.800 C 83.254 341.030,82.553 340.400,82.443 340.400 C 82.333 340.400,82.854 341.030,83.600 341.800 M188.558 351.800 C 188.558 354.880,188.621 356.087,188.697 354.482 C 188.773 352.878,188.773 350.358,188.696 348.882 C 188.619 347.407,188.557 348.720,188.558 351.800 M225.905 360.283 C 226.402 360.379,227.122 360.375,227.505 360.275 C 227.887 360.175,227.480 360.096,226.600 360.101 C 225.720 360.105,225.407 360.187,225.905 360.283 M208.400 365.725 C 208.400 365.794,208.985 366.379,209.700 367.025 L 211.000 368.200 209.825 366.900 C 208.730 365.688,208.400 365.416,208.400 365.725 M155.700 369.494 C 156.745 369.576,158.455 369.576,159.500 369.494 C 160.545 369.412,159.690 369.344,157.600 369.344 C 155.510 369.344,154.655 369.412,155.700 369.494 M205.737 380.600 C 205.739 382.360,205.809 383.030,205.893 382.089 C 205.978 381.149,205.977 379.709,205.891 378.889 C 205.805 378.070,205.736 378.840,205.737 380.600 M240.378 383.100 L 239.000 384.600 240.500 383.222 C 241.325 382.463,242.000 381.788,242.000 381.722 C 242.000 381.416,241.662 381.704,240.378 383.100 M170.705 383.483 C 171.202 383.579,171.922 383.575,172.305 383.475 C 172.687 383.375,172.280 383.296,171.400 383.301 C 170.520 383.305,170.207 383.387,170.705 383.483 M191.000 399.600 C 192.083 400.700,193.060 401.600,193.170 401.600 C 193.280 401.600,192.483 400.700,191.400 399.600 C 190.317 398.500,189.340 397.600,189.230 397.600 C 189.120 397.600,189.917 398.500,191.000 399.600 \\\" stroke=\\\"none\\\" fill=\\\"#1c1c1c\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path8\\\" d=\\\"M181.511 2.693 C 182.451 2.778,183.891 2.777,184.711 2.691 C 185.530 2.605,184.760 2.536,183.000 2.537 C 181.240 2.539,180.570 2.609,181.511 2.693 M177.000 3.200 C 176.496 3.417,176.422 3.544,176.800 3.544 C 177.130 3.544,177.760 3.389,178.200 3.200 C 178.704 2.983,178.778 2.856,178.400 2.856 C 178.070 2.856,177.440 3.011,177.000 3.200 M169.900 5.829 C 168.349 6.670,168.525 6.961,170.100 6.159 C 171.608 5.393,171.875 5.194,171.367 5.216 C 171.165 5.225,170.505 5.501,169.900 5.829 M196.559 6.334 C 196.710 6.578,196.277 6.815,195.508 6.910 C 194.493 7.036,194.626 7.086,196.100 7.136 C 198.201 7.207,198.416 7.051,197.152 6.374 C 196.629 6.095,196.402 6.079,196.559 6.334 M186.500 6.694 C 187.545 6.776,189.255 6.776,190.300 6.694 C 191.345 6.612,190.490 6.544,188.400 6.544 C 186.310 6.544,185.455 6.612,186.500 6.694 M166.593 7.862 C 162.368 10.677,159.385 13.822,162.662 12.005 C 163.508 11.537,163.885 11.248,163.500 11.364 C 163.115 11.480,162.800 11.401,162.800 11.187 C 162.800 10.974,162.935 10.800,163.100 10.800 C 163.265 10.799,163.934 10.340,164.586 9.779 C 165.239 9.218,166.364 8.393,167.086 7.947 C 167.809 7.500,168.400 7.059,168.400 6.967 C 168.400 6.685,168.239 6.764,166.593 7.862 M180.105 7.087 C 180.714 7.179,181.614 7.177,182.105 7.082 C 182.597 6.987,182.100 6.911,181.000 6.914 C 179.900 6.917,179.497 6.995,180.105 7.087 M175.105 7.883 C 175.602 7.979,176.322 7.975,176.705 7.875 C 177.087 7.775,176.680 7.696,175.800 7.701 C 174.920 7.705,174.607 7.787,175.105 7.883 M190.713 16.295 C 191.876 16.376,193.676 16.376,194.713 16.293 C 195.751 16.211,194.800 16.145,192.600 16.146 C 190.400 16.147,189.551 16.214,190.713 16.295 M182.800 16.800 C 181.456 17.231,182.908 17.231,184.600 16.800 C 185.678 16.526,185.698 16.494,184.800 16.487 C 184.250 16.483,183.350 16.624,182.800 16.800 M200.600 16.800 C 201.040 16.989,201.760 17.138,202.200 17.132 C 202.843 17.123,202.804 17.057,202.000 16.800 C 200.632 16.362,199.581 16.362,200.600 16.800 M168.500 21.034 C 167.785 21.346,167.200 21.694,167.200 21.807 C 167.200 22.015,170.006 20.927,170.346 20.587 C 170.686 20.247,169.820 20.457,168.500 21.034 M218.400 22.400 C 219.610 23.039,220.780 23.562,221.000 23.562 C 221.220 23.562,220.410 23.039,219.200 22.400 C 217.990 21.761,216.820 21.238,216.600 21.238 C 216.380 21.238,217.190 21.761,218.400 22.400 M163.200 23.638 C 161.550 24.533,160.020 25.449,159.800 25.675 C 159.477 26.005,166.181 22.596,166.767 22.132 C 167.559 21.504,165.641 22.314,163.200 23.638 M222.000 24.020 C 223.387 24.961,224.178 25.235,223.200 24.436 C 222.650 23.986,222.020 23.617,221.800 23.615 C 221.580 23.613,221.670 23.796,222.000 24.020 M157.400 27.035 L 156.200 28.066 157.600 27.163 C 159.396 26.004,159.401 26.000,158.967 26.002 C 158.765 26.003,158.060 26.468,157.400 27.035 M228.200 27.790 C 229.258 28.677,229.305 28.801,228.600 28.838 C 227.936 28.873,227.970 28.934,228.800 29.200 C 231.365 30.021,231.182 29.144,228.468 27.613 L 227.000 26.784 228.200 27.790 M191.305 27.487 C 191.914 27.579,192.814 27.577,193.305 27.482 C 193.797 27.387,193.300 27.311,192.200 27.314 C 191.100 27.317,190.697 27.395,191.305 27.487 M213.705 27.487 C 214.314 27.579,215.214 27.577,215.705 27.482 C 216.197 27.387,215.700 27.311,214.600 27.314 C 213.500 27.317,213.097 27.395,213.705 27.487 M154.100 29.167 C 146.685 34.193,133.674 46.037,138.058 43.770 C 138.895 43.337,139.155 43.019,138.835 42.822 C 138.516 42.625,139.343 41.657,141.277 39.962 C 142.884 38.554,144.290 37.295,144.400 37.166 C 144.825 36.666,152.688 30.531,154.300 29.441 C 155.763 28.451,156.291 27.979,155.900 28.007 C 155.845 28.011,155.035 28.533,154.100 29.167 M223.200 28.380 C 224.199 28.720,226.682 28.932,226.367 28.651 C 226.275 28.569,225.300 28.399,224.200 28.272 C 222.851 28.116,222.526 28.151,223.200 28.380 M177.600 29.200 C 176.808 29.454,176.767 29.520,177.400 29.520 C 177.840 29.520,178.650 29.376,179.200 29.200 C 179.992 28.946,180.033 28.880,179.400 28.880 C 178.960 28.880,178.150 29.024,177.600 29.200 M173.600 30.018 C 173.162 30.315,173.324 30.352,174.200 30.156 C 175.671 29.827,175.990 29.598,174.967 29.606 C 174.545 29.609,173.930 29.795,173.600 30.018 M169.800 30.800 C 168.781 31.238,169.832 31.238,171.200 30.800 C 172.004 30.543,172.043 30.477,171.400 30.468 C 170.960 30.462,170.240 30.611,169.800 30.800 M156.548 34.768 C 155.419 35.174,154.159 35.721,153.748 35.984 C 153.039 36.436,153.042 36.446,153.800 36.184 C 156.534 35.241,159.024 34.303,159.167 34.163 C 159.510 33.827,158.536 34.052,156.548 34.768 M191.505 36.283 C 192.002 36.379,192.722 36.375,193.105 36.275 C 193.487 36.175,193.080 36.096,192.200 36.101 C 191.320 36.105,191.007 36.187,191.505 36.283 M188.500 36.676 C 188.885 36.776,189.515 36.776,189.900 36.676 C 190.285 36.575,189.970 36.493,189.200 36.493 C 188.430 36.493,188.115 36.575,188.500 36.676 M201.100 36.682 C 201.595 36.778,202.405 36.778,202.900 36.682 C 203.395 36.587,202.990 36.509,202.000 36.509 C 201.010 36.509,200.605 36.587,201.100 36.682 M184.000 37.200 C 183.208 37.454,183.167 37.520,183.800 37.520 C 184.240 37.520,185.050 37.376,185.600 37.200 C 186.392 36.946,186.433 36.880,185.800 36.880 C 185.360 36.880,184.550 37.024,184.000 37.200 M205.600 37.200 C 206.968 37.638,208.019 37.638,207.000 37.200 C 206.560 37.011,205.840 36.862,205.400 36.868 C 204.757 36.877,204.796 36.943,205.600 37.200 M209.400 38.000 C 209.840 38.189,210.560 38.338,211.000 38.332 C 211.643 38.323,211.604 38.257,210.800 38.000 C 209.432 37.562,208.381 37.562,209.400 38.000 M175.800 39.414 C 175.140 39.717,174.870 39.966,175.200 39.968 C 175.530 39.970,176.250 39.714,176.800 39.400 C 178.065 38.677,177.389 38.687,175.800 39.414 M143.500 40.426 C 142.235 41.079,141.200 41.703,141.200 41.812 C 141.200 41.991,145.960 39.725,146.367 39.353 C 146.890 38.873,145.498 39.394,143.500 40.426 M170.000 41.600 C 169.230 42.022,168.780 42.366,169.000 42.366 C 169.220 42.366,170.030 42.022,170.800 41.600 C 171.570 41.178,172.020 40.834,171.800 40.834 C 171.580 40.834,170.770 41.178,170.000 41.600 M163.899 44.560 C 162.634 45.279,161.464 46.010,161.299 46.183 C 160.939 46.563,163.936 45.071,165.723 43.982 C 167.844 42.689,166.368 43.157,163.899 44.560 M312.700 43.882 C 313.853 44.104,313.833 44.297,312.501 45.778 C 311.550 46.835,311.605 46.813,312.901 45.622 C 314.737 43.933,314.773 43.584,313.100 43.654 C 312.160 43.694,312.049 43.757,312.700 43.882 M226.000 44.187 C 226.000 44.297,226.900 44.843,228.000 45.400 C 229.100 45.957,230.000 46.323,230.000 46.213 C 230.000 46.103,229.100 45.557,228.000 45.000 C 226.900 44.443,226.000 44.077,226.000 44.187 M307.000 44.410 C 306.466 44.647,306.798 44.686,308.000 44.527 C 308.990 44.396,309.875 44.224,309.967 44.144 C 310.314 43.843,307.764 44.072,307.000 44.410 M303.000 45.200 C 302.496 45.417,302.422 45.544,302.800 45.544 C 303.130 45.544,303.760 45.389,304.200 45.200 C 304.704 44.983,304.778 44.856,304.400 44.856 C 304.070 44.856,303.440 45.011,303.000 45.200 M158.500 47.817 C 157.345 48.574,156.400 49.277,156.400 49.380 C 156.400 49.633,160.391 47.139,160.645 46.727 C 160.948 46.237,160.781 46.322,158.500 47.817 M310.723 47.900 C 309.960 48.789,309.495 49.600,309.749 49.600 C 309.857 49.600,310.330 49.060,310.800 48.400 C 311.732 47.091,311.684 46.781,310.723 47.900 M197.900 48.299 C 200.595 48.368,205.005 48.368,207.700 48.299 C 210.395 48.230,208.190 48.173,202.800 48.173 C 197.410 48.173,195.205 48.230,197.900 48.299 M232.800 48.112 C 232.800 48.225,233.700 48.894,234.800 49.600 C 237.237 51.164,237.273 51.335,235.100 51.037 C 233.895 50.871,233.633 50.911,234.200 51.173 C 236.669 52.317,238.453 51.382,236.265 50.092 C 235.531 49.659,234.451 48.990,233.865 48.606 C 233.279 48.222,232.800 48.000,232.800 48.112 M294.000 48.844 C 293.450 49.298,293.226 49.553,293.501 49.410 C 295.806 48.219,296.126 48.006,295.600 48.011 C 295.270 48.015,294.550 48.389,294.000 48.844 M186.105 49.087 C 186.714 49.179,187.614 49.177,188.105 49.082 C 188.597 48.987,188.100 48.911,187.000 48.914 C 185.900 48.917,185.497 48.995,186.105 49.087 M217.507 49.090 C 218.226 49.179,219.306 49.177,219.907 49.086 C 220.508 48.995,219.920 48.922,218.600 48.924 C 217.280 48.926,216.788 49.001,217.507 49.090 M180.800 49.600 C 180.008 49.854,179.967 49.920,180.600 49.920 C 181.040 49.920,181.850 49.776,182.400 49.600 C 183.192 49.346,183.233 49.280,182.600 49.280 C 182.160 49.280,181.350 49.424,180.800 49.600 M229.800 50.400 C 230.240 50.589,230.960 50.738,231.400 50.732 C 232.043 50.723,232.004 50.657,231.200 50.400 C 229.832 49.962,228.781 49.962,229.800 50.400 M289.300 51.426 C 288.365 51.987,287.600 52.540,287.600 52.655 C 287.600 52.871,290.299 51.338,290.980 50.736 C 291.667 50.128,291.027 50.391,289.300 51.426 M282.000 56.258 C 279.061 58.308,278.564 58.735,279.973 58.001 C 281.758 57.070,285.482 54.251,284.700 54.422 C 284.645 54.434,283.430 55.260,282.000 56.258 M306.501 57.000 C 306.505 57.880,306.587 58.193,306.683 57.695 C 306.779 57.198,306.775 56.478,306.675 56.095 C 306.575 55.713,306.496 56.120,306.501 57.000 M177.673 57.500 C 178.446 59.160,179.762 60.785,180.009 60.385 C 180.199 60.078,180.451 60.316,180.720 61.055 C 180.949 61.685,181.151 61.920,181.168 61.578 C 181.218 60.605,178.890 57.200,178.175 57.200 C 177.822 57.200,177.596 57.335,177.673 57.500 M179.339 58.640 C 179.746 59.198,180.003 59.730,179.911 59.822 C 179.819 59.915,179.346 59.452,178.860 58.795 C 178.374 58.138,178.116 57.606,178.288 57.613 C 178.460 57.619,178.933 58.082,179.339 58.640 M198.600 58.689 C 197.365 60.331,197.028 60.953,197.549 60.631 C 197.797 60.478,198.000 60.575,198.000 60.848 C 198.000 61.358,200.369 58.435,200.389 57.900 C 200.414 57.225,199.348 57.695,198.600 58.689 M148.800 58.800 C 148.030 59.222,147.580 59.566,147.800 59.566 C 148.020 59.566,148.830 59.222,149.600 58.800 C 150.370 58.378,150.820 58.034,150.600 58.034 C 150.380 58.034,149.570 58.378,148.800 58.800 M199.140 59.195 C 198.654 59.852,198.168 60.302,198.060 60.194 C 197.880 60.014,199.553 58.000,199.882 58.000 C 199.960 58.000,199.626 58.538,199.140 59.195 M306.128 61.200 C 306.128 62.630,306.201 63.215,306.289 62.500 C 306.378 61.785,306.378 60.615,306.289 59.900 C 306.201 59.185,306.128 59.770,306.128 61.200 M141.485 61.114 C 139.306 63.326,139.106 63.876,140.800 63.000 C 142.111 62.322,142.415 61.879,141.300 62.272 C 140.915 62.407,141.312 61.771,142.181 60.859 C 143.051 59.947,143.674 59.200,143.566 59.200 C 143.458 59.200,142.522 60.061,141.485 61.114 M273.419 61.229 C 271.669 62.093,270.458 62.800,270.729 62.800 C 271.306 62.800,276.800 60.081,276.800 59.795 C 276.800 59.541,277.061 59.431,273.419 61.229 M55.660 61.155 C 55.251 61.413,55.522 61.821,56.767 62.822 C 57.674 63.550,59.168 65.149,60.087 66.373 C 62.331 69.364,62.612 69.638,61.816 68.063 C 61.445 67.328,59.985 65.570,58.571 64.156 C 57.157 62.742,56.000 61.504,56.000 61.405 C 56.000 61.306,58.205 61.168,60.900 61.099 L 65.800 60.973 61.000 60.893 C 58.360 60.848,55.957 60.966,55.660 61.155 M196.673 61.753 C 196.315 62.686,196.309 62.667,196.983 62.667 C 197.303 62.667,197.661 62.417,197.778 62.113 C 197.895 61.808,197.828 61.659,197.630 61.782 C 197.431 61.905,197.196 61.788,197.108 61.523 C 197.009 61.226,196.841 61.315,196.673 61.753 M68.833 61.743 C 68.925 61.822,69.720 61.997,70.600 62.132 C 71.690 62.299,72.009 62.255,71.600 61.995 C 71.053 61.646,68.445 61.409,68.833 61.743 M180.391 62.783 C 181.093 64.095,180.902 67.501,180.100 67.968 C 179.715 68.192,179.589 68.381,179.820 68.388 C 180.698 68.413,181.202 67.369,181.253 65.420 C 181.303 63.506,181.321 63.473,181.600 64.800 C 181.873 66.095,181.899 66.116,181.947 65.074 C 182.010 63.736,181.461 62.586,180.602 62.256 C 180.098 62.063,180.059 62.162,180.391 62.783 M72.433 62.544 C 72.525 62.623,73.140 62.808,73.800 62.956 C 74.676 63.152,74.838 63.115,74.400 62.818 C 73.860 62.453,72.032 62.198,72.433 62.544 M196.047 65.313 C 196.007 67.307,195.876 67.679,195.100 68.012 C 194.344 68.337,194.327 68.383,194.990 68.296 C 195.424 68.239,195.968 67.815,196.198 67.353 C 196.548 66.653,196.701 66.604,197.124 67.057 C 197.695 67.668,199.124 67.763,199.942 67.245 C 200.292 67.023,199.938 66.919,198.942 66.951 C 197.439 66.999,197.394 66.959,197.157 65.400 C 197.023 64.520,196.867 64.160,196.809 64.600 C 196.732 65.199,196.629 65.098,196.400 64.200 C 196.149 63.215,196.086 63.414,196.047 65.313 M77.800 64.371 C 78.680 64.794,79.670 65.147,80.000 65.155 C 80.686 65.171,78.639 64.227,77.174 63.851 C 76.638 63.714,76.920 63.948,77.800 64.371 M306.514 65.800 C 306.517 66.900,306.595 67.303,306.687 66.695 C 306.779 66.086,306.777 65.186,306.682 64.695 C 306.587 64.203,306.511 64.700,306.514 65.800 M205.400 64.685 C 204.960 64.791,204.432 65.037,204.227 65.232 C 204.022 65.427,204.471 65.409,205.224 65.193 C 207.123 64.649,207.842 64.699,208.571 65.429 C 208.917 65.774,209.200 65.871,209.200 65.643 C 209.200 64.699,207.316 64.224,205.400 64.685 M233.615 64.478 C 233.607 64.630,234.235 65.440,235.010 66.278 C 235.786 67.115,236.975 68.655,237.652 69.700 C 238.729 71.362,239.745 72.453,238.956 71.100 C 237.665 68.888,233.646 63.904,233.615 64.478 M262.400 64.800 L 260.600 65.080 262.200 65.112 C 263.080 65.129,264.160 64.989,264.600 64.800 C 265.527 64.402,264.961 64.402,262.400 64.800 M167.829 66.229 C 166.970 67.087,167.030 67.477,167.900 66.695 C 168.285 66.350,169.140 65.989,169.800 65.893 L 171.000 65.720 169.729 65.660 C 169.029 65.627,168.174 65.883,167.829 66.229 M249.775 66.041 C 249.379 66.682,255.884 72.930,258.007 73.949 C 259.822 74.819,259.657 74.671,256.631 72.712 C 255.706 72.113,253.791 70.403,252.375 68.912 L 249.800 66.200 254.000 65.978 L 258.200 65.757 254.124 65.678 C 251.505 65.628,249.950 65.758,249.775 66.041 M173.600 67.194 C 173.930 67.411,174.635 67.591,175.167 67.594 C 176.451 67.602,176.125 67.375,174.400 67.058 C 173.415 66.877,173.178 66.918,173.600 67.194 M87.600 68.800 C 88.810 69.439,89.980 69.962,90.200 69.962 C 90.420 69.962,89.610 69.439,88.400 68.800 C 87.190 68.161,86.020 67.638,85.800 67.638 C 85.580 67.638,86.390 68.161,87.600 68.800 M177.000 68.000 C 177.440 68.189,178.160 68.338,178.600 68.332 C 179.243 68.323,179.204 68.257,178.400 68.000 C 177.032 67.562,175.981 67.562,177.000 68.000 M191.200 68.800 L 189.400 69.080 191.000 69.112 C 191.880 69.129,192.960 68.989,193.400 68.800 C 194.327 68.402,193.761 68.402,191.200 68.800 M206.200 69.774 C 203.572 71.039,204.084 71.078,206.849 69.823 C 208.032 69.286,208.820 68.838,208.600 68.828 C 208.380 68.818,207.300 69.244,206.200 69.774 M167.484 69.737 C 167.737 70.145,171.200 71.734,171.401 71.533 C 171.474 71.459,170.574 70.945,169.400 70.391 C 168.226 69.836,167.364 69.542,167.484 69.737 M201.800 71.414 C 200.185 72.154,201.151 72.155,202.854 71.416 C 203.594 71.094,203.930 70.839,203.600 70.848 C 203.270 70.857,202.460 71.112,201.800 71.414 M287.376 71.422 C 286.612 72.034,286.613 72.038,287.400 71.676 C 287.840 71.474,288.470 71.208,288.800 71.086 C 289.318 70.893,289.315 70.859,288.776 70.832 C 288.434 70.814,287.804 71.080,287.376 71.422 M172.033 71.744 C 172.125 71.823,172.740 72.008,173.400 72.156 C 174.276 72.352,174.438 72.315,174.000 72.018 C 173.460 71.653,171.632 71.398,172.033 71.744 M197.047 73.387 C 196.322 74.169,196.027 74.272,195.620 73.887 C 195.202 73.491,195.199 73.554,195.602 74.224 C 195.969 74.834,195.994 75.533,195.699 76.916 C 195.479 77.944,195.458 78.688,195.650 78.569 C 195.843 78.450,196.000 78.066,196.000 77.714 C 196.000 77.138,196.072 77.141,196.731 77.738 C 197.134 78.102,197.809 78.382,198.231 78.360 C 198.811 78.330,198.754 78.252,198.000 78.044 C 196.161 77.537,196.390 73.562,198.299 72.865 C 199.028 72.599,199.157 72.452,198.681 72.432 C 198.285 72.414,197.550 72.844,197.047 73.387 M307.881 74.400 C 308.006 75.610,308.174 76.675,308.254 76.767 C 308.535 77.087,308.317 74.191,307.987 73.200 C 307.771 72.554,307.734 72.980,307.881 74.400 M283.000 73.600 C 282.120 74.025,281.597 74.379,281.839 74.386 C 282.342 74.402,284.800 73.227,284.800 72.971 C 284.800 72.732,284.787 72.737,283.000 73.600 M99.600 73.582 C 99.930 73.805,100.545 73.991,100.967 73.994 C 101.990 74.002,101.671 73.773,100.200 73.444 C 99.324 73.248,99.162 73.285,99.600 73.582 M179.496 73.482 C 180.584 73.691,181.600 75.048,181.600 76.289 C 181.600 76.790,181.767 77.200,181.971 77.200 C 182.175 77.200,182.417 77.515,182.511 77.900 C 182.604 78.285,182.662 77.700,182.640 76.600 L 182.600 74.600 187.200 74.380 L 191.800 74.160 187.349 74.080 C 183.822 74.017,182.795 74.124,182.403 74.596 C 181.975 75.113,181.805 75.059,181.125 74.196 C 180.677 73.626,179.970 73.223,179.471 73.254 C 178.604 73.309,178.604 73.310,179.496 73.482 M240.000 73.353 C 240.000 73.782,241.190 76.000,241.421 76.000 C 241.531 76.000,241.323 75.415,240.959 74.700 C 240.217 73.240,240.000 72.936,240.000 73.353 M64.658 75.600 C 64.975 77.325,65.202 77.651,65.194 76.367 C 65.191 75.835,65.011 75.130,64.794 74.800 C 64.518 74.378,64.477 74.615,64.658 75.600 M278.600 75.218 C 277.500 75.630,276.960 75.961,277.400 75.954 C 277.840 75.947,278.920 75.607,279.800 75.200 C 281.864 74.245,281.173 74.255,278.600 75.218 M206.000 75.600 C 205.230 76.022,204.780 76.366,205.000 76.366 C 205.220 76.366,206.030 76.022,206.800 75.600 C 207.570 75.178,208.020 74.834,207.800 74.834 C 207.580 74.834,206.770 75.178,206.000 75.600 M262.800 76.166 C 263.570 76.481,264.830 76.730,265.600 76.720 L 267.000 76.700 265.400 76.410 C 264.520 76.251,263.260 76.002,262.600 75.857 C 261.512 75.617,261.530 75.646,262.800 76.166 M120.214 77.035 C 119.841 77.604,119.605 78.138,119.689 78.222 C 119.773 78.307,120.158 77.841,120.544 77.188 C 121.406 75.728,121.148 75.609,120.214 77.035 M166.900 76.276 C 167.285 76.376,167.915 76.376,168.300 76.276 C 168.685 76.175,168.370 76.093,167.600 76.093 C 166.830 76.093,166.515 76.175,166.900 76.276 M164.950 77.421 C 164.405 78.252,164.377 78.530,164.799 78.921 C 165.205 79.296,165.254 79.288,165.024 78.882 C 164.863 78.598,165.021 77.923,165.375 77.382 C 165.729 76.842,165.928 76.400,165.818 76.400 C 165.708 76.400,165.318 76.859,164.950 77.421 M241.602 76.654 C 241.601 76.904,241.869 77.624,242.198 78.254 C 242.526 78.884,242.796 79.196,242.798 78.946 C 242.799 78.696,242.531 77.976,242.202 77.346 C 241.874 76.716,241.604 76.404,241.602 76.654 M273.505 76.683 C 274.002 76.779,274.722 76.775,275.105 76.675 C 275.487 76.575,275.080 76.496,274.200 76.501 C 273.320 76.505,273.007 76.587,273.505 76.683 M235.477 79.800 C 235.598 81.560,235.765 83.075,235.849 83.167 C 236.119 83.464,235.950 80.250,235.599 78.400 C 235.342 77.047,235.312 77.394,235.477 79.800 M268.900 77.087 C 269.505 77.178,270.495 77.178,271.100 77.087 C 271.705 76.995,271.210 76.920,270.000 76.920 C 268.790 76.920,268.295 76.995,268.900 77.087 M65.498 80.000 C 65.613 81.430,65.774 82.675,65.854 82.767 C 66.149 83.104,65.933 78.974,65.615 78.200 C 65.422 77.730,65.374 78.473,65.498 80.000 M209.000 79.634 C 207.900 80.265,207.142 80.786,207.316 80.791 C 207.831 80.806,210.725 79.246,210.996 78.806 C 211.312 78.296,211.382 78.267,209.000 79.634 M116.788 81.500 L 114.200 84.200 116.900 81.612 C 119.408 79.207,119.783 78.800,119.488 78.800 C 119.427 78.800,118.212 80.015,116.788 81.500 M191.200 79.200 C 190.138 79.424,190.041 79.502,190.800 79.524 C 191.350 79.541,192.520 79.405,193.400 79.223 C 194.734 78.947,194.800 78.893,193.800 78.899 C 193.140 78.902,191.970 79.038,191.200 79.200 M165.944 80.376 C 166.464 80.829,167.079 81.200,167.311 81.200 C 167.803 81.200,167.779 81.180,166.200 80.255 L 165.000 79.553 165.944 80.376 M243.044 80.600 C 243.373 82.071,243.602 82.390,243.594 81.367 C 243.591 80.945,243.405 80.330,243.182 80.000 C 242.885 79.562,242.848 79.724,243.044 80.600 M308.886 84.050 C 308.839 86.608,308.711 89.308,308.601 90.050 L 308.403 91.400 308.814 90.095 C 309.040 89.378,309.168 86.678,309.099 84.095 L 308.972 79.400 308.886 84.050 M252.807 80.900 C 252.811 81.175,253.348 82.300,254.000 83.400 C 254.652 84.500,255.184 85.220,255.181 85.000 C 255.178 84.780,254.732 83.880,254.190 83.000 C 253.018 81.098,252.967 80.750,253.900 81.050 C 254.491 81.240,254.506 81.208,254.000 80.844 C 253.203 80.271,252.798 80.290,252.807 80.900 M285.517 83.500 C 285.712 86.540,285.903 86.802,285.954 84.100 C 285.979 82.725,285.864 81.600,285.697 81.600 C 285.531 81.600,285.449 82.455,285.517 83.500 M173.000 82.800 C 173.440 82.989,174.070 83.144,174.400 83.144 C 174.778 83.144,174.704 83.017,174.200 82.800 C 173.760 82.611,173.130 82.456,172.800 82.456 C 172.422 82.456,172.496 82.583,173.000 82.800 M199.800 82.800 C 199.296 83.017,199.222 83.144,199.600 83.144 C 199.930 83.144,200.560 82.989,201.000 82.800 C 201.504 82.583,201.578 82.456,201.200 82.456 C 200.870 82.456,200.240 82.611,199.800 82.800 M294.137 85.400 C 294.139 87.160,294.209 87.830,294.293 86.889 C 294.378 85.949,294.377 84.509,294.291 83.689 C 294.205 82.870,294.136 83.640,294.137 85.400 M181.048 84.400 C 181.294 84.730,181.631 85.720,181.796 86.600 C 182.045 87.932,182.150 88.066,182.420 87.400 C 182.879 86.267,182.869 85.510,182.400 85.800 C 182.180 85.936,182.000 85.789,182.000 85.473 C 182.000 85.157,181.685 84.651,181.300 84.349 C 180.692 83.872,180.659 83.879,181.048 84.400 M183.149 84.700 C 182.671 85.310,182.678 85.340,183.202 84.933 C 183.532 84.676,184.432 84.389,185.202 84.297 L 186.600 84.128 185.149 84.064 C 184.185 84.021,183.514 84.235,183.149 84.700 M190.305 84.283 C 190.802 84.379,191.522 84.375,191.905 84.275 C 192.287 84.175,191.880 84.096,191.000 84.101 C 190.120 84.105,189.807 84.187,190.305 84.283 M195.100 84.399 C 196.210 85.645,195.038 89.125,192.957 90.762 C 192.371 91.223,192.063 91.600,192.271 91.600 C 192.806 91.600,194.586 89.625,195.336 88.200 C 195.684 87.540,195.975 87.237,195.984 87.526 C 196.007 88.281,195.264 89.615,194.051 90.999 L 193.000 92.197 194.138 91.199 C 196.417 89.199,196.993 85.636,195.250 84.327 C 194.704 83.917,194.680 83.928,195.100 84.399 M264.033 84.547 C 264.125 84.628,264.920 84.804,265.800 84.938 C 266.915 85.107,267.158 85.071,266.600 84.819 C 265.832 84.471,263.690 84.244,264.033 84.547 M274.800 84.800 C 274.008 85.054,273.967 85.120,274.600 85.120 C 275.040 85.120,275.850 84.976,276.400 84.800 C 277.192 84.546,277.233 84.480,276.600 84.480 C 276.160 84.480,275.350 84.624,274.800 84.800 M66.153 89.400 C 66.153 92.040,66.218 93.068,66.297 91.684 C 66.375 90.301,66.374 88.141,66.295 86.884 C 66.216 85.628,66.152 86.760,66.153 89.400 M111.200 85.600 C 110.430 86.022,109.944 86.374,110.120 86.383 C 110.544 86.405,112.800 85.232,112.800 84.990 C 112.800 84.728,112.777 84.737,111.200 85.600 M244.708 92.247 C 244.876 100.437,245.076 101.433,245.100 94.200 C 245.111 90.900,245.000 87.771,244.853 87.247 C 244.706 86.723,244.641 88.973,244.708 92.247 M93.600 87.582 C 93.930 87.805,94.545 87.991,94.967 87.994 C 95.990 88.002,95.671 87.773,94.200 87.444 C 93.324 87.248,93.162 87.285,93.600 87.582 M105.600 87.600 C 104.776 87.864,104.741 87.926,105.400 87.954 C 105.840 87.973,106.470 87.813,106.800 87.600 C 107.501 87.147,107.014 87.147,105.600 87.600 M98.700 88.293 C 99.635 88.377,101.165 88.377,102.100 88.293 C 103.035 88.209,102.270 88.140,100.400 88.140 C 98.530 88.140,97.765 88.209,98.700 88.293 M119.700 89.426 C 118.765 89.987,118.000 90.533,118.000 90.640 C 118.000 90.746,118.832 90.346,119.848 89.751 L 121.696 88.668 121.422 89.634 C 121.211 90.375,121.245 90.461,121.568 90.000 C 122.762 88.295,121.986 88.056,119.700 89.426 M285.249 89.000 C 285.216 89.440,285.096 90.250,284.983 90.800 L 284.777 91.800 285.206 90.819 C 285.442 90.279,285.561 89.469,285.472 89.019 C 285.313 88.221,285.307 88.221,285.249 89.000 M182.728 89.400 C 182.947 89.840,183.638 90.647,184.263 91.194 C 184.888 91.741,185.189 91.944,184.931 91.645 C 184.673 91.347,184.547 90.883,184.649 90.615 C 184.752 90.347,184.513 89.883,184.118 89.583 C 183.505 89.118,183.473 89.120,183.900 89.599 C 184.175 89.908,184.394 90.349,184.386 90.580 C 184.378 90.811,183.912 90.460,183.350 89.800 C 182.788 89.140,182.508 88.960,182.728 89.400 M236.157 94.400 C 236.157 97.370,236.220 98.585,236.297 97.100 C 236.374 95.615,236.374 93.185,236.297 91.700 C 236.220 90.215,236.157 91.430,236.157 94.400 M208.341 91.148 C 205.474 92.574,202.644 94.661,200.600 96.858 C 199.131 98.436,199.180 98.412,201.200 96.570 C 205.926 92.257,209.569 90.464,206.054 94.180 C 204.666 95.647,203.425 97.581,202.259 100.095 C 201.306 102.148,199.958 104.476,199.263 105.267 C 198.568 106.058,198.000 106.834,198.000 106.991 C 198.000 107.938,201.195 103.220,202.611 100.182 C 204.285 96.591,207.081 93.177,210.200 90.915 C 211.866 89.706,211.029 89.812,208.341 91.148 M185.417 91.200 C 185.621 91.530,185.791 91.965,185.794 92.167 C 185.797 92.368,186.070 92.607,186.400 92.697 C 186.933 92.843,186.933 92.814,186.400 92.437 C 185.672 91.922,186.763 91.838,188.400 92.283 L 189.400 92.555 188.400 92.838 C 187.546 93.079,187.623 93.126,188.924 93.160 C 189.855 93.184,190.350 93.043,190.198 92.797 C 190.061 92.575,190.309 92.260,190.750 92.097 C 191.250 91.912,190.593 91.789,189.003 91.771 C 187.428 91.753,186.185 91.524,185.750 91.171 C 185.134 90.671,185.093 90.675,185.417 91.200 M114.000 92.600 C 113.010 93.130,112.380 93.564,112.600 93.564 C 112.820 93.564,113.810 93.130,114.800 92.600 C 115.790 92.070,116.420 91.636,116.200 91.636 C 115.980 91.636,114.990 92.070,114.000 92.600 M168.010 93.284 C 169.173 94.210,170.907 96.030,171.863 97.328 C 172.818 98.626,173.600 99.550,173.600 99.382 C 173.600 98.915,171.673 96.402,169.857 94.500 C 166.717 91.211,170.819 93.441,175.272 97.444 C 177.618 99.552,177.583 99.500,174.937 96.951 C 172.082 94.198,168.029 91.600,166.592 91.600 C 166.155 91.600,166.683 92.227,168.010 93.284 M81.340 95.200 C 81.340 97.070,81.409 97.835,81.493 96.900 C 81.577 95.965,81.577 94.435,81.493 93.500 C 81.409 92.565,81.340 93.330,81.340 95.200 M308.060 92.837 C 308.027 93.408,307.640 94.921,307.200 96.200 C 306.760 97.479,306.413 98.722,306.430 98.963 C 306.446 99.203,306.902 98.140,307.442 96.600 C 307.983 95.060,308.356 93.350,308.272 92.800 L 308.120 91.800 308.060 92.837 M128.627 94.842 C 128.475 96.185,128.452 97.385,128.575 97.509 C 128.699 97.632,128.803 97.208,128.806 96.567 C 128.809 95.925,128.987 95.130,129.200 94.800 C 129.509 94.321,129.589 94.396,129.594 95.167 C 129.597 95.698,129.708 96.025,129.840 95.894 C 130.169 95.564,129.605 92.400,129.217 92.400 C 129.044 92.400,128.779 93.499,128.627 94.842 M88.667 94.267 C 88.300 94.633,88.383 98.816,88.776 99.800 C 88.954 100.246,89.005 99.299,88.891 97.659 C 88.735 95.410,88.818 94.634,89.243 94.365 C 89.549 94.171,89.605 94.009,89.367 94.006 C 89.128 94.003,88.813 94.120,88.667 94.267 M109.400 94.400 C 109.108 94.873,109.499 94.873,110.600 94.400 C 111.371 94.069,111.369 94.055,110.524 94.028 C 110.042 94.013,109.536 94.180,109.400 94.400 M292.446 94.867 C 292.421 95.234,292.296 95.864,292.170 96.267 C 291.952 96.962,291.963 96.963,292.397 96.287 C 292.648 95.896,292.773 95.266,292.673 94.887 C 292.511 94.268,292.488 94.266,292.446 94.867 M66.514 96.600 C 66.517 97.700,66.595 98.103,66.687 97.495 C 66.779 96.886,66.777 95.986,66.682 95.495 C 66.587 95.003,66.511 95.500,66.514 96.600 M259.418 95.400 C 259.566 95.840,259.856 96.785,260.062 97.500 C 260.269 98.215,260.523 98.800,260.626 98.800 C 260.935 98.800,260.334 96.678,259.719 95.600 C 259.366 94.981,259.251 94.904,259.418 95.400 M93.621 95.621 C 94.155 95.960,97.142 96.181,96.767 95.855 C 96.675 95.775,95.799 95.608,94.821 95.482 C 93.670 95.335,93.246 95.384,93.621 95.621 M188.880 96.480 C 188.334 97.026,188.234 98.650,188.728 98.955 C 188.908 99.067,188.978 98.629,188.883 97.983 C 188.681 96.608,189.656 95.993,190.853 96.740 C 191.264 96.997,191.600 97.045,191.600 96.846 C 191.600 96.021,189.607 95.753,188.880 96.480 M290.900 99.500 C 290.413 100.737,290.078 101.811,290.155 101.889 C 290.232 101.966,290.702 101.026,291.200 99.800 C 291.698 98.574,292.033 97.499,291.945 97.411 C 291.857 97.324,291.387 98.263,290.900 99.500 M128.177 110.200 C 128.177 116.800,128.232 119.556,128.299 116.325 C 128.366 113.093,128.366 107.693,128.299 104.325 C 128.232 100.956,128.177 103.600,128.177 110.200 M198.337 99.500 C 197.524 100.469,196.343 102.400,196.562 102.400 C 196.662 102.400,197.290 101.590,197.958 100.600 C 199.207 98.750,199.374 98.263,198.337 99.500 M260.806 99.833 C 260.809 100.255,260.995 100.870,261.218 101.200 C 261.515 101.638,261.552 101.476,261.356 100.600 C 261.027 99.129,260.798 98.810,260.806 99.833 M244.493 101.600 C 244.493 102.370,244.575 102.685,244.676 102.300 C 244.776 101.915,244.776 101.285,244.676 100.900 C 244.575 100.515,244.493 100.830,244.493 101.600 M66.868 101.200 C 66.888 102.239,67.518 103.946,67.532 103.000 C 67.538 102.560,67.389 101.840,67.200 101.400 C 66.989 100.910,66.861 100.832,66.868 101.200 M280.678 103.805 C 280.312 104.572,280.095 105.200,280.196 105.200 C 280.470 105.200,281.684 102.751,281.501 102.568 C 281.414 102.481,281.044 103.038,280.678 103.805 M196.049 103.400 C 196.016 103.840,195.896 104.650,195.783 105.200 L 195.577 106.200 196.006 105.219 C 196.242 104.679,196.361 103.869,196.272 103.419 C 196.113 102.621,196.107 102.621,196.049 103.400 M303.800 104.000 C 303.459 104.660,303.269 105.200,303.379 105.200 C 303.489 105.200,303.859 104.660,304.200 104.000 C 304.541 103.340,304.731 102.800,304.621 102.800 C 304.511 102.800,304.141 103.340,303.800 104.000 M175.877 104.831 C 176.275 105.508,176.856 106.273,177.168 106.531 C 177.480 106.789,177.232 106.235,176.615 105.300 C 175.320 103.337,174.809 103.012,175.877 104.831 M130.868 104.600 C 130.862 105.040,131.011 105.760,131.200 106.200 C 131.638 107.219,131.638 106.168,131.200 104.800 C 130.943 103.996,130.877 103.957,130.868 104.600 M244.054 104.800 C 244.019 105.350,243.896 106.250,243.783 106.800 L 243.577 107.800 244.007 106.815 C 244.243 106.274,244.365 105.374,244.278 104.815 L 244.120 103.800 244.054 104.800 M67.656 104.800 C 67.656 105.130,67.811 105.760,68.000 106.200 C 68.217 106.704,68.344 106.778,68.344 106.400 C 68.344 106.070,68.189 105.440,68.000 105.000 C 67.783 104.496,67.656 104.422,67.656 104.800 M235.709 106.000 C 235.709 106.990,235.787 107.395,235.882 106.900 C 235.978 106.405,235.978 105.595,235.882 105.100 C 235.787 104.605,235.709 105.010,235.709 106.000 M288.214 105.435 C 287.841 106.004,287.605 106.538,287.689 106.622 C 287.773 106.707,288.158 106.241,288.544 105.588 C 289.406 104.128,289.148 104.009,288.214 105.435 M180.467 106.500 C 180.394 108.580,180.018 108.809,178.389 107.768 L 177.400 107.136 178.344 107.968 C 180.131 109.542,180.977 108.884,180.694 106.142 C 180.542 104.677,180.531 104.695,180.467 106.500 M262.501 106.200 C 262.505 107.080,262.587 107.393,262.683 106.895 C 262.779 106.398,262.775 105.678,262.675 105.295 C 262.575 104.913,262.496 105.320,262.501 106.200 M219.675 105.471 C 220.047 105.569,220.431 105.953,220.529 106.325 C 220.655 106.803,220.721 106.738,220.754 106.100 C 220.789 105.407,220.593 105.211,219.900 105.246 C 219.262 105.279,219.197 105.345,219.675 105.471 M218.000 105.976 C 218.000 106.183,218.180 106.464,218.400 106.600 C 218.964 106.948,218.898 108.930,218.300 109.601 C 217.875 110.078,217.904 110.082,218.500 109.632 C 219.257 109.059,219.455 107.005,218.793 106.596 C 218.570 106.458,218.491 106.177,218.617 105.972 C 218.744 105.768,218.657 105.600,218.424 105.600 C 218.191 105.600,218.000 105.769,218.000 105.976 M155.863 107.283 C 155.538 108.525,155.785 108.589,156.326 107.402 C 156.577 106.851,156.628 106.400,156.438 106.400 C 156.248 106.400,155.989 106.797,155.863 107.283 M157.721 106.680 C 158.273 106.823,158.338 106.993,157.998 107.402 C 157.646 107.826,157.725 107.892,158.377 107.722 C 159.726 107.369,158.961 106.298,157.467 106.446 C 157.210 106.472,157.325 106.577,157.721 106.680 M196.046 106.876 C 195.985 107.770,196.749 108.212,197.335 107.621 C 197.689 107.264,197.642 107.213,197.135 107.406 C 196.691 107.575,196.407 107.416,196.281 106.929 C 196.120 106.304,196.086 106.296,196.046 106.876 M115.829 107.829 C 115.681 108.415,115.638 108.972,115.732 109.066 C 115.827 109.160,116.024 108.758,116.171 108.171 C 116.319 107.585,116.362 107.028,116.268 106.934 C 116.173 106.840,115.976 107.242,115.829 107.829 M214.700 107.065 C 214.975 107.176,215.200 107.584,215.200 107.971 C 215.200 108.673,216.058 109.616,217.200 110.169 C 217.530 110.329,217.305 110.071,216.700 109.596 C 216.042 109.080,215.600 108.345,215.600 107.767 C 215.600 107.101,215.382 106.810,214.900 106.832 C 214.482 106.850,214.401 106.944,214.700 107.065 M213.646 107.651 C 213.621 108.009,213.870 108.526,214.200 108.800 C 214.615 109.144,214.800 109.159,214.800 108.849 C 214.800 108.602,214.633 108.400,214.429 108.400 C 214.225 108.400,213.976 108.085,213.876 107.700 C 213.721 107.109,213.686 107.102,213.646 107.651 M298.771 110.900 C 297.168 112.935,296.143 114.366,296.494 114.079 C 297.238 113.472,302.139 107.200,301.869 107.200 C 301.769 107.200,300.375 108.865,298.771 110.900 M131.606 108.633 C 131.609 109.055,131.795 109.670,132.018 110.000 C 132.315 110.438,132.352 110.276,132.156 109.400 C 131.827 107.929,131.598 107.610,131.606 108.633 M161.240 108.820 C 161.169 110.626,159.315 111.473,157.999 110.300 C 157.522 109.875,157.518 109.904,157.968 110.500 C 158.542 111.258,160.200 111.447,160.600 110.800 C 161.001 110.151,161.600 110.342,161.600 111.120 C 161.600 112.867,163.824 113.376,165.247 111.953 L 166.093 111.107 167.511 112.525 L 168.929 113.943 167.596 115.071 C 166.862 115.692,165.978 116.435,165.631 116.722 C 165.085 117.174,165.108 117.192,165.804 116.859 C 166.247 116.647,166.950 116.097,167.366 115.637 C 167.783 115.177,168.366 114.800,168.662 114.800 C 169.662 114.800,169.208 113.775,167.441 112.040 C 165.798 110.427,165.664 110.369,165.414 111.156 C 165.131 112.047,163.608 112.642,162.601 112.256 C 161.831 111.960,161.823 110.234,162.589 109.468 C 163.107 108.950,163.098 108.815,162.512 108.340 C 162.046 107.962,161.936 107.950,162.147 108.300 C 162.312 108.575,162.309 109.023,162.141 109.296 C 161.932 109.634,161.746 109.474,161.557 108.796 L 161.280 107.800 161.240 108.820 M276.184 111.500 C 274.937 113.425,273.441 115.537,272.859 116.194 C 271.940 117.229,271.926 117.282,272.749 116.594 C 273.926 115.608,279.134 108.000,278.630 108.000 C 278.531 108.000,277.431 109.575,276.184 111.500 M243.260 109.267 C 243.227 109.854,243.096 110.664,242.970 111.067 C 242.752 111.760,242.765 111.761,243.195 111.090 C 243.446 110.699,243.577 109.889,243.486 109.290 L 243.320 108.200 243.260 109.267 M92.800 110.400 C 93.249 111.280,93.706 112.000,93.816 112.000 C 93.926 112.000,93.649 111.280,93.200 110.400 C 92.751 109.520,92.294 108.800,92.184 108.800 C 92.074 108.800,92.351 109.520,92.800 110.400 M155.043 109.433 C 154.151 111.756,157.622 118.511,158.999 117.134 C 159.086 117.048,158.637 116.628,158.003 116.202 C 156.182 114.978,155.068 112.650,155.303 110.561 C 155.513 108.701,155.442 108.393,155.043 109.433 M285.180 111.100 C 284.467 112.365,283.619 113.850,283.294 114.400 L 282.705 115.400 283.476 114.471 C 284.359 113.407,286.950 108.800,286.665 108.800 C 286.561 108.800,285.893 109.835,285.180 111.100 M263.301 110.600 C 263.305 111.480,263.387 111.793,263.483 111.295 C 263.579 110.798,263.575 110.078,263.475 109.695 C 263.375 109.313,263.296 109.720,263.301 110.600 M209.047 111.201 C 207.297 113.138,207.296 113.110,209.129 114.579 L 210.600 115.757 209.237 114.295 L 207.874 112.832 209.490 111.216 C 210.379 110.327,210.968 109.600,210.799 109.600 C 210.631 109.600,209.842 110.321,209.047 111.201 M85.600 111.353 C 85.600 111.782,86.790 114.000,87.021 114.000 C 87.131 114.000,86.923 113.415,86.559 112.700 C 85.817 111.240,85.600 110.936,85.600 111.353 M188.227 111.559 C 187.731 111.753,188.181 111.851,189.488 111.831 C 190.607 111.814,191.314 111.668,191.061 111.506 C 190.485 111.139,189.240 111.162,188.227 111.559 M234.653 112.436 C 234.514 113.131,234.421 114.172,234.447 114.750 C 234.472 115.328,234.655 114.827,234.852 113.639 C 235.237 111.321,235.073 110.334,234.653 112.436 M132.428 112.433 C 132.444 112.965,132.619 113.760,132.819 114.200 C 133.071 114.758,133.107 114.515,132.938 113.400 C 132.655 111.543,132.387 111.036,132.428 112.433 M70.005 112.144 C 69.996 112.826,72.455 117.030,73.663 118.400 L 74.899 119.800 73.890 118.379 C 73.335 117.598,72.234 115.798,71.445 114.379 C 70.655 112.961,70.007 111.955,70.005 112.144 M115.309 113.600 C 115.309 114.590,115.387 114.995,115.482 114.500 C 115.578 114.005,115.578 113.195,115.482 112.700 C 115.387 112.205,115.309 112.610,115.309 113.600 M185.800 112.966 C 185.140 113.495,184.690 113.999,184.800 114.085 C 184.910 114.171,185.537 113.737,186.194 113.120 C 187.657 111.748,187.430 111.659,185.800 112.966 M242.493 113.600 C 242.493 114.370,242.575 114.685,242.676 114.300 C 242.776 113.915,242.776 113.285,242.676 112.900 C 242.575 112.515,242.493 112.830,242.493 113.600 M193.203 112.890 C 193.201 113.050,193.559 113.770,193.999 114.490 C 194.438 115.211,194.796 115.620,194.796 115.400 C 194.795 115.180,194.437 114.460,194.000 113.800 C 193.563 113.140,193.204 112.731,193.203 112.890 M96.777 116.339 C 98.176 118.148,99.504 119.740,99.726 119.878 C 99.949 120.015,98.981 118.645,97.576 116.833 C 96.171 115.020,94.844 113.427,94.627 113.293 C 94.410 113.159,95.377 114.529,96.777 116.339 M219.762 114.057 C 219.343 114.529,218.460 115.248,217.800 115.656 C 217.140 116.063,216.832 116.398,217.115 116.399 C 217.615 116.400,221.240 113.230,220.762 113.210 C 220.631 113.205,220.181 113.586,219.762 114.057 M264.150 118.600 C 264.151 121.020,264.216 121.958,264.296 120.685 C 264.376 119.412,264.375 117.432,264.294 116.285 C 264.214 115.138,264.149 116.180,264.150 118.600 M184.267 115.067 C 183.908 115.425,183.938 118.083,184.306 118.662 C 184.468 118.916,184.600 118.152,184.600 116.963 C 184.600 115.775,184.585 114.802,184.567 114.801 C 184.548 114.801,184.413 114.920,184.267 115.067 M293.100 117.379 C 291.835 118.783,290.800 120.026,290.800 120.142 C 290.800 120.258,291.745 119.331,292.900 118.083 C 294.055 116.834,295.270 115.591,295.600 115.319 C 295.930 115.048,296.020 114.826,295.800 114.826 C 295.580 114.826,294.365 115.975,293.100 117.379 M133.268 115.800 C 133.262 116.240,133.411 116.960,133.600 117.400 C 134.038 118.419,134.038 117.368,133.600 116.000 C 133.343 115.196,133.277 115.157,133.268 115.800 M88.528 116.600 C 88.874 117.260,89.627 118.340,90.201 119.000 C 90.869 119.769,90.720 119.410,89.786 118.000 C 88.059 115.394,87.665 114.955,88.528 116.600 M114.963 122.000 C 114.963 125.630,115.023 127.115,115.098 125.300 C 115.172 123.485,115.172 120.515,115.098 118.700 C 115.023 116.885,114.963 118.370,114.963 122.000 M233.850 117.250 C 233.517 118.917,233.840 119.240,234.200 117.600 C 234.352 116.909,234.393 116.259,234.291 116.158 C 234.189 116.056,233.991 116.547,233.850 117.250 M213.905 116.683 C 214.402 116.779,215.122 116.775,215.505 116.675 C 215.887 116.575,215.480 116.496,214.600 116.501 C 213.720 116.505,213.407 116.587,213.905 116.683 M241.693 117.600 C 241.693 118.370,241.775 118.685,241.876 118.300 C 241.976 117.915,241.976 117.285,241.876 116.900 C 241.775 116.515,241.693 116.830,241.693 117.600 M281.224 117.718 C 280.923 118.203,280.415 119.005,280.093 119.500 C 279.771 119.995,279.595 120.400,279.701 120.400 C 279.983 120.400,282.086 117.153,281.915 116.981 C 281.835 116.902,281.524 117.233,281.224 117.718 M163.000 117.600 C 161.893 117.882,161.877 117.909,162.800 117.947 C 163.350 117.969,164.070 117.813,164.400 117.600 C 165.081 117.160,164.729 117.160,163.000 117.600 M204.267 117.467 C 203.870 117.863,203.944 119.600,204.357 119.600 C 204.756 119.600,205.200 118.635,205.200 117.767 C 205.200 117.171,204.718 117.015,204.267 117.467 M270.575 118.900 L 269.400 120.200 270.700 119.025 C 271.415 118.379,272.000 117.794,272.000 117.725 C 272.000 117.416,271.670 117.688,270.575 118.900 M171.746 120.029 C 172.164 121.597,172.191 121.618,172.465 120.595 C 172.799 119.345,172.518 118.400,171.813 118.400 C 171.422 118.400,171.407 118.758,171.746 120.029 M134.056 119.200 C 134.056 119.530,134.211 120.160,134.400 120.600 C 134.617 121.104,134.744 121.178,134.744 120.800 C 134.744 120.470,134.589 119.840,134.400 119.400 C 134.183 118.896,134.056 118.822,134.056 119.200 M233.260 120.067 C 233.227 120.654,233.096 121.464,232.970 121.867 C 232.752 122.560,232.765 122.561,233.195 121.890 C 233.446 121.499,233.577 120.689,233.486 120.090 L 233.320 119.000 233.260 120.067 M185.398 120.337 C 185.834 120.852,186.553 121.459,186.996 121.686 C 187.845 122.121,187.721 121.987,185.803 120.394 C 184.648 119.435,184.634 119.433,185.398 120.337 M74.800 120.125 C 74.800 120.194,75.385 120.779,76.100 121.425 L 77.400 122.600 76.225 121.300 C 75.130 120.088,74.800 119.816,74.800 120.125 M92.361 122.074 C 93.005 123.023,94.193 124.520,95.002 125.400 L 96.473 127.000 95.136 125.265 C 94.401 124.311,93.402 122.931,92.915 122.198 C 92.428 121.465,91.841 120.749,91.611 120.607 C 91.380 120.464,91.718 121.124,92.361 122.074 M101.234 121.447 C 101.765 122.133,102.280 122.623,102.379 122.535 C 102.477 122.447,102.043 121.886,101.413 121.288 L 100.269 120.200 101.234 121.447 M267.978 121.900 L 266.600 123.400 268.100 122.022 C 269.496 120.738,269.784 120.400,269.478 120.400 C 269.412 120.400,268.737 121.075,267.978 121.900 M285.819 125.135 L 281.438 129.800 285.148 126.200 C 288.234 123.205,290.851 120.292,290.327 120.435 C 290.257 120.454,288.229 122.569,285.819 125.135 M134.806 122.233 C 134.809 122.655,134.995 123.270,135.218 123.600 C 135.515 124.038,135.552 123.876,135.356 123.000 C 135.027 121.529,134.798 121.210,134.806 122.233 M276.892 124.535 C 276.459 125.269,275.789 126.394,275.405 127.035 L 274.705 128.200 275.533 127.200 C 276.479 126.057,278.144 123.200,277.865 123.200 C 277.763 123.200,277.325 123.801,276.892 124.535 M240.067 124.867 C 240.030 125.674,239.896 126.664,239.770 127.067 C 239.553 127.757,239.566 127.759,239.994 127.093 C 240.243 126.704,240.377 125.714,240.291 124.893 L 240.134 123.400 240.067 124.867 M265.243 124.423 C 264.717 124.861,264.371 125.305,264.475 125.408 C 264.579 125.512,265.086 125.148,265.601 124.598 C 266.724 123.404,266.562 123.325,265.243 124.423 M104.517 124.652 C 104.666 124.901,106.266 126.431,108.071 128.052 C 109.877 129.674,111.232 130.796,111.083 130.548 C 110.934 130.299,109.334 128.769,107.529 127.148 C 105.723 125.526,104.368 124.404,104.517 124.652 M135.616 124.654 C 135.607 124.904,135.863 125.714,136.184 126.454 C 136.506 127.194,136.776 127.596,136.784 127.346 C 136.793 127.096,136.537 126.286,136.216 125.546 C 135.894 124.806,135.624 124.404,135.616 124.654 M128.914 126.600 C 128.917 127.700,128.995 128.103,129.087 127.495 C 129.179 126.886,129.177 125.986,129.082 125.495 C 128.987 125.003,128.911 125.500,128.914 126.600 M81.400 126.800 C 82.259 127.680,83.052 128.400,83.162 128.400 C 83.272 128.400,82.659 127.680,81.800 126.800 C 80.941 125.920,80.148 125.200,80.038 125.200 C 79.928 125.200,80.541 125.920,81.400 126.800 M188.236 126.831 C 187.666 127.508,187.201 128.273,187.203 128.531 C 187.204 128.789,187.560 128.460,187.993 127.800 C 188.426 127.140,189.279 126.383,189.890 126.118 C 190.865 125.695,190.895 125.634,190.136 125.618 C 189.646 125.608,188.822 126.133,188.236 126.831 M193.178 126.041 C 193.717 126.256,194.355 126.560,194.597 126.716 C 194.840 126.872,194.694 126.685,194.275 126.300 C 193.855 125.915,193.216 125.611,192.856 125.625 C 192.441 125.641,192.560 125.794,193.178 126.041 M231.646 126.467 C 231.621 126.834,231.496 127.464,231.370 127.867 C 231.152 128.562,231.163 128.563,231.597 127.887 C 231.848 127.496,231.973 126.866,231.873 126.487 C 231.711 125.868,231.688 125.866,231.646 126.467 M100.479 132.044 C 102.746 134.708,105.737 138.263,107.127 139.944 C 109.526 142.844,111.892 145.381,110.351 143.400 C 107.392 139.596,96.823 127.200,96.538 127.200 C 96.439 127.200,98.213 129.380,100.479 132.044 M83.600 128.525 C 83.600 128.594,84.185 129.179,84.900 129.825 L 86.200 131.000 85.025 129.700 C 83.930 128.488,83.600 128.216,83.600 128.525 M115.293 130.000 C 115.293 130.770,115.375 131.085,115.476 130.700 C 115.576 130.315,115.576 129.685,115.476 129.300 C 115.375 128.915,115.293 129.230,115.293 130.000 M195.693 130.000 C 195.693 130.770,195.775 131.085,195.876 130.700 C 195.976 130.315,195.976 129.685,195.876 129.300 C 195.775 128.915,195.693 129.230,195.693 130.000 M230.849 129.400 C 230.816 129.840,230.696 130.650,230.583 131.200 L 230.377 132.200 230.806 131.219 C 231.042 130.679,231.161 129.869,231.072 129.419 C 230.913 128.621,230.907 128.621,230.849 129.400 M129.293 130.400 C 129.293 131.170,129.375 131.485,129.476 131.100 C 129.576 130.715,129.576 130.085,129.476 129.700 C 129.375 129.315,129.293 129.630,129.293 130.400 M277.418 133.941 C 273.539 137.915,272.115 139.671,270.399 142.600 C 269.018 144.957,269.779 144.089,271.955 140.828 C 273.002 139.258,275.629 136.179,277.793 133.987 C 279.957 131.794,281.624 130.000,281.497 130.000 C 281.369 130.000,279.534 131.773,277.418 133.941 M187.246 131.025 C 187.220 131.490,187.767 132.363,188.500 133.025 L 189.800 134.200 188.739 133.000 C 188.155 132.340,187.591 131.440,187.485 131.000 C 187.298 130.221,187.292 130.221,187.246 131.025 M113.151 132.363 C 114.919 134.015,115.600 134.353,115.600 133.576 C 115.600 133.343,115.446 133.248,115.258 133.364 C 115.070 133.481,114.125 132.935,113.158 132.151 L 111.400 130.726 113.151 132.363 M194.200 132.951 C 193.384 133.743,193.267 133.977,193.833 133.680 C 194.704 133.224,195.828 132.052,195.557 131.882 C 195.471 131.828,194.860 132.309,194.200 132.951 M129.709 133.600 C 129.709 134.590,129.787 134.995,129.882 134.500 C 129.978 134.005,129.978 133.195,129.882 132.700 C 129.787 132.205,129.709 132.610,129.709 133.600 M238.493 133.200 C 238.493 133.970,238.575 134.285,238.676 133.900 C 238.776 133.515,238.776 132.885,238.676 132.500 C 238.575 132.115,238.493 132.430,238.493 133.200 M271.400 133.600 C 271.059 134.260,270.869 134.800,270.979 134.800 C 271.089 134.800,271.459 134.260,271.800 133.600 C 272.141 132.940,272.331 132.400,272.221 132.400 C 272.111 132.400,271.741 132.940,271.400 133.600 M138.815 133.800 C 138.788 134.355,141.269 140.465,141.448 140.285 C 141.528 140.205,140.973 138.623,140.214 136.770 C 139.456 134.916,138.826 133.580,138.815 133.800 M92.000 135.585 C 92.770 136.276,94.386 137.597,95.590 138.521 C 102.443 143.774,109.630 149.494,111.198 150.940 L 112.996 152.600 111.598 151.061 C 110.139 149.456,101.929 142.882,92.370 135.664 C 90.609 134.334,90.607 134.334,92.000 135.585 M229.249 136.200 C 229.216 136.640,229.096 137.450,228.983 138.000 L 228.777 139.000 229.206 138.019 C 229.442 137.479,229.561 136.669,229.472 136.219 C 229.313 135.421,229.307 135.421,229.249 136.200 M237.701 137.800 C 237.705 138.680,237.787 138.993,237.883 138.495 C 237.979 137.998,237.975 137.278,237.875 136.895 C 237.775 136.513,237.696 136.920,237.701 137.800 M130.493 138.000 C 130.493 138.770,130.575 139.085,130.676 138.700 C 130.776 138.315,130.776 137.685,130.676 137.300 C 130.575 136.915,130.493 137.230,130.493 138.000 M190.829 139.054 C 188.185 142.416,192.603 146.672,195.678 143.725 C 196.536 142.904,196.785 142.315,196.736 141.225 L 196.672 139.800 196.506 141.200 C 196.147 144.229,192.947 145.530,191.229 143.346 C 190.773 142.766,190.400 141.801,190.400 141.200 C 190.400 140.599,190.773 139.634,191.229 139.054 C 191.685 138.474,191.968 138.000,191.858 138.000 C 191.748 138.000,191.285 138.474,190.829 139.054 M228.560 145.000 C 228.561 148.300,228.622 149.597,228.698 147.882 C 228.773 146.167,228.772 143.467,228.697 141.882 C 228.621 140.297,228.559 141.700,228.560 145.000 M237.331 142.600 C 237.333 144.140,237.405 144.721,237.492 143.891 C 237.579 143.061,237.577 141.801,237.489 141.091 C 237.400 140.381,237.329 141.060,237.331 142.600 M131.844 143.800 C 132.173 145.271,132.402 145.590,132.394 144.567 C 132.391 144.145,132.205 143.530,131.982 143.200 C 131.685 142.762,131.648 142.924,131.844 143.800 M111.775 145.732 C 112.391 146.539,112.976 147.200,113.075 147.200 C 113.353 147.200,111.621 144.860,111.109 144.544 C 110.859 144.389,111.159 144.924,111.775 145.732 M143.878 145.795 C 144.244 146.562,144.614 147.119,144.701 147.032 C 144.884 146.849,143.670 144.400,143.396 144.400 C 143.295 144.400,143.512 145.028,143.878 145.795 M268.400 146.000 C 267.951 146.880,267.674 147.600,267.784 147.600 C 267.894 147.600,268.351 146.880,268.800 146.000 C 269.249 145.120,269.526 144.400,269.416 144.400 C 269.306 144.400,268.849 145.120,268.400 146.000 M236.928 148.400 C 236.928 149.830,237.001 150.415,237.089 149.700 C 237.178 148.985,237.178 147.815,237.089 147.100 C 237.001 146.385,236.928 146.970,236.928 148.400 M114.185 149.100 C 114.802 150.035,115.383 150.800,115.476 150.800 C 115.764 150.800,114.233 148.366,113.632 147.869 C 113.320 147.611,113.568 148.165,114.185 149.100 M145.400 148.800 C 145.741 149.460,146.111 150.000,146.221 150.000 C 146.331 150.000,146.141 149.460,145.800 148.800 C 145.459 148.140,145.089 147.600,144.979 147.600 C 144.869 147.600,145.059 148.140,145.400 148.800 M265.246 150.700 C 265.190 152.276,265.697 152.382,266.358 150.933 C 266.780 150.006,266.767 149.930,266.256 150.354 C 265.777 150.751,265.632 150.707,265.480 150.121 C 265.377 149.724,265.272 149.985,265.246 150.700 M193.762 152.154 C 193.645 152.459,193.619 153.494,193.705 154.454 C 193.854 156.125,193.864 156.105,193.947 154.000 L 194.034 151.800 194.841 153.200 C 195.286 153.970,195.528 154.240,195.379 153.800 C 195.231 153.360,195.019 152.685,194.908 152.300 C 194.667 151.462,194.058 151.384,193.762 152.154 M237.320 154.000 C 237.320 155.210,237.395 155.705,237.487 155.100 C 237.578 154.495,237.578 153.505,237.487 152.900 C 237.395 152.295,237.320 152.790,237.320 154.000 M112.800 152.925 C 112.800 152.994,113.385 153.579,114.100 154.225 L 115.400 155.400 114.225 154.100 C 113.130 152.888,112.800 152.616,112.800 152.925 M229.844 155.400 C 230.173 156.871,230.402 157.190,230.394 156.167 C 230.391 155.745,230.205 155.130,229.982 154.800 C 229.685 154.362,229.648 154.524,229.844 155.400 M195.656 155.200 C 195.656 155.530,195.811 156.160,196.000 156.600 C 196.217 157.104,196.344 157.178,196.344 156.800 C 196.344 156.470,196.189 155.840,196.000 155.400 C 195.783 154.896,195.656 154.822,195.656 155.200 M118.427 160.200 C 119.805 162.660,120.401 163.202,120.394 161.986 C 120.391 161.444,120.195 160.730,119.959 160.400 C 119.621 159.927,119.574 160.011,119.737 160.800 C 119.935 161.758,119.920 161.766,119.389 161.000 C 118.093 159.130,117.596 158.717,118.427 160.200 M194.800 160.109 C 194.800 160.643,196.908 166.225,197.244 166.582 C 197.442 166.792,197.049 165.443,196.370 163.584 C 195.226 160.447,194.800 159.506,194.800 160.109 M138.678 162.595 C 139.044 163.362,139.414 163.919,139.501 163.832 C 139.684 163.649,138.470 161.200,138.196 161.200 C 138.095 161.200,138.312 161.828,138.678 162.595 M153.524 161.800 C 153.756 162.240,154.784 163.500,155.807 164.600 L 157.669 166.600 155.753 164.200 C 153.329 161.162,153.002 160.811,153.524 161.800 M198.000 161.749 C 198.000 162.240,199.571 165.135,199.971 165.382 C 200.182 165.512,199.884 164.760,199.310 163.709 C 198.122 161.539,198.000 161.356,198.000 161.749 M232.000 161.745 C 232.000 162.179,234.387 166.800,234.612 166.800 C 234.722 166.800,234.248 165.675,233.558 164.300 C 232.252 161.694,232.000 161.281,232.000 161.745 M75.300 163.076 C 75.685 163.176,76.315 163.176,76.700 163.076 C 77.085 162.975,76.770 162.893,76.000 162.893 C 75.230 162.893,74.915 162.975,75.300 163.076 M80.267 163.173 C 82.519 163.541,84.912 165.281,86.439 167.661 C 87.134 168.744,87.782 169.551,87.879 169.454 C 88.975 168.359,82.333 162.770,80.031 162.850 L 78.600 162.900 80.267 163.173 M71.300 164.383 C 69.925 165.034,68.800 165.654,68.800 165.762 C 68.800 165.931,73.913 163.702,74.367 163.335 C 74.962 162.853,73.422 163.380,71.300 164.383 M240.005 165.377 C 239.999 165.854,243.162 171.200,243.450 171.200 C 243.569 171.200,243.305 170.615,242.864 169.900 C 242.423 169.185,241.601 167.790,241.036 166.800 C 240.472 165.810,240.007 165.170,240.005 165.377 M66.967 166.920 C 64.406 168.749,61.580 171.313,60.345 172.927 C 59.504 174.027,60.026 173.629,61.868 171.764 C 63.409 170.204,65.510 168.350,66.535 167.645 C 67.561 166.939,68.400 166.280,68.400 166.181 C 68.400 165.914,68.313 165.958,66.967 166.920 M141.203 167.400 C 142.636 169.834,144.364 172.331,144.803 172.602 C 145.184 172.837,141.037 166.468,140.520 166.022 C 140.377 165.900,140.685 166.520,141.203 167.400 M158.475 167.900 C 158.995 168.505,160.766 170.254,162.410 171.787 C 164.955 174.158,164.835 173.994,161.608 170.687 C 157.871 166.857,156.623 165.746,158.475 167.900 M201.883 168.262 C 203.166 170.124,205.513 172.699,207.843 174.800 C 208.696 175.570,207.953 174.670,206.191 172.800 C 204.428 170.930,202.480 168.770,201.862 168.000 L 200.738 166.600 201.883 168.262 M308.600 167.825 C 307.940 168.166,307.130 168.733,306.800 169.085 C 306.470 169.437,306.768 169.337,307.462 168.862 C 308.156 168.388,308.910 168.000,309.138 168.000 C 309.366 168.000,309.664 167.820,309.800 167.600 C 310.126 167.072,310.016 167.093,308.600 167.825 M317.601 169.396 C 318.370 170.273,319.045 171.068,319.100 171.162 C 319.155 171.256,319.287 171.247,319.393 171.141 C 319.499 171.035,318.824 170.240,317.893 169.374 L 316.201 167.800 317.601 169.396 M198.428 169.000 C 198.428 169.220,198.686 169.850,199.000 170.400 C 199.314 170.950,199.572 171.220,199.572 171.000 C 199.572 170.780,199.314 170.150,199.000 169.600 C 198.686 169.050,198.428 168.780,198.428 169.000 M236.840 170.577 C 237.302 171.361,237.843 172.103,238.041 172.225 C 238.239 172.348,238.023 171.807,237.560 171.023 C 237.098 170.239,236.557 169.497,236.359 169.375 C 236.161 169.252,236.377 169.793,236.840 170.577 M303.602 171.073 C 302.398 171.884,299.881 174.070,298.007 175.933 L 294.600 179.319 298.056 176.093 C 299.956 174.319,302.521 172.196,303.756 171.377 C 305.717 170.075,306.288 169.600,305.895 169.600 C 305.837 169.600,304.805 170.263,303.602 171.073 M323.064 175.316 C 325.009 177.471,327.423 180.484,328.430 182.013 C 330.122 184.584,331.376 186.199,330.592 184.800 C 328.925 181.820,326.152 178.218,323.139 175.116 L 319.529 171.400 323.064 175.316 M147.111 175.453 C 149.507 178.270,153.410 181.991,156.012 183.939 C 157.639 185.158,157.620 185.126,155.800 183.580 C 154.700 182.645,151.826 179.883,149.412 177.440 C 146.911 174.909,145.922 174.055,147.111 175.453 M203.468 176.563 C 205.574 178.878,211.337 183.896,210.076 182.317 C 209.788 181.956,208.618 180.928,207.476 180.032 C 206.334 179.137,204.590 177.424,203.600 176.226 C 202.610 175.028,201.651 174.037,201.468 174.024 C 201.286 174.011,202.186 175.154,203.468 176.563 M240.608 175.958 C 241.415 177.081,242.157 178.000,242.257 178.000 C 242.532 178.000,240.052 174.480,239.566 174.179 C 239.332 174.035,239.801 174.835,240.608 175.958 M246.416 175.763 C 247.168 176.809,247.956 177.773,248.167 177.903 C 248.378 178.033,247.935 177.284,247.184 176.237 C 246.432 175.191,245.644 174.227,245.433 174.097 C 245.222 173.967,245.665 174.716,246.416 175.763 M166.407 175.349 C 166.953 175.982,168.660 177.496,170.200 178.715 C 174.001 181.724,174.000 181.723,174.000 181.508 C 174.000 181.404,172.875 180.453,171.500 179.395 C 170.125 178.337,168.193 176.735,167.207 175.836 C 166.220 174.936,165.860 174.717,166.407 175.349 M58.344 175.500 C 57.193 176.889,56.706 177.600,56.904 177.600 C 57.014 177.600,57.586 176.970,58.173 176.200 C 59.263 174.771,59.395 174.232,58.344 175.500 M210.073 176.900 C 211.415 178.165,212.181 178.555,211.230 177.488 C 210.697 176.890,210.099 176.400,209.902 176.400 C 209.704 176.400,209.781 176.625,210.073 176.900 M89.877 179.800 C 89.998 181.560,90.165 183.075,90.249 183.167 C 90.519 183.464,90.350 180.250,89.999 178.400 C 89.742 177.047,89.712 177.394,89.877 179.800 M242.400 178.525 C 242.400 178.594,242.985 179.179,243.700 179.825 L 245.000 181.000 243.825 179.700 C 242.730 178.488,242.400 178.216,242.400 178.525 M293.923 180.300 C 293.218 181.121,292.690 182.000,292.901 182.000 C 292.983 182.000,293.449 181.460,293.937 180.800 C 294.901 179.496,294.892 179.172,293.923 180.300 M250.791 181.588 C 251.257 182.241,251.842 182.902,252.091 183.056 C 252.341 183.211,252.041 182.676,251.425 181.868 C 250.088 180.115,249.584 179.892,250.791 181.588 M174.543 181.907 C 174.678 182.126,176.456 183.432,178.494 184.810 C 180.532 186.189,181.930 187.050,181.600 186.724 C 180.718 185.852,174.255 181.441,174.543 181.907 M245.600 182.525 C 245.600 182.594,246.173 183.179,246.874 183.825 L 248.149 185.000 247.174 183.722 C 246.347 182.637,245.600 182.069,245.600 182.525 M53.265 183.817 C 52.595 185.288,52.723 185.602,53.447 184.265 C 53.786 183.640,53.988 183.054,53.896 182.963 C 53.805 182.871,53.521 183.256,53.265 183.817 M210.813 183.085 C 210.820 183.258,211.987 184.144,213.407 185.053 C 214.827 185.962,215.890 186.546,215.770 186.351 C 215.418 185.782,210.799 182.738,210.813 183.085 M253.191 184.788 C 253.657 185.441,254.242 186.102,254.491 186.256 C 254.741 186.411,254.441 185.876,253.825 185.068 C 252.488 183.315,251.984 183.092,253.191 184.788 M158.105 185.447 C 158.231 185.651,159.191 186.432,160.237 187.184 C 161.284 187.935,162.009 188.339,161.850 188.080 C 161.690 187.822,160.731 187.040,159.718 186.343 C 158.705 185.647,157.980 185.243,158.105 185.447 M255.591 187.988 C 256.057 188.641,256.642 189.302,256.891 189.456 C 257.141 189.611,256.841 189.076,256.225 188.268 C 254.888 186.515,254.384 186.292,255.591 187.988 M346.911 187.300 C 346.134 188.305,345.954 188.971,346.710 188.042 C 347.530 187.036,348.378 187.174,348.432 188.324 C 348.452 188.761,348.536 188.819,348.669 188.487 C 349.105 187.403,347.611 186.395,346.911 187.300 M182.800 187.620 C 184.187 188.561,184.978 188.835,184.000 188.036 C 183.450 187.586,182.820 187.217,182.600 187.215 C 182.380 187.213,182.470 187.396,182.800 187.620 M250.330 188.300 C 250.761 188.905,251.528 189.760,252.034 190.200 C 252.540 190.640,252.251 190.145,251.392 189.100 C 249.673 187.008,249.103 186.579,250.330 188.300 M227.400 188.596 C 228.294 189.339,230.828 190.709,230.200 190.110 C 229.980 189.900,229.080 189.324,228.200 188.830 C 227.320 188.335,226.960 188.230,227.400 188.596 M290.006 189.833 C 290.009 190.475,290.184 191.270,290.395 191.600 C 290.655 192.009,290.699 191.690,290.532 190.600 C 290.229 188.623,289.998 188.286,290.006 189.833 M331.759 190.562 C 331.641 190.871,331.607 191.726,331.683 192.462 C 331.806 193.635,331.847 193.566,332.015 191.900 C 332.211 189.952,332.139 189.574,331.759 190.562 M107.902 193.400 C 108.017 195.160,108.177 196.675,108.256 196.767 C 108.523 197.075,108.309 192.612,107.998 191.400 C 107.824 190.719,107.782 191.585,107.902 193.400 M231.200 190.820 C 232.587 191.761,233.378 192.035,232.400 191.236 C 231.850 190.786,231.220 190.417,231.000 190.415 C 230.780 190.413,230.870 190.596,231.200 190.820 M348.931 193.000 C 348.933 194.540,349.005 195.121,349.092 194.291 C 349.179 193.461,349.177 192.201,349.089 191.491 C 349.000 190.781,348.929 191.460,348.931 193.000 M189.200 191.379 C 189.200 191.489,189.740 191.859,190.400 192.200 C 191.060 192.541,191.600 192.731,191.600 192.621 C 191.600 192.511,191.060 192.141,190.400 191.800 C 189.740 191.459,189.200 191.269,189.200 191.379 M254.208 192.900 C 255.067 193.945,255.834 194.800,255.912 194.800 C 256.198 194.800,254.461 192.578,253.566 191.800 C 253.060 191.360,253.349 191.855,254.208 192.900 M290.801 192.646 C 290.800 193.025,292.098 194.956,292.786 195.600 C 292.904 195.710,293.675 196.566,294.500 197.501 C 295.325 198.437,296.000 199.043,296.000 198.848 C 296.000 198.654,295.175 197.618,294.167 196.547 C 293.159 195.476,291.989 194.060,291.568 193.400 C 291.147 192.740,290.802 192.401,290.801 192.646 M192.000 192.990 C 192.000 193.100,193.260 193.824,194.800 194.600 C 196.340 195.376,197.600 195.920,197.600 195.810 C 197.600 195.700,196.340 194.976,194.800 194.200 C 193.260 193.424,192.000 192.880,192.000 192.990 M97.507 194.700 C 96.017 196.938,94.468 198.333,93.269 198.516 L 92.200 198.680 93.285 198.740 C 94.452 198.805,96.741 196.762,98.123 194.423 C 99.138 192.704,98.708 192.897,97.507 194.700 M236.800 194.020 C 238.187 194.961,238.978 195.235,238.000 194.436 C 237.450 193.986,236.820 193.617,236.600 193.615 C 236.380 193.613,236.470 193.796,236.800 194.020 M263.612 199.200 C 266.596 203.717,268.290 206.049,267.390 204.400 C 266.628 203.003,261.463 195.350,260.911 194.800 C 260.580 194.470,261.795 196.450,263.612 199.200 M50.131 197.400 C 50.133 198.940,50.205 199.521,50.292 198.691 C 50.379 197.861,50.377 196.601,50.289 195.891 C 50.200 195.181,50.129 195.860,50.131 197.400 M173.600 195.567 C 174.563 196.352,175.200 196.608,175.200 196.210 C 175.200 196.106,174.615 195.735,173.900 195.386 L 172.600 194.752 173.600 195.567 M239.400 195.472 C 239.620 195.692,241.690 197.094,244.000 198.588 C 246.310 200.082,249.100 202.018,250.200 202.891 L 252.200 204.477 250.600 202.995 C 248.570 201.113,237.823 193.894,239.400 195.472 M258.981 199.000 C 262.247 203.197,262.744 203.785,262.191 202.800 C 261.534 201.629,257.294 196.176,256.587 195.592 C 256.192 195.267,257.269 196.800,258.981 199.000 M340.674 198.500 C 339.605 200.171,339.289 200.853,339.929 200.110 C 341.019 198.846,343.007 195.600,342.691 195.600 C 342.603 195.600,341.695 196.905,340.674 198.500 M198.028 196.140 C 198.417 196.565,204.889 199.645,205.051 199.482 C 205.136 199.398,203.726 198.625,201.918 197.764 C 198.195 195.992,197.707 195.788,198.028 196.140 M176.000 196.820 C 177.387 197.761,178.178 198.035,177.200 197.236 C 176.650 196.786,176.020 196.417,175.800 196.415 C 175.580 196.413,175.670 196.596,176.000 196.820 M238.000 198.187 C 238.000 198.297,238.900 198.843,240.000 199.400 C 241.100 199.957,242.000 200.323,242.000 200.213 C 242.000 200.103,241.100 199.557,240.000 199.000 C 238.900 198.443,238.000 198.077,238.000 198.187 M328.333 198.315 C 328.260 198.488,327.416 199.253,326.459 200.015 C 325.501 200.777,324.466 201.886,324.159 202.480 C 323.311 204.118,323.494 204.379,324.422 202.857 C 324.872 202.119,325.776 201.064,326.430 200.513 C 327.085 199.962,328.021 199.177,328.510 198.769 C 329.000 198.361,329.190 198.021,328.933 198.013 C 328.677 198.006,328.407 198.142,328.333 198.315 M205.600 199.796 C 205.600 200.070,208.049 201.284,208.232 201.101 C 208.319 201.014,207.762 200.644,206.995 200.278 C 206.228 199.912,205.600 199.695,205.600 199.796 M242.400 200.579 C 242.400 200.689,242.940 201.059,243.600 201.400 C 244.260 201.741,244.800 201.931,244.800 201.821 C 244.800 201.711,244.260 201.341,243.600 201.000 C 242.940 200.659,242.400 200.469,242.400 200.579 M295.600 201.159 C 295.600 201.430,294.565 202.663,293.300 203.899 L 291.000 206.145 293.111 204.426 C 295.214 202.713,296.274 201.340,295.832 200.899 C 295.705 200.771,295.600 200.888,295.600 201.159 M210.400 202.200 C 210.950 202.514,211.580 202.772,211.800 202.772 C 212.020 202.772,211.750 202.514,211.200 202.200 C 210.650 201.886,210.020 201.628,209.800 201.628 C 209.580 201.628,209.850 201.886,210.400 202.200 M337.036 203.538 L 335.472 205.400 337.216 203.714 C 338.176 202.786,338.880 201.948,338.780 201.852 C 338.681 201.755,337.896 202.514,337.036 203.538 M247.205 203.459 C 248.412 204.262,250.390 205.735,251.600 206.733 C 254.850 209.413,255.576 209.917,253.966 208.374 C 251.528 206.038,246.058 202.000,245.333 202.000 C 245.156 202.000,245.998 202.657,247.205 203.459 M214.000 203.800 C 214.550 204.114,215.180 204.372,215.400 204.372 C 215.620 204.372,215.350 204.114,214.800 203.800 C 214.250 203.486,213.620 203.228,213.400 203.228 C 213.180 203.228,213.450 203.486,214.000 203.800 M189.633 203.754 C 190.023 204.113,196.324 207.199,196.646 207.188 C 197.041 207.174,190.154 203.600,189.733 203.600 C 189.587 203.600,189.542 203.669,189.633 203.754 M253.800 206.400 C 254.659 207.280,255.452 208.000,255.562 208.000 C 255.672 208.000,255.059 207.280,254.200 206.400 C 253.341 205.520,252.548 204.800,252.438 204.800 C 252.328 204.800,252.941 205.520,253.800 206.400 M218.000 205.396 C 218.000 205.670,220.449 206.884,220.632 206.701 C 220.719 206.614,220.162 206.244,219.395 205.878 C 218.628 205.512,218.000 205.295,218.000 205.396 M333.772 206.945 C 332.907 207.685,331.570 208.675,330.800 209.144 C 330.030 209.613,329.598 209.998,329.840 209.999 C 330.478 210.001,336.164 205.652,335.572 205.614 C 335.447 205.606,334.637 206.205,333.772 206.945 M103.396 208.526 C 102.522 209.887,100.097 212.710,98.008 214.800 C 95.783 217.027,95.072 217.886,96.291 216.875 C 99.609 214.123,105.698 206.765,105.129 206.195 C 105.050 206.117,104.270 207.166,103.396 208.526 M115.800 208.363 C 114.700 208.999,113.080 210.182,112.200 210.993 L 110.600 212.466 112.400 211.079 C 115.506 208.684,118.066 207.323,117.382 208.430 C 117.236 208.666,117.495 208.622,117.958 208.333 C 120.321 206.858,118.358 206.885,115.800 208.363 M270.000 209.600 C 270.666 210.920,271.302 212.000,271.412 212.000 C 271.522 212.000,271.066 210.920,270.400 209.600 C 269.734 208.280,269.098 207.200,268.988 207.200 C 268.878 207.200,269.334 208.280,270.000 209.600 M341.863 210.100 C 340.706 211.854,340.425 212.447,341.153 211.600 C 342.280 210.288,344.217 207.200,343.914 207.200 C 343.838 207.200,342.915 208.505,341.863 210.100 M202.151 209.830 C 203.663 210.601,204.965 211.168,205.044 211.090 C 205.216 210.917,200.209 208.394,199.734 208.414 C 199.550 208.421,200.638 209.058,202.151 209.830 M324.419 209.345 C 325.097 210.073,327.771 211.001,327.384 210.374 C 327.257 210.168,326.843 210.000,326.465 210.000 C 326.087 210.000,325.333 209.703,324.789 209.341 C 323.868 208.727,323.843 208.727,324.419 209.345 M226.433 209.352 C 226.841 209.724,230.800 211.593,230.800 211.413 C 230.800 211.188,226.980 209.200,226.547 209.200 C 226.393 209.200,226.342 209.268,226.433 209.352 M285.312 210.100 C 284.302 211.198,282.802 213.653,282.806 214.200 C 282.808 214.420,283.271 213.790,283.835 212.800 C 284.398 211.810,285.237 210.595,285.699 210.100 C 286.161 209.605,286.449 209.200,286.339 209.200 C 286.229 209.200,285.767 209.605,285.312 210.100 M267.109 211.774 C 267.692 212.978,268.232 213.902,268.307 213.826 C 268.500 213.634,266.781 210.036,266.378 209.787 C 266.197 209.675,266.526 210.569,267.109 211.774 M256.806 211.882 C 257.776 213.027,258.629 213.904,258.702 213.831 C 258.991 213.542,257.444 210.849,257.109 211.056 C 256.911 211.178,256.365 210.946,255.896 210.539 C 255.426 210.133,255.835 210.737,256.806 211.882 M114.598 211.359 C 114.379 211.666,113.783 212.476,113.273 213.159 C 111.902 214.994,112.409 214.665,114.135 212.600 C 114.963 211.610,115.495 210.800,115.318 210.800 C 115.141 210.800,114.817 211.051,114.598 211.359 M205.633 211.349 C 206.045 211.717,208.400 212.800,208.400 212.621 C 208.400 212.390,206.182 211.200,205.753 211.200 C 205.596 211.200,205.542 211.267,205.633 211.349 M57.600 215.000 C 59.017 216.430,60.267 217.600,60.377 217.600 C 60.487 217.600,59.417 216.430,58.000 215.000 C 56.583 213.570,55.333 212.400,55.223 212.400 C 55.113 212.400,56.183 213.570,57.600 215.000 M208.800 212.950 C 208.800 213.148,214.782 216.007,215.142 215.981 C 215.458 215.959,211.887 214.083,210.100 213.334 C 209.385 213.034,208.800 212.862,208.800 212.950 M336.800 216.200 C 335.161 217.850,333.910 219.200,334.020 219.200 C 334.130 219.200,335.561 217.850,337.200 216.200 C 338.839 214.550,340.090 213.200,339.980 213.200 C 339.870 213.200,338.439 214.550,336.800 216.200 M238.000 215.564 C 238.550 216.014,239.180 216.383,239.400 216.385 C 239.828 216.388,239.105 215.834,237.800 215.160 C 237.269 214.885,237.336 215.021,238.000 215.564 M273.200 216.287 C 273.200 216.543,273.380 216.864,273.600 217.000 C 273.820 217.136,274.021 217.642,274.046 218.124 C 274.082 218.789,274.137 218.833,274.274 218.307 C 274.374 217.927,274.173 217.211,273.828 216.718 C 273.483 216.225,273.200 216.031,273.200 216.287 M105.188 217.677 L 104.288 219.000 105.384 217.874 C 105.988 217.254,106.392 216.659,106.284 216.551 C 106.176 216.443,105.682 216.949,105.188 217.677 M109.375 218.268 C 108.759 219.076,108.459 219.611,108.709 219.456 C 109.221 219.140,110.953 216.800,110.675 216.800 C 110.576 216.800,109.991 217.461,109.375 218.268 M61.600 218.547 C 61.600 218.854,64.455 220.878,64.634 220.699 C 64.734 220.599,64.093 220.038,63.208 219.453 C 62.324 218.868,61.600 218.460,61.600 218.547 M101.387 221.278 C 99.933 222.787,99.628 223.217,100.607 222.378 C 102.121 221.080,104.231 218.800,103.918 218.800 C 103.839 218.800,102.701 219.915,101.387 221.278 M157.500 219.889 C 158.215 219.978,159.385 219.978,160.100 219.889 C 160.815 219.801,160.230 219.728,158.800 219.728 C 157.370 219.728,156.785 219.801,157.500 219.889 M105.748 223.089 C 102.523 227.330,102.331 227.600,102.527 227.600 C 102.669 227.600,104.329 225.491,108.118 220.500 C 108.327 220.225,108.408 220.000,108.297 220.000 C 108.187 220.000,107.040 221.390,105.748 223.089 M150.400 220.818 C 149.962 221.115,150.124 221.152,151.000 220.956 C 152.471 220.627,152.790 220.398,151.767 220.406 C 151.345 220.409,150.730 220.595,150.400 220.818 M165.233 220.543 C 165.325 220.621,166.030 220.801,166.800 220.942 C 167.785 221.123,168.022 221.082,167.600 220.806 C 167.058 220.450,164.837 220.203,165.233 220.543 M169.233 221.344 C 169.325 221.423,169.940 221.608,170.600 221.756 C 171.476 221.952,171.638 221.915,171.200 221.618 C 170.660 221.253,168.832 220.998,169.233 221.344 M249.563 224.300 C 250.968 225.895,252.198 227.200,252.298 227.200 C 252.558 227.200,248.557 222.623,247.715 221.957 C 247.328 221.651,248.159 222.705,249.563 224.300 M287.267 223.433 C 289.222 225.112,291.600 226.660,291.600 226.252 C 291.600 226.159,290.735 225.528,289.677 224.849 C 288.619 224.171,287.328 223.162,286.807 222.608 C 286.287 222.053,285.697 221.600,285.498 221.600 C 285.298 221.600,286.094 222.425,287.267 223.433 M172.358 222.366 C 172.806 222.650,172.767 222.757,172.158 222.913 C 171.516 223.078,171.537 223.114,172.300 223.154 C 172.854 223.182,173.200 222.969,173.200 222.600 C 173.200 222.270,172.885 222.003,172.500 222.006 C 171.940 222.011,171.912 222.083,172.358 222.366 M71.800 223.600 C 72.240 223.789,72.870 223.944,73.200 223.944 C 73.578 223.944,73.504 223.817,73.000 223.600 C 72.560 223.411,71.930 223.256,71.600 223.256 C 71.222 223.256,71.296 223.383,71.800 223.600 M325.600 224.400 C 324.390 225.039,323.541 225.571,323.713 225.581 C 324.138 225.607,328.000 223.636,328.000 223.393 C 328.000 223.126,328.055 223.103,325.600 224.400 M142.693 224.700 C 141.895 225.305,140.839 226.340,140.346 227.000 C 139.688 227.880,139.922 227.748,141.224 226.505 C 142.201 225.573,143.360 224.544,143.800 224.218 C 144.240 223.892,144.497 223.620,144.371 223.613 C 144.245 223.606,143.490 224.095,142.693 224.700 M276.276 226.246 C 276.540 228.955,276.732 229.333,276.762 227.200 C 276.776 226.210,276.630 225.151,276.437 224.846 C 276.221 224.505,276.159 225.042,276.276 226.246 M95.200 226.259 C 93.157 227.704,92.776 228.201,94.468 227.214 C 95.276 226.744,96.153 226.098,96.417 225.779 C 97.058 225.007,96.859 225.085,95.200 226.259 M232.400 225.725 C 232.400 225.824,233.061 226.409,233.868 227.025 C 234.676 227.641,235.211 227.941,235.056 227.691 C 234.740 227.179,232.400 225.447,232.400 225.725 M160.800 227.759 C 159.810 228.496,158.460 229.702,157.800 230.440 C 156.903 231.443,157.114 231.329,158.639 229.991 C 159.761 229.006,161.288 227.795,162.034 227.300 C 162.779 226.805,163.211 226.404,162.994 226.410 C 162.777 226.415,161.790 227.023,160.800 227.759 M272.468 226.800 C 272.488 227.839,273.118 229.546,273.132 228.600 C 273.138 228.160,272.989 227.440,272.800 227.000 C 272.589 226.510,272.461 226.432,272.468 226.800 M253.230 229.000 C 253.724 229.880,254.300 230.780,254.510 231.000 C 255.109 231.628,253.739 229.094,252.996 228.200 C 252.630 227.760,252.735 228.120,253.230 229.000 M98.913 231.260 C 97.201 233.052,94.450 235.419,92.800 236.519 C 91.150 237.618,90.119 238.406,90.508 238.269 C 92.659 237.510,103.551 228.000,102.269 228.000 C 102.135 228.000,100.625 229.467,98.913 231.260 M236.000 228.464 C 237.926 230.395,241.232 233.198,240.000 231.855 C 239.230 231.016,237.880 229.774,237.000 229.096 C 236.120 228.418,235.670 228.133,236.000 228.464 M57.440 228.900 C 57.558 229.175,58.227 229.842,58.927 230.382 L 60.200 231.365 59.400 230.423 L 58.600 229.480 59.800 229.727 C 60.833 229.939,60.778 229.868,59.400 229.216 C 57.463 228.300,57.161 228.251,57.440 228.900 M138.713 229.100 C 137.826 230.117,137.098 231.632,137.368 231.901 C 137.495 232.029,137.600 231.948,137.600 231.722 C 137.600 231.497,138.045 230.657,138.588 229.856 C 139.648 228.294,139.702 227.966,138.713 229.100 M309.400 229.200 C 308.322 229.474,308.302 229.506,309.200 229.513 C 309.750 229.517,310.650 229.376,311.200 229.200 C 312.544 228.769,311.092 228.769,309.400 229.200 M276.934 232.400 C 276.934 234.050,277.005 234.725,277.091 233.900 C 277.178 233.075,277.178 231.725,277.091 230.900 C 277.005 230.075,276.934 230.750,276.934 232.400 M63.034 230.772 C 63.420 231.134,66.344 231.841,66.000 231.489 C 65.890 231.376,65.095 231.091,64.234 230.856 C 63.373 230.621,62.833 230.583,63.034 230.772 M86.200 231.014 C 85.200 231.496,85.166 231.551,86.000 231.348 C 87.133 231.071,88.407 230.421,87.800 230.430 C 87.580 230.433,86.860 230.696,86.200 231.014 M60.998 231.937 C 61.434 232.452,62.153 233.059,62.596 233.286 C 63.445 233.721,63.321 233.587,61.403 231.994 C 60.248 231.035,60.234 231.033,60.998 231.937 M67.105 231.883 C 67.602 231.979,68.322 231.975,68.705 231.875 C 69.087 231.775,68.680 231.696,67.800 231.701 C 66.920 231.705,66.607 231.787,67.105 231.883 M76.200 232.400 L 71.000 232.637 76.000 232.690 C 78.750 232.720,81.360 232.589,81.800 232.400 C 82.240 232.211,82.330 232.080,82.000 232.110 C 81.670 232.139,79.060 232.270,76.200 232.400 M155.365 233.411 C 154.773 234.187,154.359 234.887,154.444 234.967 C 154.530 235.046,155.093 234.412,155.696 233.556 C 157.065 231.614,156.818 231.506,155.365 233.411 M63.600 233.766 C 63.600 234.234,68.514 237.207,70.597 237.999 C 72.415 238.690,71.643 238.097,69.100 236.848 C 67.725 236.172,65.925 235.163,65.100 234.604 C 64.275 234.045,63.600 233.668,63.600 233.766 M317.511 235.093 C 318.451 235.178,319.891 235.177,320.711 235.091 C 321.530 235.005,320.760 234.936,319.000 234.937 C 317.240 234.939,316.570 235.009,317.511 235.093 M276.464 237.067 C 276.429 237.764,276.296 238.664,276.170 239.067 C 275.953 239.759,275.965 239.760,276.394 239.091 C 276.645 238.702,276.777 237.802,276.689 237.091 L 276.528 235.800 276.464 237.067 M308.400 236.400 C 307.596 236.657,307.557 236.723,308.200 236.732 C 308.640 236.738,309.360 236.589,309.800 236.400 C 310.819 235.962,309.768 235.962,308.400 236.400 M330.800 237.600 C 331.570 238.022,332.380 238.366,332.600 238.366 C 332.820 238.366,332.370 238.022,331.600 237.600 C 330.830 237.178,330.020 236.834,329.800 236.834 C 329.580 236.834,330.030 237.178,330.800 237.600 M256.682 239.000 C 256.809 240.100,256.977 241.075,257.056 241.167 C 257.355 241.514,257.128 238.564,256.797 237.800 C 256.574 237.285,256.533 237.713,256.682 239.000 M303.872 237.935 C 302.514 238.535,302.231 239.200,303.333 239.200 C 303.553 239.200,303.613 239.080,303.466 238.933 C 303.319 238.786,303.874 238.351,304.700 237.965 C 306.624 237.067,305.896 237.040,303.872 237.935 M87.400 239.229 C 86.520 239.652,86.250 239.886,86.800 239.749 C 87.933 239.467,90.012 238.425,89.400 238.446 C 89.180 238.453,88.280 238.806,87.400 239.229 M74.033 239.344 C 74.125 239.423,74.740 239.608,75.400 239.756 C 76.276 239.952,76.438 239.915,76.000 239.618 C 75.460 239.253,73.632 238.998,74.033 239.344 M304.433 239.343 C 304.525 239.421,305.230 239.601,306.000 239.742 C 306.985 239.923,307.222 239.882,306.800 239.606 C 306.258 239.250,304.037 239.003,304.433 239.343 M334.800 239.343 C 334.800 239.443,335.670 240.150,336.734 240.914 C 337.797 241.678,339.912 243.429,341.434 244.804 L 344.200 247.304 341.381 244.527 C 338.888 242.070,334.800 238.851,334.800 239.343 M52.480 240.080 C 52.216 240.344,52.005 240.749,52.012 240.980 C 52.019 241.211,52.219 241.065,52.457 240.656 C 52.851 239.977,53.107 240.121,55.345 242.280 C 56.695 243.582,58.151 244.907,58.579 245.224 C 59.008 245.541,57.947 244.405,56.222 242.700 C 54.497 240.995,53.058 239.600,53.023 239.600 C 52.988 239.600,52.744 239.816,52.480 240.080 M77.900 240.282 C 78.395 240.378,79.205 240.378,79.700 240.282 C 80.195 240.187,79.790 240.109,78.800 240.109 C 77.810 240.109,77.405 240.187,77.900 240.282 M82.905 240.287 C 83.514 240.379,84.414 240.377,84.905 240.282 C 85.397 240.187,84.900 240.111,83.800 240.114 C 82.700 240.117,82.297 240.195,82.905 240.287 M152.509 242.400 C 152.509 243.390,152.587 243.795,152.682 243.300 C 152.778 242.805,152.778 241.995,152.682 241.500 C 152.587 241.005,152.509 241.410,152.509 242.400 M245.656 241.600 C 245.656 241.930,245.811 242.560,246.000 243.000 C 246.217 243.504,246.344 243.578,246.344 243.200 C 246.344 242.870,246.189 242.240,246.000 241.800 C 245.783 241.296,245.656 241.222,245.656 241.600 M134.540 244.800 C 134.540 246.670,134.609 247.435,134.693 246.500 C 134.777 245.565,134.777 244.035,134.693 243.100 C 134.609 242.165,134.540 242.930,134.540 244.800 M315.368 242.617 C 316.670 243.158,317.930 243.592,318.168 243.583 C 318.406 243.574,317.534 243.124,316.232 242.583 C 314.930 242.042,313.670 241.608,313.432 241.617 C 313.194 241.626,314.066 242.076,315.368 242.617 M256.872 245.400 C 256.826 246.720,256.696 248.250,256.583 248.800 L 256.377 249.800 256.806 248.819 C 257.041 248.280,257.171 246.750,257.094 245.419 L 256.954 243.000 256.872 245.400 M318.800 243.787 C 318.800 243.897,319.700 244.443,320.800 245.000 C 321.900 245.557,322.800 245.923,322.800 245.813 C 322.800 245.703,321.900 245.157,320.800 244.600 C 319.700 244.043,318.800 243.677,318.800 243.787 M272.054 247.900 C 271.385 248.945,270.271 250.520,269.578 251.400 C 268.608 252.631,268.719 252.559,270.059 251.087 C 271.648 249.342,273.873 246.000,273.446 246.000 C 273.349 246.000,272.722 246.855,272.054 247.900 M323.200 246.121 C 323.200 246.212,324.235 246.951,325.500 247.763 C 326.765 248.575,327.308 248.821,326.706 248.310 C 325.518 247.300,323.200 245.853,323.200 246.121 M269.780 248.445 C 269.370 249.354,268.165 251.360,267.103 252.902 C 266.041 254.444,265.236 255.769,265.315 255.848 C 265.596 256.129,267.988 253.505,267.771 253.153 C 267.649 252.956,267.897 252.301,268.322 251.697 C 269.373 250.207,270.894 247.161,270.690 246.957 C 270.600 246.866,270.190 247.536,269.780 248.445 M65.600 248.394 C 65.930 248.611,66.635 248.791,67.167 248.794 C 68.451 248.802,68.125 248.575,66.400 248.258 C 65.415 248.077,65.178 248.118,65.600 248.394 M328.000 249.483 C 328.000 249.693,328.469 250.116,329.041 250.422 C 329.614 250.729,331.543 252.514,333.327 254.390 C 335.111 256.265,336.186 257.260,335.715 256.600 C 334.133 254.381,328.000 248.724,328.000 249.483 M345.600 249.728 C 345.600 249.975,347.474 252.822,347.877 253.190 C 348.004 253.305,347.877 252.950,347.595 252.400 C 347.009 251.260,345.600 249.373,345.600 249.728 M134.868 250.800 C 134.888 251.839,135.518 253.546,135.532 252.600 C 135.538 252.160,135.389 251.440,135.200 251.000 C 134.989 250.510,134.861 250.432,134.868 250.800 M66.672 253.819 C 66.302 254.593,66.004 255.446,66.009 255.714 C 66.014 255.981,66.377 255.408,66.816 254.440 C 67.767 252.344,67.639 251.791,66.672 253.819 M46.656 257.284 C 46.521 257.788,46.430 258.740,46.453 259.400 C 46.481 260.228,46.597 259.984,46.826 258.613 C 47.176 256.523,47.074 255.726,46.656 257.284 M282.900 258.207 C 281.777 259.931,281.741 260.536,282.840 259.200 L 283.663 258.200 283.426 259.400 C 283.234 260.371,283.271 260.465,283.619 259.891 C 283.856 259.502,283.993 258.652,283.925 258.004 L 283.800 256.825 282.900 258.207 M112.000 258.701 C 112.000 260.374,112.413 261.426,112.815 260.775 C 113.022 260.441,113.327 260.686,113.770 261.542 C 114.128 262.234,114.503 262.800,114.604 262.800 C 114.765 262.800,112.511 258.074,112.140 257.633 C 112.063 257.542,112.000 258.022,112.000 258.701 M251.200 260.446 C 250.220 261.791,248.789 263.411,248.018 264.046 C 247.248 264.680,246.828 265.200,247.085 265.200 C 247.609 265.200,251.285 261.148,252.494 259.238 C 253.789 257.194,253.099 257.837,251.200 260.446 M241.007 261.500 C 240.002 263.001,236.191 266.811,233.585 268.922 L 232.200 270.043 233.800 268.948 C 236.838 266.867,243.305 260.000,242.225 260.000 C 242.107 260.000,241.559 260.675,241.007 261.500 M338.600 261.200 C 338.941 261.860,339.311 262.400,339.421 262.400 C 339.531 262.400,339.341 261.860,339.000 261.200 C 338.659 260.540,338.289 260.000,338.179 260.000 C 338.069 260.000,338.259 260.540,338.600 261.200 M194.989 261.218 C 194.623 261.810,195.553 262.800,196.475 262.800 C 197.881 262.800,198.916 262.022,198.377 261.372 C 197.828 260.711,195.371 260.599,194.989 261.218 M198.193 261.588 C 198.485 262.061,196.637 262.577,195.801 262.256 C 195.470 262.129,195.200 261.839,195.200 261.613 C 195.200 261.089,197.871 261.068,198.193 261.588 M46.159 267.600 C 46.159 270.790,46.221 272.095,46.297 270.500 C 46.373 268.905,46.373 266.295,46.297 264.700 C 46.221 263.105,46.159 264.410,46.159 267.600 M158.840 262.639 C 159.685 263.905,162.031 266.504,162.182 266.342 C 162.255 266.264,161.407 265.210,160.297 264.000 C 159.187 262.790,158.531 262.177,158.840 262.639 M141.024 265.800 C 142.470 267.906,144.232 269.783,146.200 271.319 C 147.080 272.005,146.528 271.314,144.973 269.783 C 143.419 268.252,141.646 266.370,141.035 265.600 L 139.924 264.200 141.024 265.800 M281.850 265.650 C 281.709 266.353,281.669 267.002,281.759 267.092 C 281.850 267.183,282.048 266.691,282.200 266.000 C 282.352 265.309,282.393 264.659,282.291 264.558 C 282.189 264.456,281.991 264.947,281.850 265.650 M62.909 268.400 C 62.909 269.390,62.987 269.795,63.082 269.300 C 63.178 268.805,63.178 267.995,63.082 267.500 C 62.987 267.005,62.909 267.410,62.909 268.400 M162.522 267.047 C 163.159 268.143,172.294 275.040,172.644 274.689 C 172.737 274.596,171.685 273.790,170.307 272.899 C 168.928 272.007,166.900 270.506,165.800 269.563 C 162.782 266.975,162.238 266.558,162.522 267.047 M276.302 269.467 C 275.478 270.665,274.980 271.536,275.196 271.402 C 275.709 271.085,278.119 267.582,277.939 267.417 C 277.862 267.347,277.126 268.269,276.302 269.467 M241.800 269.048 C 240.700 269.820,238.495 271.176,236.900 272.062 C 235.305 272.948,234.000 273.762,234.000 273.872 C 234.000 274.196,239.946 270.838,242.057 269.321 C 243.126 268.553,244.000 267.852,244.000 267.762 C 244.000 267.512,243.931 267.552,241.800 269.048 M227.800 272.400 C 227.140 272.837,226.780 273.192,227.000 273.188 C 227.401 273.182,229.576 271.623,229.200 271.612 C 229.090 271.608,228.460 271.963,227.800 272.400 M272.625 274.300 C 271.594 275.565,268.827 278.566,266.476 280.969 C 263.188 284.329,262.825 284.791,264.905 282.969 C 267.147 281.005,269.765 278.155,274.337 272.700 C 274.660 272.315,274.828 272.000,274.711 272.000 C 274.594 272.000,273.655 273.035,272.625 274.300 M121.461 273.832 C 122.929 275.937,124.680 278.000,124.996 278.000 C 125.215 278.000,124.320 276.875,121.177 273.200 C 120.707 272.650,120.835 272.935,121.461 273.832 M149.387 273.579 C 149.655 274.013,153.270 276.064,153.450 275.884 C 153.520 275.813,152.585 275.186,151.372 274.489 C 150.159 273.792,149.266 273.383,149.387 273.579 M224.000 274.200 C 223.450 274.514,223.180 274.772,223.400 274.772 C 223.620 274.772,224.250 274.514,224.800 274.200 C 225.350 273.886,225.620 273.628,225.400 273.628 C 225.180 273.628,224.550 273.886,224.000 274.200 M278.372 274.701 C 278.063 275.305,276.968 277.285,275.938 279.100 C 274.024 282.474,273.642 283.598,275.326 280.900 C 276.817 278.512,279.235 273.901,279.078 273.744 C 278.999 273.666,278.681 274.096,278.372 274.701 M231.700 274.634 C 230.985 274.946,230.400 275.294,230.400 275.407 C 230.400 275.615,233.206 274.527,233.546 274.187 C 233.886 273.847,233.020 274.057,231.700 274.634 M46.428 276.833 C 46.444 277.585,46.612 278.560,46.803 279.000 C 47.026 279.515,47.067 279.087,46.918 277.800 C 46.644 275.422,46.389 274.919,46.428 276.833 M175.200 275.796 C 175.200 276.070,177.649 277.284,177.832 277.101 C 177.919 277.014,177.362 276.644,176.595 276.278 C 175.828 275.912,175.200 275.695,175.200 275.796 M154.000 276.219 C 154.000 276.513,156.449 277.650,156.809 277.524 C 157.004 277.456,156.451 277.098,155.582 276.730 C 154.712 276.361,154.000 276.131,154.000 276.219 M344.548 281.600 C 344.548 283.910,344.614 284.855,344.695 283.700 C 344.776 282.545,344.776 280.655,344.695 279.500 C 344.614 278.345,344.548 279.290,344.548 281.600 M211.200 278.400 C 210.396 278.657,210.357 278.723,211.000 278.732 C 211.440 278.738,212.160 278.589,212.600 278.400 C 213.619 277.962,212.568 277.962,211.200 278.400 M62.909 280.000 C 62.909 280.990,62.987 281.395,63.082 280.900 C 63.178 280.405,63.178 279.595,63.082 279.100 C 62.987 278.605,62.909 279.010,62.909 280.000 M126.811 280.200 C 128.905 282.540,135.375 288.514,136.809 289.431 C 137.354 289.779,136.900 289.291,135.800 288.346 C 134.700 287.401,131.825 284.732,129.411 282.414 C 126.997 280.096,125.827 279.100,126.811 280.200 M184.600 279.200 C 185.040 279.389,185.670 279.544,186.000 279.544 C 186.378 279.544,186.304 279.417,185.800 279.200 C 185.360 279.011,184.730 278.856,184.400 278.856 C 184.022 278.856,184.096 278.983,184.600 279.200 M207.400 279.200 C 206.293 279.482,206.277 279.509,207.200 279.547 C 207.750 279.569,208.470 279.413,208.800 279.200 C 209.481 278.760,209.129 278.760,207.400 279.200 M162.000 279.582 C 162.330 279.805,162.945 279.991,163.367 279.994 C 164.390 280.002,164.071 279.773,162.600 279.444 C 161.724 279.248,161.562 279.285,162.000 279.582 M189.800 280.015 C 191.120 280.179,193.100 280.305,194.200 280.296 C 196.097 280.279,196.066 280.263,193.600 279.986 C 192.170 279.825,190.190 279.699,189.200 279.706 C 187.573 279.716,187.631 279.746,189.800 280.015 M202.705 279.883 C 203.202 279.979,203.922 279.975,204.305 279.875 C 204.687 279.775,204.280 279.696,203.400 279.701 C 202.520 279.705,202.207 279.787,202.705 279.883 M120.786 281.573 C 121.227 282.438,121.761 283.252,121.971 283.382 C 122.182 283.512,121.899 282.805,121.343 281.809 C 120.101 279.587,119.682 279.409,120.786 281.573 M165.000 280.400 C 165.440 280.589,166.160 280.738,166.600 280.732 C 167.243 280.723,167.204 280.657,166.400 280.400 C 165.032 279.962,163.981 279.962,165.000 280.400 M197.900 280.289 C 198.615 280.378,199.785 280.378,200.500 280.289 C 201.215 280.201,200.630 280.128,199.200 280.128 C 197.770 280.128,197.185 280.201,197.900 280.289 M214.200 280.400 C 213.111 280.677,213.093 280.707,214.000 280.725 C 214.550 280.735,215.360 280.589,215.800 280.400 C 216.786 279.976,215.866 279.976,214.200 280.400 M171.646 282.037 C 172.165 282.365,175.529 282.572,175.167 282.253 C 175.075 282.172,174.121 282.012,173.046 281.896 C 171.851 281.768,171.307 281.822,171.646 282.037 M206.200 282.000 L 204.200 282.274 206.000 282.331 C 206.990 282.362,208.070 282.213,208.400 282.000 C 208.730 281.787,208.820 281.638,208.600 281.669 C 208.380 281.700,207.300 281.849,206.200 282.000 M201.300 282.676 C 201.685 282.776,202.315 282.776,202.700 282.676 C 203.085 282.575,202.770 282.493,202.000 282.493 C 201.230 282.493,200.915 282.575,201.300 282.676 M180.307 283.090 C 181.026 283.179,182.106 283.177,182.707 283.086 C 183.308 282.995,182.720 282.922,181.400 282.924 C 180.080 282.926,179.588 283.001,180.307 283.090 M197.500 283.082 C 197.995 283.178,198.805 283.178,199.300 283.082 C 199.795 282.987,199.390 282.909,198.400 282.909 C 197.410 282.909,197.005 282.987,197.500 283.082 M122.424 284.128 C 122.392 284.563,125.818 289.351,126.661 290.050 C 127.024 290.352,126.439 289.404,125.360 287.943 C 124.282 286.483,123.186 284.953,122.924 284.544 C 122.661 284.135,122.436 283.948,122.424 284.128 M271.185 286.018 C 270.480 286.909,269.970 287.699,270.052 287.774 C 270.133 287.850,270.791 287.122,271.513 286.156 C 273.162 283.950,272.908 283.843,271.185 286.018 M63.606 285.433 C 63.609 285.855,63.795 286.470,64.018 286.800 C 64.315 287.238,64.352 287.076,64.156 286.200 C 63.827 284.729,63.598 284.410,63.606 285.433 M260.592 286.312 C 259.927 286.910,258.667 288.000,257.792 288.734 C 256.829 289.541,256.674 289.756,257.400 289.278 C 258.713 288.413,262.322 285.236,262.000 285.228 C 261.890 285.226,261.256 285.713,260.592 286.312 M265.610 292.198 L 261.820 296.200 265.792 292.315 C 267.977 290.179,269.682 288.378,269.582 288.313 C 269.482 288.249,267.694 289.997,265.610 292.198 M343.850 289.650 C 343.709 290.353,343.669 291.002,343.759 291.092 C 343.850 291.183,344.048 290.691,344.200 290.000 C 344.352 289.309,344.393 288.659,344.291 288.558 C 344.189 288.456,343.991 288.947,343.850 289.650 M128.699 292.600 C 129.601 293.700,131.473 295.680,132.860 297.000 C 135.086 299.118,135.010 299.000,132.215 296.000 C 127.725 291.181,126.818 290.304,128.699 292.600 M252.423 292.237 C 249.715 293.925,248.805 294.831,251.105 293.550 C 252.686 292.670,255.256 290.795,254.800 290.855 C 254.690 290.870,253.621 291.492,252.423 292.237 M145.200 294.960 C 145.200 295.169,147.963 296.800,148.316 296.800 C 148.464 296.800,147.923 296.350,147.114 295.800 C 145.697 294.837,145.200 294.619,145.200 294.960 M247.100 295.429 C 245.605 296.240,245.696 296.578,247.200 295.800 C 247.860 295.459,248.400 295.094,248.400 294.990 C 248.400 294.732,248.357 294.747,247.100 295.429 M259.551 297.634 L 257.800 299.268 259.700 297.786 C 261.436 296.432,261.859 296.000,261.451 296.000 C 261.370 296.000,260.515 296.735,259.551 297.634 M242.498 297.887 C 240.902 298.681,239.661 299.394,239.739 299.472 C 239.918 299.651,245.600 296.861,245.600 296.595 C 245.600 296.332,245.761 296.265,242.498 297.887 M135.600 299.325 C 135.600 299.394,136.185 299.979,136.900 300.625 L 138.200 301.800 137.025 300.500 C 135.930 299.288,135.600 299.016,135.600 299.325 M255.985 300.429 L 254.600 301.658 256.100 300.581 C 257.426 299.630,257.857 299.200,257.485 299.200 C 257.422 299.200,256.747 299.753,255.985 300.429 M155.200 300.200 C 155.750 300.514,156.380 300.772,156.600 300.772 C 156.820 300.772,156.550 300.514,156.000 300.200 C 155.450 299.886,154.820 299.628,154.600 299.628 C 154.380 299.628,154.650 299.886,155.200 300.200 M138.400 301.725 C 138.400 301.824,139.061 302.409,139.868 303.025 C 140.676 303.641,141.211 303.941,141.056 303.691 C 140.740 303.179,138.400 301.447,138.400 301.725 M160.600 302.371 C 161.480 302.794,162.470 303.147,162.800 303.155 C 163.486 303.171,161.439 302.227,159.974 301.851 C 159.438 301.714,159.720 301.948,160.600 302.371 M251.887 303.031 C 250.629 303.818,249.600 304.558,249.600 304.677 C 249.600 304.795,250.079 304.578,250.665 304.194 C 251.251 303.810,252.331 303.141,253.065 302.708 C 254.216 302.029,254.690 301.600,254.287 301.600 C 254.226 301.600,253.146 302.244,251.887 303.031 M338.800 304.000 C 338.134 305.320,337.678 306.400,337.788 306.400 C 337.898 306.400,338.534 305.320,339.200 304.000 C 339.866 302.680,340.322 301.600,340.212 301.600 C 340.102 301.600,339.466 302.680,338.800 304.000 M231.000 302.614 C 229.385 303.354,230.351 303.355,232.054 302.616 C 232.794 302.294,233.130 302.039,232.800 302.048 C 232.470 302.057,231.660 302.312,231.000 302.614 M349.472 303.819 C 348.532 305.789,348.664 306.124,349.647 304.262 C 350.093 303.416,350.387 302.654,350.301 302.567 C 350.214 302.481,349.841 303.044,349.472 303.819 M169.400 305.200 C 169.840 305.389,170.560 305.538,171.000 305.532 C 171.643 305.523,171.604 305.457,170.800 305.200 C 169.432 304.762,168.381 304.762,169.400 305.200 M222.200 305.200 C 221.093 305.482,221.077 305.509,222.000 305.547 C 222.550 305.569,223.270 305.413,223.600 305.200 C 224.281 304.760,223.929 304.760,222.200 305.200 M245.900 306.426 C 244.635 307.079,243.600 307.703,243.600 307.812 C 243.600 307.922,244.680 307.466,246.000 306.800 C 247.320 306.134,248.400 305.501,248.400 305.394 C 248.400 305.128,248.474 305.097,245.900 306.426 M144.000 305.738 C 144.000 306.298,154.285 311.848,154.648 311.485 C 154.724 311.409,153.484 310.734,151.893 309.985 C 150.302 309.235,148.550 308.334,148.000 307.981 C 145.635 306.466,144.000 305.549,144.000 305.738 M172.800 305.994 C 173.130 306.211,173.835 306.391,174.367 306.394 C 175.651 306.402,175.325 306.175,173.600 305.858 C 172.615 305.677,172.378 305.718,172.800 305.994 M218.800 306.000 C 217.996 306.257,217.957 306.323,218.600 306.332 C 219.040 306.338,219.760 306.189,220.200 306.000 C 221.219 305.562,220.168 305.562,218.800 306.000 M215.000 306.800 C 213.911 307.077,213.893 307.107,214.800 307.125 C 215.350 307.135,216.160 306.989,216.600 306.800 C 217.586 306.376,216.666 306.376,215.000 306.800 M72.600 308.000 C 72.941 308.660,73.311 309.200,73.421 309.200 C 73.531 309.200,73.341 308.660,73.000 308.000 C 72.659 307.340,72.289 306.800,72.179 306.800 C 72.069 306.800,72.259 307.340,72.600 308.000 M57.371 308.300 C 58.188 309.821,59.594 311.858,59.597 311.527 C 59.601 311.191,57.140 307.200,56.930 307.200 C 56.847 307.200,57.046 307.695,57.371 308.300 M181.400 307.610 C 182.170 307.931,185.907 308.151,185.567 307.855 C 185.475 307.776,184.320 307.613,183.000 307.493 C 181.551 307.362,180.917 307.408,181.400 307.610 M208.100 307.887 C 208.705 307.978,209.695 307.978,210.300 307.887 C 210.905 307.795,210.410 307.720,209.200 307.720 C 207.990 307.720,207.495 307.795,208.100 307.887 M347.000 308.800 C 346.659 309.460,346.469 310.000,346.579 310.000 C 346.689 310.000,347.059 309.460,347.400 308.800 C 347.741 308.140,347.931 307.600,347.821 307.600 C 347.711 307.600,347.341 308.140,347.000 308.800 M189.505 308.283 C 190.002 308.379,190.722 308.375,191.105 308.275 C 191.487 308.175,191.080 308.096,190.200 308.101 C 189.320 308.105,189.007 308.187,189.505 308.283 M201.900 308.282 C 202.395 308.378,203.205 308.378,203.700 308.282 C 204.195 308.187,203.790 308.109,202.800 308.109 C 201.810 308.109,201.405 308.187,201.900 308.282 M194.515 308.696 C 195.788 308.776,197.768 308.775,198.915 308.694 C 200.062 308.614,199.020 308.549,196.600 308.550 C 194.180 308.551,193.242 308.616,194.515 308.696 M334.683 310.644 C 333.849 311.830,333.309 312.797,333.483 312.793 C 333.828 312.785,336.538 308.798,336.328 308.606 C 336.258 308.541,335.517 309.459,334.683 310.644 M237.400 310.591 C 236.300 311.109,235.580 311.537,235.800 311.542 C 236.020 311.547,237.100 311.127,238.200 310.609 C 239.300 310.091,240.020 309.663,239.800 309.658 C 239.580 309.653,238.500 310.073,237.400 310.591 M345.453 311.700 L 344.733 313.000 345.558 312.000 C 346.289 311.113,346.614 310.400,346.286 310.400 C 346.224 310.400,345.849 310.985,345.453 311.700 M59.819 312.400 C 60.732 314.032,62.848 317.200,63.025 317.200 C 63.263 317.200,60.497 312.775,59.898 312.200 C 59.614 311.926,59.588 311.989,59.819 312.400 M231.000 312.990 C 230.340 313.286,228.900 313.819,227.800 314.173 C 225.796 314.819,226.573 314.774,229.202 314.092 C 230.649 313.717,233.309 312.425,232.600 312.442 C 232.380 312.447,231.660 312.694,231.000 312.990 M328.629 317.909 C 326.224 320.489,325.383 321.520,326.760 320.200 C 329.100 317.955,333.450 313.189,333.140 313.209 C 333.063 313.214,331.033 315.329,328.629 317.909 M343.008 315.242 C 342.201 316.365,341.732 317.165,341.966 317.021 C 342.452 316.720,344.932 313.200,344.657 313.200 C 344.557 313.200,343.815 314.119,343.008 315.242 M77.600 315.600 C 78.070 316.260,78.544 316.800,78.654 316.800 C 78.764 316.800,78.470 316.260,78.000 315.600 C 77.530 314.940,77.056 314.400,76.946 314.400 C 76.836 314.400,77.130 314.940,77.600 315.600 M223.656 315.259 C 222.917 315.472,222.387 315.720,222.479 315.812 C 222.681 316.014,225.600 315.237,225.600 314.981 C 225.600 314.746,225.282 314.791,223.656 315.259 M166.600 316.000 C 167.040 316.189,167.760 316.338,168.200 316.332 C 168.843 316.323,168.804 316.257,168.000 316.000 C 166.632 315.562,165.581 315.562,166.600 316.000 M170.000 316.782 C 170.330 317.005,170.945 317.191,171.367 317.194 C 172.390 317.202,172.071 316.973,170.600 316.644 C 169.724 316.448,169.562 316.485,170.000 316.782 M79.554 318.336 C 79.999 318.960,80.679 319.725,81.065 320.036 C 81.452 320.346,81.160 319.835,80.417 318.900 C 78.891 316.980,78.325 316.610,79.554 318.336 M63.408 318.000 C 63.779 318.682,65.944 321.595,66.530 322.200 C 67.188 322.880,66.359 321.524,65.062 319.800 C 63.612 317.874,62.946 317.149,63.408 318.000 M339.199 320.100 C 338.032 321.475,335.800 323.832,334.239 325.337 C 332.677 326.843,331.866 327.786,332.436 327.433 C 333.912 326.519,342.124 317.600,341.489 317.600 C 341.396 317.600,340.365 318.725,339.199 320.100 M207.800 318.400 L 205.800 318.674 207.600 318.697 C 208.590 318.710,209.850 318.576,210.400 318.400 C 211.644 318.001,210.706 318.001,207.800 318.400 M179.305 318.687 C 179.914 318.779,180.814 318.777,181.305 318.682 C 181.797 318.587,181.300 318.511,180.200 318.514 C 179.100 318.517,178.697 318.595,179.305 318.687 M189.500 319.499 C 191.975 319.569,196.025 319.569,198.500 319.499 C 200.975 319.428,198.950 319.371,194.000 319.371 C 189.050 319.371,187.025 319.428,189.500 319.499 M322.966 323.237 C 322.547 323.700,321.150 324.872,319.862 325.840 C 318.574 326.808,317.698 327.600,317.914 327.600 C 318.131 327.600,319.363 326.745,320.653 325.700 C 323.644 323.276,324.137 322.804,323.912 322.579 C 323.811 322.478,323.385 322.774,322.966 323.237 M67.594 323.803 C 69.187 325.721,69.321 325.845,68.886 324.996 C 68.659 324.553,68.052 323.834,67.537 323.398 C 66.633 322.634,66.635 322.648,67.594 323.803 M83.200 322.925 C 83.200 322.994,83.785 323.579,84.500 324.225 L 85.800 325.400 84.625 324.100 C 83.530 322.888,83.200 322.616,83.200 322.925 M87.896 328.200 C 89.238 329.740,91.383 331.990,92.662 333.200 C 93.954 334.423,93.401 333.713,91.415 331.600 C 86.248 326.104,85.113 325.007,87.896 328.200 M71.053 328.200 C 72.945 330.391,73.717 331.067,72.723 329.661 C 71.850 328.428,69.640 326.000,69.389 326.000 C 69.260 326.000,70.009 326.990,71.053 328.200 M327.795 331.043 C 326.038 332.496,324.330 333.966,324.000 334.307 C 323.242 335.092,327.663 331.670,329.800 329.817 C 332.602 327.388,331.115 328.297,327.795 331.043 M196.082 332.700 L 196.165 336.600 196.299 333.035 L 196.433 329.470 197.653 330.835 L 198.872 332.200 197.603 330.500 C 195.939 328.273,195.987 328.202,196.082 332.700 M313.400 330.650 C 312.681 331.262,312.534 331.505,313.033 331.257 C 313.766 330.893,315.141 329.576,314.749 329.614 C 314.667 329.622,314.060 330.088,313.400 330.650 M73.600 331.135 C 73.600 331.299,74.452 332.236,75.493 333.217 C 76.535 334.198,76.940 334.479,76.393 333.842 C 74.771 331.951,73.600 330.816,73.600 331.135 M186.265 333.757 C 186.108 335.053,186.074 336.208,186.190 336.323 C 186.305 336.439,186.419 336.008,186.442 335.367 C 186.481 334.268,186.515 334.294,187.011 335.800 C 187.687 337.849,187.709 336.881,187.058 333.800 L 186.550 331.400 186.265 333.757 M310.500 332.446 C 309.137 333.319,308.695 333.906,309.900 333.243 C 310.818 332.739,312.256 331.627,312.000 331.619 C 311.890 331.616,311.215 331.988,310.500 332.446 M200.194 333.990 C 203.068 337.383,206.036 340.257,209.200 342.711 C 213.687 346.190,213.600 346.127,213.600 345.906 C 213.600 345.801,211.890 344.412,209.800 342.821 C 207.710 341.229,204.425 338.274,202.500 336.253 C 200.575 334.233,199.537 333.214,200.194 333.990 M303.000 336.821 C 300.360 338.348,298.353 339.598,298.540 339.599 C 298.937 339.600,306.266 335.488,307.417 334.618 C 308.895 333.500,307.792 334.050,303.000 336.821 M321.160 336.051 C 319.272 337.393,318.158 338.365,319.208 337.754 C 320.400 337.059,323.200 335.091,323.200 334.947 C 323.200 334.654,322.889 334.822,321.160 336.051 M77.200 335.351 C 77.200 335.433,79.675 337.803,82.700 340.617 L 88.200 345.733 82.870 340.466 C 77.956 335.611,77.200 334.929,77.200 335.351 M95.400 335.895 C 95.620 336.111,96.610 336.980,97.600 337.827 L 99.400 339.366 98.000 337.850 C 97.230 337.017,96.240 336.147,95.800 335.918 C 95.345 335.682,95.173 335.671,95.400 335.895 M196.901 340.200 C 196.905 341.080,196.987 341.393,197.083 340.895 C 197.179 340.398,197.175 339.678,197.075 339.295 C 196.975 338.913,196.896 339.320,196.901 340.200 M99.959 339.720 C 100.606 340.534,104.400 343.762,104.400 343.497 C 104.400 343.400,103.275 342.351,101.900 341.168 C 100.525 339.984,99.652 339.332,99.959 339.720 M187.693 340.400 C 187.693 341.170,187.775 341.485,187.876 341.100 C 187.976 340.715,187.976 340.085,187.876 339.700 C 187.775 339.315,187.693 339.630,187.693 340.400 M294.400 341.400 C 293.850 341.714,293.580 341.972,293.800 341.972 C 294.020 341.972,294.650 341.714,295.200 341.400 C 295.750 341.086,296.020 340.828,295.800 340.828 C 295.580 340.828,294.950 341.086,294.400 341.400 M197.268 342.800 C 197.288 343.839,197.918 345.546,197.932 344.600 C 197.938 344.160,197.789 343.440,197.600 343.000 C 197.389 342.510,197.261 342.432,197.268 342.800 M306.297 344.767 C 303.326 346.209,301.751 347.177,303.412 346.540 C 305.021 345.923,309.600 343.603,309.600 343.405 C 309.600 343.142,309.880 343.027,306.297 344.767 M286.400 345.200 C 285.630 345.622,285.180 345.966,285.400 345.966 C 285.620 345.966,286.430 345.622,287.200 345.200 C 287.970 344.778,288.420 344.434,288.200 344.434 C 287.980 344.434,287.170 344.778,286.400 345.200 M89.135 346.484 C 90.020 347.613,98.000 353.924,98.000 353.496 C 98.000 353.386,96.965 352.523,95.700 351.579 C 94.435 350.635,92.320 348.949,91.000 347.832 C 89.680 346.715,88.841 346.109,89.135 346.484 M108.944 347.109 C 109.260 347.621,111.600 349.353,111.600 349.075 C 111.600 348.976,110.939 348.391,110.132 347.775 C 109.324 347.159,108.789 346.859,108.944 347.109 M300.800 347.400 C 300.250 347.714,299.980 347.972,300.200 347.972 C 300.420 347.972,301.050 347.714,301.600 347.400 C 302.150 347.086,302.420 346.828,302.200 346.828 C 301.980 346.828,301.350 347.086,300.800 347.400 M297.063 348.980 C 294.998 349.829,293.932 350.404,294.433 350.398 C 294.777 350.394,299.229 348.504,299.476 348.257 C 299.876 347.857,299.571 347.949,297.063 348.980 M112.000 349.375 C 112.000 349.583,115.748 352.401,116.800 352.985 C 117.848 353.566,116.733 352.612,114.300 350.845 C 113.035 349.926,112.000 349.265,112.000 349.375 M200.212 351.624 C 201.013 353.172,203.471 355.909,204.566 356.470 C 205.024 356.705,204.634 356.231,203.697 355.415 C 202.761 354.600,201.529 353.138,200.959 352.166 C 199.782 350.157,199.257 349.776,200.212 351.624 M292.400 350.800 C 291.867 351.145,291.867 351.188,292.400 351.188 C 292.730 351.188,293.270 351.013,293.600 350.800 C 294.133 350.455,294.133 350.412,293.600 350.412 C 293.270 350.412,292.730 350.587,292.400 350.800 M264.200 352.800 C 263.696 353.017,263.622 353.144,264.000 353.144 C 264.330 353.144,264.960 352.989,265.400 352.800 C 265.904 352.583,265.978 352.456,265.600 352.456 C 265.270 352.456,264.640 352.611,264.200 352.800 M230.600 353.600 C 231.040 353.789,231.760 353.938,232.200 353.932 C 232.843 353.923,232.804 353.857,232.000 353.600 C 230.632 353.162,229.581 353.162,230.600 353.600 M254.800 354.420 C 254.126 354.649,254.451 354.684,255.800 354.528 C 256.900 354.401,257.875 354.231,257.967 354.149 C 258.282 353.868,255.799 354.080,254.800 354.420 M243.315 355.096 C 244.588 355.176,246.568 355.175,247.715 355.094 C 248.862 355.014,247.820 354.949,245.400 354.950 C 242.980 354.951,242.042 355.016,243.315 355.096 M100.800 355.699 C 101.975 356.859,110.590 362.536,109.600 361.499 C 109.490 361.383,107.330 359.898,104.800 358.198 C 102.270 356.498,100.470 355.373,100.800 355.699 M206.200 357.200 C 206.640 357.389,207.270 357.544,207.600 357.544 C 207.978 357.544,207.904 357.417,207.400 357.200 C 206.960 357.011,206.330 356.856,206.000 356.856 C 205.622 356.856,205.696 356.983,206.200 357.200 M178.092 359.029 C 177.597 359.783,177.272 360.400,177.369 360.400 C 177.647 360.400,179.304 357.971,179.139 357.806 C 179.057 357.724,178.586 358.274,178.092 359.029 M197.229 358.854 C 197.559 359.471,197.771 359.570,197.993 359.211 C 198.211 358.858,198.379 358.843,198.574 359.157 C 198.724 359.401,199.062 359.599,199.324 359.597 C 199.586 359.596,199.260 359.237,198.600 358.800 C 197.053 357.776,196.660 357.791,197.229 358.854 M214.600 358.797 C 215.364 359.128,218.314 359.355,217.967 359.056 C 217.875 358.977,216.900 358.809,215.800 358.682 C 214.513 358.533,214.085 358.574,214.600 358.797 M260.800 358.800 C 259.433 359.088,259.428 359.095,260.600 359.119 C 261.260 359.133,262.160 358.989,262.600 358.800 C 263.562 358.387,262.764 358.387,260.800 358.800 M220.200 359.600 C 221.892 360.031,223.344 360.031,222.000 359.600 C 221.450 359.424,220.550 359.283,220.000 359.287 C 219.102 359.294,219.122 359.326,220.200 359.600 M256.100 359.476 C 256.485 359.576,257.115 359.576,257.500 359.476 C 257.885 359.375,257.570 359.293,256.800 359.293 C 256.030 359.293,255.715 359.375,256.100 359.476 M229.400 360.422 C 230.978 360.749,235.890 360.936,235.567 360.656 C 235.475 360.576,233.690 360.417,231.600 360.300 C 229.077 360.160,228.338 360.201,229.400 360.422 M241.600 360.400 L 236.600 360.638 241.200 360.684 C 243.730 360.709,246.700 360.590,247.800 360.418 C 250.252 360.037,249.301 360.034,241.600 360.400 M187.822 361.822 C 187.672 362.625,187.628 363.362,187.726 363.460 C 187.824 363.557,188.027 362.981,188.178 362.178 C 188.328 361.375,188.372 360.638,188.274 360.540 C 188.176 360.443,187.973 361.019,187.822 361.822 M174.200 363.494 C 172.660 364.957,171.940 365.774,172.600 365.310 C 173.770 364.486,177.548 360.783,177.183 360.817 C 177.082 360.827,175.740 362.031,174.200 363.494 M202.400 361.383 C 202.400 361.488,203.435 362.324,204.700 363.240 C 205.965 364.155,208.530 366.366,210.400 368.152 L 213.799 371.400 210.800 368.273 C 208.223 365.586,202.400 360.810,202.400 361.383 M132.000 362.179 C 132.000 362.289,132.540 362.659,133.200 363.000 C 133.860 363.341,134.400 363.531,134.400 363.421 C 134.400 363.311,133.860 362.941,133.200 362.600 C 132.540 362.259,132.000 362.069,132.000 362.179 M200.281 363.361 C 200.677 363.889,201.057 364.267,201.128 364.200 C 201.338 363.999,200.234 362.400,199.885 362.400 C 199.708 362.400,199.886 362.832,200.281 363.361 M112.400 363.379 C 112.400 363.489,112.940 363.859,113.600 364.200 C 114.260 364.541,114.800 364.731,114.800 364.621 C 114.800 364.511,114.260 364.141,113.600 363.800 C 112.940 363.459,112.400 363.269,112.400 363.379 M137.600 365.000 C 138.150 365.314,138.780 365.572,139.000 365.572 C 139.220 365.572,138.950 365.314,138.400 365.000 C 137.850 364.686,137.220 364.428,137.000 364.428 C 136.780 364.428,137.050 364.686,137.600 365.000 M202.282 366.989 C 202.873 368.193,203.423 369.111,203.505 369.029 C 203.684 368.849,201.667 364.800,201.398 364.800 C 201.294 364.800,201.692 365.785,202.282 366.989 M117.709 366.400 C 118.269 366.840,118.857 367.200,119.017 367.200 C 119.177 367.200,118.850 366.840,118.291 366.400 C 117.731 365.960,117.143 365.600,116.983 365.600 C 116.823 365.600,117.150 365.960,117.709 366.400 M141.546 366.616 C 142.286 366.937,143.096 367.193,143.346 367.184 C 143.596 367.176,143.194 366.906,142.454 366.584 C 141.714 366.263,140.904 366.007,140.654 366.016 C 140.404 366.024,140.806 366.294,141.546 366.616 M169.800 366.726 C 169.140 367.124,167.880 367.744,167.000 368.104 C 166.120 368.464,165.644 368.768,165.942 368.779 C 166.534 368.802,170.369 366.969,170.980 366.372 C 171.568 365.797,171.118 365.932,169.800 366.726 M144.833 367.744 C 144.925 367.823,145.540 368.008,146.200 368.156 C 147.076 368.352,147.238 368.315,146.800 368.018 C 146.260 367.653,144.432 367.398,144.833 367.744 M122.800 368.979 C 122.800 369.089,123.340 369.459,124.000 369.800 C 124.660 370.141,125.200 370.331,125.200 370.221 C 125.200 370.111,124.660 369.741,124.000 369.400 C 123.340 369.059,122.800 368.869,122.800 368.979 M152.100 369.476 C 152.485 369.576,153.115 369.576,153.500 369.476 C 153.885 369.375,153.570 369.293,152.800 369.293 C 152.030 369.293,151.715 369.375,152.100 369.476 M161.700 369.476 C 162.085 369.576,162.715 369.576,163.100 369.476 C 163.485 369.375,163.170 369.293,162.400 369.293 C 161.630 369.293,161.315 369.375,161.700 369.476 M156.707 369.890 C 157.426 369.979,158.506 369.977,159.107 369.886 C 159.708 369.795,159.120 369.722,157.800 369.724 C 156.480 369.726,155.988 369.801,156.707 369.890 M223.602 371.100 C 223.603 371.265,224.068 371.940,224.635 372.600 L 225.666 373.800 224.826 372.529 L 223.986 371.257 224.893 371.083 C 225.679 370.932,225.653 370.902,224.700 370.854 C 224.095 370.825,223.601 370.935,223.602 371.100 M226.194 371.591 C 226.403 371.928,230.741 372.992,230.971 372.762 C 231.062 372.671,229.987 372.309,228.582 371.957 C 227.176 371.606,226.102 371.441,226.194 371.591 M244.600 371.636 C 243.874 371.981,243.886 372.000,244.739 371.835 C 245.618 371.666,245.664 371.749,245.449 373.127 C 245.283 374.187,245.321 374.376,245.581 373.800 C 246.030 372.809,246.105 371.190,245.700 371.228 C 245.535 371.244,245.040 371.427,244.600 371.636 M214.575 372.932 C 215.191 373.739,215.776 374.400,215.875 374.400 C 216.153 374.400,214.421 372.060,213.909 371.744 C 213.659 371.589,213.959 372.124,214.575 372.932 M130.744 372.809 C 131.703 373.244,132.603 373.592,132.744 373.583 C 133.249 373.550,130.187 372.033,129.600 372.026 C 129.270 372.021,129.785 372.374,130.744 372.809 M242.000 372.400 L 240.600 372.695 241.876 372.747 C 242.578 372.776,243.264 372.620,243.400 372.400 C 243.536 372.180,243.592 372.024,243.524 372.053 C 243.456 372.082,242.770 372.238,242.000 372.400 M235.505 373.483 C 236.002 373.579,236.722 373.575,237.105 373.475 C 237.487 373.375,237.080 373.296,236.200 373.301 C 235.320 373.305,235.007 373.387,235.505 373.483 M134.000 374.166 C 134.550 374.460,135.450 374.812,136.000 374.949 C 136.550 375.086,136.280 374.852,135.400 374.429 C 133.590 373.558,132.468 373.348,134.000 374.166 M216.015 375.000 C 216.017 375.220,216.386 375.850,216.836 376.400 C 217.379 377.064,217.515 377.131,217.240 376.600 C 216.566 375.295,216.012 374.572,216.015 375.000 M228.344 379.391 C 229.131 381.243,229.838 382.696,229.915 382.618 C 230.111 382.423,227.596 376.445,227.220 376.212 C 227.052 376.108,227.558 377.539,228.344 379.391 M181.762 378.447 C 180.646 379.686,177.650 381.674,176.019 382.257 C 175.057 382.602,174.870 382.771,175.438 382.782 C 176.420 382.803,180.571 380.181,181.970 378.657 C 182.503 378.076,182.846 377.600,182.732 377.600 C 182.617 377.600,182.181 377.981,181.762 378.447 M149.233 379.344 C 149.325 379.423,149.940 379.608,150.600 379.756 C 151.476 379.952,151.638 379.915,151.200 379.618 C 150.660 379.253,148.832 378.998,149.233 379.344 M240.427 382.509 C 238.955 384.196,238.741 384.548,239.762 383.600 C 241.104 382.354,243.060 379.985,242.727 380.009 C 242.657 380.014,241.622 381.139,240.427 382.509 M158.800 381.580 C 159.799 381.920,162.282 382.132,161.967 381.851 C 161.875 381.769,160.900 381.599,159.800 381.472 C 158.451 381.316,158.126 381.351,158.800 381.580 M164.705 382.683 C 165.202 382.779,165.922 382.775,166.305 382.675 C 166.687 382.575,166.280 382.496,165.400 382.501 C 164.520 382.505,164.207 382.587,164.705 382.683 M168.705 383.083 C 169.202 383.179,169.922 383.175,170.305 383.075 C 170.687 382.975,170.280 382.896,169.400 382.901 C 168.520 382.905,168.207 382.987,168.705 383.083 M172.305 383.083 C 172.802 383.179,173.522 383.175,173.905 383.075 C 174.287 382.975,173.880 382.896,173.000 382.901 C 172.120 382.905,171.807 382.987,172.305 383.083 M230.272 385.000 C 230.399 386.100,230.569 387.075,230.651 387.167 C 230.932 387.482,230.720 384.999,230.380 384.000 C 230.151 383.326,230.116 383.651,230.272 385.000 M205.646 384.067 C 205.621 384.434,205.496 385.064,205.370 385.467 C 205.152 386.162,205.163 386.163,205.597 385.487 C 205.848 385.096,205.973 384.466,205.873 384.087 C 205.711 383.468,205.688 383.466,205.646 384.067 M220.288 386.000 C 220.411 387.210,220.577 388.275,220.656 388.367 C 220.953 388.711,220.730 385.367,220.404 384.600 C 220.192 384.102,220.149 384.631,220.288 386.000 M234.400 386.800 C 233.630 387.222,233.144 387.574,233.320 387.583 C 233.744 387.605,236.000 386.432,236.000 386.190 C 236.000 385.928,235.977 385.937,234.400 386.800 M230.800 388.100 C 230.800 388.506,231.672 388.468,232.361 388.032 C 232.763 387.778,232.621 387.694,231.862 387.738 C 231.278 387.772,230.800 387.935,230.800 388.100 M202.633 390.434 C 202.029 391.112,201.614 391.747,201.711 391.845 C 201.809 391.942,202.373 391.387,202.965 390.611 C 204.292 388.871,204.111 388.775,202.633 390.434 M184.800 391.266 C 184.800 391.716,187.536 395.600,187.853 395.600 C 187.955 395.600,187.490 394.803,186.819 393.828 C 185.274 391.583,185.287 391.511,187.100 392.262 C 189.062 393.075,188.482 392.488,186.405 391.558 C 185.450 391.130,184.800 391.012,184.800 391.266 M220.454 392.267 C 220.425 392.744,220.296 393.464,220.170 393.867 C 219.952 394.561,219.964 394.562,220.396 393.888 C 220.647 393.497,220.775 392.777,220.681 392.288 C 220.509 391.401,220.509 391.401,220.454 392.267 M193.511 393.893 C 194.451 393.978,195.891 393.977,196.711 393.891 C 197.530 393.805,196.760 393.736,195.000 393.737 C 193.240 393.739,192.570 393.809,193.511 393.893 M190.600 398.727 C 193.797 402.069,198.170 405.250,199.480 405.184 C 199.656 405.175,199.260 404.886,198.600 404.542 C 196.024 403.198,194.074 401.732,191.000 398.825 L 187.801 395.800 190.600 398.727 M218.000 399.040 C 218.000 399.246,217.156 400.401,216.124 401.607 C 214.863 403.081,214.678 403.406,215.560 402.600 C 217.209 401.093,218.564 399.230,218.244 398.910 C 218.110 398.776,218.000 398.835,218.000 399.040 M202.800 406.156 C 202.800 406.242,203.417 406.385,204.172 406.473 C 204.927 406.561,205.456 406.490,205.348 406.316 C 205.155 406.003,202.800 405.855,202.800 406.156 \\\" stroke=\\\"none\\\" fill=\\\"#141414\\\" fill-rule=\\\"evenodd\\\"></path></g></svg>\");\n\n//# sourceURL=webpack://templates/./src/images/left-image.svg?");

/***/ }),

/***/ "./src/images/logo.svg":
/*!*****************************!*\
  !*** ./src/images/logo.svg ***!
  \*****************************/
/***/ (() => {

eval("throw new Error(\"Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\\n> <svg id=\\\"svg\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" width=\\\"400\\\" height=\\\"366.5338645418327\\\" viewBox=\\\"0, 0, 400,366.5338645418327\\\"><g id=\\\"svgg\\\"><path id=\\\"path0\\\" d=\\\"M84.853 51.421 L 83.776 52.612 84.968 51.535 C 86.079 50.532,86.328 50.229,86.045 50.229 C 85.982 50.229,85.445 50.765,84.853 51.421 M81.027 54.812 C 80.136 55.720,79.490 56.462,79.591 56.462 C 79.692 56.462,80.503 55.720,81.393 54.812 C 82.284 53.905,82.930 53.162,82.829 53.162 C 82.728 53.162,81.917 53.905,81.027 54.812 M143.813 69.375 C 142.970 69.782,142.695 70.394,143.355 70.394 C 143.556 70.394,143.721 70.254,143.721 70.084 C 143.721 69.913,144.093 69.594,144.546 69.375 C 145.000 69.156,145.206 68.977,145.005 68.977 C 144.803 68.977,144.267 69.156,143.813 69.375 M141.753 71.952 C 141.453 73.072,141.468 73.327,141.832 73.327 C 142.003 73.327,142.157 72.832,142.174 72.227 C 142.212 70.919,142.057 70.818,141.753 71.952 M141.758 75.160 C 142.048 76.742,142.257 77.040,142.249 75.863 C 142.246 75.376,142.081 74.730,141.883 74.427 C 141.629 74.040,141.592 74.258,141.758 75.160 M100.373 77.626 C 101.032 77.708,102.022 77.706,102.573 77.622 C 103.124 77.539,102.585 77.472,101.375 77.474 C 100.165 77.476,99.714 77.544,100.373 77.626 M195.423 93.584 C 195.426 94.038,195.604 94.656,195.819 94.959 C 196.117 95.378,196.154 95.255,195.975 94.444 C 195.822 93.746,195.906 93.274,196.221 93.074 C 196.581 92.846,196.540 92.769,196.059 92.765 C 195.634 92.761,195.419 93.038,195.423 93.584 M59.480 97.525 C 59.480 98.231,59.556 98.520,59.648 98.167 C 59.740 97.814,59.740 97.236,59.648 96.884 C 59.556 96.531,59.480 96.819,59.480 97.525 M83.685 101.008 C 83.690 101.815,83.765 102.102,83.852 101.646 C 83.940 101.190,83.937 100.530,83.845 100.179 C 83.753 99.829,83.681 100.202,83.685 101.008 M196.517 102.291 C 196.517 103.569,196.585 104.545,196.669 104.461 C 196.941 104.186,197.030 100.482,196.770 100.222 C 196.631 100.083,196.517 101.014,196.517 102.291 M123.641 104.125 C 123.641 104.830,123.717 105.119,123.809 104.766 C 123.901 104.413,123.901 103.836,123.809 103.483 C 123.717 103.130,123.641 103.419,123.641 104.125 M196.631 107.241 C 196.633 108.451,196.701 108.902,196.783 108.243 C 196.864 107.584,196.863 106.594,196.779 106.043 C 196.695 105.492,196.629 106.031,196.631 107.241 M148.226 110.541 C 148.229 111.549,148.300 111.918,148.384 111.361 C 148.468 110.803,148.466 109.978,148.379 109.527 C 148.292 109.077,148.223 109.533,148.226 110.541 M102.388 123.819 C 102.945 123.904,103.770 123.901,104.221 123.814 C 104.672 123.727,104.216 123.658,103.208 123.661 C 102.200 123.664,101.831 123.735,102.388 123.819 M134.169 138.497 L 132.906 139.872 134.280 138.608 C 135.037 137.913,135.655 137.295,135.655 137.233 C 135.655 136.953,135.345 137.217,134.169 138.497 M102.933 150.946 C 103.387 151.034,104.129 151.034,104.583 150.946 C 105.037 150.859,104.665 150.787,103.758 150.787 C 102.851 150.787,102.479 150.859,102.933 150.946 M98.518 194.225 C 98.412 194.780,98.440 195.439,98.580 195.691 C 98.721 195.942,98.862 195.488,98.894 194.682 C 98.962 192.983,98.794 192.779,98.518 194.225 M290.852 201.923 C 292.626 201.990,295.431 201.990,297.085 201.922 C 298.739 201.855,297.287 201.799,293.859 201.800 C 290.431 201.800,289.078 201.856,290.852 201.923 M315.220 201.909 C 315.676 201.997,316.336 201.994,316.686 201.902 C 317.037 201.810,316.664 201.738,315.857 201.742 C 315.050 201.746,314.764 201.821,315.220 201.909 M247.769 202.288 C 249.037 202.360,251.017 202.360,252.168 202.287 C 253.320 202.214,252.282 202.156,249.863 202.156 C 247.443 202.157,246.501 202.217,247.769 202.288 M118.515 202.636 C 118.868 202.728,119.445 202.728,119.798 202.636 C 120.151 202.544,119.863 202.468,119.157 202.468 C 118.451 202.468,118.162 202.544,118.515 202.636 M126.196 202.656 C 127.950 202.723,130.920 202.723,132.795 202.657 C 134.671 202.590,133.236 202.535,129.606 202.535 C 125.976 202.534,124.442 202.589,126.196 202.656 M143.287 202.658 C 146.980 202.718,152.920 202.717,156.486 202.657 C 160.052 202.597,157.030 202.549,149.771 202.549 C 142.511 202.549,139.594 202.598,143.287 202.658 M164.904 202.652 C 165.767 202.730,167.087 202.728,167.837 202.650 C 168.588 202.571,167.883 202.507,166.269 202.509 C 164.656 202.510,164.042 202.575,164.904 202.652 M173.327 202.652 C 174.184 202.729,175.587 202.729,176.444 202.652 C 177.301 202.574,176.599 202.511,174.885 202.511 C 173.171 202.511,172.470 202.574,173.327 202.652 M179.552 202.648 C 180.203 202.729,181.358 202.730,182.118 202.651 C 182.879 202.571,182.346 202.505,180.935 202.503 C 179.523 202.502,178.901 202.567,179.552 202.648 M194.225 202.658 C 199.115 202.716,207.117 202.716,212.007 202.658 C 216.897 202.600,212.896 202.553,203.116 202.553 C 193.336 202.553,189.335 202.600,194.225 202.658 M59.847 207.883 C 59.847 208.588,59.922 208.877,60.014 208.524 C 60.107 208.171,60.107 207.594,60.014 207.241 C 59.922 206.888,59.847 207.177,59.847 207.883 M334.235 213.795 C 334.106 214.439,334.068 215.034,334.151 215.117 C 334.234 215.200,334.416 214.749,334.555 214.115 C 334.695 213.482,334.732 212.887,334.639 212.793 C 334.545 212.700,334.363 213.151,334.235 213.795 M84.235 224.640 C 84.688 224.727,85.431 224.727,85.885 224.640 C 86.338 224.553,85.967 224.481,85.060 224.481 C 84.152 224.481,83.781 224.553,84.235 224.640 M311.195 224.652 C 312.260 224.726,313.910 224.726,314.861 224.650 C 315.812 224.575,314.940 224.514,312.924 224.515 C 310.907 224.516,310.129 224.578,311.195 224.652 M91.213 249.217 C 92.278 249.291,93.928 249.290,94.879 249.215 C 95.830 249.140,94.959 249.079,92.942 249.080 C 90.926 249.081,90.148 249.142,91.213 249.217 M108.822 249.220 C 111.910 249.282,116.859 249.282,119.821 249.220 C 122.783 249.158,120.257 249.108,114.207 249.108 C 108.158 249.109,105.734 249.159,108.822 249.220 M128.048 249.213 C 128.804 249.292,130.041 249.292,130.797 249.213 C 131.554 249.134,130.935 249.069,129.423 249.069 C 127.910 249.069,127.291 249.134,128.048 249.213 M142.325 249.586 C 144.884 249.649,149.174 249.649,151.857 249.587 C 154.541 249.524,152.447 249.473,147.204 249.472 C 141.962 249.472,139.766 249.523,142.325 249.586 M163.799 249.939 C 164.255 250.026,164.915 250.023,165.266 249.931 C 165.616 249.839,165.243 249.768,164.436 249.772 C 163.630 249.776,163.343 249.851,163.799 249.939 M180.121 249.949 C 181.085 250.025,182.570 250.024,183.421 249.947 C 184.272 249.870,183.483 249.808,181.668 249.809 C 179.853 249.810,179.157 249.873,180.121 249.949 M211.824 250.321 C 222.360 250.375,239.601 250.375,250.137 250.321 C 260.674 250.267,252.053 250.222,230.981 250.222 C 209.908 250.222,201.288 250.267,211.824 250.321 M279.102 250.686 C 281.673 250.749,285.880 250.749,288.451 250.686 C 291.022 250.623,288.918 250.572,283.776 250.572 C 278.634 250.572,276.531 250.623,279.102 250.686 M314.482 251.051 C 315.742 251.122,317.805 251.122,319.065 251.051 C 320.325 250.979,319.294 250.920,316.774 250.920 C 314.253 250.920,313.222 250.979,314.482 251.051 M323.655 251.045 C 324.314 251.126,325.303 251.125,325.854 251.041 C 326.405 250.957,325.866 250.891,324.656 250.893 C 323.446 250.895,322.996 250.963,323.655 251.045 M332.264 251.413 C 333.020 251.492,334.258 251.492,335.014 251.413 C 335.770 251.334,335.151 251.269,333.639 251.269 C 332.126 251.269,331.508 251.334,332.264 251.413 M106.033 262.783 C 107.386 262.853,109.696 262.854,111.166 262.784 C 112.637 262.714,111.531 262.657,108.708 262.656 C 105.885 262.656,104.681 262.713,106.033 262.783 M121.632 263.137 C 122.085 263.224,122.828 263.224,123.281 263.137 C 123.735 263.049,123.364 262.978,122.456 262.978 C 121.549 262.978,121.178 263.049,121.632 263.137 M211.464 263.510 C 212.123 263.592,213.113 263.590,213.664 263.507 C 214.215 263.423,213.676 263.356,212.466 263.358 C 211.256 263.360,210.805 263.429,211.464 263.510 M221.194 263.885 C 223.575 263.949,227.369 263.949,229.627 263.885 C 231.884 263.821,229.936 263.768,225.298 263.769 C 220.660 263.769,218.813 263.821,221.194 263.885 M263.153 264.237 C 263.607 264.324,264.349 264.324,264.803 264.237 C 265.257 264.149,264.885 264.078,263.978 264.078 C 263.071 264.078,262.699 264.149,263.153 264.237 M267.741 264.608 C 268.298 264.692,269.123 264.690,269.574 264.603 C 270.025 264.516,269.569 264.447,268.561 264.450 C 267.553 264.452,267.184 264.523,267.741 264.608 M286.095 264.619 C 293.117 264.675,304.501 264.675,311.393 264.619 C 318.284 264.564,312.539 264.518,298.625 264.518 C 284.711 264.518,279.073 264.564,286.095 264.619 M325.481 264.603 C 325.935 264.691,326.677 264.691,327.131 264.603 C 327.585 264.516,327.214 264.444,326.306 264.444 C 325.399 264.444,325.027 264.516,325.481 264.603 M62.934 277.452 C 62.839 277.603,63.943 277.682,65.387 277.627 C 70.103 277.447,70.647 277.301,66.841 277.239 C 64.786 277.205,63.028 277.301,62.934 277.452 M73.975 277.443 C 74.634 277.524,75.624 277.523,76.175 277.439 C 76.726 277.355,76.187 277.288,74.977 277.291 C 73.767 277.293,73.316 277.361,73.975 277.443 M78.557 277.440 C 79.114 277.524,79.939 277.522,80.390 277.435 C 80.841 277.348,80.385 277.279,79.377 277.282 C 78.368 277.285,78.000 277.356,78.557 277.440 M87.172 277.436 C 87.628 277.524,88.288 277.521,88.639 277.429 C 88.989 277.337,88.616 277.265,87.809 277.269 C 87.003 277.273,86.716 277.349,87.172 277.436 M95.600 277.442 C 96.256 277.523,97.328 277.523,97.984 277.442 C 98.639 277.361,98.103 277.294,96.792 277.294 C 95.481 277.294,94.945 277.361,95.600 277.442 M131.714 277.449 C 133.075 277.519,135.302 277.519,136.664 277.449 C 138.025 277.378,136.911 277.321,134.189 277.321 C 131.467 277.321,130.353 277.378,131.714 277.449 M208.183 278.185 C 213.289 278.242,221.538 278.242,226.515 278.185 C 231.492 278.127,227.314 278.080,217.232 278.080 C 207.149 278.080,203.077 278.127,208.183 278.185 M236.393 278.169 C 236.849 278.257,237.509 278.254,237.859 278.162 C 238.210 278.070,237.837 277.999,237.030 278.003 C 236.224 278.007,235.937 278.082,236.393 278.169 M266.616 278.550 C 268.772 278.615,272.402 278.615,274.682 278.551 C 276.962 278.486,275.197 278.433,270.761 278.433 C 266.324 278.433,264.459 278.485,266.616 278.550 M280.940 278.540 C 281.497 278.624,282.322 278.622,282.773 278.535 C 283.224 278.448,282.768 278.379,281.760 278.382 C 280.752 278.384,280.383 278.456,280.940 278.540 M299.450 278.548 C 300.710 278.620,302.773 278.620,304.033 278.548 C 305.293 278.477,304.262 278.418,301.742 278.418 C 299.221 278.418,298.190 278.477,299.450 278.548 M325.366 290.834 L 324.290 292.026 325.481 290.949 C 326.137 290.357,326.673 289.820,326.673 289.757 C 326.673 289.474,326.370 289.723,325.366 290.834 M234.754 292.115 C 236.124 292.185,238.268 292.185,239.520 292.113 C 240.772 292.042,239.652 291.984,237.030 291.985 C 234.409 291.985,233.384 292.044,234.754 292.115 M279.652 292.468 C 280.105 292.555,280.848 292.555,281.302 292.468 C 281.755 292.380,281.384 292.309,280.477 292.309 C 279.569 292.309,279.198 292.380,279.652 292.468 \\\" stroke=\\\"none\\\" fill=\\\"#343434\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path1\\\" d=\\\"M120.257 37.031 C 119.349 37.207,117.534 37.527,116.224 37.744 C 107.241 39.228,99.274 42.055,93.900 45.665 C 93.014 46.260,91.695 47.055,90.966 47.433 C 89.589 48.148,88.881 48.696,85.285 51.831 C 82.185 54.534,80.761 55.966,78.493 58.662 C 77.391 59.973,76.281 61.172,76.028 61.327 C 75.774 61.482,75.050 62.627,74.417 63.871 C 73.240 66.188,73.013 66.521,70.194 70.065 C 69.296 71.194,68.561 72.303,68.561 72.530 C 68.561 72.756,68.149 73.647,67.644 74.509 C 66.796 75.961,66.306 76.955,63.979 81.943 C 63.509 82.951,62.924 84.436,62.680 85.243 C 62.435 86.049,62.029 87.369,61.776 88.176 C 59.447 95.609,59.273 107.444,61.389 114.390 C 61.726 115.500,62.145 117.171,62.320 118.105 C 62.494 119.039,63.062 120.867,63.582 122.167 C 64.102 123.467,64.528 124.747,64.528 125.011 C 64.528 125.276,65.270 126.727,66.178 128.237 C 67.085 129.747,67.828 131.197,67.828 131.461 C 67.828 131.724,68.733 133.065,69.840 134.439 C 70.946 135.814,71.853 137.042,71.856 137.169 C 71.859 137.296,72.358 137.605,72.965 137.857 C 73.578 138.111,74.162 138.680,74.276 139.136 C 75.455 143.832,94.716 150.687,106.732 150.687 C 110.867 150.687,118.175 148.989,120.863 147.403 C 121.561 146.991,122.432 146.654,122.799 146.654 C 123.166 146.654,123.680 146.397,123.941 146.083 C 124.201 145.769,124.923 145.289,125.544 145.016 C 126.165 144.743,127.301 143.928,128.068 143.204 C 128.835 142.480,129.618 141.888,129.807 141.888 C 130.101 141.888,133.004 139.031,136.698 135.105 C 139.537 132.088,145.488 121.900,146.094 119.020 C 146.184 118.591,146.606 116.795,147.031 115.028 C 147.981 111.079,148.235 100.806,147.463 97.525 C 147.203 96.416,146.851 94.849,146.681 94.042 C 146.512 93.236,146.016 91.586,145.579 90.376 C 145.142 89.166,144.617 87.599,144.413 86.893 C 144.208 86.187,143.813 85.108,143.534 84.494 C 143.254 83.881,142.835 82.561,142.601 81.561 C 142.367 80.561,141.969 79.248,141.716 78.643 C 139.460 73.239,140.512 69.095,144.354 68.256 C 146.752 67.733,150.547 68.185,151.961 69.161 C 152.358 69.436,152.906 69.661,153.177 69.661 C 153.661 69.661,156.494 71.758,159.221 74.137 C 159.983 74.801,160.872 75.839,161.197 76.444 C 161.522 77.049,162.393 78.286,163.132 79.193 C 165.327 81.888,167.027 84.745,167.712 86.893 C 168.066 88.002,168.511 89.098,168.701 89.330 C 169.304 90.065,170.927 95.079,171.116 96.792 C 171.216 97.699,171.452 98.632,171.640 98.863 C 172.659 100.121,172.950 114.733,171.992 116.519 C 171.743 116.983,171.375 118.386,171.175 119.635 C 170.827 121.807,168.674 126.939,167.915 127.409 C 167.716 127.532,167.553 127.903,167.553 128.233 C 167.553 128.726,166.045 131.302,165.354 131.989 C 165.253 132.090,164.768 132.915,164.276 133.822 C 163.443 135.362,160.077 140.012,159.499 140.422 C 159.357 140.522,159.090 140.881,158.905 141.219 C 158.258 142.406,153.797 147.079,152.615 147.809 C 151.958 148.215,151.421 148.777,151.421 149.058 C 151.421 149.339,150.963 149.806,150.403 150.095 C 149.843 150.384,148.739 151.214,147.948 151.938 C 147.158 152.662,146.363 153.254,146.182 153.254 C 145.860 153.254,144.864 153.960,142.516 155.854 C 141.868 156.377,140.805 156.986,140.153 157.208 C 139.501 157.429,137.951 158.207,136.708 158.935 C 135.465 159.664,133.936 160.353,133.310 160.468 C 132.684 160.582,131.760 160.941,131.256 161.266 C 129.857 162.166,127.575 162.982,123.740 163.953 C 122.933 164.157,121.982 164.476,121.627 164.661 C 121.271 164.847,119.817 165.243,118.395 165.542 C 116.972 165.841,115.531 166.232,115.191 166.409 C 114.852 166.587,113.336 166.932,111.824 167.177 C 110.312 167.421,108.084 167.848,106.874 168.124 C 105.665 168.401,103.767 168.789,102.658 168.987 C 98.897 169.660,94.780 170.541,93.676 170.910 C 93.071 171.112,91.421 171.524,90.009 171.825 C 88.598 172.127,87.077 172.609,86.631 172.896 C 86.184 173.184,85.488 173.419,85.085 173.419 C 84.681 173.419,83.727 173.694,82.964 174.031 C 79.383 175.610,78.451 176.070,78.281 176.346 C 78.180 176.509,77.404 177.004,76.557 177.445 C 74.919 178.299,73.408 179.364,72.108 180.580 C 71.669 180.990,70.857 181.613,70.302 181.964 C 69.748 182.315,69.294 182.772,69.294 182.980 C 69.294 183.188,68.298 184.515,67.081 185.929 C 60.724 193.315,58.357 206.917,62.273 213.555 C 62.707 214.289,63.061 215.037,63.061 215.216 C 63.061 215.699,67.527 219.982,68.030 219.982 C 68.268 219.982,68.856 220.287,69.336 220.661 C 70.408 221.494,73.153 222.417,76.909 223.209 C 80.051 223.872,315.355 224.178,320.440 223.526 C 323.577 223.124,329.973 220.802,329.973 220.065 C 329.973 219.905,330.433 219.501,330.995 219.169 C 332.565 218.241,333.747 215.538,333.711 212.956 C 333.650 208.672,330.744 205.823,323.923 203.361 L 321.723 202.566 278.277 202.717 C 136.135 203.211,109.813 203.017,104.502 201.437 C 99.589 199.975,96.801 196.158,98.193 192.799 C 98.673 191.639,101.341 188.818,101.957 188.818 C 102.300 188.818,102.665 188.596,102.769 188.325 C 103.115 187.423,108.573 186.434,122.368 184.774 C 124.034 184.573,126.014 184.176,126.768 183.892 C 127.522 183.607,128.886 183.274,129.799 183.153 C 130.712 183.031,131.927 182.688,132.499 182.391 C 133.071 182.094,133.746 181.852,133.998 181.852 C 134.250 181.852,134.850 181.545,135.331 181.171 C 135.812 180.797,136.820 180.378,137.571 180.240 C 138.322 180.102,140.054 179.483,141.420 178.864 C 142.787 178.245,144.482 177.501,145.188 177.211 C 145.894 176.920,146.884 176.440,147.388 176.144 C 147.892 175.848,149.212 175.171,150.321 174.639 C 153.099 173.307,158.886 169.901,160.119 168.871 C 160.679 168.405,161.673 167.748,162.328 167.412 C 162.984 167.076,163.520 166.640,163.520 166.443 C 163.520 166.247,163.759 166.086,164.051 166.086 C 164.343 166.086,165.456 165.261,166.525 164.253 C 167.593 163.245,168.574 162.420,168.705 162.420 C 168.946 162.420,171.521 159.834,176.556 154.537 C 178.090 152.924,179.938 150.697,180.664 149.588 C 181.391 148.478,182.773 146.553,183.736 145.309 C 185.267 143.333,188.084 138.406,188.084 137.705 C 188.084 137.569,188.400 137.119,188.786 136.705 C 189.172 136.290,189.846 134.936,190.285 133.695 C 191.062 131.494,191.778 129.790,192.988 127.258 C 193.316 126.572,193.584 125.546,193.584 124.979 C 193.584 124.412,193.814 123.242,194.096 122.378 C 196.554 114.832,196.847 99.838,194.711 90.926 C 194.493 90.018,194.156 88.451,193.962 87.443 C 193.565 85.387,192.944 83.609,192.012 81.870 C 191.667 81.224,191.384 80.413,191.384 80.067 C 191.384 79.720,190.642 78.064,189.734 76.386 C 188.827 74.707,188.084 73.003,188.084 72.597 C 188.084 72.192,187.919 71.861,187.718 71.861 C 187.516 71.861,187.351 71.612,187.351 71.307 C 187.351 71.003,187.009 70.466,186.592 70.116 C 186.174 69.765,185.600 68.983,185.316 68.378 C 184.543 66.731,184.103 66.079,181.485 62.697 C 180.368 61.255,177.218 57.731,176.044 56.612 C 175.573 56.162,175.020 55.631,174.816 55.431 C 172.338 53.009,169.893 50.962,169.476 50.962 C 169.269 50.962,168.297 50.297,167.318 49.484 C 166.338 48.671,165.124 47.903,164.620 47.778 C 164.115 47.653,163.237 47.164,162.667 46.690 C 162.097 46.217,161.418 45.830,161.158 45.830 C 160.898 45.830,160.292 45.521,159.811 45.143 C 159.330 44.766,157.782 44.011,156.370 43.465 C 154.959 42.919,153.035 42.158,152.096 41.772 C 149.218 40.592,143.839 38.863,143.044 38.863 C 142.629 38.863,141.334 38.600,140.165 38.277 C 135.918 37.106,123.795 36.347,120.257 37.031 M109.622 78.630 C 118.358 82.999,124.666 93.548,124.174 102.960 C 123.933 107.560,122.642 112.762,121.381 114.207 C 121.030 114.610,120.372 115.559,119.919 116.315 C 119.467 117.071,118.957 117.690,118.786 117.690 C 118.616 117.690,118.257 117.896,117.989 118.148 C 114.204 121.710,112.294 122.762,107.791 123.761 C 103.844 124.637,98.706 124.169,95.875 122.675 C 95.270 122.356,94.628 122.093,94.448 122.092 C 93.288 122.084,87.468 116.226,86.258 113.849 C 83.409 108.250,82.598 98.692,84.468 92.750 C 84.995 91.077,85.426 89.558,85.426 89.374 C 85.426 89.191,85.887 88.352,86.450 87.509 C 87.014 86.666,87.670 85.522,87.909 84.968 C 88.148 84.413,88.512 83.960,88.718 83.960 C 88.924 83.960,89.093 83.747,89.093 83.486 C 89.093 82.870,91.895 80.181,93.309 79.439 C 97.652 77.163,98.284 77.020,103.391 77.160 C 106.586 77.248,107.102 77.369,109.622 78.630 M120.859 94.959 C 121.089 95.261,121.359 95.839,121.458 96.242 C 121.629 96.938,121.640 96.936,121.681 96.195 C 121.704 95.766,121.434 95.189,121.082 94.912 C 120.524 94.474,120.495 94.480,120.859 94.959 M197.261 100.825 C 197.261 101.127,197.421 101.622,197.617 101.925 C 197.933 102.414,197.972 102.414,197.972 101.925 C 197.972 101.622,197.812 101.127,197.617 100.825 C 197.301 100.336,197.261 100.336,197.261 100.825 M71.311 249.690 C 69.093 249.800,66.948 250.029,66.544 250.199 C 65.286 250.731,58.341 258.218,57.899 259.520 C 57.128 261.789,53.223 261.528,94.042 261.933 C 107.956 262.071,120.907 262.317,122.823 262.479 C 124.739 262.642,148.744 262.805,176.169 262.842 C 203.593 262.879,226.710 263.000,227.540 263.111 C 231.970 263.705,330.125 264.161,331.933 263.596 C 334.620 262.758,337.114 259.745,338.644 255.491 L 339.310 253.638 338.356 252.818 C 336.777 251.460,307.640 250.958,208.616 250.583 C 182.099 250.483,159.248 250.342,157.837 250.270 C 156.425 250.198,139.267 250.034,119.707 249.905 C 100.147 249.776,82.163 249.630,79.743 249.581 C 77.324 249.532,73.529 249.581,71.311 249.690 M155.564 264.985 C 157.541 265.051,160.676 265.051,162.531 264.984 C 164.385 264.918,162.768 264.864,158.937 264.864 C 155.105 264.864,153.588 264.919,155.564 264.985 M170.767 264.977 C 171.426 265.059,172.416 265.057,172.967 264.973 C 173.518 264.890,172.979 264.823,171.769 264.825 C 170.559 264.827,170.108 264.895,170.767 264.977 M106.788 275.607 C 107.345 275.691,108.170 275.689,108.621 275.602 C 109.072 275.515,108.616 275.446,107.608 275.449 C 106.599 275.451,106.230 275.523,106.788 275.607 M132.814 275.613 C 133.772 275.689,135.339 275.689,136.297 275.613 C 137.255 275.538,136.471 275.476,134.555 275.476 C 132.640 275.476,131.856 275.538,132.814 275.613 M249.958 276.336 C 250.415 276.424,251.074 276.421,251.425 276.329 C 251.776 276.237,251.402 276.165,250.596 276.169 C 249.789 276.174,249.502 276.249,249.958 276.336 M256.370 276.330 C 256.723 276.422,257.301 276.422,257.654 276.330 C 258.006 276.238,257.718 276.162,257.012 276.162 C 256.306 276.162,256.017 276.238,256.370 276.330 M62.794 278.166 C 61.642 278.391,58.250 281.778,56.991 283.960 C 56.409 284.968,55.557 286.352,55.098 287.036 C 53.938 288.760,54.032 289.681,55.456 290.559 C 56.637 291.287,57.468 291.294,168.836 291.497 C 254.728 291.654,282.402 291.812,286.893 292.169 C 296.180 292.907,322.327 292.607,323.272 291.751 C 323.662 291.398,324.160 291.109,324.379 291.109 C 325.685 291.109,328.888 285.418,329.142 282.645 L 329.330 280.598 327.910 279.861 C 326.509 279.134,325.619 279.121,263.360 278.868 C 228.639 278.727,197.972 278.460,195.211 278.275 C 190.339 277.949,64.438 277.845,62.794 278.166 M71.952 293.562 C 72.305 293.654,72.883 293.654,73.236 293.562 C 73.588 293.469,73.300 293.394,72.594 293.394 C 71.888 293.394,71.599 293.469,71.952 293.562 M183.685 314.171 C 181.244 314.667,178.426 317.177,177.310 319.847 C 176.581 321.591,177.436 326.075,178.617 326.708 C 178.984 326.904,179.285 327.276,179.285 327.534 C 179.285 327.792,179.821 328.293,180.477 328.646 C 181.132 329.000,182.246 329.608,182.951 329.997 C 184.635 330.925,186.253 330.893,187.972 329.896 C 189.619 328.941,192.114 326.685,192.125 326.139 C 192.130 325.928,192.456 325.344,192.851 324.840 C 194.362 322.908,193.685 319.826,191.201 317.331 C 188.019 314.133,186.665 313.564,183.685 314.171 \\\" stroke=\\\"none\\\" fill=\\\"#040404\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path2\\\" d=\\\"M127.406 36.703 C 133.579 37.067,137.522 37.554,140.165 38.280 C 142.397 38.893,144.849 39.101,142.988 38.519 C 138.854 37.227,131.607 36.277,126.513 36.360 L 122.640 36.423 127.406 36.703 M117.324 37.030 C 116.819 37.192,115.821 37.340,115.105 37.360 C 114.390 37.380,113.647 37.540,113.456 37.714 C 113.264 37.888,112.035 38.235,110.724 38.483 C 107.777 39.042,102.805 40.637,99.989 41.926 C 98.824 42.460,97.803 42.896,97.722 42.896 C 97.496 42.896,94.013 45.016,90.742 47.145 C 83.543 51.831,75.966 59.906,71.637 67.507 C 71.413 67.900,70.898 68.587,70.494 69.033 C 70.089 69.479,69.464 70.339,69.105 70.944 C 68.621 71.759,68.842 71.616,69.957 70.394 C 70.785 69.487,71.470 68.633,71.478 68.497 C 71.487 68.362,71.890 67.779,72.375 67.204 C 72.860 66.628,73.776 65.133,74.411 63.883 C 75.047 62.632,75.774 61.482,76.028 61.327 C 76.281 61.172,77.391 59.973,78.493 58.662 C 80.761 55.966,82.185 54.534,85.285 51.831 C 88.881 48.696,89.589 48.148,90.966 47.433 C 91.695 47.055,93.014 46.260,93.900 45.665 C 99.274 42.055,107.241 39.228,116.224 37.744 C 117.534 37.527,119.349 37.215,120.257 37.050 L 121.907 36.750 120.073 36.744 C 119.065 36.740,117.828 36.869,117.324 37.030 M144.492 39.023 C 144.579 39.110,145.905 39.591,147.437 40.091 C 148.969 40.591,151.029 41.332,152.013 41.737 C 152.998 42.142,154.959 42.919,156.370 43.465 C 157.782 44.011,159.330 44.766,159.811 45.143 C 160.292 45.521,160.898 45.830,161.158 45.830 C 161.418 45.830,162.097 46.217,162.667 46.690 C 163.237 47.164,164.115 47.653,164.620 47.778 C 165.124 47.903,166.338 48.671,167.318 49.484 C 168.297 50.297,169.287 50.962,169.517 50.961 C 170.198 50.958,167.949 49.263,164.803 47.409 C 159.488 44.276,156.810 42.896,156.043 42.896 C 155.743 42.896,155.395 42.731,155.270 42.530 C 155.146 42.328,154.804 42.163,154.511 42.163 C 154.219 42.163,153.280 41.850,152.425 41.467 C 149.231 40.035,143.845 38.376,144.492 39.023 M171.586 52.445 C 173.091 53.781,173.768 54.406,174.816 55.431 C 175.020 55.631,175.573 56.162,176.044 56.612 C 177.218 57.731,180.368 61.255,181.485 62.697 C 184.103 66.079,184.543 66.731,185.316 68.378 C 185.949 69.726,187.351 71.014,187.351 70.246 C 187.351 69.968,187.101 69.643,186.796 69.526 C 186.490 69.409,186.087 68.909,185.899 68.416 C 185.529 67.442,183.439 64.380,181.744 62.328 C 181.161 61.622,180.246 60.509,179.710 59.854 C 179.174 59.198,178.082 58.044,177.285 57.287 C 176.487 56.531,175.264 55.293,174.566 54.537 C 173.869 53.781,173.162 53.162,172.995 53.162 C 172.828 53.162,172.219 52.667,171.641 52.062 C 171.063 51.457,170.443 50.967,170.263 50.972 C 170.083 50.977,170.678 51.640,171.586 52.445 M143.987 68.277 C 140.517 69.183,139.570 73.504,141.716 78.643 C 141.969 79.248,142.367 80.561,142.601 81.561 C 142.835 82.561,143.254 83.881,143.534 84.494 C 143.813 85.108,144.208 86.187,144.413 86.893 C 144.617 87.599,145.142 89.166,145.579 90.376 C 146.016 91.586,146.512 93.236,146.681 94.042 C 146.851 94.849,147.203 96.416,147.463 97.525 C 148.235 100.806,147.981 111.079,147.031 115.028 C 145.898 119.737,145.858 119.972,146.234 119.740 C 146.423 119.623,146.659 118.908,146.758 118.151 C 146.858 117.393,147.204 115.784,147.528 114.574 C 148.288 111.727,148.762 100.636,148.206 98.713 C 147.988 97.959,147.615 96.352,147.379 95.142 C 147.142 93.932,146.733 92.365,146.469 91.659 C 146.205 90.953,145.562 89.023,145.040 87.369 C 144.518 85.715,143.760 83.523,143.356 82.497 C 142.952 81.472,142.621 80.177,142.621 79.620 C 142.621 79.063,142.456 78.442,142.255 78.240 C 141.543 77.529,141.621 71.491,142.346 71.084 C 142.699 70.886,142.988 70.512,142.988 70.251 C 142.988 69.482,144.716 68.920,147.198 68.883 C 149.583 68.847,152.154 69.456,152.154 70.056 C 152.154 70.242,152.531 70.394,152.992 70.394 C 153.453 70.394,154.567 71.049,155.467 71.850 C 156.367 72.651,157.207 73.311,157.333 73.317 C 157.657 73.332,160.621 76.358,161.531 77.603 C 164.826 82.112,166.017 84.145,167.946 88.543 C 168.831 90.562,170.698 96.083,170.982 97.525 C 171.082 98.029,171.112 97.699,171.049 96.792 C 170.934 95.146,169.355 90.127,168.701 89.330 C 168.511 89.098,168.066 88.002,167.712 86.893 C 167.027 84.745,165.327 81.888,163.132 79.193 C 162.393 78.286,161.522 77.049,161.197 76.444 C 160.872 75.839,159.983 74.801,159.221 74.137 C 156.494 71.758,153.661 69.661,153.177 69.661 C 152.906 69.661,152.358 69.436,151.961 69.161 C 150.580 68.207,146.141 67.715,143.987 68.277 M187.351 71.449 C 187.351 71.675,187.516 71.861,187.718 71.861 C 187.919 71.861,188.089 72.232,188.095 72.686 C 188.102 73.139,188.677 74.500,189.374 75.710 C 190.927 78.406,191.080 77.821,189.551 75.035 C 188.946 73.932,188.451 72.787,188.451 72.490 C 188.451 72.193,188.203 71.745,187.901 71.494 C 187.521 71.179,187.351 71.165,187.351 71.449 M66.556 75.644 C 65.555 77.495,64.543 79.545,64.309 80.198 C 64.075 80.852,63.616 81.795,63.289 82.294 C 62.962 82.792,62.695 83.527,62.695 83.925 C 62.695 84.324,62.530 84.752,62.328 84.876 C 62.126 85.001,61.962 85.516,61.962 86.022 C 61.962 86.527,61.786 87.269,61.571 87.670 C 61.356 88.072,61.251 88.597,61.336 88.838 C 61.422 89.079,61.698 88.533,61.951 87.626 C 62.836 84.448,63.063 83.884,65.781 78.093 C 66.302 76.984,67.148 75.358,67.662 74.478 C 68.175 73.599,68.546 72.744,68.486 72.579 C 68.427 72.413,67.558 73.792,66.556 75.644 M102.841 77.307 C 105.527 77.503,106.586 77.769,108.530 78.737 C 109.844 79.391,111.141 79.927,111.412 79.927 C 112.199 79.927,118.666 86.677,119.550 88.422 C 119.993 89.295,120.466 90.092,120.602 90.192 C 120.737 90.293,121.062 90.953,121.323 91.659 C 121.584 92.365,121.929 93.272,122.090 93.676 C 125.357 101.853,123.215 114.340,117.954 117.787 C 117.462 118.109,116.830 118.591,116.550 118.857 C 110.741 124.367,98.642 125.470,93.652 120.943 C 93.236 120.566,92.760 120.257,92.594 120.257 C 92.008 120.257,86.893 114.669,86.893 114.029 C 86.893 113.672,86.662 113.189,86.381 112.955 C 86.099 112.721,85.593 111.689,85.257 110.661 C 84.638 108.769,84.533 108.258,83.955 104.308 C 83.640 102.163,83.636 102.181,83.781 105.041 C 84.008 109.544,85.931 114.371,88.600 117.140 C 90.440 119.050,94.030 122.089,94.448 122.092 C 94.628 122.093,95.270 122.356,95.875 122.675 C 98.706 124.169,103.844 124.637,107.791 123.761 C 112.294 122.762,114.204 121.710,117.989 118.148 C 118.257 117.896,118.616 117.690,118.786 117.690 C 118.957 117.690,119.467 117.071,119.919 116.315 C 120.372 115.559,121.030 114.610,121.381 114.207 C 122.642 112.762,123.933 107.560,124.174 102.960 C 124.666 93.548,118.358 82.999,109.622 78.630 C 107.066 77.352,106.618 77.249,103.208 77.161 L 99.542 77.066 102.841 77.307 M96.792 77.709 C 96.489 77.878,95.830 78.206,95.325 78.439 C 93.064 79.484,92.107 80.114,90.651 81.514 C 89.794 82.338,89.093 83.143,89.093 83.303 C 89.093 83.462,88.763 83.923,88.359 84.326 C 87.956 84.730,87.626 85.237,87.626 85.454 C 87.626 85.671,88.038 85.359,88.543 84.760 C 89.047 84.161,89.459 83.516,89.459 83.326 C 89.459 83.137,90.160 82.425,91.017 81.743 C 91.874 81.061,92.631 80.374,92.698 80.215 C 92.765 80.057,93.052 79.927,93.335 79.927 C 93.619 79.927,94.187 79.639,94.598 79.287 C 95.009 78.934,96.290 78.370,97.444 78.033 C 99.041 77.566,99.279 77.418,98.442 77.412 C 97.837 77.407,97.094 77.541,96.792 77.709 M191.402 80.293 C 191.393 80.596,191.682 81.338,192.042 81.943 C 192.403 82.548,192.924 83.745,193.200 84.603 C 193.476 85.461,193.770 86.095,193.853 86.013 C 194.065 85.801,192.979 82.703,192.129 81.093 C 191.737 80.351,191.410 79.991,191.402 80.293 M86.374 87.644 C 85.829 88.469,85.455 89.338,85.545 89.576 C 85.639 89.827,85.827 89.701,85.993 89.276 C 86.150 88.873,86.600 88.079,86.992 87.513 C 87.385 86.947,87.630 86.408,87.536 86.314 C 87.443 86.221,86.920 86.819,86.374 87.644 M194.002 87.626 C 194.002 88.130,194.144 88.873,194.317 89.276 C 194.604 89.944,194.632 89.928,194.632 89.093 C 194.632 88.588,194.490 87.846,194.317 87.443 C 194.030 86.774,194.002 86.791,194.002 87.626 M60.731 90.073 C 60.336 91.415,59.695 96.720,59.847 97.388 C 59.934 97.766,60.119 97.085,60.259 95.875 C 60.399 94.665,60.701 92.808,60.930 91.749 C 61.321 89.941,61.163 88.610,60.731 90.073 M84.418 92.852 C 83.901 94.567,83.617 96.396,83.657 97.749 C 83.712 99.599,83.738 99.672,83.836 98.258 C 83.983 96.136,84.720 92.702,85.149 92.138 C 85.333 91.897,85.429 91.343,85.363 90.907 C 85.289 90.421,84.924 91.173,84.418 92.852 M194.689 91.201 C 194.692 91.554,194.855 92.090,195.050 92.392 C 195.320 92.810,195.407 92.655,195.411 91.751 C 195.415 91.095,195.252 90.559,195.050 90.559 C 194.849 90.559,194.686 90.848,194.689 91.201 M195.428 95.325 C 195.428 95.830,195.588 96.489,195.784 96.792 C 196.065 97.227,196.139 97.151,196.139 96.425 C 196.139 95.921,195.979 95.261,195.784 94.959 C 195.502 94.523,195.428 94.600,195.428 95.325 M196.150 105.408 C 196.150 109.407,196.233 112.597,196.333 112.496 C 196.601 112.229,196.641 98.627,196.375 98.361 C 196.252 98.238,196.150 101.408,196.150 105.408 M59.486 102.291 C 59.476 104.636,59.574 105.706,59.737 105.029 C 59.883 104.417,59.891 102.684,59.753 101.179 C 59.503 98.444,59.503 98.445,59.486 102.291 M171.219 99.261 C 171.219 99.692,171.397 100.508,171.614 101.076 C 172.148 102.471,172.150 115.440,171.617 115.973 C 171.398 116.191,171.226 116.791,171.233 117.305 C 171.247 118.168,171.293 118.141,171.828 116.957 C 172.934 114.508,172.751 100.010,171.598 98.858 C 171.337 98.597,171.219 98.722,171.219 99.261 M59.840 107.608 C 59.837 108.414,59.967 109.487,60.128 109.991 L 60.422 110.907 60.437 109.991 C 60.446 109.487,60.316 108.414,60.149 107.608 L 59.846 106.141 59.840 107.608 M60.526 112.557 C 60.537 112.860,60.688 113.437,60.862 113.841 L 61.177 114.574 61.197 113.841 C 61.208 113.437,61.057 112.860,60.862 112.557 C 60.546 112.068,60.508 112.068,60.526 112.557 M195.656 114.882 C 195.494 115.859,195.449 116.744,195.555 116.850 C 195.862 117.157,196.220 115.315,196.079 114.160 C 195.974 113.304,195.895 113.439,195.656 114.882 M61.426 115.490 C 61.557 115.995,61.789 117.149,61.941 118.057 C 62.094 118.964,62.499 120.449,62.842 121.357 C 63.184 122.264,63.715 123.805,64.020 124.780 C 64.326 125.756,65.204 127.581,65.971 128.835 C 66.739 130.089,67.481 131.475,67.621 131.916 C 68.192 133.714,76.407 142.621,77.495 142.621 C 77.746 142.621,78.519 143.047,79.214 143.568 C 79.908 144.088,81.219 144.847,82.126 145.253 C 83.034 145.660,84.354 146.283,85.060 146.638 C 86.323 147.274,89.168 148.232,93.126 149.354 C 95.681 150.078,99.595 150.701,101.222 150.642 C 101.911 150.616,100.907 150.375,98.992 150.105 C 89.220 148.729,75.112 142.468,74.276 139.136 C 74.162 138.680,73.578 138.111,72.965 137.857 C 72.358 137.605,71.859 137.296,71.856 137.169 C 71.853 137.042,70.946 135.814,69.840 134.439 C 68.733 133.065,67.828 131.720,67.828 131.452 C 67.828 131.184,67.141 129.834,66.302 128.453 C 65.463 127.072,64.649 125.446,64.494 124.841 C 64.338 124.235,63.787 122.619,63.270 121.248 C 62.752 119.878,62.328 118.371,62.328 117.899 C 62.328 117.427,62.072 116.486,61.758 115.807 C 61.393 115.018,61.274 114.904,61.426 115.490 M195.095 118.423 C 195.065 118.726,194.949 119.386,194.837 119.890 C 194.661 120.682,194.690 120.718,195.049 120.154 C 195.278 119.796,195.394 119.136,195.308 118.688 C 195.221 118.240,195.126 118.121,195.095 118.423 M170.708 119.737 C 170.586 120.056,170.486 120.605,170.486 120.958 C 170.486 121.310,170.074 122.411,169.571 123.403 C 169.067 124.395,168.655 125.381,168.654 125.595 C 168.653 125.809,168.323 126.339,167.919 126.772 C 167.516 127.205,167.186 127.896,167.186 128.307 C 167.186 128.719,167.049 129.056,166.881 129.056 C 166.714 129.056,166.346 129.510,166.064 130.064 C 165.782 130.619,165.209 131.567,164.792 132.172 C 164.374 132.777,163.825 133.692,163.571 134.206 C 163.317 134.719,162.047 136.489,160.748 138.139 C 159.449 139.788,158.387 141.242,158.387 141.368 C 158.387 141.687,150.643 149.375,149.898 149.795 C 149.564 149.983,148.656 150.680,147.881 151.344 C 145.564 153.327,143.646 154.719,143.213 154.735 C 142.988 154.744,142.234 155.238,141.535 155.835 C 140.837 156.432,139.993 156.920,139.660 156.920 C 139.327 156.920,138.661 157.221,138.180 157.589 C 136.832 158.621,133.401 160.220,132.536 160.220 C 132.110 160.220,131.406 160.550,130.974 160.953 C 130.541 161.357,129.937 161.687,129.631 161.687 C 129.325 161.687,128.370 162.000,127.508 162.383 C 126.645 162.766,125.032 163.283,123.923 163.532 C 122.814 163.780,121.461 164.209,120.916 164.485 C 120.372 164.761,119.465 164.989,118.900 164.992 C 118.335 164.995,117.626 165.170,117.324 165.380 C 116.577 165.900,119.683 165.442,121.173 164.812 C 121.778 164.557,122.933 164.176,123.740 163.965 C 127.769 162.912,129.870 162.158,131.256 161.266 C 131.760 160.941,132.684 160.582,133.310 160.468 C 133.936 160.353,135.465 159.664,136.708 158.935 C 137.951 158.207,139.501 157.429,140.153 157.208 C 140.805 156.986,141.868 156.377,142.516 155.854 C 144.864 153.960,145.860 153.254,146.182 153.254 C 146.363 153.254,147.158 152.662,147.948 151.938 C 148.739 151.214,149.843 150.384,150.403 150.095 C 150.963 149.806,151.421 149.339,151.421 149.058 C 151.421 148.777,151.958 148.215,152.615 147.809 C 153.797 147.079,158.258 142.406,158.905 141.219 C 159.090 140.881,159.357 140.522,159.499 140.422 C 160.077 140.012,163.443 135.362,164.276 133.822 C 164.768 132.915,165.253 132.090,165.354 131.989 C 166.045 131.302,167.553 128.726,167.553 128.233 C 167.553 127.903,167.716 127.532,167.915 127.409 C 168.490 127.053,170.774 122.044,171.050 120.532 C 171.305 119.133,171.112 118.684,170.708 119.737 M144.346 123.057 C 142.330 127.317,138.811 132.859,136.698 135.105 C 133.004 139.031,130.101 141.888,129.807 141.888 C 129.618 141.888,128.835 142.480,128.068 143.204 C 127.301 143.928,126.165 144.743,125.544 145.016 C 124.923 145.289,124.201 145.769,123.941 146.083 C 123.680 146.397,123.161 146.654,122.787 146.654 C 122.413 146.654,121.570 146.981,120.914 147.380 C 119.681 148.130,118.017 148.689,113.291 149.943 C 111.778 150.344,111.118 150.602,111.824 150.517 C 115.109 150.119,118.609 149.067,121.040 147.746 C 121.773 147.347,122.606 147.021,122.890 147.021 C 123.175 147.021,123.730 146.770,124.123 146.464 C 124.517 146.157,125.582 145.413,126.489 144.810 C 132.992 140.488,137.567 135.603,142.217 128.021 C 143.246 126.342,144.088 124.856,144.088 124.718 C 144.088 124.580,144.510 123.674,145.027 122.704 C 145.543 121.734,145.908 120.768,145.838 120.557 C 145.768 120.347,145.097 121.472,144.346 123.057 M194.004 122.640 C 193.775 123.446,193.587 124.535,193.586 125.058 C 193.585 125.582,193.316 126.572,192.988 127.258 C 191.778 129.790,191.062 131.494,190.285 133.695 C 189.846 134.936,189.172 136.290,188.786 136.705 C 188.400 137.119,188.084 137.569,188.084 137.705 C 188.084 138.406,185.267 143.333,183.736 145.309 C 182.773 146.553,181.391 148.478,180.664 149.588 C 179.938 150.697,178.090 152.924,176.556 154.537 C 171.521 159.834,168.946 162.420,168.705 162.420 C 168.574 162.420,167.593 163.245,166.525 164.253 C 165.456 165.261,164.343 166.086,164.051 166.086 C 163.759 166.086,163.520 166.247,163.520 166.443 C 163.520 166.640,162.984 167.076,162.328 167.412 C 161.673 167.748,160.679 168.405,160.119 168.871 C 158.886 169.901,153.099 173.307,150.321 174.639 C 149.212 175.171,147.892 175.848,147.388 176.144 C 146.884 176.440,145.894 176.920,145.188 177.211 C 144.482 177.501,142.787 178.245,141.420 178.864 C 140.054 179.483,138.322 180.102,137.571 180.240 C 136.820 180.378,135.812 180.797,135.331 181.171 C 134.178 182.068,134.950 182.039,136.755 181.118 C 137.546 180.715,138.438 180.385,138.738 180.385 C 139.038 180.385,140.059 179.973,141.007 179.468 C 141.955 178.964,142.912 178.552,143.134 178.551 C 144.378 178.550,158.318 170.910,161.365 168.561 C 162.084 168.006,162.849 167.553,163.065 167.553 C 163.282 167.553,163.514 167.415,163.581 167.246 C 163.648 167.077,164.412 166.429,165.279 165.806 C 166.145 165.183,167.189 164.249,167.597 163.730 C 168.005 163.211,168.520 162.786,168.741 162.786 C 169.526 162.786,179.125 152.616,181.251 149.532 C 181.994 148.454,183.168 146.829,183.859 145.921 C 185.380 143.926,188.084 139.409,188.084 138.866 C 188.084 138.651,188.466 137.964,188.933 137.340 C 189.400 136.716,190.158 135.215,190.618 134.005 C 191.078 132.796,191.750 131.228,192.112 130.522 C 192.475 129.817,192.884 128.705,193.022 128.052 C 193.161 127.399,193.426 126.770,193.612 126.655 C 193.798 126.540,193.951 125.986,193.951 125.423 C 193.951 124.860,194.130 123.883,194.350 123.252 C 194.570 122.621,194.676 121.896,194.585 121.639 C 194.495 121.383,194.233 121.833,194.004 122.640 M114.574 166.065 C 113.381 166.546,110.421 167.186,109.386 167.186 C 108.858 167.186,107.829 167.344,107.100 167.538 C 106.371 167.732,104.372 168.154,102.658 168.475 C 97.782 169.391,93.889 170.406,95.142 170.435 C 95.747 170.448,97.232 170.205,98.442 169.893 C 99.652 169.582,101.549 169.169,102.658 168.977 C 103.767 168.784,105.665 168.401,106.874 168.124 C 108.084 167.848,110.299 167.421,111.797 167.176 C 114.546 166.726,117.504 165.738,116.040 165.759 C 115.637 165.764,114.977 165.902,114.574 166.065 M90.834 171.072 C 88.673 171.737,88.588 172.038,90.651 171.723 C 92.464 171.446,94.548 170.508,93.309 170.526 C 92.906 170.532,91.792 170.778,90.834 171.072 M86.526 172.502 C 86.022 172.790,85.239 173.032,84.786 173.039 C 83.779 173.055,79.693 174.950,77.103 176.602 C 76.054 177.271,75.064 177.825,74.903 177.833 C 72.549 177.945,63.083 189.575,61.785 193.951 C 61.636 194.455,61.304 195.362,61.049 195.967 C 59.892 198.707,59.569 206.664,60.477 210.082 C 61.126 212.523,63.141 216.657,63.785 216.865 C 64.093 216.965,64.626 217.542,64.969 218.148 C 65.313 218.753,65.849 219.248,66.161 219.248 C 66.473 219.248,66.728 219.417,66.728 219.623 C 66.728 219.829,67.181 220.191,67.736 220.427 C 68.291 220.663,68.992 221.042,69.294 221.268 C 70.286 222.011,77.650 224.026,79.290 224.004 C 80.698 223.984,79.227 223.405,77.081 223.133 C 74.454 222.800,70.412 221.516,69.342 220.673 C 68.858 220.293,68.268 219.982,68.030 219.982 C 67.527 219.982,63.061 215.699,63.061 215.216 C 63.061 215.037,62.707 214.289,62.273 213.555 C 58.357 206.917,60.724 193.315,67.081 185.929 C 68.298 184.515,69.294 183.188,69.294 182.980 C 69.294 182.772,69.748 182.315,70.302 181.964 C 70.857 181.613,71.669 180.990,72.108 180.580 C 73.408 179.364,74.919 178.299,76.557 177.445 C 77.404 177.004,78.180 176.509,78.281 176.346 C 78.451 176.070,79.383 175.610,82.964 174.031 C 83.727 173.694,84.748 173.419,85.234 173.419 C 85.719 173.419,86.217 173.257,86.339 173.058 C 86.462 172.860,87.090 172.545,87.736 172.358 C 88.458 172.149,88.628 172.011,88.176 171.998 C 87.773 171.987,87.030 172.214,86.526 172.502 M132.921 182.193 C 132.805 182.381,131.764 182.721,130.608 182.948 C 129.452 183.176,127.757 183.604,126.841 183.899 C 125.926 184.195,123.946 184.584,122.442 184.763 C 108.845 186.389,103.113 187.427,102.769 188.325 C 102.665 188.596,102.300 188.818,101.957 188.818 C 101.341 188.818,98.673 191.639,98.193 192.799 C 96.314 197.334,101.341 201.680,109.067 202.200 L 111.641 202.373 108.365 201.834 C 106.563 201.537,104.921 201.126,104.717 200.922 C 104.512 200.717,104.045 200.550,103.680 200.550 C 101.430 200.550,97.999 196.132,98.606 194.017 C 99.014 192.596,101.442 189.185,102.048 189.182 C 102.283 189.181,102.944 188.935,103.517 188.636 C 105.318 187.697,108.229 186.951,111.457 186.602 C 113.171 186.416,115.729 186.089,117.140 185.874 C 118.552 185.660,120.862 185.341,122.273 185.167 C 127.445 184.527,136.652 181.852,133.682 181.852 C 133.380 181.852,133.037 182.005,132.921 182.193 M276.810 202.021 C 254.484 202.203,254.739 202.209,286.709 202.240 C 304.757 202.258,318.203 202.153,316.590 202.008 C 313.485 201.727,312.645 201.727,276.810 202.021 M114.757 202.805 C 117.299 203.106,228.629 203.094,242.713 202.791 C 248.460 202.668,221.567 202.566,182.951 202.566 C 144.335 202.566,113.648 202.674,114.757 202.805 M321.421 202.766 C 324.329 203.341,327.808 204.800,330.371 206.519 C 334.428 209.241,334.807 216.918,330.995 219.169 C 330.433 219.501,329.973 219.905,329.973 220.065 C 329.973 220.394,327.761 221.452,325.056 222.417 C 324.066 222.770,323.454 223.125,323.696 223.206 C 325.399 223.773,333.272 218.877,333.272 217.250 C 333.272 216.971,333.462 216.680,333.694 216.603 C 334.585 216.306,334.223 210.291,333.236 208.976 C 330.584 205.446,324.793 202.307,321.147 202.423 C 319.900 202.463,319.902 202.466,321.421 202.766 M318.790 223.648 C 317.807 223.898,317.865 223.928,319.340 223.928 C 320.247 223.928,321.485 223.802,322.090 223.648 C 323.073 223.398,323.015 223.368,321.540 223.368 C 320.632 223.368,319.395 223.494,318.790 223.648 M84.326 224.376 C 87.639 224.703,307.052 224.729,312.924 224.403 C 315.545 224.258,264.647 224.139,199.817 224.140 C 134.986 224.141,83.016 224.247,84.326 224.376 M69.111 249.179 C 65.638 249.923,65.410 250.071,61.743 253.983 C 56.943 259.103,56.107 260.804,57.916 261.771 C 58.937 262.318,81.121 262.598,170.119 263.191 C 201.072 263.397,237.251 263.732,250.515 263.934 C 287.170 264.493,330.174 264.526,332.121 263.996 C 333.880 263.518,336.365 261.378,337.374 259.472 C 341.108 252.420,340.879 251.892,333.895 251.447 C 328.674 251.115,313.849 251.015,313.554 251.310 C 313.443 251.422,316.240 251.512,319.771 251.512 C 332.024 251.512,337.266 251.881,338.356 252.818 L 339.310 253.638 338.644 255.491 C 337.114 259.745,334.620 262.758,331.933 263.596 C 330.125 264.161,231.970 263.705,227.540 263.111 C 226.710 263.000,203.593 262.879,176.169 262.842 C 148.744 262.805,124.739 262.642,122.823 262.479 C 120.907 262.317,107.956 262.071,94.042 261.933 C 53.223 261.528,57.128 261.789,57.899 259.520 C 58.404 258.034,65.362 250.730,66.886 250.088 C 68.163 249.549,123.865 249.511,145.921 250.033 C 153.281 250.207,166.893 250.328,176.169 250.301 C 185.445 250.274,189.734 250.212,185.701 250.164 C 181.668 250.115,166.902 249.905,152.887 249.696 C 124.337 249.272,70.238 248.938,69.111 249.179 M202.475 250.687 C 207.466 250.745,215.632 250.745,220.623 250.687 C 225.614 250.630,221.531 250.582,211.549 250.582 C 201.567 250.582,197.484 250.630,202.475 250.687 M237.489 250.681 C 238.346 250.758,239.748 250.758,240.605 250.681 C 241.462 250.604,240.761 250.541,239.047 250.541 C 237.333 250.541,236.632 250.604,237.489 250.681 M261.778 250.785 C 277.052 251.082,307.806 251.222,307.577 250.993 C 307.493 250.909,294.143 250.770,277.910 250.683 C 259.593 250.585,253.473 250.623,261.778 250.785 M309.904 251.042 C 310.462 251.126,311.286 251.124,311.737 251.037 C 312.188 250.950,311.732 250.881,310.724 250.884 C 309.716 250.887,309.347 250.958,309.904 251.042 M61.962 278.124 C 60.491 278.757,58.449 280.859,56.470 283.776 C 53.189 288.612,53.118 289.882,56.042 291.447 C 56.563 291.726,82.836 291.851,145.439 291.873 C 194.201 291.889,245.976 292.069,260.495 292.271 C 275.014 292.474,294.152 292.683,303.025 292.736 L 319.157 292.832 301.178 292.590 C 291.042 292.454,282.965 292.198,282.662 292.004 C 282.333 291.792,238.788 291.589,169.386 291.476 C 57.448 291.294,56.637 291.287,55.456 290.559 C 54.032 289.681,53.938 288.760,55.098 287.036 C 55.557 286.352,56.409 284.968,56.991 283.960 C 58.422 281.480,61.620 278.437,63.108 278.139 C 64.957 277.769,189.581 277.898,195.212 278.275 C 197.972 278.460,228.639 278.727,263.360 278.868 C 325.619 279.121,326.509 279.134,327.910 279.861 L 329.330 280.598 329.142 282.645 C 328.880 285.507,325.677 291.109,324.304 291.109 C 324.043 291.109,323.631 291.348,323.388 291.641 C 323.141 291.939,322.113 292.232,321.052 292.306 L 319.157 292.440 321.289 292.508 C 326.742 292.681,332.487 281.595,328.103 279.358 C 326.730 278.658,325.282 278.637,264.266 278.444 C 229.928 278.336,199.193 278.090,195.967 277.897 C 185.307 277.261,63.488 277.468,61.962 278.124 M180.982 314.985 C 179.350 316.066,177.452 318.120,177.452 318.804 C 177.452 318.976,177.842 318.587,178.319 317.941 C 179.509 316.327,182.138 314.484,183.685 314.178 L 184.968 313.925 183.839 313.883 C 183.135 313.856,182.061 314.271,180.982 314.985 M187.045 314.100 C 187.607 314.186,188.981 315.176,190.276 316.428 C 192.831 318.897,193.514 319.277,191.721 317.232 C 189.831 315.075,188.084 313.835,187.026 313.895 L 186.068 313.950 187.045 314.100 M193.676 322.456 C 193.680 323.263,193.755 323.550,193.843 323.094 C 193.931 322.638,193.928 321.978,193.836 321.627 C 193.744 321.277,193.672 321.650,193.676 322.456 M176.747 322.456 C 176.710 323.786,177.735 326.545,178.609 327.467 C 179.866 328.792,182.796 330.706,183.567 330.705 C 184.212 330.705,183.876 330.481,180.477 328.646 C 179.821 328.293,179.285 327.795,179.285 327.540 C 179.285 327.285,178.996 326.915,178.643 326.718 C 178.275 326.512,177.739 325.372,177.385 324.041 C 177.046 322.766,176.759 322.053,176.747 322.456 M192.717 324.999 C 192.387 325.502,192.117 326.051,192.117 326.218 C 192.117 326.713,189.466 329.075,188.142 329.760 C 187.468 330.108,187.000 330.477,187.102 330.579 C 187.650 331.127,192.058 327.387,192.941 325.625 C 193.704 324.102,193.563 323.707,192.717 324.999 M184.876 330.959 C 185.229 331.051,185.807 331.051,186.159 330.959 C 186.512 330.866,186.224 330.791,185.518 330.791 C 184.812 330.791,184.523 330.866,184.876 330.959 \\\" stroke=\\\"none\\\" fill=\\\"#2c2c2c\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path3\\\" d=\\\"M122.640 35.197 C 122.510 35.407,120.627 35.564,118.240 35.564 C 115.854 35.564,113.970 35.721,113.841 35.930 C 113.716 36.132,112.891 36.297,112.007 36.297 C 111.124 36.297,110.299 36.462,110.174 36.664 C 110.050 36.865,109.307 37.030,108.524 37.030 C 107.741 37.030,106.999 37.195,106.874 37.397 C 106.750 37.599,106.204 37.769,105.661 37.775 C 105.119 37.782,104.354 38.029,103.963 38.325 C 103.571 38.621,102.953 38.863,102.588 38.863 C 102.223 38.863,101.925 39.028,101.925 39.230 C 101.925 39.432,101.512 39.597,101.008 39.597 C 100.504 39.597,100.092 39.762,100.092 39.963 C 100.092 40.165,99.597 40.330,98.992 40.330 C 98.387 40.330,97.892 40.495,97.892 40.697 C 97.892 40.898,97.650 41.063,97.355 41.063 C 96.712 41.063,93.360 42.877,93.187 43.319 C 93.119 43.490,92.831 43.630,92.545 43.630 C 92.259 43.630,92.026 43.795,92.026 43.996 C 92.026 44.198,91.732 44.363,91.373 44.363 C 91.015 44.363,90.483 44.693,90.192 45.096 C 89.902 45.500,89.403 45.830,89.084 45.830 C 88.764 45.830,87.943 46.407,87.259 47.113 C 86.575 47.819,85.885 48.396,85.725 48.396 C 85.142 48.396,82.114 51.199,80.848 52.910 C 80.447 53.452,79.952 53.899,79.748 53.903 C 79.544 53.908,78.882 54.502,78.277 55.223 C 77.672 55.944,76.599 57.166,75.894 57.937 C 74.059 59.942,73.363 60.883,72.714 62.236 C 72.401 62.892,71.998 63.428,71.819 63.428 C 71.640 63.428,71.494 63.605,71.494 63.821 C 71.494 64.037,71.288 64.444,71.036 64.725 C 69.914 65.975,69.661 66.361,69.661 66.815 C 69.661 67.081,69.331 67.537,68.928 67.828 C 68.524 68.118,68.194 68.636,68.194 68.978 C 68.194 69.320,68.063 69.655,67.902 69.722 C 67.741 69.789,67.251 70.587,66.813 71.494 C 65.765 73.665,64.778 75.314,64.436 75.466 C 64.285 75.533,64.161 75.907,64.161 76.296 C 64.161 76.685,63.971 77.373,63.737 77.823 C 62.848 79.544,62.695 79.933,62.695 80.472 C 62.695 80.777,62.530 81.027,62.328 81.027 C 62.126 81.027,61.962 81.285,61.962 81.601 C 61.962 81.916,61.760 82.535,61.514 82.976 C 60.759 84.326,60.140 86.291,60.134 87.351 C 60.131 87.906,59.963 88.359,59.762 88.359 C 59.560 88.359,59.395 89.092,59.395 89.988 C 59.395 90.883,59.230 91.718,59.028 91.842 C 58.827 91.967,58.662 93.204,58.662 94.592 C 58.662 95.980,58.497 97.217,58.295 97.342 C 58.084 97.472,57.929 99.423,57.929 101.946 C 57.929 104.621,58.071 106.324,58.295 106.324 C 58.511 106.324,58.662 107.608,58.662 109.441 C 58.662 111.274,58.813 112.557,59.028 112.557 C 59.230 112.557,59.395 113.455,59.395 114.552 C 59.395 115.649,59.560 116.649,59.762 116.774 C 59.963 116.898,60.128 117.650,60.128 118.445 C 60.128 119.240,60.293 119.890,60.495 119.890 C 60.697 119.890,60.862 120.366,60.862 120.948 C 60.862 121.530,61.108 122.479,61.409 123.056 C 61.711 123.634,61.958 124.395,61.959 124.748 C 61.960 125.101,62.126 125.390,62.328 125.390 C 62.530 125.390,62.695 125.710,62.695 126.101 C 62.695 126.493,62.860 126.915,63.061 127.039 C 63.263 127.164,63.428 127.586,63.428 127.978 C 63.428 128.369,63.593 128.689,63.795 128.689 C 63.996 128.689,64.161 129.019,64.161 129.423 C 64.161 129.826,64.326 130.156,64.528 130.156 C 64.730 130.156,64.895 130.378,64.895 130.649 C 64.895 131.468,65.910 133.237,66.710 133.811 C 67.123 134.108,67.461 134.644,67.461 135.003 C 67.461 135.362,67.626 135.655,67.828 135.655 C 68.029 135.655,68.194 135.839,68.194 136.064 C 68.194 136.516,70.730 138.955,71.199 138.955 C 71.361 138.955,71.494 139.173,71.494 139.439 C 71.494 139.706,72.254 140.572,73.182 141.364 C 74.111 142.157,75.089 143.011,75.356 143.263 C 75.623 143.515,76.087 143.721,76.387 143.721 C 76.687 143.721,76.987 143.852,77.055 144.012 C 77.293 144.577,79.822 146.288,80.420 146.288 C 80.753 146.288,81.027 146.453,81.027 146.654 C 81.027 146.856,81.357 147.021,81.760 147.021 C 82.163 147.021,82.493 147.186,82.493 147.388 C 82.493 147.589,82.813 147.754,83.205 147.754 C 83.596 147.754,84.018 147.919,84.143 148.121 C 84.268 148.323,84.690 148.488,85.081 148.488 C 85.473 148.488,85.793 148.640,85.793 148.825 C 85.793 149.011,86.286 149.271,86.889 149.403 C 87.491 149.536,88.078 149.796,88.193 149.982 C 88.308 150.169,88.888 150.321,89.481 150.321 C 90.074 150.321,90.559 150.486,90.559 150.687 C 90.559 150.889,91.302 151.054,92.209 151.054 C 93.116 151.054,93.859 151.219,93.859 151.421 C 93.859 151.627,94.890 151.787,96.220 151.787 C 97.519 151.787,98.684 151.952,98.808 152.154 C 99.116 152.651,112.557 152.651,112.557 152.154 C 112.557 151.952,113.465 151.787,114.574 151.787 C 115.683 151.787,116.590 151.622,116.590 151.421 C 116.590 151.219,116.993 151.054,117.485 151.054 C 117.977 151.054,118.482 150.889,118.607 150.687 C 118.731 150.486,119.195 150.319,119.637 150.316 C 120.078 150.314,121.158 149.901,122.036 149.400 C 122.913 148.898,123.862 148.488,124.144 148.488 C 124.426 148.488,124.656 148.342,124.656 148.164 C 124.656 147.986,125.522 147.399,126.581 146.859 C 129.219 145.513,134.876 141.061,134.909 140.304 C 134.925 139.940,135.874 138.955,136.208 138.955 C 136.512 138.955,138.912 136.453,139.872 135.136 C 140.275 134.582,140.903 133.777,141.267 133.346 C 141.632 132.915,142.187 132.021,142.501 131.359 C 142.815 130.697,143.218 130.156,143.396 130.156 C 143.575 130.156,143.721 129.826,143.721 129.423 C 143.721 129.019,143.886 128.689,144.088 128.689 C 144.290 128.689,144.455 128.373,144.455 127.987 C 144.455 127.600,144.588 127.229,144.752 127.162 C 145.255 126.954,147.021 123.095,147.021 122.201 C 147.021 121.737,147.186 121.357,147.388 121.357 C 147.589 121.357,147.754 121.036,147.754 120.645 C 147.754 120.254,147.919 119.831,148.121 119.707 C 148.323 119.582,148.488 118.830,148.488 118.035 C 148.488 117.240,148.653 116.590,148.854 116.590 C 149.056 116.590,149.221 115.949,149.221 115.166 C 149.221 114.382,149.467 113.268,149.769 112.691 C 150.166 111.930,150.316 110.431,150.316 107.241 C 150.316 104.051,150.166 102.553,149.769 101.791 C 149.451 101.183,149.221 99.766,149.221 98.422 C 149.221 97.146,149.056 96.000,148.854 95.875 C 148.653 95.751,148.488 94.916,148.488 94.021 C 148.488 93.125,148.323 92.392,148.121 92.392 C 147.919 92.392,147.754 91.742,147.754 90.947 C 147.754 90.153,147.589 89.401,147.388 89.276 C 147.186 89.151,147.021 88.574,147.021 87.993 C 147.021 87.412,146.856 86.834,146.654 86.709 C 146.453 86.585,146.288 86.090,146.288 85.610 C 146.288 85.129,146.142 84.646,145.963 84.535 C 145.784 84.425,145.529 83.755,145.396 83.047 C 145.263 82.339,144.997 81.760,144.805 81.760 C 144.612 81.760,144.455 81.265,144.455 80.660 C 144.455 80.055,144.290 79.560,144.088 79.560 C 143.886 79.560,143.721 78.910,143.721 78.115 C 143.721 77.320,143.556 76.568,143.355 76.444 C 143.153 76.319,142.988 75.814,142.988 75.322 C 142.988 74.830,142.840 74.427,142.658 74.427 C 142.160 74.427,142.673 79.589,143.332 81.210 C 143.496 81.613,143.816 82.405,144.042 82.969 C 144.269 83.533,144.455 84.316,144.455 84.710 C 144.455 85.104,144.620 85.426,144.821 85.426 C 145.023 85.426,145.188 85.894,145.188 86.465 C 145.188 87.036,145.291 87.607,145.417 87.733 C 145.848 88.164,147.392 92.940,147.567 94.386 C 147.664 95.180,147.936 96.415,148.173 97.132 C 149.466 101.050,148.423 115.366,146.502 120.073 C 145.784 121.833,144.438 124.762,143.891 125.756 C 143.614 126.260,143.042 127.351,142.622 128.179 C 142.201 129.007,141.534 130.032,141.139 130.455 C 140.744 130.879,140.422 131.365,140.422 131.536 C 140.422 133.018,128.124 145.188,126.626 145.188 C 126.504 145.188,125.623 145.762,124.667 146.463 C 123.711 147.165,122.836 147.645,122.722 147.531 C 122.608 147.417,121.785 147.750,120.895 148.272 C 120.004 148.794,118.836 149.221,118.300 149.221 C 117.763 149.221,117.324 149.386,117.324 149.588 C 117.324 149.789,117.002 149.954,116.608 149.954 C 116.215 149.954,114.936 150.207,113.767 150.516 C 108.962 151.784,96.154 151.191,93.039 149.555 C 92.689 149.371,91.985 149.221,91.476 149.221 C 90.966 149.221,90.263 149.076,89.913 148.899 C 89.562 148.722,88.616 148.368,87.809 148.112 C 87.003 147.856,85.174 147.094,83.745 146.417 C 82.316 145.741,81.031 145.188,80.888 145.188 C 80.746 145.188,80.284 144.866,79.862 144.473 C 79.440 144.080,78.520 143.485,77.818 143.152 C 76.710 142.626,75.097 141.355,73.877 140.045 C 73.676 139.829,72.928 139.041,72.217 138.295 C 69.777 135.738,67.461 132.826,67.460 132.316 C 67.459 132.035,67.103 131.228,66.670 130.522 C 65.152 128.053,63.795 125.456,63.795 125.022 C 63.795 124.781,63.570 124.064,63.296 123.428 C 62.181 120.843,61.962 120.187,61.962 119.439 C 61.962 119.008,61.650 117.737,61.270 116.615 C 58.635 108.844,58.636 96.269,61.271 87.259 C 61.477 86.554,61.737 85.603,61.847 85.146 C 61.958 84.689,62.194 84.226,62.372 84.116 C 62.549 84.006,62.695 83.600,62.695 83.214 C 62.695 82.827,63.024 81.971,63.427 81.310 C 63.829 80.650,64.159 79.881,64.160 79.600 C 64.161 79.320,64.904 77.856,65.811 76.346 C 66.719 74.836,67.469 73.416,67.480 73.189 C 67.490 72.963,68.068 71.952,68.763 70.944 C 69.459 69.936,70.622 68.203,71.349 67.094 C 72.075 65.985,73.148 64.391,73.732 63.551 C 74.316 62.712,74.794 61.906,74.794 61.761 C 74.794 61.616,75.087 61.231,75.445 60.905 C 75.803 60.578,76.916 59.331,77.919 58.132 C 81.041 54.403,88.454 47.663,89.434 47.663 C 89.650 47.663,89.826 47.526,89.826 47.358 C 89.826 47.190,90.280 46.826,90.834 46.549 C 91.389 46.271,92.090 45.848,92.392 45.608 C 94.067 44.277,100.696 41.019,102.804 40.490 C 103.333 40.357,103.856 40.102,103.966 39.923 C 104.077 39.743,104.643 39.597,105.225 39.597 C 105.806 39.597,106.371 39.451,106.481 39.274 C 106.706 38.910,107.860 38.587,110.541 38.141 C 111.549 37.973,113.611 37.505,115.124 37.102 C 117.224 36.542,119.165 36.356,123.344 36.316 C 126.353 36.287,128.910 36.206,129.027 36.137 C 129.459 35.880,137.013 36.734,139.138 37.280 C 140.348 37.591,141.998 37.926,142.805 38.025 C 143.611 38.124,144.428 38.353,144.620 38.534 C 144.811 38.715,145.512 38.863,146.178 38.863 C 146.843 38.863,147.388 39.028,147.388 39.230 C 147.388 39.432,147.790 39.597,148.283 39.597 C 148.775 39.597,149.280 39.762,149.404 39.963 C 149.529 40.165,150.024 40.330,150.504 40.330 C 150.984 40.330,151.468 40.477,151.579 40.656 C 151.690 40.835,152.236 41.092,152.792 41.227 C 153.349 41.362,154.546 41.808,155.454 42.218 C 156.361 42.627,157.516 43.132,158.020 43.339 C 159.001 43.742,159.538 44.012,161.856 45.269 C 164.773 46.852,166.290 47.769,167.864 48.898 C 168.743 49.530,169.899 50.332,170.432 50.681 C 172.053 51.742,177.462 56.764,180.426 59.958 C 180.807 60.368,181.118 60.910,181.118 61.161 C 181.118 61.412,181.345 61.705,181.622 61.811 C 181.899 61.918,182.846 63.067,183.727 64.366 C 184.608 65.665,185.454 66.728,185.607 66.728 C 185.759 66.728,185.885 67.065,185.885 67.478 C 185.885 67.890,186.297 68.640,186.801 69.144 C 187.305 69.648,187.718 70.291,187.718 70.573 C 187.718 70.855,188.006 71.301,188.359 71.565 C 188.712 71.828,189.017 72.250,189.038 72.502 C 189.058 72.754,189.099 73.259,189.129 73.625 C 189.159 73.990,189.514 74.643,189.918 75.076 C 190.321 75.509,190.651 76.167,190.651 76.538 C 190.651 76.910,190.786 77.370,190.952 77.562 C 191.117 77.753,191.708 79.065,192.264 80.477 C 192.820 81.888,193.427 83.330,193.613 83.680 C 193.799 84.030,193.951 84.649,193.951 85.055 C 193.951 85.461,194.115 85.793,194.317 85.793 C 194.519 85.793,194.684 86.535,194.684 87.443 C 194.684 88.350,194.849 89.093,195.050 89.093 C 195.252 89.093,195.417 89.849,195.417 90.773 C 195.417 91.954,195.553 92.408,195.875 92.301 C 196.582 92.066,196.630 91.044,195.994 89.770 C 195.677 89.134,195.417 88.071,195.417 87.408 C 195.417 86.745,195.252 86.101,195.050 85.976 C 194.849 85.852,194.684 85.264,194.684 84.671 C 194.684 84.078,194.519 83.593,194.317 83.593 C 194.115 83.593,193.951 83.016,193.951 82.310 C 193.951 81.604,193.786 81.027,193.584 81.027 C 193.382 81.027,193.217 80.694,193.217 80.288 C 193.217 79.882,193.066 79.264,192.881 78.913 C 192.211 77.642,191.384 75.590,191.384 75.197 C 191.384 74.975,191.219 74.794,191.017 74.794 C 190.816 74.794,190.651 74.546,190.651 74.244 C 190.651 73.941,190.486 73.694,190.284 73.694 C 190.082 73.694,189.918 73.313,189.918 72.846 C 189.918 72.380,189.588 71.645,189.184 71.212 C 188.781 70.779,188.451 70.259,188.451 70.056 C 188.451 69.536,186.572 66.203,186.195 66.056 C 186.024 65.988,185.885 65.700,185.885 65.414 C 185.885 65.128,185.720 64.895,185.518 64.895 C 185.316 64.895,185.151 64.688,185.151 64.436 C 185.151 64.184,184.738 63.499,184.234 62.913 C 183.730 62.327,183.318 61.722,183.318 61.569 C 183.318 61.121,172.066 49.863,171.619 49.863 C 171.395 49.863,170.700 49.373,170.073 48.774 C 169.447 48.175,168.623 47.586,168.243 47.466 C 167.863 47.345,167.553 47.093,167.553 46.905 C 167.553 46.717,167.346 46.559,167.094 46.555 C 166.842 46.550,166.224 46.224,165.720 45.830 C 165.215 45.435,164.514 45.109,164.161 45.104 C 163.808 45.100,163.520 44.931,163.520 44.730 C 163.520 44.528,163.190 44.363,162.786 44.363 C 162.383 44.363,162.053 44.198,162.053 43.996 C 162.053 43.795,161.741 43.630,161.359 43.630 C 160.977 43.630,160.570 43.382,160.454 43.080 C 160.338 42.777,159.908 42.530,159.498 42.530 C 159.089 42.530,158.753 42.365,158.753 42.163 C 158.753 41.962,158.433 41.797,158.042 41.797 C 157.650 41.797,157.228 41.632,157.104 41.430 C 156.979 41.228,156.555 41.063,156.160 41.063 C 155.766 41.063,155.116 40.898,154.715 40.697 C 154.315 40.495,153.659 40.165,153.259 39.963 C 152.858 39.762,152.208 39.597,151.814 39.597 C 151.420 39.597,150.995 39.432,150.871 39.230 C 150.746 39.028,150.283 38.858,149.841 38.852 C 149.399 38.845,148.717 38.598,148.326 38.302 C 147.934 38.006,147.068 37.764,146.401 37.764 C 145.734 37.764,145.188 37.599,145.188 37.397 C 145.188 37.195,144.445 37.030,143.538 37.030 C 142.631 37.030,141.888 36.865,141.888 36.664 C 141.888 36.462,141.073 36.297,140.077 36.297 C 139.080 36.297,138.163 36.132,138.038 35.930 C 137.912 35.726,136.209 35.564,134.189 35.564 C 132.169 35.564,130.465 35.401,130.339 35.197 C 130.213 34.993,128.509 34.830,126.489 34.830 C 124.470 34.830,122.766 34.993,122.640 35.197 M144.455 69.995 C 144.455 70.368,145.392 70.312,145.788 69.916 C 145.929 69.776,145.686 69.661,145.249 69.661 C 144.812 69.661,144.455 69.811,144.455 69.995 M148.121 70.027 C 148.121 70.229,148.781 70.394,149.588 70.394 C 150.394 70.394,151.054 70.559,151.054 70.761 C 151.054 70.962,151.384 71.127,151.787 71.127 C 152.815 71.127,152.695 70.661,151.528 70.119 C 150.348 69.571,148.121 69.511,148.121 70.027 M143.198 70.970 C 142.881 71.287,142.610 71.658,142.596 71.795 C 142.582 71.932,142.511 72.501,142.437 73.059 C 142.355 73.684,142.447 73.985,142.678 73.842 C 142.884 73.715,142.971 73.300,142.871 72.920 C 142.772 72.539,142.839 72.136,143.021 72.024 C 143.406 71.786,144.194 70.394,143.944 70.394 C 143.850 70.394,143.514 70.653,143.198 70.970 M152.720 71.468 C 152.605 71.655,152.856 71.918,153.278 72.052 C 154.666 72.492,162.053 79.730,162.053 80.649 C 162.053 80.839,162.466 81.406,162.970 81.910 C 163.474 82.414,163.886 83.081,163.886 83.393 C 163.886 83.705,164.051 83.960,164.253 83.960 C 164.455 83.960,164.620 84.209,164.620 84.515 C 164.620 84.820,164.771 85.356,164.956 85.706 C 165.788 87.279,166.819 89.868,166.819 90.383 C 166.819 90.694,167.067 91.044,167.369 91.160 C 167.683 91.280,167.919 91.827,167.919 92.432 C 167.919 93.015,168.084 93.492,168.286 93.492 C 168.488 93.492,168.653 94.070,168.653 94.775 C 168.653 95.481,168.818 96.059,169.019 96.059 C 169.221 96.059,169.386 96.719,169.386 97.525 C 169.386 98.332,169.551 98.992,169.753 98.992 C 169.964 98.992,170.119 100.146,170.119 101.720 C 170.119 103.220,170.284 104.550,170.486 104.675 C 170.688 104.800,170.852 106.443,170.852 108.341 C 170.852 110.239,170.688 111.882,170.486 112.007 C 170.284 112.132,170.119 113.287,170.119 114.574 C 170.119 115.861,169.954 117.016,169.753 117.140 C 169.551 117.265,169.386 118.007,169.386 118.790 C 169.386 119.573,169.221 120.315,169.019 120.440 C 168.818 120.565,168.653 121.060,168.653 121.540 C 168.653 122.020,168.488 122.515,168.286 122.640 C 168.084 122.764,167.919 123.198,167.919 123.604 C 167.919 124.010,167.664 124.597,167.353 124.908 C 166.760 125.501,166.790 126.174,167.418 126.383 C 167.783 126.505,168.010 126.130,169.189 123.451 C 171.614 117.940,172.557 107.889,171.277 101.192 C 170.380 96.500,170.226 95.805,169.772 94.409 C 169.510 93.602,169.151 92.656,168.974 92.306 C 168.797 91.955,168.653 91.337,168.653 90.931 C 168.653 90.525,168.488 90.192,168.286 90.192 C 168.084 90.192,167.919 89.976,167.919 89.711 C 167.919 89.447,167.589 88.547,167.186 87.713 C 166.783 86.878,166.453 86.042,166.453 85.855 C 166.453 85.669,166.205 85.311,165.903 85.060 C 165.600 84.809,165.353 84.293,165.353 83.915 C 165.353 83.536,165.188 83.226,164.986 83.226 C 164.785 83.226,164.620 82.979,164.620 82.676 C 164.620 82.374,164.455 82.126,164.253 82.126 C 164.051 82.126,163.886 81.920,163.886 81.668 C 163.886 81.416,163.514 80.770,163.061 80.231 C 162.607 79.693,161.909 78.786,161.509 78.215 C 160.427 76.672,155.838 72.282,155.044 72.030 C 154.664 71.910,154.354 71.657,154.354 71.469 C 154.354 71.025,152.994 71.024,152.720 71.468 M97.687 78.233 C 96.868 78.459,95.761 78.932,95.225 79.285 C 94.689 79.638,94.080 79.927,93.872 79.927 C 93.663 79.927,93.492 80.092,93.492 80.293 C 93.492 80.495,93.262 80.660,92.981 80.660 C 92.701 80.660,92.375 80.909,92.258 81.213 C 92.142 81.517,91.647 81.948,91.160 82.170 C 90.672 82.392,90.050 83.010,89.777 83.542 C 89.504 84.074,88.991 84.776,88.637 85.103 C 88.283 85.429,87.992 85.924,87.990 86.202 C 87.989 86.481,87.649 87.204,87.235 87.809 C 85.995 89.622,85.591 90.781,84.493 95.692 C 83.313 100.964,84.245 108.557,86.563 112.557 C 86.738 112.860,87.123 113.642,87.417 114.296 C 88.266 116.179,94.381 121.723,95.610 121.723 C 95.795 121.723,96.487 121.993,97.149 122.323 C 100.050 123.771,110.156 123.612,110.656 122.111 C 110.727 121.898,111.191 121.723,111.688 121.723 C 112.184 121.723,113.003 121.311,113.507 120.807 C 114.011 120.302,114.552 119.890,114.708 119.890 C 115.257 119.890,119.457 115.660,120.013 114.547 C 120.322 113.927,120.833 113.206,121.149 112.944 C 121.465 112.682,121.723 112.085,121.723 111.617 C 121.723 111.150,121.888 110.665,122.090 110.541 C 122.291 110.416,122.456 109.944,122.456 109.493 C 122.456 109.041,122.656 108.471,122.901 108.226 C 123.509 107.618,123.497 97.685,122.887 97.076 C 122.650 96.839,122.456 96.264,122.456 95.797 C 122.456 95.331,122.311 94.662,122.133 94.312 C 121.954 93.962,121.605 93.181,121.357 92.576 C 121.108 91.971,120.761 91.228,120.585 90.926 C 120.408 90.623,119.946 89.798,119.557 89.093 C 117.762 85.835,111.777 79.927,110.273 79.927 C 109.916 79.927,109.624 79.762,109.624 79.560 C 109.624 79.358,109.294 79.193,108.891 79.193 C 108.488 79.193,108.158 79.066,108.158 78.910 C 108.158 77.915,100.609 77.427,97.687 78.233 M104.125 78.827 C 104.125 79.028,104.867 79.193,105.775 79.193 C 106.682 79.193,107.424 79.358,107.424 79.560 C 107.424 79.762,107.698 79.927,108.031 79.927 C 108.365 79.927,109.179 80.339,109.840 80.843 C 110.501 81.347,111.207 81.760,111.409 81.760 C 111.874 81.760,115.530 85.402,116.859 87.190 C 117.413 87.934,118.156 88.809,118.511 89.136 C 118.866 89.462,119.157 90.080,119.157 90.510 C 119.157 90.941,119.322 91.292,119.523 91.292 C 119.725 91.292,119.890 91.622,119.890 92.026 C 119.890 92.429,120.055 92.759,120.257 92.759 C 120.458 92.759,120.623 93.151,120.623 93.631 C 120.623 94.110,120.871 94.708,121.173 94.959 C 121.489 95.221,121.723 96.020,121.723 96.837 C 121.723 97.619,121.888 98.258,122.090 98.258 C 122.310 98.258,122.456 99.718,122.456 101.903 C 122.456 103.938,122.294 105.648,122.090 105.775 C 121.888 105.899,121.723 106.620,121.723 107.376 C 121.723 108.132,121.481 109.071,121.185 109.462 C 120.889 109.854,120.641 110.463,120.635 110.816 C 120.629 111.169,120.458 111.457,120.257 111.457 C 120.055 111.457,119.890 111.787,119.890 112.191 C 119.890 112.594,119.725 112.924,119.523 112.924 C 119.322 112.924,119.157 113.170,119.157 113.470 C 119.157 114.023,118.501 114.947,117.105 116.361 C 115.870 117.612,114.049 119.157,113.809 119.157 C 113.687 119.157,113.149 119.463,112.614 119.837 C 112.079 120.210,111.187 120.626,110.632 120.760 C 110.078 120.894,109.624 121.166,109.624 121.364 C 109.624 121.561,108.727 121.723,107.629 121.723 C 106.532 121.723,105.533 121.888,105.408 122.090 C 105.283 122.291,104.541 122.456,103.758 122.456 C 102.975 122.456,102.233 122.291,102.108 122.090 C 101.984 121.888,101.066 121.723,100.070 121.723 C 99.074 121.723,98.258 121.576,98.258 121.396 C 98.258 121.217,97.815 120.958,97.273 120.822 C 96.730 120.686,95.839 120.256,95.291 119.866 C 94.744 119.476,94.187 119.157,94.055 119.157 C 93.610 119.157,88.726 113.879,88.726 113.399 C 88.726 113.138,88.561 112.924,88.359 112.924 C 88.158 112.924,87.993 112.521,87.993 112.029 C 87.993 111.537,87.828 111.032,87.626 110.907 C 87.424 110.783,87.259 110.278,87.259 109.786 C 87.259 109.294,87.112 108.891,86.931 108.891 C 85.722 108.891,85.724 92.565,86.933 91.817 C 87.113 91.706,87.259 91.131,87.259 90.537 C 87.259 89.944,87.424 89.459,87.626 89.459 C 87.828 89.459,87.993 89.129,87.993 88.726 C 87.993 88.323,88.158 87.993,88.359 87.993 C 88.561 87.993,88.726 87.663,88.726 87.259 C 88.726 86.856,88.891 86.526,89.093 86.526 C 89.294 86.526,89.459 86.354,89.459 86.144 C 89.459 85.722,89.746 85.350,91.722 83.215 C 92.462 82.415,93.206 81.760,93.376 81.760 C 93.545 81.760,94.128 81.347,94.672 80.843 C 95.215 80.339,95.915 79.927,96.226 79.927 C 96.537 79.927,96.792 79.762,96.792 79.560 C 96.792 79.358,97.452 79.193,98.258 79.193 C 99.065 79.193,99.725 79.028,99.725 78.827 C 99.725 78.623,100.703 78.460,101.925 78.460 C 103.147 78.460,104.125 78.623,104.125 78.827 M196.178 94.684 C 196.194 95.541,196.423 96.902,196.686 97.709 L 197.166 99.175 197.185 96.792 C 197.195 95.481,197.120 94.120,197.019 93.767 C 196.671 92.558,196.150 93.125,196.178 94.684 M197.118 102.107 C 196.788 102.967,196.827 103.470,197.204 103.236 C 197.381 103.127,197.366 103.784,197.172 104.696 C 196.913 105.907,196.938 106.498,197.262 106.889 C 197.507 107.183,197.554 107.424,197.368 107.424 C 197.182 107.424,197.030 108.002,197.030 108.708 C 197.030 110.403,197.462 110.348,197.748 108.616 C 198.297 105.297,197.813 100.297,197.118 102.107 M196.611 113.841 C 195.911 116.089,195.980 118.751,196.718 118.013 C 197.147 117.584,197.259 116.821,197.177 114.909 L 197.067 112.374 196.611 113.841 M195.692 119.002 C 195.541 119.154,195.417 119.675,195.417 120.159 C 195.417 120.642,195.269 121.316,195.088 121.656 C 194.536 122.692,194.450 125.120,194.959 125.294 C 195.247 125.392,195.417 125.103,195.417 124.516 C 195.417 124.002,195.691 123.007,196.026 122.305 C 196.630 121.037,196.357 118.333,195.692 119.002 M193.602 127.521 C 193.330 128.466,192.720 130.017,192.246 130.969 C 191.772 131.920,191.384 132.951,191.384 133.260 C 191.384 133.569,191.219 133.822,191.017 133.822 C 190.816 133.822,190.651 134.127,190.651 134.499 C 190.651 135.342,189.710 137.267,189.017 137.842 C 188.732 138.079,188.392 138.756,188.262 139.347 C 188.132 139.938,187.905 140.422,187.757 140.422 C 187.609 140.422,187.261 140.999,186.984 141.705 C 186.707 142.411,186.347 142.988,186.183 142.988 C 186.019 142.988,185.885 143.243,185.885 143.555 C 185.885 143.866,185.513 144.508,185.060 144.980 C 184.606 145.452,183.575 146.791,182.768 147.954 C 181.962 149.118,180.848 150.602,180.293 151.252 C 179.739 151.902,179.285 152.521,179.285 152.627 C 179.285 152.734,178.171 153.967,176.810 155.369 C 175.449 156.771,174.061 158.229,173.726 158.610 C 173.137 159.280,169.994 162.224,167.736 164.219 C 166.179 165.596,162.581 168.286,162.297 168.286 C 162.091 168.286,159.418 170.169,158.127 171.224 C 157.884 171.423,157.461 171.586,157.188 171.586 C 156.915 171.586,156.371 171.874,155.979 172.227 C 155.587 172.580,154.525 173.265,153.618 173.748 C 152.712 174.232,151.710 174.851,151.392 175.123 C 151.073 175.396,150.469 175.619,150.048 175.619 C 149.626 175.619,149.227 175.751,149.160 175.912 C 149.022 176.241,145.136 178.151,142.621 179.123 C 141.714 179.475,140.815 179.902,140.623 180.073 C 140.432 180.245,140.019 180.385,139.707 180.384 C 139.394 180.383,138.478 180.701,137.672 181.089 C 135.084 182.334,131.461 183.687,130.716 183.686 C 130.319 183.685,128.916 184.002,127.600 184.391 C 126.283 184.779,123.721 185.279,121.907 185.503 C 120.092 185.726,117.903 186.069,117.043 186.263 C 116.183 186.458,114.864 186.621,114.110 186.625 C 109.758 186.648,103.055 188.745,101.256 190.646 C 99.486 192.515,98.280 195.784,99.358 195.784 C 99.560 195.784,99.725 196.017,99.725 196.303 C 99.725 197.145,102.442 199.817,103.299 199.817 C 103.729 199.817,104.183 199.982,104.308 200.183 C 104.433 200.385,104.855 200.550,105.246 200.550 C 105.638 200.550,105.958 200.684,105.958 200.847 C 105.958 202.555,210.572 202.777,316.939 201.293 C 317.422 201.286,317.533 201.163,317.282 200.911 C 317.034 200.664,308.721 200.603,292.369 200.730 C 237.640 201.155,112.047 201.287,111.681 200.920 C 111.477 200.716,110.364 200.550,109.206 200.550 C 108.048 200.550,106.999 200.385,106.874 200.183 C 106.750 199.982,106.163 199.817,105.570 199.817 C 104.977 199.817,104.491 199.632,104.491 199.407 C 104.491 199.172,104.115 199.070,103.608 199.167 C 102.976 199.288,102.779 199.196,102.914 198.843 C 103.018 198.572,102.921 198.350,102.697 198.350 C 101.481 198.350,100.825 197.032,100.825 194.590 C 100.825 193.015,100.981 192.607,101.896 191.790 C 103.784 190.105,104.080 189.918,104.842 189.918 C 105.254 189.918,105.591 189.753,105.591 189.551 C 105.591 189.349,106.251 189.184,107.058 189.184 C 107.864 189.184,108.524 189.019,108.524 188.818 C 108.524 188.611,109.563 188.451,110.907 188.451 C 112.252 188.451,113.291 188.291,113.291 188.084 C 113.291 187.873,114.444 187.718,116.019 187.718 C 117.519 187.718,118.849 187.553,118.973 187.351 C 119.098 187.149,120.170 186.984,121.357 186.984 C 122.543 186.984,123.602 186.841,123.710 186.665 C 123.819 186.490,124.770 186.263,125.825 186.162 C 126.879 186.060,127.804 185.792,127.879 185.564 C 127.955 185.337,128.489 185.151,129.065 185.151 C 129.641 185.151,130.215 184.986,130.339 184.785 C 130.464 184.583,131.216 184.418,132.011 184.418 C 132.805 184.418,133.456 184.253,133.456 184.051 C 133.456 183.850,133.951 183.685,134.555 183.685 C 135.160 183.685,135.655 183.520,135.655 183.318 C 135.655 183.116,136.042 182.951,136.516 182.951 C 137.441 182.951,139.538 182.024,139.886 181.462 C 140.003 181.273,140.491 181.118,140.972 181.118 C 141.452 181.118,141.947 180.953,142.071 180.752 C 142.196 180.550,142.618 180.385,143.010 180.385 C 143.401 180.385,143.721 180.220,143.721 180.018 C 143.721 179.817,144.051 179.652,144.455 179.652 C 144.858 179.652,145.188 179.487,145.188 179.285 C 145.188 179.083,145.595 178.918,146.091 178.918 C 146.862 178.918,149.673 177.619,150.871 176.709 C 151.786 176.013,154.061 174.885,154.548 174.885 C 154.845 174.885,155.087 174.720,155.087 174.519 C 155.087 174.317,155.417 174.152,155.820 174.152 C 156.224 174.152,156.554 173.987,156.554 173.786 C 156.554 173.584,156.813 173.419,157.130 173.419 C 157.447 173.419,157.936 173.213,158.217 172.961 C 159.430 171.873,159.845 171.586,160.205 171.586 C 160.415 171.586,160.587 171.421,160.587 171.219 C 160.587 171.017,160.880 170.852,161.239 170.852 C 161.598 170.852,162.129 170.522,162.420 170.119 C 162.710 169.716,163.184 169.386,163.472 169.386 C 163.760 169.386,164.556 168.808,165.242 168.103 C 165.927 167.397,166.643 166.819,166.833 166.819 C 167.297 166.819,168.285 165.998,171.351 163.061 C 172.772 161.700,174.025 160.587,174.136 160.587 C 174.246 160.587,175.162 159.661,176.169 158.530 C 177.177 157.400,178.414 156.014,178.918 155.451 C 180.531 153.650,181.118 152.886,181.118 152.588 C 181.118 152.429,181.696 151.738,182.401 151.054 C 183.107 150.370,183.685 149.549,183.685 149.230 C 183.685 148.911,184.015 148.412,184.418 148.121 C 184.821 147.830,185.151 147.381,185.151 147.123 C 185.151 146.866,185.316 146.654,185.518 146.654 C 185.720 146.654,185.885 146.407,185.885 146.104 C 185.885 145.802,186.042 145.555,186.234 145.555 C 186.426 145.555,186.857 144.977,187.192 144.271 C 187.527 143.566,187.947 142.988,188.126 142.988 C 188.305 142.988,188.451 142.668,188.451 142.276 C 188.451 141.885,188.616 141.463,188.818 141.338 C 189.019 141.214,189.184 140.791,189.184 140.400 C 189.184 140.009,189.349 139.688,189.551 139.688 C 189.753 139.688,189.918 139.358,189.918 138.955 C 189.918 138.552,190.082 138.222,190.284 138.222 C 190.486 138.222,190.651 137.892,190.651 137.489 C 190.651 137.085,190.793 136.755,190.968 136.755 C 191.142 136.755,191.576 135.972,191.932 135.014 C 192.289 134.056,192.724 133.115,192.899 132.924 C 193.074 132.732,193.217 132.196,193.217 131.732 C 193.217 131.269,193.382 130.889,193.584 130.889 C 193.786 130.889,193.951 130.404,193.951 129.811 C 193.951 129.218,194.115 128.631,194.317 128.506 C 194.753 128.236,194.811 126.245,194.390 125.985 C 194.229 125.885,193.874 126.576,193.602 127.521 M165.720 127.773 C 165.443 128.478,165.082 129.056,164.918 129.056 C 164.754 129.056,164.620 129.386,164.620 129.789 C 164.620 130.192,164.455 130.522,164.253 130.522 C 164.051 130.522,163.886 130.729,163.886 130.981 C 163.886 131.233,163.308 132.088,162.603 132.881 C 161.897 133.673,161.320 134.503,161.320 134.724 C 161.320 134.946,160.990 135.365,160.587 135.655 C 160.183 135.946,159.853 136.367,159.853 136.592 C 159.853 136.816,159.175 137.729,158.346 138.619 C 157.517 139.510,156.412 140.816,155.891 141.522 C 154.837 142.949,151.064 146.654,150.665 146.654 C 150.525 146.654,149.545 147.479,148.488 148.488 C 147.430 149.496,146.374 150.321,146.141 150.321 C 145.907 150.321,145.479 150.651,145.188 151.054 C 144.897 151.457,144.472 151.787,144.244 151.787 C 144.015 151.787,143.383 152.200,142.839 152.704 C 142.295 153.208,141.648 153.621,141.400 153.621 C 141.153 153.621,140.712 153.951,140.422 154.354 C 140.131 154.757,139.517 155.087,139.057 155.087 C 138.598 155.087,138.222 155.212,138.222 155.364 C 138.222 155.517,137.686 155.875,137.030 156.160 C 136.375 156.446,135.223 157.064,134.471 157.533 C 133.719 158.003,132.853 158.387,132.546 158.387 C 132.240 158.387,131.989 158.552,131.989 158.753 C 131.989 158.955,131.669 159.120,131.277 159.120 C 130.886 159.120,130.464 159.285,130.339 159.487 C 130.215 159.688,129.627 159.853,129.034 159.853 C 128.441 159.853,127.956 160.018,127.956 160.220 C 127.956 160.422,127.626 160.587,127.223 160.587 C 126.819 160.587,126.489 160.752,126.489 160.953 C 126.489 161.155,126.004 161.320,125.411 161.320 C 124.818 161.320,124.231 161.485,124.106 161.687 C 123.982 161.888,123.518 162.054,123.076 162.055 C 122.635 162.057,121.801 162.304,121.223 162.605 C 120.645 162.907,119.779 163.153,119.298 163.153 C 118.817 163.153,118.423 163.318,118.423 163.520 C 118.423 163.721,117.773 163.886,116.979 163.886 C 116.184 163.886,115.432 164.051,115.307 164.253 C 115.182 164.455,114.430 164.620,113.636 164.620 C 112.841 164.620,112.191 164.785,112.191 164.986 C 112.191 165.188,111.375 165.353,110.379 165.353 C 109.383 165.353,108.466 165.518,108.341 165.720 C 108.216 165.921,107.423 166.092,106.578 166.099 C 105.733 166.106,104.629 166.348,104.125 166.636 C 103.621 166.924,102.507 167.166,101.650 167.173 C 100.793 167.180,100.092 167.351,100.092 167.553 C 100.092 167.754,99.276 167.919,98.280 167.919 C 97.284 167.919,96.367 168.084,96.242 168.286 C 96.117 168.488,95.292 168.653,94.409 168.653 C 93.525 168.653,92.700 168.818,92.576 169.019 C 92.451 169.221,91.709 169.386,90.926 169.386 C 90.143 169.386,89.401 169.551,89.276 169.753 C 89.151 169.954,88.574 170.119,87.993 170.119 C 87.412 170.119,86.834 170.284,86.709 170.486 C 86.585 170.687,86.112 170.852,85.658 170.852 C 85.204 170.852,84.513 171.095,84.121 171.391 C 83.730 171.687,83.038 171.934,82.585 171.941 C 82.131 171.947,81.760 172.117,81.760 172.319 C 81.760 172.521,81.265 172.686,80.660 172.686 C 80.055 172.686,79.560 172.851,79.560 173.052 C 79.560 173.254,79.328 173.419,79.045 173.419 C 78.351 173.419,75.527 174.945,75.527 175.320 C 75.527 175.484,75.287 175.619,74.994 175.619 C 74.700 175.619,74.048 176.031,73.544 176.535 C 73.040 177.039,72.435 177.452,72.201 177.452 C 71.680 177.452,66.565 182.578,65.068 184.601 C 64.471 185.408,63.898 186.150,63.796 186.251 C 63.694 186.352,63.376 186.888,63.091 187.443 C 62.805 187.997,62.434 188.451,62.266 188.451 C 62.099 188.451,61.962 188.761,61.962 189.139 C 61.962 189.518,61.714 190.033,61.412 190.284 C 61.109 190.535,60.862 191.041,60.862 191.407 C 60.862 191.774,60.697 192.176,60.495 192.301 C 60.293 192.425,60.128 192.930,60.128 193.422 C 60.128 193.914,59.963 194.317,59.762 194.317 C 59.560 194.317,59.395 194.802,59.395 195.395 C 59.395 195.988,59.230 196.576,59.028 196.700 C 58.827 196.825,58.662 197.980,58.662 199.267 C 58.662 200.554,58.497 201.709,58.295 201.833 C 57.817 202.129,57.817 207.037,58.295 207.333 C 58.497 207.457,58.662 208.282,58.662 209.166 C 58.662 210.050,58.827 210.874,59.028 210.999 C 59.230 211.124,59.395 211.780,59.395 212.457 C 59.395 213.134,59.524 213.743,59.681 213.810 C 59.839 213.877,60.210 214.440,60.506 215.061 C 61.772 217.714,65.668 221.815,66.923 221.815 C 67.227 221.815,68.129 222.227,68.928 222.731 C 69.726 223.236,70.621 223.648,70.915 223.648 C 71.210 223.648,71.553 223.813,71.677 224.015 C 71.802 224.216,72.554 224.381,73.349 224.381 C 74.144 224.381,74.794 224.546,74.794 224.748 C 74.794 224.957,75.886 225.115,77.339 225.115 C 78.738 225.115,79.985 225.280,80.110 225.481 C 80.424 225.990,317.009 225.990,317.324 225.481 C 317.448 225.280,318.943 225.115,320.645 225.115 C 322.464 225.115,323.740 224.963,323.740 224.748 C 323.740 224.546,324.482 224.381,325.390 224.381 C 326.297 224.381,327.039 224.216,327.039 224.015 C 327.039 223.813,327.369 223.648,327.773 223.648 C 328.176 223.648,328.506 223.501,328.506 223.321 C 328.506 223.141,328.918 222.891,329.423 222.764 C 329.927 222.638,330.339 222.372,330.339 222.174 C 330.339 221.977,330.592 221.815,330.901 221.815 C 334.127 221.815,337.200 212.923,335.293 209.102 C 333.812 206.133,328.162 202.016,325.568 202.016 C 324.989 202.016,324.414 201.852,324.290 201.650 C 324.165 201.448,322.835 201.283,321.335 201.283 C 319.761 201.283,318.607 201.438,318.607 201.650 C 318.607 201.852,319.473 202.016,320.532 202.015 C 322.281 202.013,325.123 202.703,326.764 203.527 C 327.117 203.705,327.695 203.995,328.048 204.174 C 328.401 204.352,329.118 204.696,329.642 204.939 C 330.909 205.526,332.539 206.949,332.539 207.467 C 332.539 207.696,332.704 207.883,332.906 207.883 C 333.107 207.883,333.272 208.130,333.272 208.433 C 333.272 208.735,333.404 208.983,333.565 208.983 C 334.817 208.983,335.073 214.286,333.936 216.658 C 333.085 218.433,329.929 221.815,329.123 221.815 C 328.859 221.815,327.961 222.145,327.126 222.548 C 326.291 222.951,325.298 223.281,324.918 223.281 C 324.539 223.281,324.106 223.405,323.956 223.556 C 322.733 224.791,318.922 224.835,202.016 224.963 C 137.301 225.034,85.794 224.948,84.143 224.767 C 82.530 224.589,80.219 224.357,79.008 224.252 C 76.794 224.059,73.773 223.435,72.411 222.890 C 72.007 222.729,71.059 222.388,70.302 222.132 C 69.546 221.877,68.928 221.536,68.928 221.375 C 68.928 221.213,68.633 221.082,68.273 221.082 C 66.375 221.082,60.495 213.515,60.495 211.072 C 60.495 210.608,60.311 210.045,60.086 209.820 C 59.180 208.914,59.887 196.743,60.911 195.619 C 61.086 195.427,61.228 194.891,61.228 194.427 C 61.228 193.963,61.393 193.584,61.595 193.584 C 61.797 193.584,61.962 193.365,61.962 193.097 C 61.962 192.384,65.118 186.649,65.901 185.941 C 66.269 185.607,67.222 184.510,68.019 183.501 C 68.816 182.493,69.771 181.421,70.141 181.118 C 73.257 178.571,74.724 177.452,74.948 177.452 C 75.093 177.452,75.901 176.998,76.744 176.444 C 77.587 175.889,79.102 175.039,80.110 174.554 C 81.118 174.070,82.381 173.451,82.916 173.179 C 83.452 172.908,84.308 172.686,84.820 172.686 C 85.331 172.686,85.852 172.521,85.976 172.319 C 86.101 172.117,86.525 171.952,86.919 171.952 C 87.612 171.952,87.968 171.820,89.729 170.910 C 90.180 170.677,90.855 170.486,91.229 170.486 C 91.603 170.486,93.213 170.146,94.808 169.731 C 97.715 168.975,99.836 168.546,103.941 167.885 C 110.215 166.875,111.873 166.532,115.307 165.531 C 116.517 165.178,118.167 164.810,118.973 164.713 C 119.780 164.616,120.605 164.420,120.807 164.278 C 121.008 164.135,121.916 163.805,122.823 163.543 C 126.242 162.558,127.420 162.128,130.256 160.825 C 131.420 160.291,132.554 159.853,132.777 159.853 C 133.272 159.853,137.600 157.681,137.855 157.304 C 137.956 157.155,138.465 156.929,138.986 156.802 C 139.507 156.674,140.561 156.072,141.328 155.462 C 142.095 154.852,142.916 154.354,143.153 154.354 C 143.389 154.354,143.907 154.065,144.304 153.712 C 145.874 152.314,149.609 149.588,149.955 149.588 C 150.156 149.588,150.321 149.427,150.321 149.230 C 150.321 149.033,150.939 148.332,151.696 147.672 C 153.698 145.923,158.387 141.022,158.387 140.677 C 158.387 140.515,158.881 139.855,159.485 139.210 C 160.089 138.566,160.584 137.920,160.585 137.776 C 160.586 137.632,161.056 136.972,161.629 136.310 C 162.202 135.647,163.143 134.280,163.719 133.272 C 164.296 132.264,164.886 131.355,165.031 131.252 C 165.403 130.988,167.186 127.383,167.186 126.895 C 167.186 125.981,166.188 126.578,165.720 127.773 M69.497 247.081 C 69.362 247.300,68.620 247.479,67.848 247.479 C 66.051 247.479,64.860 248.111,62.911 250.098 C 62.048 250.977,61.028 251.966,60.644 252.296 C 57.473 255.018,55.362 258.279,55.362 260.455 C 55.362 262.815,56.114 263.245,60.243 263.245 C 62.478 263.245,63.806 263.402,64.107 263.703 C 64.469 264.064,73.432 264.162,106.435 264.164 C 129.463 264.165,148.718 264.297,149.223 264.456 C 150.420 264.834,220.438 265.462,283.300 265.660 L 332.870 265.816 334.602 264.849 C 336.262 263.923,338.038 262.426,338.038 261.954 C 338.038 261.830,338.451 261.188,338.955 260.528 C 339.459 259.867,339.872 259.135,339.872 258.902 C 339.872 258.669,340.037 258.478,340.238 258.478 C 340.440 258.478,340.605 258.148,340.605 257.745 C 340.605 257.342,340.770 257.012,340.972 257.012 C 341.173 257.012,341.338 256.609,341.338 256.117 C 341.338 255.625,341.503 255.120,341.705 254.995 C 342.183 254.700,342.183 252.246,341.705 252.246 C 341.503 252.246,341.338 251.916,341.338 251.512 C 341.338 251.024,341.094 250.779,340.605 250.779 C 340.202 250.779,339.872 250.614,339.872 250.412 C 339.872 250.195,338.538 250.046,336.603 250.046 C 334.313 250.046,333.288 249.908,333.181 249.588 C 332.962 248.931,306.016 248.604,234.464 248.389 C 201.998 248.291,173.456 248.122,171.036 248.013 C 168.616 247.903,145.765 247.671,120.257 247.497 C 94.748 247.323,72.947 247.069,71.810 246.932 C 70.461 246.769,69.658 246.821,69.497 247.081 M133.692 248.923 C 138.376 249.369,170.162 249.719,238.863 250.084 C 336.680 250.602,339.859 250.710,340.178 253.505 C 340.308 254.646,339.023 257.814,337.947 259.006 C 337.594 259.397,337.305 259.920,337.305 260.169 C 337.305 261.095,334.072 263.864,332.473 264.308 C 330.165 264.948,210.146 264.284,206.966 263.613 C 205.748 263.357,185.929 263.165,147.938 263.043 C 116.480 262.942,86.205 262.790,80.660 262.705 C 75.115 262.621,67.773 262.537,64.345 262.519 C 56.053 262.476,55.770 262.290,57.699 258.141 C 58.677 256.038,65.738 249.469,67.461 249.060 C 69.572 248.558,128.574 248.436,133.692 248.923 M65.826 275.686 C 65.693 275.901,64.707 276.077,63.635 276.077 C 62.349 276.077,61.529 276.264,61.228 276.627 C 60.977 276.929,60.541 277.177,60.258 277.177 C 59.580 277.177,55.362 281.329,55.362 281.996 C 55.362 282.281,55.032 282.752,54.629 283.043 C 54.225 283.334,53.896 283.851,53.896 284.193 C 53.896 284.535,53.772 284.870,53.621 284.937 C 51.774 285.758,51.606 289.945,53.352 291.641 C 55.174 293.410,51.259 293.332,147.388 293.512 C 202.731 293.615,232.888 293.799,233.364 294.035 C 233.825 294.264,245.530 294.448,264.895 294.532 C 281.833 294.605,299.734 294.688,304.675 294.717 C 315.489 294.780,323.740 294.476,323.740 294.014 C 323.740 293.828,324.152 293.676,324.656 293.676 C 325.160 293.676,325.573 293.511,325.573 293.309 C 325.573 293.107,325.774 292.942,326.020 292.942 C 326.570 292.942,328.504 290.731,328.505 290.101 C 328.506 289.849,328.630 289.641,328.781 289.640 C 329.150 289.637,330.339 287.517,330.339 286.863 C 330.339 286.577,330.504 286.343,330.706 286.343 C 330.907 286.343,331.072 285.858,331.072 285.265 C 331.072 284.671,331.237 284.084,331.439 283.960 C 331.641 283.835,331.806 283.010,331.806 282.126 C 331.806 281.243,331.641 280.418,331.439 280.293 C 331.237 280.169,331.072 279.806,331.072 279.487 C 331.072 278.681,329.982 277.936,328.781 277.922 C 328.226 277.915,327.773 277.760,327.773 277.576 C 327.773 276.805,319.908 276.711,200.367 276.050 C 166.691 275.863,122.698 275.617,102.603 275.503 C 76.906 275.356,65.996 275.411,65.826 275.686 M193.403 277.544 C 194.029 277.783,212.052 277.926,244.664 277.953 C 332.114 278.026,329.973 277.930,329.973 281.747 C 329.973 283.553,329.408 285.935,328.883 286.343 C 328.754 286.444,328.425 287.076,328.153 287.748 C 327.511 289.336,324.388 292.483,323.097 292.844 C 321.787 293.210,295.068 293.142,254.262 292.667 C 236.315 292.458,184.262 292.170,138.588 292.026 L 55.545 291.765 54.687 290.978 C 53.074 289.502,53.034 289.070,54.277 286.624 C 56.279 282.682,60.316 277.925,61.665 277.915 C 62.006 277.912,62.387 277.745,62.511 277.544 C 62.825 277.036,192.068 277.037,193.403 277.544 M182.218 312.374 C 182.218 312.576,181.817 312.741,181.326 312.741 C 180.757 312.741,179.788 313.371,178.649 314.482 C 177.075 316.018,176.417 316.961,175.200 319.427 C 174.766 320.305,174.804 323.279,175.252 323.556 C 175.454 323.681,175.619 324.354,175.619 325.052 C 175.619 327.089,177.468 329.743,179.801 331.053 C 181.277 331.882,189.184 332.207,189.184 331.439 C 189.184 331.237,189.500 331.072,189.887 331.072 C 190.273 331.072,190.645 330.943,190.712 330.784 C 190.779 330.626,191.370 330.119,192.026 329.659 C 192.681 329.199,193.217 328.623,193.217 328.379 C 193.217 328.134,193.547 327.697,193.951 327.406 C 194.769 326.816,195.095 318.171,194.317 317.690 C 194.115 317.566,193.951 317.218,193.951 316.919 C 193.951 315.991,190.136 312.741,189.047 312.741 C 188.743 312.741,188.392 312.576,188.268 312.374 C 188.143 312.172,186.731 312.007,185.130 312.007 C 183.433 312.007,182.218 312.160,182.218 312.374 M187.977 313.841 C 188.839 313.841,192.570 317.327,193.353 318.864 C 196.819 325.671,187.487 334.258,181.232 330.018 C 179.066 328.549,177.452 326.957,177.452 326.289 C 177.452 325.976,177.269 325.537,177.046 325.314 C 176.358 324.626,176.451 320.066,177.183 318.538 C 178.687 315.401,184.339 312.431,186.685 313.547 C 187.025 313.708,187.606 313.841,187.977 313.841 \\\" stroke=\\\"none\\\" fill=\\\"#4f4f4f\\\" fill-rule=\\\"evenodd\\\"></path><path id=\\\"path4\\\" d=\\\"M118.698 36.556 C 119.152 36.643,119.895 36.643,120.348 36.556 C 120.802 36.468,120.431 36.397,119.523 36.397 C 118.616 36.397,118.245 36.468,118.698 36.556 M132.814 36.550 C 133.167 36.642,133.744 36.642,134.097 36.550 C 134.450 36.457,134.161 36.382,133.456 36.382 C 132.750 36.382,132.461 36.457,132.814 36.550 M83.940 51.971 L 82.676 53.346 84.051 52.082 C 85.331 50.906,85.595 50.596,85.315 50.596 C 85.254 50.596,84.635 51.214,83.940 51.971 M144.638 69.381 C 143.642 69.946,142.853 70.761,143.302 70.761 C 143.504 70.761,143.916 70.513,144.219 70.211 C 144.910 69.520,150.672 69.426,151.341 70.095 C 151.580 70.333,151.875 70.429,151.996 70.308 C 152.889 69.414,146.090 68.558,144.638 69.381 M152.521 70.910 C 152.521 71.244,152.777 71.358,153.250 71.235 C 153.651 71.130,153.889 70.898,153.778 70.719 C 153.458 70.201,152.521 70.343,152.521 70.910 M142.229 71.586 C 142.214 71.838,142.128 72.651,142.038 73.393 C 141.939 74.199,142.046 74.848,142.304 75.007 C 142.574 75.174,142.637 75.115,142.473 74.850 C 142.329 74.618,142.386 74.427,142.600 74.427 C 142.813 74.427,142.988 74.252,142.988 74.039 C 142.988 73.825,142.795 73.770,142.559 73.916 C 142.258 74.102,142.213 73.972,142.409 73.479 C 142.837 72.405,142.924 71.127,142.571 71.127 C 142.397 71.127,142.243 71.334,142.229 71.586 M154.354 71.469 C 154.354 71.684,154.506 71.861,154.692 71.861 C 154.878 71.861,155.580 72.313,156.251 72.865 C 156.921 73.417,157.237 73.575,156.953 73.215 C 156.190 72.249,154.354 71.016,154.354 71.469 M141.901 76.677 C 141.894 76.805,142.129 77.465,142.424 78.143 C 142.718 78.822,142.960 79.129,142.961 78.827 C 142.962 78.298,141.928 76.199,141.901 76.677 M105.775 78.093 C 106.178 78.267,106.755 78.409,107.058 78.409 C 107.404 78.409,107.337 78.292,106.874 78.093 C 106.471 77.920,105.894 77.778,105.591 77.778 C 105.245 77.778,105.312 77.895,105.775 78.093 M112.304 80.914 C 112.613 81.413,115.490 83.735,115.490 83.485 C 115.490 83.391,114.714 82.679,113.766 81.902 C 112.817 81.125,112.160 80.680,112.304 80.914 M116.602 84.947 C 116.619 85.354,118.041 87.031,118.218 86.853 C 118.297 86.774,117.963 86.247,117.476 85.681 C 116.989 85.115,116.596 84.785,116.602 84.947 M119.390 88.897 C 119.899 89.807,120.458 90.640,120.632 90.748 C 120.806 90.855,120.532 90.198,120.023 89.288 C 119.514 88.378,118.956 87.545,118.782 87.437 C 118.608 87.330,118.882 87.987,119.390 88.897 M146.868 92.392 C 147.140 93.413,147.313 93.689,147.541 93.461 C 147.625 93.377,147.453 92.896,147.159 92.392 L 146.624 91.476 146.868 92.392 M147.806 96.792 C 147.806 97.094,147.948 97.672,148.121 98.075 C 148.320 98.537,148.436 98.605,148.436 98.258 C 148.436 97.956,148.294 97.379,148.121 96.975 C 147.922 96.513,147.806 96.445,147.806 96.792 M196.579 98.258 C 196.598 99.211,197.175 100.776,197.188 99.908 C 197.194 99.505,197.057 98.845,196.884 98.442 C 196.691 97.993,196.573 97.922,196.579 98.258 M171.250 101.742 C 171.239 102.145,171.390 102.722,171.586 103.025 C 172.057 103.754,172.057 102.838,171.586 101.742 L 171.271 101.008 171.250 101.742 M148.601 105.041 C 148.603 106.251,148.672 106.702,148.753 106.043 C 148.835 105.384,148.833 104.394,148.750 103.843 C 148.666 103.292,148.599 103.831,148.601 105.041 M197.024 103.553 C 196.913 103.844,196.886 104.380,196.965 104.745 C 197.055 105.159,197.180 104.960,197.299 104.216 C 197.499 102.968,197.369 102.655,197.024 103.553 M59.480 108.158 C 59.480 108.863,59.556 109.152,59.648 108.799 C 59.740 108.446,59.740 107.869,59.648 107.516 C 59.556 107.163,59.480 107.452,59.480 108.158 M196.736 109.349 C 196.637 110.005,196.468 111.531,196.362 112.741 L 196.168 114.940 196.695 113.480 C 197.128 112.280,197.379 108.158,197.019 108.158 C 196.963 108.158,196.836 108.694,196.736 109.349 M147.938 113.291 C 147.798 113.924,147.761 114.519,147.854 114.613 C 147.948 114.706,148.130 114.256,148.258 113.611 C 148.564 112.083,148.268 111.787,147.938 113.291 M120.911 113.199 C 120.355 113.836,119.230 115.850,119.636 115.481 C 119.966 115.181,121.715 112.557,121.586 112.557 C 121.522 112.557,121.218 112.846,120.911 113.199 M171.631 113.657 C 171.600 113.960,171.484 114.620,171.372 115.124 C 171.196 115.916,171.225 115.952,171.585 115.388 C 171.813 115.029,171.930 114.370,171.843 113.922 C 171.756 113.474,171.661 113.355,171.631 113.657 M60.501 114.238 C 60.504 114.624,60.674 115.188,60.878 115.490 C 61.150 115.892,61.184 115.744,61.004 114.940 C 60.703 113.592,60.493 113.300,60.501 114.238 M118.515 116.570 C 118.061 116.948,117.690 117.356,117.690 117.477 C 117.690 117.842,119.129 116.824,119.321 116.323 C 119.550 115.729,119.508 115.741,118.515 116.570 M195.657 117.825 C 195.506 118.403,195.468 118.963,195.574 119.069 C 195.869 119.364,196.230 118.184,196.073 117.437 C 195.970 116.948,195.861 117.050,195.657 117.825 M90.225 118.148 C 90.310 118.199,90.956 118.735,91.661 119.340 L 92.942 120.440 91.865 119.248 C 91.273 118.593,90.627 118.057,90.429 118.057 C 90.232 118.057,90.140 118.098,90.225 118.148 M194.094 124.500 C 193.964 125.019,194.028 125.613,194.235 125.821 C 194.495 126.081,194.602 125.785,194.576 124.878 C 194.532 123.313,194.415 123.221,194.094 124.500 M67.476 132.580 C 67.492 132.939,69.661 135.572,69.661 135.234 C 69.661 135.118,69.166 134.400,68.561 133.639 C 67.956 132.878,67.468 132.401,67.476 132.580 M136.736 135.930 L 135.472 137.305 136.847 136.042 C 137.603 135.347,138.222 134.728,138.222 134.667 C 138.222 134.387,137.912 134.651,136.736 135.930 M95.875 150.321 C 96.279 150.494,96.856 150.636,97.159 150.636 C 97.505 150.636,97.437 150.519,96.975 150.321 C 96.572 150.148,95.995 150.006,95.692 150.006 C 95.345 150.006,95.413 150.122,95.875 150.321 M104.955 151.317 C 105.512 151.401,106.337 151.399,106.788 151.312 C 107.239 151.225,106.783 151.156,105.775 151.159 C 104.766 151.162,104.397 151.233,104.955 151.317 M141.641 155.212 C 141.071 155.684,140.275 156.256,139.872 156.484 C 139.468 156.712,139.332 156.903,139.569 156.909 C 139.805 156.915,140.465 156.534,141.035 156.062 C 141.605 155.590,142.401 155.018,142.805 154.790 C 143.208 154.562,143.344 154.371,143.108 154.365 C 142.871 154.359,142.211 154.740,141.641 155.212 M118.148 164.872 C 118.501 164.965,119.079 164.965,119.432 164.872 C 119.785 164.780,119.496 164.705,118.790 164.705 C 118.084 164.705,117.796 164.780,118.148 164.872 M97.709 169.019 C 96.774 169.421,97.738 169.421,98.992 169.019 C 99.729 168.783,99.765 168.724,99.175 168.715 C 98.772 168.709,98.112 168.846,97.709 169.019 M120.440 185.535 C 119.929 185.767,120.151 185.800,121.173 185.644 C 121.980 185.521,122.709 185.360,122.793 185.286 C 123.108 185.008,121.144 185.216,120.440 185.535 M115.490 186.251 C 114.754 186.487,114.718 186.547,115.307 186.555 C 115.710 186.561,116.370 186.424,116.774 186.251 C 117.708 185.850,116.744 185.850,115.490 186.251 M105.701 187.866 C 105.055 188.101,104.414 188.406,104.276 188.544 C 103.936 188.884,106.104 188.248,106.939 187.762 C 107.791 187.267,107.213 187.315,105.701 187.866 M101.328 190.011 C 99.861 191.685,99.627 192.256,100.967 190.894 C 101.728 190.120,102.282 189.420,102.200 189.337 C 102.117 189.255,101.725 189.558,101.328 190.011 M98.992 196.024 C 98.992 196.377,100.885 198.829,101.543 199.328 C 102.565 200.105,102.322 199.585,101.013 198.197 C 100.305 197.446,99.725 196.596,99.725 196.308 C 99.725 196.019,99.560 195.784,99.358 195.784 C 99.157 195.784,98.992 195.892,98.992 196.024 M103.226 200.133 C 103.823 200.676,105.958 201.273,105.958 200.898 C 105.958 200.706,105.638 200.550,105.246 200.550 C 104.855 200.550,104.433 200.385,104.308 200.183 C 104.183 199.982,103.811 199.817,103.480 199.817 C 103.118 199.817,103.017 199.943,103.226 200.133 M299.633 201.536 C 299.986 201.628,300.564 201.628,300.917 201.536 C 301.269 201.444,300.981 201.368,300.275 201.368 C 299.569 201.368,299.280 201.444,299.633 201.536 M306.064 201.555 C 307.332 201.627,309.312 201.626,310.463 201.554 C 311.615 201.481,310.577 201.422,308.158 201.423 C 305.738 201.424,304.796 201.483,306.064 201.555 M313.932 201.536 C 314.285 201.628,314.863 201.628,315.215 201.536 C 315.568 201.444,315.280 201.368,314.574 201.368 C 313.868 201.368,313.579 201.444,313.932 201.536 M316.590 201.650 C 317.609 202.088,318.607 202.088,318.607 201.650 C 318.607 201.448,317.988 201.295,317.232 201.309 C 316.129 201.330,316.002 201.397,316.590 201.650 M269.390 201.909 C 269.846 201.997,270.506 201.994,270.857 201.902 C 271.207 201.810,270.834 201.738,270.027 201.742 C 269.221 201.746,268.934 201.821,269.390 201.909 M277.269 201.923 C 279.235 201.989,282.452 201.989,284.418 201.923 C 286.384 201.857,284.775 201.803,280.843 201.803 C 276.911 201.803,275.302 201.857,277.269 201.923 M113.932 202.275 C 114.386 202.363,115.128 202.363,115.582 202.275 C 116.036 202.188,115.665 202.116,114.757 202.116 C 113.850 202.116,113.478 202.188,113.932 202.275 M229.992 202.290 C 232.171 202.355,235.636 202.355,237.692 202.290 C 239.748 202.225,237.965 202.171,233.731 202.172 C 229.496 202.172,227.814 202.225,229.992 202.290 M243.726 202.276 C 244.182 202.364,244.842 202.360,245.192 202.268 C 245.543 202.177,245.170 202.105,244.363 202.109 C 243.556 202.113,243.270 202.188,243.726 202.276 M169.661 202.642 C 170.115 202.729,170.857 202.729,171.311 202.642 C 171.764 202.554,171.393 202.483,170.486 202.483 C 169.578 202.483,169.207 202.554,169.661 202.642 M183.776 202.636 C 184.129 202.728,184.707 202.728,185.060 202.636 C 185.412 202.544,185.124 202.468,184.418 202.468 C 183.712 202.468,183.423 202.544,183.776 202.636 M334.242 211.182 C 334.532 212.764,334.741 213.062,334.733 211.885 C 334.730 211.398,334.565 210.752,334.367 210.449 C 334.113 210.062,334.076 210.280,334.242 211.182 M334.215 215.058 C 334.080 215.596,334.041 216.106,334.127 216.192 C 334.213 216.279,334.394 215.910,334.529 215.373 C 334.664 214.835,334.704 214.325,334.617 214.238 C 334.531 214.152,334.350 214.521,334.215 215.058 M124.352 225.023 C 144.047 225.075,176.385 225.075,196.213 225.023 C 216.041 224.970,199.927 224.928,160.403 224.928 C 120.880 224.928,104.657 224.970,124.352 225.023 M253.465 225.023 C 263.916 225.077,280.910 225.077,291.229 225.023 C 301.548 224.969,292.997 224.924,272.227 224.924 C 251.457 224.924,243.014 224.969,253.465 225.023 M68.263 248.891 C 67.483 249.110,111.755 249.073,125.756 248.843 C 129.083 248.788,117.699 248.723,100.458 248.698 C 83.217 248.673,68.729 248.760,68.263 248.891 M132.814 249.209 C 133.368 249.293,134.276 249.293,134.830 249.209 C 135.385 249.125,134.931 249.056,133.822 249.056 C 132.713 249.056,132.259 249.125,132.814 249.209 M158.307 249.583 C 159.373 249.658,161.023 249.657,161.974 249.582 C 162.925 249.506,162.053 249.446,160.037 249.446 C 158.020 249.447,157.242 249.509,158.307 249.583 M168.726 249.952 C 170.480 250.019,173.450 250.019,175.325 249.953 C 177.201 249.886,175.765 249.831,172.136 249.831 C 168.506 249.830,166.971 249.885,168.726 249.952 M185.976 249.946 C 186.732 250.025,187.970 250.025,188.726 249.946 C 189.482 249.867,188.863 249.802,187.351 249.802 C 185.839 249.802,185.220 249.867,185.976 249.946 M63.775 251.421 L 62.511 252.796 63.886 251.532 C 65.166 250.356,65.430 250.046,65.150 250.046 C 65.089 250.046,64.470 250.665,63.775 251.421 M270.111 250.310 C 270.762 250.391,271.917 250.393,272.677 250.313 C 273.438 250.234,272.906 250.168,271.494 250.166 C 270.082 250.165,269.460 250.229,270.111 250.310 M298.545 250.682 C 299.508 250.758,300.993 250.757,301.844 250.680 C 302.695 250.603,301.907 250.541,300.092 250.543 C 298.277 250.544,297.581 250.607,298.545 250.682 M327.688 251.045 C 328.347 251.126,329.336 251.125,329.887 251.041 C 330.438 250.957,329.899 250.891,328.689 250.893 C 327.479 250.895,327.029 250.963,327.688 251.045 M59.487 262.398 C 59.840 262.490,60.417 262.490,60.770 262.398 C 61.123 262.305,60.834 262.230,60.128 262.230 C 59.423 262.230,59.134 262.305,59.487 262.398 M62.970 262.410 C 63.625 262.491,64.698 262.491,65.353 262.410 C 66.008 262.329,65.472 262.262,64.161 262.262 C 62.851 262.262,62.314 262.329,62.970 262.410 M91.944 262.780 C 92.806 262.858,94.126 262.857,94.877 262.778 C 95.628 262.699,94.922 262.636,93.309 262.637 C 91.696 262.638,91.081 262.703,91.944 262.780 M101.833 263.152 C 104.908 263.214,109.940 263.214,113.016 263.152 C 116.091 263.091,113.575 263.041,107.424 263.041 C 101.274 263.041,98.758 263.091,101.833 263.152 M206.966 263.629 C 207.685 263.921,217.318 264.117,217.018 263.834 C 216.934 263.754,214.473 263.609,211.549 263.511 C 208.625 263.412,206.563 263.466,206.966 263.629 M130.247 264.252 C 133.625 264.313,139.152 264.313,142.530 264.252 C 145.907 264.192,143.144 264.142,136.389 264.142 C 129.633 264.142,126.870 264.192,130.247 264.252 M260.770 264.231 C 261.123 264.323,261.700 264.323,262.053 264.231 C 262.406 264.139,262.117 264.063,261.412 264.063 C 260.706 264.063,260.417 264.139,260.770 264.231 M264.070 264.607 C 264.624 264.691,265.532 264.691,266.086 264.607 C 266.641 264.523,266.187 264.455,265.078 264.455 C 263.969 264.455,263.515 264.523,264.070 264.607 M271.041 264.608 C 271.598 264.692,272.423 264.690,272.874 264.603 C 273.325 264.516,272.869 264.447,271.861 264.450 C 270.852 264.452,270.483 264.523,271.041 264.608 M71.040 277.436 C 71.496 277.524,72.156 277.521,72.507 277.429 C 72.857 277.337,72.484 277.265,71.677 277.269 C 70.871 277.273,70.584 277.349,71.040 277.436 M84.606 277.436 C 85.062 277.524,85.722 277.521,86.072 277.429 C 86.423 277.337,86.049 277.265,85.243 277.269 C 84.436 277.273,84.149 277.349,84.606 277.436 M89.923 277.440 C 90.480 277.524,91.305 277.522,91.756 277.435 C 92.207 277.348,91.751 277.279,90.742 277.282 C 89.734 277.285,89.365 277.356,89.923 277.440 M107.883 277.451 C 111.865 277.511,118.382 277.511,122.365 277.451 C 126.347 277.392,123.089 277.344,115.124 277.344 C 107.159 277.344,103.900 277.392,107.883 277.451 M151.356 277.452 C 158.277 277.508,169.496 277.508,176.287 277.452 C 183.078 277.396,177.415 277.350,163.703 277.350 C 149.991 277.350,144.435 277.396,151.356 277.452 M192.301 277.544 C 192.704 277.717,193.281 277.859,193.584 277.859 C 193.931 277.859,193.863 277.742,193.401 277.544 C 192.997 277.370,192.420 277.228,192.117 277.228 C 191.771 277.228,191.838 277.345,192.301 277.544 M60.101 278.918 L 59.212 279.927 60.312 279.010 C 60.917 278.506,61.480 278.052,61.564 278.002 C 61.648 277.951,61.553 277.910,61.353 277.910 C 61.153 277.910,60.589 278.364,60.101 278.918 M239.322 278.175 C 239.977 278.257,241.049 278.257,241.705 278.175 C 242.360 278.094,241.824 278.028,240.513 278.028 C 239.203 278.028,238.666 278.094,239.322 278.175 M248.867 278.181 C 249.932 278.255,251.582 278.254,252.533 278.179 C 253.484 278.104,252.612 278.043,250.596 278.044 C 248.579 278.045,247.801 278.107,248.867 278.181 M256.187 278.179 C 257.044 278.256,258.446 278.256,259.303 278.179 C 260.160 278.101,259.459 278.038,257.745 278.038 C 256.031 278.038,255.330 278.101,256.187 278.179 M272.161 278.185 C 277.368 278.242,285.782 278.242,290.860 278.185 C 295.937 278.127,291.677 278.080,281.393 278.080 C 271.109 278.081,266.955 278.128,272.161 278.185 M310.266 278.551 C 312.635 278.614,316.512 278.614,318.882 278.551 C 321.251 278.487,319.313 278.434,314.574 278.434 C 309.835 278.434,307.896 278.487,310.266 278.551 M324.931 278.530 C 325.284 278.622,325.862 278.622,326.214 278.530 C 326.567 278.437,326.279 278.362,325.573 278.362 C 324.867 278.362,324.578 278.437,324.931 278.530 M328.924 279.712 C 329.400 280.098,329.860 280.344,329.946 280.258 C 330.134 280.071,328.821 279.038,328.374 279.022 C 328.200 279.015,328.448 279.326,328.924 279.712 M56.232 283.318 C 55.148 284.807,54.814 285.565,55.707 284.510 C 56.534 283.533,57.305 282.310,57.094 282.310 C 57.024 282.310,56.636 282.764,56.232 283.318 M53.384 288.391 C 53.261 288.711,53.299 289.218,53.467 289.519 C 53.683 289.905,53.773 289.734,53.773 288.938 C 53.773 287.660,53.703 287.561,53.384 288.391 M165.783 292.117 C 177.614 292.171,197.083 292.171,209.046 292.117 C 221.009 292.064,211.329 292.020,187.534 292.020 C 163.740 292.020,153.952 292.064,165.783 292.117 M245.371 292.484 C 251.572 292.540,261.719 292.540,267.919 292.484 C 274.120 292.427,269.047 292.381,256.645 292.381 C 244.244 292.381,239.170 292.427,245.371 292.484 M283.685 292.834 C 284.138 292.922,284.881 292.922,285.335 292.834 C 285.788 292.747,285.417 292.675,284.510 292.675 C 283.602 292.675,283.231 292.747,283.685 292.834 M321.082 292.834 C 321.535 292.922,322.278 292.922,322.731 292.834 C 323.185 292.747,322.814 292.675,321.907 292.675 C 320.999 292.675,320.628 292.747,321.082 292.834 M295.050 293.217 C 299.537 293.275,306.879 293.275,311.366 293.217 C 315.852 293.159,312.181 293.111,303.208 293.111 C 294.235 293.111,290.564 293.159,295.050 293.217 M185.151 313.495 C 184.384 313.716,184.459 313.756,185.610 313.741 C 186.366 313.730,186.984 313.684,186.984 313.637 C 186.984 313.352,185.930 313.270,185.151 313.495 \\\" stroke=\\\"none\\\" fill=\\\"#3c3c3c\\\" fill-rule=\\\"evenodd\\\"></path></g></svg>\");\n\n//# sourceURL=webpack://templates/./src/images/logo.svg?");

/***/ }),

/***/ "./src/data/english.json":
/*!*******************************!*\
  !*** ./src/data/english.json ***!
  \*******************************/
/***/ ((module) => {

"use strict";
eval("module.exports = /*#__PURE__*/JSON.parse('{\"above\":{\"heading\":\" Vasavi Sahayam <br> Angala Parameshwari Amman Thunai\"},\"sub-heading\":{\"sub-heading\":\"Janani Janma Sowkyanam Varathanee Kulasumbathaam<br>Padhavi Pooorva Punyanaam Likyathe Janma Pathrika\"},\"_id\":{\"$oid\":\"66647d6f4197093e1bb9cddb\"},\"registerId\":\"66647d4f4759150cba1afef8\",\"__v\":0,\"birthDetails\":{\"dob\":{\"dateOfBirth\":\"07-03-2004\",\"placeOfBirth\":\"Thirunelveli\",\"age\":\"20 years\",\"time\":\"22:13\",\"day\":\"sunday\"},\"tamilYear\":\"Śrīmukha\",\"tamilMonth\":\"Aavani\",\"tamilDate\":\"10\"},\"horoscopeDetails\":{\"rasi\":\"Simam\",\"nakshatra\":\"Swati\",\"lagnam\":\"Kadagam\",\"BirthStar\":\"ddff\",\"gothram\":\"siva gothram\",\"mathulam\":\"dfdfdsa\",\"naaligai\":\"df\",\"thithi\":\"fadf\",\"dasaPlanet\":\"afsd\",\"dasaBalance\":\"6 months\"},\"below\":{\"heading\":\"S/o Late.Ponmani - P.Porselvi\"},\"second\":{\"name\":\"Chiranjeevi. P.kamalesh\"},\"third\":{\"line\":\"Gothram : SivaGothram Mathulam : dfdfdsa \"},\"rasiKatam\":[[],[\"Me \"],[],[],[\"Ve \"],[\"Mo \"],[\"Ma \"],[],[],[\"Ju \"],[],[\"Ka \"]],\"rasiPlanets\":{\"Ma\":\"7\",\"Ve\":\"5\",\"Me\":\"2\",\"Su\":\"7\",\"Ka\":\"12\",\"Ju\":\"10\",\"Mo\":\"6\",\"Sa\":\"12\",\"Ke\":\"7\",\"La\":\"5\",\"rasi\":\"\"},\"navamsaKatam\":[[\"Sa \"],[],[],[],[],[\"Ka \",\"Mo \"],[],[\"Ve \",\"Me \",\"Ju \",\"Ke \"],[],[\"Ma \",\"Su \"],[\"La \"],[]],\"navamsaPlanets\":{\"Ma\":\"10\",\"Ve\":\"8\",\"Me\":\"8\",\"Su\":\"10\",\"Ka\":\"6\",\"Ju\":\"8\",\"Mo\":\"6\",\"Sa\":\"1\",\"Ke\":\"8\",\"La\":\"11\"},\"Tablevalue\":{\"Me\":\"Me\",\"Ve\":\"Ve\",\"Mo\":\"Mo\",\"Ma\":\"Ma\",\"Ju\":\"Ju\",\"Ka\":\"Ke\",\"rasi\":\"Rasi\",\"navasam\":\"Navasam\",\"ve\":\"Ve\",\"Sa\":\"Sa\"},\"third-line\":{\"third-line\":\"Mars Dasa Balance : 6months\"},\"familyDetails\":{\"fatherName\":\"Ponmani\",\"fatherOccupation\":\"gfhg\",\"fatherAlive\":\"Late\",\"motherName\":\"Porselvi\",\"motherOccupation\":\"none\",\"motherAlive\":\"Alive\",\"religion\":\"Muslim - Others\",\"caste\":\"Achirapakkam Chettiar\",\"height\":\"4.8\",\"siblings\":{\"brother\":{\"number\":1,\"marriageNum\":0},\"sister\":{\"number\":1,\"marriageNum\":0}}},\"contactDetails\":{\"emailId\":\"kamaleshponmani0703@gmail.com\",\"contactNumber\":\"9xxxx346283\",\"whatsappNumber\":\"9xxxx346283\",\"alternativeContactNumber\":\"\"},\"ownHouse\":\"Yes\",\"personalInfo\":{\"name\":\"kamalesh P\",\"iAm\":\"Groom\",\"Profession\":\"front end developer\",\"height\":\"4.8\",\"weight\":\"54\",\"profileImage\":\"\",\"bloodGroup\":\"O+ve\",\"complextion\":\"Black\",\"maritalStatus\":\"Single\"},\"qualification\":{\"fieldOfStudy\":\"PGDCA\",\"Education\":\"B.Sc\"},\"occupation\":{\"companyName\":\"Atdoor\",\"designation\":\"Developer Trainee\",\"Income\":\"dfs\",\"cityOfWorking\":\"Tirunelveli\"},\"below1\":{\"residentialAddress\":{\"address\":\"24, 3rd street, sigaram nagar, suthamalli vilakku.\",\"landmark\":\"\",\"hometown\":\"Tirunelveli\",\"city\":\"Tirunelveli\",\"stateName\":\"TAMIL NADU\",\"nationality\":\"\",\"pincode\":\"627604\"}},\"label\":{\"tableValue\":{\"dob\":\"Birth Date\",\"pob\":\"Birth Place\",\"time\":\"Tamil Year\",\"day\":\"Day\",\"tamilYear\":\"Tamil Year\",\"tamilMonth\":\"Tamil Month\",\"tamilDate\":\"Tamil Date\",\"birthtime\":\"Birth Time\",\"rasi\":\"Birth Rasi\",\"nakshatra\":\"Nakshatra\",\"lagnam\":\"Lagnam\",\"mathulam\":\"Mathulam\",\"thithi\":\"Thithi\",\"gothram\":\"Gothram\",\"dasaPlanet\":\"DasaPlanet\",\"dasaBalance\":\"DasaBalance\",\"fatherAlive\":\"Father\",\"motherAlive\":\"Mother\",\"fatherName\":\"FatherName\",\"motherName\":\"MotherName\",\"fatherOccupation\":\"Father\\'s Occupation\",\"motherOccupation\":\"Mother\\'S Occupation\",\"religion\":\"Religion\",\"caste\":\"Caste\",\"height\":\"Height\",\"brother\":\"Brother\",\"sister\":\"Sister\",\"Elder\":\"Elder\",\"fieldOfStudy\":\"FieldOfStudy\",\"degree\":\"Degree\",\"ownhouse\":\"Own House\",\"bloodGroup\":\"Blood Group\",\"complextion\":\"Complextion\",\"Income\":\"Income\",\"Profession\":\"Profession\",\"Education\":\"Education\",\"naaligai\":\"Naligai\",\"emailId\":\"Email ID\",\"Address\":\"Address\",\"BirthStar\":\"Birth Star\",\"contactNumber\":\"Mobile\",\"whatsappNumber\":\"Whatsapp\"}}}');\n\n//# sourceURL=webpack://templates/./src/data/english.json?");

/***/ }),

/***/ "./src/data/tamil.json":
/*!*****************************!*\
  !*** ./src/data/tamil.json ***!
  \*****************************/
/***/ ((module) => {

"use strict";
eval("module.exports = /*#__PURE__*/JSON.parse('{\"above\":{\"heading\":\" வாசவி சகாயம்<br>அங்காள பரமேஸ்வாி அம்மன் துணை\"},\"sub-heading\":{\"sub-heading\":\"ஜெனனி ஜென்ம சௌக்யானாம் வரத்தனீ குலசம்பதாம்<br>பதவி பூர்வ புண்யானாம் லிக்யதே ஜென்ம பத்திாிகா\"},\"_id\":{\"$oid\":\"66647d6f4197093e1bb9cddb\"},\"registerId\":\"66647d4f4759150cba1afef8\",\"__v\":0,\"birthDetails\":{\"dob\":{\"dateOfBirth\":\"07-03-2004\",\"placeOfBirth\":\"திருநெல்வேலி\",\"age\":\"20 வயது\",\"time\":\"22:13\",\"day\":\"ஞாயிறு\"},\"tamilYear\":\"ஶ்ரீமுக\",\"tamilMonth\":\"ஆவணி\",\"tamilDate\":\"10\"},\"horoscopeDetails\":{\"rasi\":\"சிம்மம்\",\"nakshatra\":\"சுவாதி\",\"BirthStar\":\"ddff\",\"lagnam\":\"கடகம்\",\"gothram\":\"சிவ கோத்திரம்\",\"mathulam\":\"dfdfdsa\",\"naaligai\":\"df\",\"thithi\":\"fadf\",\"dasaPlanet\":\"afsd\",\"dasaBalance\":\"6 மாதங்கள்\"},\"below\":{\"heading\":\"திரு. பொன்மணி - பி. பொர்செல்வி \"},\"second\":{\"name\":\" சிரஞ்சீவி. கமலேஷ் பி\"},\"third\":{\"line\":\"கோத்திரம் : சிவகோத்திரம் மாதுளம் : dfdfdsa \"},\"third-line\":{\"third-line\":\"செவ் தசை இருப்பு : 6 மாதம்\"},\"rasiKatam\":[[],[\"Me \"],[],[],[\"Ve \"],[\"Mo \"],[\"Ma \"],[],[],[\"Ju \"],[],[\"Ka \"]],\"rasiPlanets\":{\"Ma\":\"7\",\"Ve\":\"5\",\"Me\":\"2\",\"Su\":\"7\",\"Ka\":\"12\",\"Ju\":\"10\",\"Mo\":\"6\",\"Sa\":\"12\",\"Ke\":\"7\",\"La\":\"5\",\"rasi\":\"\"},\"navamsaKatam\":[[\"Sa \"],[],[],[],[],[\"Ka \",\"Mo \"],[],[\"Ve \",\"Me \",\"Ju \",\"Ke \"],[],[\"Ma \",\"Su \"],[\"La \"],[]],\"navamsaPlanets\":{\"Ma\":\"10\",\"Ve\":\"8\",\"Me\":\"8\",\"Su\":\"10\",\"Ka\":\"6\",\"Ju\":\"8\",\"Mo\":\"6\",\"Sa\":\"1\",\"Ke\":\"8\",\"La\":\"11\"},\"Tablevalue\":{\"Me\":\"பு\",\"Ve\":\"சு\",\"Mo\":\"சந்\",\"Ma\":\"செ\",\"Ju\":\"குரு\",\"Ka\":\"கே\",\"rasi\":\"இராசி\",\"navasam\":\"நவாம்சம்\",\"ve\":\"சுக்\",\"Sa\":\"சனி\"},\"familyDetails\":{\"fatherName\":\"பொன்மணி\",\"fatherOccupation\":\"gfhg\",\"fatherAlive\":\"இல்லை\",\"motherName\":\"பொர்செல்வி\",\"motherOccupation\":\"எதுவும் இல்லை\",\"motherAlive\":\"உண்டு\",\"religion\":\"முஸ்லிம் - பிற\",\"caste\":\"ஆச்சிராப்பாக்கம் செட்டியார்\",\"height\":\"4.8\",\"siblings\":{\"brother\":{\"number\":1,\"marriageNum\":0},\"sister\":{\"number\":1,\"marriageNum\":0}}},\"contactDetails\":{\"emailId\":\"kamaleshponmani0703@gmail.com\",\"contactNumber\":\"9xxxx346283\",\"whatsappNumber\":\"9xxxx346283\",\"alternativeContactNumber\":\"\"},\"ownHouse\":\"ஆம்\",\"personalInfo\":{\"name\":\"கமலேஷ் பி\",\"iAm\":\"மணமகன்\",\"Profession\":\"front end developer\",\"height\":\"4.8\",\"weight\":\"54\",\"profileImage\":\"\",\"bloodGroup\":\"O+v\",\"complextion\":\"கருப்பு\",\"maritalStatus\":\"ஒற்றையர்\"},\"qualification\":{\"fieldOfStudy\":\"பி.ஜி.டி.சி.ஏ\",\"Education\":\"(B.Sc)\"},\"occupation\":{\"companyName\":\"ஆடூரின்\",\"designation\":\"மேம்பாட்டு பயிற்சியாளர்\",\"Income\":\"asdd\",\"cityOfWorking\":\"திருநெல்வேலி\"},\"below1\":{\"residentialAddress\":{\"address\":\"24, 3ஆம் தெரு, சிகரம் நகர், சுத்தமல்லி விளக்கு.\",\"landmark\":\"\",\"hometown\":\"திருநெல்வேலி\",\"city\":\"திருநெல்வேலி\",\"stateName\":\"தமிழ் நாடு\",\"nationality\":\"\",\"pincode\":\"627604\"}},\"label\":{\"tableValue\":{\"dob\":\"பிறந்த நாள்\",\"pob\":\"பிறந்த ஊர்\",\"age\":\"வயது\",\"time\":\"தமிழ் வருடம்\",\"day\":\"கிழமை\",\"tamilYear\":\"தமிழ் வருடம்\",\"tamilMonth\":\"மாதம்\",\"tamilDate\":\"தேதி\",\"birthtime\":\"பிறந்த நேரம்\",\"rasi\":\"ராசி\",\"nakshatra\":\"நட்சத்திரம்\",\"lagnam\":\"லக்னம்\",\"mathulam\":\"மாதுலம்\",\"thithi\":\"திதி\",\"gothram\":\"கோத்ரம்\",\"dasaPlanet\":\"தசை கிரகம்\",\"dasaBalance\":\"தசை மிச்சம்\",\"fatherAlive\":\"தந்தை\",\"motherAlive\":\"தாயார்\",\"fatherName\":\"தந்தையின்பெயர்\",\"motherName\":\"தாயின்பெயர்\",\"fatherOccupation\":\"தந்தையின்பணி\",\"motherOccupation\":\"தாயின்பணி\",\"religion\":\"மதம்\",\"caste\":\"சாதி\",\"height\":\"உயரம்\",\"brother\":\"சகோதரன்\",\"sister\":\"சகோதரி\",\"Elder\":\"மூத்தவர்\",\"Education\":\"படிப்பு\",\"degree\":\"பட்டம்\",\"ownhouse\":\"சொந்த வீடு\",\"bloodGroup\":\"இரத்தவகை\",\"complextion\":\"நிறம்\",\"Income\":\"வருமானம்\",\"Profession\":\"வேலை\",\"naaligai\":\"நாழிகை\",\"Address\":\"Address\",\"emailId\":\"Email ID\",\"BirthStar\":\"நட்சத்திரம்\",\"contactNumber\":\"Mobile\",\"whatsappNumber\":\"Whatsapp\"}}}');\n\n//# sourceURL=webpack://templates/./src/data/tamil.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;